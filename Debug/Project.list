
Project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007a34  080001e8  080001e8  000101e8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000002c  08007c1c  08007c1c  00017c1c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007c48  08007c48  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08007c48  08007c48  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08007c48  08007c48  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007c48  08007c48  00017c48  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007c4c  08007c4c  00017c4c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08007c50  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000c4c  2000000c  08007c5c  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000c58  08007c5c  00020c58  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020035  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000861d  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001b57  00000000  00000000  00028695  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000007e8  00000000  00000000  0002a1f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000615  00000000  00000000  0002a9d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000190ff  00000000  00000000  0002afed  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000afef  00000000  00000000  000440ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0009031b  00000000  00000000  0004f0db  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00001f88  00000000  00000000  000df3f8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005f  00000000  00000000  000e1380  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e8 <__do_global_dtors_aux>:
 80001e8:	b510      	push	{r4, lr}
 80001ea:	4c05      	ldr	r4, [pc, #20]	; (8000200 <__do_global_dtors_aux+0x18>)
 80001ec:	7823      	ldrb	r3, [r4, #0]
 80001ee:	b933      	cbnz	r3, 80001fe <__do_global_dtors_aux+0x16>
 80001f0:	4b04      	ldr	r3, [pc, #16]	; (8000204 <__do_global_dtors_aux+0x1c>)
 80001f2:	b113      	cbz	r3, 80001fa <__do_global_dtors_aux+0x12>
 80001f4:	4804      	ldr	r0, [pc, #16]	; (8000208 <__do_global_dtors_aux+0x20>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	2301      	movs	r3, #1
 80001fc:	7023      	strb	r3, [r4, #0]
 80001fe:	bd10      	pop	{r4, pc}
 8000200:	2000000c 	.word	0x2000000c
 8000204:	00000000 	.word	0x00000000
 8000208:	08007c04 	.word	0x08007c04

0800020c <frame_dummy>:
 800020c:	b508      	push	{r3, lr}
 800020e:	4b03      	ldr	r3, [pc, #12]	; (800021c <frame_dummy+0x10>)
 8000210:	b11b      	cbz	r3, 800021a <frame_dummy+0xe>
 8000212:	4903      	ldr	r1, [pc, #12]	; (8000220 <frame_dummy+0x14>)
 8000214:	4803      	ldr	r0, [pc, #12]	; (8000224 <frame_dummy+0x18>)
 8000216:	f3af 8000 	nop.w
 800021a:	bd08      	pop	{r3, pc}
 800021c:	00000000 	.word	0x00000000
 8000220:	20000010 	.word	0x20000010
 8000224:	08007c04 	.word	0x08007c04

08000228 <__aeabi_dmul>:
 8000228:	b570      	push	{r4, r5, r6, lr}
 800022a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800022e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000232:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000236:	bf1d      	ittte	ne
 8000238:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800023c:	ea94 0f0c 	teqne	r4, ip
 8000240:	ea95 0f0c 	teqne	r5, ip
 8000244:	f000 f8de 	bleq	8000404 <__aeabi_dmul+0x1dc>
 8000248:	442c      	add	r4, r5
 800024a:	ea81 0603 	eor.w	r6, r1, r3
 800024e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000252:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000256:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800025a:	bf18      	it	ne
 800025c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000260:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000264:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000268:	d038      	beq.n	80002dc <__aeabi_dmul+0xb4>
 800026a:	fba0 ce02 	umull	ip, lr, r0, r2
 800026e:	f04f 0500 	mov.w	r5, #0
 8000272:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000276:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800027a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800027e:	f04f 0600 	mov.w	r6, #0
 8000282:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000286:	f09c 0f00 	teq	ip, #0
 800028a:	bf18      	it	ne
 800028c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000290:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000294:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000298:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800029c:	d204      	bcs.n	80002a8 <__aeabi_dmul+0x80>
 800029e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80002a2:	416d      	adcs	r5, r5
 80002a4:	eb46 0606 	adc.w	r6, r6, r6
 80002a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80002ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80002b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80002b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80002b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80002bc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80002c0:	bf88      	it	hi
 80002c2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80002c6:	d81e      	bhi.n	8000306 <__aeabi_dmul+0xde>
 80002c8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80002cc:	bf08      	it	eq
 80002ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80002d2:	f150 0000 	adcs.w	r0, r0, #0
 80002d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002da:	bd70      	pop	{r4, r5, r6, pc}
 80002dc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80002e0:	ea46 0101 	orr.w	r1, r6, r1
 80002e4:	ea40 0002 	orr.w	r0, r0, r2
 80002e8:	ea81 0103 	eor.w	r1, r1, r3
 80002ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80002f0:	bfc2      	ittt	gt
 80002f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80002f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80002fa:	bd70      	popgt	{r4, r5, r6, pc}
 80002fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000300:	f04f 0e00 	mov.w	lr, #0
 8000304:	3c01      	subs	r4, #1
 8000306:	f300 80ab 	bgt.w	8000460 <__aeabi_dmul+0x238>
 800030a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800030e:	bfde      	ittt	le
 8000310:	2000      	movle	r0, #0
 8000312:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000316:	bd70      	pople	{r4, r5, r6, pc}
 8000318:	f1c4 0400 	rsb	r4, r4, #0
 800031c:	3c20      	subs	r4, #32
 800031e:	da35      	bge.n	800038c <__aeabi_dmul+0x164>
 8000320:	340c      	adds	r4, #12
 8000322:	dc1b      	bgt.n	800035c <__aeabi_dmul+0x134>
 8000324:	f104 0414 	add.w	r4, r4, #20
 8000328:	f1c4 0520 	rsb	r5, r4, #32
 800032c:	fa00 f305 	lsl.w	r3, r0, r5
 8000330:	fa20 f004 	lsr.w	r0, r0, r4
 8000334:	fa01 f205 	lsl.w	r2, r1, r5
 8000338:	ea40 0002 	orr.w	r0, r0, r2
 800033c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000340:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000344:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000348:	fa21 f604 	lsr.w	r6, r1, r4
 800034c:	eb42 0106 	adc.w	r1, r2, r6
 8000350:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000354:	bf08      	it	eq
 8000356:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800035a:	bd70      	pop	{r4, r5, r6, pc}
 800035c:	f1c4 040c 	rsb	r4, r4, #12
 8000360:	f1c4 0520 	rsb	r5, r4, #32
 8000364:	fa00 f304 	lsl.w	r3, r0, r4
 8000368:	fa20 f005 	lsr.w	r0, r0, r5
 800036c:	fa01 f204 	lsl.w	r2, r1, r4
 8000370:	ea40 0002 	orr.w	r0, r0, r2
 8000374:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000378:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800037c:	f141 0100 	adc.w	r1, r1, #0
 8000380:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000384:	bf08      	it	eq
 8000386:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800038a:	bd70      	pop	{r4, r5, r6, pc}
 800038c:	f1c4 0520 	rsb	r5, r4, #32
 8000390:	fa00 f205 	lsl.w	r2, r0, r5
 8000394:	ea4e 0e02 	orr.w	lr, lr, r2
 8000398:	fa20 f304 	lsr.w	r3, r0, r4
 800039c:	fa01 f205 	lsl.w	r2, r1, r5
 80003a0:	ea43 0302 	orr.w	r3, r3, r2
 80003a4:	fa21 f004 	lsr.w	r0, r1, r4
 80003a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80003ac:	fa21 f204 	lsr.w	r2, r1, r4
 80003b0:	ea20 0002 	bic.w	r0, r0, r2
 80003b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80003b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003bc:	bf08      	it	eq
 80003be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003c2:	bd70      	pop	{r4, r5, r6, pc}
 80003c4:	f094 0f00 	teq	r4, #0
 80003c8:	d10f      	bne.n	80003ea <__aeabi_dmul+0x1c2>
 80003ca:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80003ce:	0040      	lsls	r0, r0, #1
 80003d0:	eb41 0101 	adc.w	r1, r1, r1
 80003d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003d8:	bf08      	it	eq
 80003da:	3c01      	subeq	r4, #1
 80003dc:	d0f7      	beq.n	80003ce <__aeabi_dmul+0x1a6>
 80003de:	ea41 0106 	orr.w	r1, r1, r6
 80003e2:	f095 0f00 	teq	r5, #0
 80003e6:	bf18      	it	ne
 80003e8:	4770      	bxne	lr
 80003ea:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80003ee:	0052      	lsls	r2, r2, #1
 80003f0:	eb43 0303 	adc.w	r3, r3, r3
 80003f4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80003f8:	bf08      	it	eq
 80003fa:	3d01      	subeq	r5, #1
 80003fc:	d0f7      	beq.n	80003ee <__aeabi_dmul+0x1c6>
 80003fe:	ea43 0306 	orr.w	r3, r3, r6
 8000402:	4770      	bx	lr
 8000404:	ea94 0f0c 	teq	r4, ip
 8000408:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800040c:	bf18      	it	ne
 800040e:	ea95 0f0c 	teqne	r5, ip
 8000412:	d00c      	beq.n	800042e <__aeabi_dmul+0x206>
 8000414:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000418:	bf18      	it	ne
 800041a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800041e:	d1d1      	bne.n	80003c4 <__aeabi_dmul+0x19c>
 8000420:	ea81 0103 	eor.w	r1, r1, r3
 8000424:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000428:	f04f 0000 	mov.w	r0, #0
 800042c:	bd70      	pop	{r4, r5, r6, pc}
 800042e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000432:	bf06      	itte	eq
 8000434:	4610      	moveq	r0, r2
 8000436:	4619      	moveq	r1, r3
 8000438:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800043c:	d019      	beq.n	8000472 <__aeabi_dmul+0x24a>
 800043e:	ea94 0f0c 	teq	r4, ip
 8000442:	d102      	bne.n	800044a <__aeabi_dmul+0x222>
 8000444:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000448:	d113      	bne.n	8000472 <__aeabi_dmul+0x24a>
 800044a:	ea95 0f0c 	teq	r5, ip
 800044e:	d105      	bne.n	800045c <__aeabi_dmul+0x234>
 8000450:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000454:	bf1c      	itt	ne
 8000456:	4610      	movne	r0, r2
 8000458:	4619      	movne	r1, r3
 800045a:	d10a      	bne.n	8000472 <__aeabi_dmul+0x24a>
 800045c:	ea81 0103 	eor.w	r1, r1, r3
 8000460:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000464:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000468:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800046c:	f04f 0000 	mov.w	r0, #0
 8000470:	bd70      	pop	{r4, r5, r6, pc}
 8000472:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000476:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800047a:	bd70      	pop	{r4, r5, r6, pc}

0800047c <__aeabi_drsub>:
 800047c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000480:	e002      	b.n	8000488 <__adddf3>
 8000482:	bf00      	nop

08000484 <__aeabi_dsub>:
 8000484:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000488 <__adddf3>:
 8000488:	b530      	push	{r4, r5, lr}
 800048a:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800048e:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000492:	ea94 0f05 	teq	r4, r5
 8000496:	bf08      	it	eq
 8000498:	ea90 0f02 	teqeq	r0, r2
 800049c:	bf1f      	itttt	ne
 800049e:	ea54 0c00 	orrsne.w	ip, r4, r0
 80004a2:	ea55 0c02 	orrsne.w	ip, r5, r2
 80004a6:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80004aa:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004ae:	f000 80e2 	beq.w	8000676 <__adddf3+0x1ee>
 80004b2:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80004b6:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80004ba:	bfb8      	it	lt
 80004bc:	426d      	neglt	r5, r5
 80004be:	dd0c      	ble.n	80004da <__adddf3+0x52>
 80004c0:	442c      	add	r4, r5
 80004c2:	ea80 0202 	eor.w	r2, r0, r2
 80004c6:	ea81 0303 	eor.w	r3, r1, r3
 80004ca:	ea82 0000 	eor.w	r0, r2, r0
 80004ce:	ea83 0101 	eor.w	r1, r3, r1
 80004d2:	ea80 0202 	eor.w	r2, r0, r2
 80004d6:	ea81 0303 	eor.w	r3, r1, r3
 80004da:	2d36      	cmp	r5, #54	; 0x36
 80004dc:	bf88      	it	hi
 80004de:	bd30      	pophi	{r4, r5, pc}
 80004e0:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80004e4:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80004e8:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80004ec:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80004f0:	d002      	beq.n	80004f8 <__adddf3+0x70>
 80004f2:	4240      	negs	r0, r0
 80004f4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004f8:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80004fc:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000500:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000504:	d002      	beq.n	800050c <__adddf3+0x84>
 8000506:	4252      	negs	r2, r2
 8000508:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800050c:	ea94 0f05 	teq	r4, r5
 8000510:	f000 80a7 	beq.w	8000662 <__adddf3+0x1da>
 8000514:	f1a4 0401 	sub.w	r4, r4, #1
 8000518:	f1d5 0e20 	rsbs	lr, r5, #32
 800051c:	db0d      	blt.n	800053a <__adddf3+0xb2>
 800051e:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000522:	fa22 f205 	lsr.w	r2, r2, r5
 8000526:	1880      	adds	r0, r0, r2
 8000528:	f141 0100 	adc.w	r1, r1, #0
 800052c:	fa03 f20e 	lsl.w	r2, r3, lr
 8000530:	1880      	adds	r0, r0, r2
 8000532:	fa43 f305 	asr.w	r3, r3, r5
 8000536:	4159      	adcs	r1, r3
 8000538:	e00e      	b.n	8000558 <__adddf3+0xd0>
 800053a:	f1a5 0520 	sub.w	r5, r5, #32
 800053e:	f10e 0e20 	add.w	lr, lr, #32
 8000542:	2a01      	cmp	r2, #1
 8000544:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000548:	bf28      	it	cs
 800054a:	f04c 0c02 	orrcs.w	ip, ip, #2
 800054e:	fa43 f305 	asr.w	r3, r3, r5
 8000552:	18c0      	adds	r0, r0, r3
 8000554:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000558:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800055c:	d507      	bpl.n	800056e <__adddf3+0xe6>
 800055e:	f04f 0e00 	mov.w	lr, #0
 8000562:	f1dc 0c00 	rsbs	ip, ip, #0
 8000566:	eb7e 0000 	sbcs.w	r0, lr, r0
 800056a:	eb6e 0101 	sbc.w	r1, lr, r1
 800056e:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000572:	d31b      	bcc.n	80005ac <__adddf3+0x124>
 8000574:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000578:	d30c      	bcc.n	8000594 <__adddf3+0x10c>
 800057a:	0849      	lsrs	r1, r1, #1
 800057c:	ea5f 0030 	movs.w	r0, r0, rrx
 8000580:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000584:	f104 0401 	add.w	r4, r4, #1
 8000588:	ea4f 5244 	mov.w	r2, r4, lsl #21
 800058c:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000590:	f080 809a 	bcs.w	80006c8 <__adddf3+0x240>
 8000594:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000598:	bf08      	it	eq
 800059a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800059e:	f150 0000 	adcs.w	r0, r0, #0
 80005a2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005a6:	ea41 0105 	orr.w	r1, r1, r5
 80005aa:	bd30      	pop	{r4, r5, pc}
 80005ac:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80005b0:	4140      	adcs	r0, r0
 80005b2:	eb41 0101 	adc.w	r1, r1, r1
 80005b6:	3c01      	subs	r4, #1
 80005b8:	bf28      	it	cs
 80005ba:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80005be:	d2e9      	bcs.n	8000594 <__adddf3+0x10c>
 80005c0:	f091 0f00 	teq	r1, #0
 80005c4:	bf04      	itt	eq
 80005c6:	4601      	moveq	r1, r0
 80005c8:	2000      	moveq	r0, #0
 80005ca:	fab1 f381 	clz	r3, r1
 80005ce:	bf08      	it	eq
 80005d0:	3320      	addeq	r3, #32
 80005d2:	f1a3 030b 	sub.w	r3, r3, #11
 80005d6:	f1b3 0220 	subs.w	r2, r3, #32
 80005da:	da0c      	bge.n	80005f6 <__adddf3+0x16e>
 80005dc:	320c      	adds	r2, #12
 80005de:	dd08      	ble.n	80005f2 <__adddf3+0x16a>
 80005e0:	f102 0c14 	add.w	ip, r2, #20
 80005e4:	f1c2 020c 	rsb	r2, r2, #12
 80005e8:	fa01 f00c 	lsl.w	r0, r1, ip
 80005ec:	fa21 f102 	lsr.w	r1, r1, r2
 80005f0:	e00c      	b.n	800060c <__adddf3+0x184>
 80005f2:	f102 0214 	add.w	r2, r2, #20
 80005f6:	bfd8      	it	le
 80005f8:	f1c2 0c20 	rsble	ip, r2, #32
 80005fc:	fa01 f102 	lsl.w	r1, r1, r2
 8000600:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000604:	bfdc      	itt	le
 8000606:	ea41 010c 	orrle.w	r1, r1, ip
 800060a:	4090      	lslle	r0, r2
 800060c:	1ae4      	subs	r4, r4, r3
 800060e:	bfa2      	ittt	ge
 8000610:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000614:	4329      	orrge	r1, r5
 8000616:	bd30      	popge	{r4, r5, pc}
 8000618:	ea6f 0404 	mvn.w	r4, r4
 800061c:	3c1f      	subs	r4, #31
 800061e:	da1c      	bge.n	800065a <__adddf3+0x1d2>
 8000620:	340c      	adds	r4, #12
 8000622:	dc0e      	bgt.n	8000642 <__adddf3+0x1ba>
 8000624:	f104 0414 	add.w	r4, r4, #20
 8000628:	f1c4 0220 	rsb	r2, r4, #32
 800062c:	fa20 f004 	lsr.w	r0, r0, r4
 8000630:	fa01 f302 	lsl.w	r3, r1, r2
 8000634:	ea40 0003 	orr.w	r0, r0, r3
 8000638:	fa21 f304 	lsr.w	r3, r1, r4
 800063c:	ea45 0103 	orr.w	r1, r5, r3
 8000640:	bd30      	pop	{r4, r5, pc}
 8000642:	f1c4 040c 	rsb	r4, r4, #12
 8000646:	f1c4 0220 	rsb	r2, r4, #32
 800064a:	fa20 f002 	lsr.w	r0, r0, r2
 800064e:	fa01 f304 	lsl.w	r3, r1, r4
 8000652:	ea40 0003 	orr.w	r0, r0, r3
 8000656:	4629      	mov	r1, r5
 8000658:	bd30      	pop	{r4, r5, pc}
 800065a:	fa21 f004 	lsr.w	r0, r1, r4
 800065e:	4629      	mov	r1, r5
 8000660:	bd30      	pop	{r4, r5, pc}
 8000662:	f094 0f00 	teq	r4, #0
 8000666:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800066a:	bf06      	itte	eq
 800066c:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000670:	3401      	addeq	r4, #1
 8000672:	3d01      	subne	r5, #1
 8000674:	e74e      	b.n	8000514 <__adddf3+0x8c>
 8000676:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800067a:	bf18      	it	ne
 800067c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000680:	d029      	beq.n	80006d6 <__adddf3+0x24e>
 8000682:	ea94 0f05 	teq	r4, r5
 8000686:	bf08      	it	eq
 8000688:	ea90 0f02 	teqeq	r0, r2
 800068c:	d005      	beq.n	800069a <__adddf3+0x212>
 800068e:	ea54 0c00 	orrs.w	ip, r4, r0
 8000692:	bf04      	itt	eq
 8000694:	4619      	moveq	r1, r3
 8000696:	4610      	moveq	r0, r2
 8000698:	bd30      	pop	{r4, r5, pc}
 800069a:	ea91 0f03 	teq	r1, r3
 800069e:	bf1e      	ittt	ne
 80006a0:	2100      	movne	r1, #0
 80006a2:	2000      	movne	r0, #0
 80006a4:	bd30      	popne	{r4, r5, pc}
 80006a6:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80006aa:	d105      	bne.n	80006b8 <__adddf3+0x230>
 80006ac:	0040      	lsls	r0, r0, #1
 80006ae:	4149      	adcs	r1, r1
 80006b0:	bf28      	it	cs
 80006b2:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80006b6:	bd30      	pop	{r4, r5, pc}
 80006b8:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80006bc:	bf3c      	itt	cc
 80006be:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80006c2:	bd30      	popcc	{r4, r5, pc}
 80006c4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80006c8:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80006cc:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80006d0:	f04f 0000 	mov.w	r0, #0
 80006d4:	bd30      	pop	{r4, r5, pc}
 80006d6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80006da:	bf1a      	itte	ne
 80006dc:	4619      	movne	r1, r3
 80006de:	4610      	movne	r0, r2
 80006e0:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80006e4:	bf1c      	itt	ne
 80006e6:	460b      	movne	r3, r1
 80006e8:	4602      	movne	r2, r0
 80006ea:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80006ee:	bf06      	itte	eq
 80006f0:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80006f4:	ea91 0f03 	teqeq	r1, r3
 80006f8:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80006fc:	bd30      	pop	{r4, r5, pc}
 80006fe:	bf00      	nop

08000700 <__aeabi_ui2d>:
 8000700:	f090 0f00 	teq	r0, #0
 8000704:	bf04      	itt	eq
 8000706:	2100      	moveq	r1, #0
 8000708:	4770      	bxeq	lr
 800070a:	b530      	push	{r4, r5, lr}
 800070c:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000710:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000714:	f04f 0500 	mov.w	r5, #0
 8000718:	f04f 0100 	mov.w	r1, #0
 800071c:	e750      	b.n	80005c0 <__adddf3+0x138>
 800071e:	bf00      	nop

08000720 <__aeabi_i2d>:
 8000720:	f090 0f00 	teq	r0, #0
 8000724:	bf04      	itt	eq
 8000726:	2100      	moveq	r1, #0
 8000728:	4770      	bxeq	lr
 800072a:	b530      	push	{r4, r5, lr}
 800072c:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000730:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000734:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000738:	bf48      	it	mi
 800073a:	4240      	negmi	r0, r0
 800073c:	f04f 0100 	mov.w	r1, #0
 8000740:	e73e      	b.n	80005c0 <__adddf3+0x138>
 8000742:	bf00      	nop

08000744 <__aeabi_f2d>:
 8000744:	0042      	lsls	r2, r0, #1
 8000746:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800074a:	ea4f 0131 	mov.w	r1, r1, rrx
 800074e:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000752:	bf1f      	itttt	ne
 8000754:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000758:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 800075c:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000760:	4770      	bxne	lr
 8000762:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000766:	bf08      	it	eq
 8000768:	4770      	bxeq	lr
 800076a:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800076e:	bf04      	itt	eq
 8000770:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000774:	4770      	bxeq	lr
 8000776:	b530      	push	{r4, r5, lr}
 8000778:	f44f 7460 	mov.w	r4, #896	; 0x380
 800077c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000780:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000784:	e71c      	b.n	80005c0 <__adddf3+0x138>
 8000786:	bf00      	nop

08000788 <__aeabi_ul2d>:
 8000788:	ea50 0201 	orrs.w	r2, r0, r1
 800078c:	bf08      	it	eq
 800078e:	4770      	bxeq	lr
 8000790:	b530      	push	{r4, r5, lr}
 8000792:	f04f 0500 	mov.w	r5, #0
 8000796:	e00a      	b.n	80007ae <__aeabi_l2d+0x16>

08000798 <__aeabi_l2d>:
 8000798:	ea50 0201 	orrs.w	r2, r0, r1
 800079c:	bf08      	it	eq
 800079e:	4770      	bxeq	lr
 80007a0:	b530      	push	{r4, r5, lr}
 80007a2:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80007a6:	d502      	bpl.n	80007ae <__aeabi_l2d+0x16>
 80007a8:	4240      	negs	r0, r0
 80007aa:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80007ae:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80007b2:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80007b6:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80007ba:	f43f aed8 	beq.w	800056e <__adddf3+0xe6>
 80007be:	f04f 0203 	mov.w	r2, #3
 80007c2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80007c6:	bf18      	it	ne
 80007c8:	3203      	addne	r2, #3
 80007ca:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80007ce:	bf18      	it	ne
 80007d0:	3203      	addne	r2, #3
 80007d2:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80007d6:	f1c2 0320 	rsb	r3, r2, #32
 80007da:	fa00 fc03 	lsl.w	ip, r0, r3
 80007de:	fa20 f002 	lsr.w	r0, r0, r2
 80007e2:	fa01 fe03 	lsl.w	lr, r1, r3
 80007e6:	ea40 000e 	orr.w	r0, r0, lr
 80007ea:	fa21 f102 	lsr.w	r1, r1, r2
 80007ee:	4414      	add	r4, r2
 80007f0:	e6bd      	b.n	800056e <__adddf3+0xe6>
 80007f2:	bf00      	nop

080007f4 <__aeabi_d2uiz>:
 80007f4:	004a      	lsls	r2, r1, #1
 80007f6:	d211      	bcs.n	800081c <__aeabi_d2uiz+0x28>
 80007f8:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80007fc:	d211      	bcs.n	8000822 <__aeabi_d2uiz+0x2e>
 80007fe:	d50d      	bpl.n	800081c <__aeabi_d2uiz+0x28>
 8000800:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000804:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000808:	d40e      	bmi.n	8000828 <__aeabi_d2uiz+0x34>
 800080a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 800080e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000812:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000816:	fa23 f002 	lsr.w	r0, r3, r2
 800081a:	4770      	bx	lr
 800081c:	f04f 0000 	mov.w	r0, #0
 8000820:	4770      	bx	lr
 8000822:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000826:	d102      	bne.n	800082e <__aeabi_d2uiz+0x3a>
 8000828:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800082c:	4770      	bx	lr
 800082e:	f04f 0000 	mov.w	r0, #0
 8000832:	4770      	bx	lr

08000834 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000834:	b580      	push	{r7, lr}
 8000836:	b088      	sub	sp, #32
 8000838:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800083a:	f107 0310 	add.w	r3, r7, #16
 800083e:	2200      	movs	r2, #0
 8000840:	601a      	str	r2, [r3, #0]
 8000842:	605a      	str	r2, [r3, #4]
 8000844:	609a      	str	r2, [r3, #8]
 8000846:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000848:	4b46      	ldr	r3, [pc, #280]	; (8000964 <MX_GPIO_Init+0x130>)
 800084a:	699b      	ldr	r3, [r3, #24]
 800084c:	4a45      	ldr	r2, [pc, #276]	; (8000964 <MX_GPIO_Init+0x130>)
 800084e:	f043 0320 	orr.w	r3, r3, #32
 8000852:	6193      	str	r3, [r2, #24]
 8000854:	4b43      	ldr	r3, [pc, #268]	; (8000964 <MX_GPIO_Init+0x130>)
 8000856:	699b      	ldr	r3, [r3, #24]
 8000858:	f003 0320 	and.w	r3, r3, #32
 800085c:	60fb      	str	r3, [r7, #12]
 800085e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000860:	4b40      	ldr	r3, [pc, #256]	; (8000964 <MX_GPIO_Init+0x130>)
 8000862:	699b      	ldr	r3, [r3, #24]
 8000864:	4a3f      	ldr	r2, [pc, #252]	; (8000964 <MX_GPIO_Init+0x130>)
 8000866:	f043 0304 	orr.w	r3, r3, #4
 800086a:	6193      	str	r3, [r2, #24]
 800086c:	4b3d      	ldr	r3, [pc, #244]	; (8000964 <MX_GPIO_Init+0x130>)
 800086e:	699b      	ldr	r3, [r3, #24]
 8000870:	f003 0304 	and.w	r3, r3, #4
 8000874:	60bb      	str	r3, [r7, #8]
 8000876:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000878:	4b3a      	ldr	r3, [pc, #232]	; (8000964 <MX_GPIO_Init+0x130>)
 800087a:	699b      	ldr	r3, [r3, #24]
 800087c:	4a39      	ldr	r2, [pc, #228]	; (8000964 <MX_GPIO_Init+0x130>)
 800087e:	f043 0310 	orr.w	r3, r3, #16
 8000882:	6193      	str	r3, [r2, #24]
 8000884:	4b37      	ldr	r3, [pc, #220]	; (8000964 <MX_GPIO_Init+0x130>)
 8000886:	699b      	ldr	r3, [r3, #24]
 8000888:	f003 0310 	and.w	r3, r3, #16
 800088c:	607b      	str	r3, [r7, #4]
 800088e:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED0_GPIO_Port, LED0_Pin, GPIO_PIN_RESET);
 8000890:	2200      	movs	r2, #0
 8000892:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000896:	4834      	ldr	r0, [pc, #208]	; (8000968 <MX_GPIO_Init+0x134>)
 8000898:	f005 fecf 	bl	800663a <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET);
 800089c:	2200      	movs	r2, #0
 800089e:	2104      	movs	r1, #4
 80008a0:	4832      	ldr	r0, [pc, #200]	; (800096c <MX_GPIO_Init+0x138>)
 80008a2:	f005 feca 	bl	800663a <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = KEY_WK_Pin;
 80008a6:	2301      	movs	r3, #1
 80008a8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80008aa:	4b31      	ldr	r3, [pc, #196]	; (8000970 <MX_GPIO_Init+0x13c>)
 80008ac:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80008ae:	2302      	movs	r3, #2
 80008b0:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(KEY_WK_GPIO_Port, &GPIO_InitStruct);
 80008b2:	f107 0310 	add.w	r3, r7, #16
 80008b6:	4619      	mov	r1, r3
 80008b8:	482b      	ldr	r0, [pc, #172]	; (8000968 <MX_GPIO_Init+0x134>)
 80008ba:	f005 fd13 	bl	80062e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = KEY0_Pin;
 80008be:	2320      	movs	r3, #32
 80008c0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80008c2:	4b2c      	ldr	r3, [pc, #176]	; (8000974 <MX_GPIO_Init+0x140>)
 80008c4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80008c6:	2301      	movs	r3, #1
 80008c8:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(KEY0_GPIO_Port, &GPIO_InitStruct);
 80008ca:	f107 0310 	add.w	r3, r7, #16
 80008ce:	4619      	mov	r1, r3
 80008d0:	4829      	ldr	r0, [pc, #164]	; (8000978 <MX_GPIO_Init+0x144>)
 80008d2:	f005 fd07 	bl	80062e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED0_Pin;
 80008d6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80008da:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008dc:	2301      	movs	r3, #1
 80008de:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008e0:	2300      	movs	r3, #0
 80008e2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008e4:	2302      	movs	r3, #2
 80008e6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED0_GPIO_Port, &GPIO_InitStruct);
 80008e8:	f107 0310 	add.w	r3, r7, #16
 80008ec:	4619      	mov	r1, r3
 80008ee:	481e      	ldr	r0, [pc, #120]	; (8000968 <MX_GPIO_Init+0x134>)
 80008f0:	f005 fcf8 	bl	80062e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = KEY1_Pin;
 80008f4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80008f8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80008fa:	4b1e      	ldr	r3, [pc, #120]	; (8000974 <MX_GPIO_Init+0x140>)
 80008fc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80008fe:	2301      	movs	r3, #1
 8000900:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(KEY1_GPIO_Port, &GPIO_InitStruct);
 8000902:	f107 0310 	add.w	r3, r7, #16
 8000906:	4619      	mov	r1, r3
 8000908:	4817      	ldr	r0, [pc, #92]	; (8000968 <MX_GPIO_Init+0x134>)
 800090a:	f005 fceb 	bl	80062e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED1_Pin;
 800090e:	2304      	movs	r3, #4
 8000910:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000912:	2301      	movs	r3, #1
 8000914:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000916:	2300      	movs	r3, #0
 8000918:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800091a:	2302      	movs	r3, #2
 800091c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED1_GPIO_Port, &GPIO_InitStruct);
 800091e:	f107 0310 	add.w	r3, r7, #16
 8000922:	4619      	mov	r1, r3
 8000924:	4811      	ldr	r0, [pc, #68]	; (800096c <MX_GPIO_Init+0x138>)
 8000926:	f005 fcdd 	bl	80062e4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 1, 0);
 800092a:	2200      	movs	r2, #0
 800092c:	2101      	movs	r1, #1
 800092e:	2006      	movs	r0, #6
 8000930:	f005 fb5f 	bl	8005ff2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8000934:	2006      	movs	r0, #6
 8000936:	f005 fb78 	bl	800602a <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 1, 1);
 800093a:	2201      	movs	r2, #1
 800093c:	2101      	movs	r1, #1
 800093e:	2017      	movs	r0, #23
 8000940:	f005 fb57 	bl	8005ff2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000944:	2017      	movs	r0, #23
 8000946:	f005 fb70 	bl	800602a <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 1, 2);
 800094a:	2202      	movs	r2, #2
 800094c:	2101      	movs	r1, #1
 800094e:	2028      	movs	r0, #40	; 0x28
 8000950:	f005 fb4f 	bl	8005ff2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000954:	2028      	movs	r0, #40	; 0x28
 8000956:	f005 fb68 	bl	800602a <HAL_NVIC_EnableIRQ>

}
 800095a:	bf00      	nop
 800095c:	3720      	adds	r7, #32
 800095e:	46bd      	mov	sp, r7
 8000960:	bd80      	pop	{r7, pc}
 8000962:	bf00      	nop
 8000964:	40021000 	.word	0x40021000
 8000968:	40010800 	.word	0x40010800
 800096c:	40011400 	.word	0x40011400
 8000970:	10110000 	.word	0x10110000
 8000974:	10210000 	.word	0x10210000
 8000978:	40011000 	.word	0x40011000

0800097c <LCD_WR_REG>:
//默认为竖屏
_lcd_dev lcddev;

//写寄存器函数
//data:寄存器值
void LCD_WR_REG(uint16_t data) {
 800097c:	b480      	push	{r7}
 800097e:	b083      	sub	sp, #12
 8000980:	af00      	add	r7, sp, #0
 8000982:	4603      	mov	r3, r0
 8000984:	80fb      	strh	r3, [r7, #6]
	LCD_RS_CLR;  //写地址
 8000986:	4b0d      	ldr	r3, [pc, #52]	; (80009bc <LCD_WR_REG+0x40>)
 8000988:	f44f 7280 	mov.w	r2, #256	; 0x100
 800098c:	615a      	str	r2, [r3, #20]
	LCD_CS_CLR;
 800098e:	4b0b      	ldr	r3, [pc, #44]	; (80009bc <LCD_WR_REG+0x40>)
 8000990:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000994:	615a      	str	r2, [r3, #20]
	DATAOUT(data);
 8000996:	4a0a      	ldr	r2, [pc, #40]	; (80009c0 <LCD_WR_REG+0x44>)
 8000998:	88fb      	ldrh	r3, [r7, #6]
 800099a:	60d3      	str	r3, [r2, #12]
	LCD_WR_CLR;
 800099c:	4b07      	ldr	r3, [pc, #28]	; (80009bc <LCD_WR_REG+0x40>)
 800099e:	2280      	movs	r2, #128	; 0x80
 80009a0:	615a      	str	r2, [r3, #20]
	LCD_WR_SET;
 80009a2:	4b06      	ldr	r3, [pc, #24]	; (80009bc <LCD_WR_REG+0x40>)
 80009a4:	2280      	movs	r2, #128	; 0x80
 80009a6:	611a      	str	r2, [r3, #16]
	LCD_CS_SET;
 80009a8:	4b04      	ldr	r3, [pc, #16]	; (80009bc <LCD_WR_REG+0x40>)
 80009aa:	f44f 7200 	mov.w	r2, #512	; 0x200
 80009ae:	611a      	str	r2, [r3, #16]
}
 80009b0:	bf00      	nop
 80009b2:	370c      	adds	r7, #12
 80009b4:	46bd      	mov	sp, r7
 80009b6:	bc80      	pop	{r7}
 80009b8:	4770      	bx	lr
 80009ba:	bf00      	nop
 80009bc:	40011000 	.word	0x40011000
 80009c0:	40010c00 	.word	0x40010c00

080009c4 <LCD_WR_DATAX>:
//写数据函数
//可以替代LCD_WR_DATAX宏,拿时间换空间.
//data:寄存器值
void LCD_WR_DATAX(uint16_t data) {
 80009c4:	b480      	push	{r7}
 80009c6:	b083      	sub	sp, #12
 80009c8:	af00      	add	r7, sp, #0
 80009ca:	4603      	mov	r3, r0
 80009cc:	80fb      	strh	r3, [r7, #6]
	LCD_RS_SET;
 80009ce:	4b0d      	ldr	r3, [pc, #52]	; (8000a04 <LCD_WR_DATAX+0x40>)
 80009d0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80009d4:	611a      	str	r2, [r3, #16]
	LCD_CS_CLR;
 80009d6:	4b0b      	ldr	r3, [pc, #44]	; (8000a04 <LCD_WR_DATAX+0x40>)
 80009d8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80009dc:	615a      	str	r2, [r3, #20]
	DATAOUT(data);
 80009de:	4a0a      	ldr	r2, [pc, #40]	; (8000a08 <LCD_WR_DATAX+0x44>)
 80009e0:	88fb      	ldrh	r3, [r7, #6]
 80009e2:	60d3      	str	r3, [r2, #12]
	LCD_WR_CLR;
 80009e4:	4b07      	ldr	r3, [pc, #28]	; (8000a04 <LCD_WR_DATAX+0x40>)
 80009e6:	2280      	movs	r2, #128	; 0x80
 80009e8:	615a      	str	r2, [r3, #20]
	LCD_WR_SET;
 80009ea:	4b06      	ldr	r3, [pc, #24]	; (8000a04 <LCD_WR_DATAX+0x40>)
 80009ec:	2280      	movs	r2, #128	; 0x80
 80009ee:	611a      	str	r2, [r3, #16]
	LCD_CS_SET;
 80009f0:	4b04      	ldr	r3, [pc, #16]	; (8000a04 <LCD_WR_DATAX+0x40>)
 80009f2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80009f6:	611a      	str	r2, [r3, #16]
}
 80009f8:	bf00      	nop
 80009fa:	370c      	adds	r7, #12
 80009fc:	46bd      	mov	sp, r7
 80009fe:	bc80      	pop	{r7}
 8000a00:	4770      	bx	lr
 8000a02:	bf00      	nop
 8000a04:	40011000 	.word	0x40011000
 8000a08:	40010c00 	.word	0x40010c00

08000a0c <LCD_RD_DATA>:
//读LCD数据
//返回值:读到的值
uint16_t LCD_RD_DATA(void) {
 8000a0c:	b580      	push	{r7, lr}
 8000a0e:	b082      	sub	sp, #8
 8000a10:	af00      	add	r7, sp, #0
	uint16_t t;
	GPIOB->CRL = 0X88888888; //PB0-7  上拉输入
 8000a12:	4b1d      	ldr	r3, [pc, #116]	; (8000a88 <LCD_RD_DATA+0x7c>)
 8000a14:	f04f 3288 	mov.w	r2, #2290649224	; 0x88888888
 8000a18:	601a      	str	r2, [r3, #0]
	GPIOB->CRH = 0X88888888; //PB8-15 上拉输入
 8000a1a:	4b1b      	ldr	r3, [pc, #108]	; (8000a88 <LCD_RD_DATA+0x7c>)
 8000a1c:	f04f 3288 	mov.w	r2, #2290649224	; 0x88888888
 8000a20:	605a      	str	r2, [r3, #4]
	GPIOB->ODR = 0X0000;     //全部输出0
 8000a22:	4b19      	ldr	r3, [pc, #100]	; (8000a88 <LCD_RD_DATA+0x7c>)
 8000a24:	2200      	movs	r2, #0
 8000a26:	60da      	str	r2, [r3, #12]

	LCD_RS_SET;
 8000a28:	4b18      	ldr	r3, [pc, #96]	; (8000a8c <LCD_RD_DATA+0x80>)
 8000a2a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000a2e:	611a      	str	r2, [r3, #16]
	LCD_CS_CLR;
 8000a30:	4b16      	ldr	r3, [pc, #88]	; (8000a8c <LCD_RD_DATA+0x80>)
 8000a32:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000a36:	615a      	str	r2, [r3, #20]
	//读取数据(读寄存器时,并不需要读2次)
	LCD_RD_CLR;
 8000a38:	4b14      	ldr	r3, [pc, #80]	; (8000a8c <LCD_RD_DATA+0x80>)
 8000a3a:	2240      	movs	r2, #64	; 0x40
 8000a3c:	615a      	str	r2, [r3, #20]
	if (lcddev.id == 0X8989)
 8000a3e:	4b14      	ldr	r3, [pc, #80]	; (8000a90 <LCD_RD_DATA+0x84>)
 8000a40:	889b      	ldrh	r3, [r3, #4]
 8000a42:	f648 1289 	movw	r2, #35209	; 0x8989
 8000a46:	4293      	cmp	r3, r2
 8000a48:	d102      	bne.n	8000a50 <LCD_RD_DATA+0x44>
		HAL_Delay(1); // delay_us(2);//FOR 8989,延时2us
 8000a4a:	2001      	movs	r0, #1
 8000a4c:	f005 f9d6 	bl	8005dfc <HAL_Delay>
	t = DATAIN
 8000a50:	4b0d      	ldr	r3, [pc, #52]	; (8000a88 <LCD_RD_DATA+0x7c>)
 8000a52:	689b      	ldr	r3, [r3, #8]
 8000a54:	80fb      	strh	r3, [r7, #6]
	;
	LCD_RD_SET;
 8000a56:	4b0d      	ldr	r3, [pc, #52]	; (8000a8c <LCD_RD_DATA+0x80>)
 8000a58:	2240      	movs	r2, #64	; 0x40
 8000a5a:	611a      	str	r2, [r3, #16]
	LCD_CS_SET;
 8000a5c:	4b0b      	ldr	r3, [pc, #44]	; (8000a8c <LCD_RD_DATA+0x80>)
 8000a5e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000a62:	611a      	str	r2, [r3, #16]

	GPIOB->CRL = 0X33333333; //PB0-7  上拉输出
 8000a64:	4b08      	ldr	r3, [pc, #32]	; (8000a88 <LCD_RD_DATA+0x7c>)
 8000a66:	f04f 3233 	mov.w	r2, #858993459	; 0x33333333
 8000a6a:	601a      	str	r2, [r3, #0]
	GPIOB->CRH = 0X33333333; //PB8-15 上拉输出
 8000a6c:	4b06      	ldr	r3, [pc, #24]	; (8000a88 <LCD_RD_DATA+0x7c>)
 8000a6e:	f04f 3233 	mov.w	r2, #858993459	; 0x33333333
 8000a72:	605a      	str	r2, [r3, #4]
	GPIOB->ODR = 0XFFFF;    //全部输出高
 8000a74:	4b04      	ldr	r3, [pc, #16]	; (8000a88 <LCD_RD_DATA+0x7c>)
 8000a76:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000a7a:	60da      	str	r2, [r3, #12]
	return t;
 8000a7c:	88fb      	ldrh	r3, [r7, #6]
}
 8000a7e:	4618      	mov	r0, r3
 8000a80:	3708      	adds	r7, #8
 8000a82:	46bd      	mov	sp, r7
 8000a84:	bd80      	pop	{r7, pc}
 8000a86:	bf00      	nop
 8000a88:	40010c00 	.word	0x40010c00
 8000a8c:	40011000 	.word	0x40011000
 8000a90:	20000028 	.word	0x20000028

08000a94 <LCD_WriteReg>:
//写寄存器
//LCD_Reg:寄存器编号
//LCD_RegValue:要写入的值
void LCD_WriteReg(uint16_t LCD_Reg, uint16_t LCD_RegValue) {
 8000a94:	b580      	push	{r7, lr}
 8000a96:	b082      	sub	sp, #8
 8000a98:	af00      	add	r7, sp, #0
 8000a9a:	4603      	mov	r3, r0
 8000a9c:	460a      	mov	r2, r1
 8000a9e:	80fb      	strh	r3, [r7, #6]
 8000aa0:	4613      	mov	r3, r2
 8000aa2:	80bb      	strh	r3, [r7, #4]
	LCD_WR_REG(LCD_Reg);
 8000aa4:	88fb      	ldrh	r3, [r7, #6]
 8000aa6:	4618      	mov	r0, r3
 8000aa8:	f7ff ff68 	bl	800097c <LCD_WR_REG>
	LCD_WR_DATA(LCD_RegValue);
 8000aac:	4b0c      	ldr	r3, [pc, #48]	; (8000ae0 <LCD_WriteReg+0x4c>)
 8000aae:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000ab2:	611a      	str	r2, [r3, #16]
 8000ab4:	4b0a      	ldr	r3, [pc, #40]	; (8000ae0 <LCD_WriteReg+0x4c>)
 8000ab6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000aba:	615a      	str	r2, [r3, #20]
 8000abc:	4a09      	ldr	r2, [pc, #36]	; (8000ae4 <LCD_WriteReg+0x50>)
 8000abe:	88bb      	ldrh	r3, [r7, #4]
 8000ac0:	60d3      	str	r3, [r2, #12]
 8000ac2:	4b07      	ldr	r3, [pc, #28]	; (8000ae0 <LCD_WriteReg+0x4c>)
 8000ac4:	2280      	movs	r2, #128	; 0x80
 8000ac6:	615a      	str	r2, [r3, #20]
 8000ac8:	4b05      	ldr	r3, [pc, #20]	; (8000ae0 <LCD_WriteReg+0x4c>)
 8000aca:	2280      	movs	r2, #128	; 0x80
 8000acc:	611a      	str	r2, [r3, #16]
 8000ace:	4b04      	ldr	r3, [pc, #16]	; (8000ae0 <LCD_WriteReg+0x4c>)
 8000ad0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000ad4:	611a      	str	r2, [r3, #16]
}
 8000ad6:	bf00      	nop
 8000ad8:	3708      	adds	r7, #8
 8000ada:	46bd      	mov	sp, r7
 8000adc:	bd80      	pop	{r7, pc}
 8000ade:	bf00      	nop
 8000ae0:	40011000 	.word	0x40011000
 8000ae4:	40010c00 	.word	0x40010c00

08000ae8 <LCD_ReadReg>:
//读寄存器
//LCD_Reg:寄存器编号
//返回值:读到的值
uint16_t LCD_ReadReg(uint16_t LCD_Reg) {
 8000ae8:	b580      	push	{r7, lr}
 8000aea:	b082      	sub	sp, #8
 8000aec:	af00      	add	r7, sp, #0
 8000aee:	4603      	mov	r3, r0
 8000af0:	80fb      	strh	r3, [r7, #6]
	LCD_WR_REG(LCD_Reg);  //写入要读的寄存器号
 8000af2:	88fb      	ldrh	r3, [r7, #6]
 8000af4:	4618      	mov	r0, r3
 8000af6:	f7ff ff41 	bl	800097c <LCD_WR_REG>
	return LCD_RD_DATA();
 8000afa:	f7ff ff87 	bl	8000a0c <LCD_RD_DATA>
 8000afe:	4603      	mov	r3, r0
}
 8000b00:	4618      	mov	r0, r3
 8000b02:	3708      	adds	r7, #8
 8000b04:	46bd      	mov	sp, r7
 8000b06:	bd80      	pop	{r7, pc}

08000b08 <LCD_WriteRAM_Prepare>:
//开始写GRAM
void LCD_WriteRAM_Prepare(void) {
 8000b08:	b580      	push	{r7, lr}
 8000b0a:	af00      	add	r7, sp, #0
	LCD_WR_REG(lcddev.wramcmd);
 8000b0c:	4b03      	ldr	r3, [pc, #12]	; (8000b1c <LCD_WriteRAM_Prepare+0x14>)
 8000b0e:	891b      	ldrh	r3, [r3, #8]
 8000b10:	4618      	mov	r0, r3
 8000b12:	f7ff ff33 	bl	800097c <LCD_WR_REG>
}
 8000b16:	bf00      	nop
 8000b18:	bd80      	pop	{r7, pc}
 8000b1a:	bf00      	nop
 8000b1c:	20000028 	.word	0x20000028

08000b20 <LCD_SetCursor>:
		LCD_WriteReg(0X07, 0x0);	//关闭显示
}
//设置光标位置
//Xpos:横坐标
//Ypos:纵坐标
void LCD_SetCursor(uint16_t Xpos, uint16_t Ypos) {
 8000b20:	b580      	push	{r7, lr}
 8000b22:	b082      	sub	sp, #8
 8000b24:	af00      	add	r7, sp, #0
 8000b26:	4603      	mov	r3, r0
 8000b28:	460a      	mov	r2, r1
 8000b2a:	80fb      	strh	r3, [r7, #6]
 8000b2c:	4613      	mov	r3, r2
 8000b2e:	80bb      	strh	r3, [r7, #4]
	if (lcddev.id == 0X9341 || lcddev.id == 0X5310) {
 8000b30:	4b73      	ldr	r3, [pc, #460]	; (8000d00 <LCD_SetCursor+0x1e0>)
 8000b32:	889b      	ldrh	r3, [r3, #4]
 8000b34:	f249 3241 	movw	r2, #37697	; 0x9341
 8000b38:	4293      	cmp	r3, r2
 8000b3a:	d005      	beq.n	8000b48 <LCD_SetCursor+0x28>
 8000b3c:	4b70      	ldr	r3, [pc, #448]	; (8000d00 <LCD_SetCursor+0x1e0>)
 8000b3e:	889b      	ldrh	r3, [r3, #4]
 8000b40:	f245 3210 	movw	r2, #21264	; 0x5310
 8000b44:	4293      	cmp	r3, r2
 8000b46:	d164      	bne.n	8000c12 <LCD_SetCursor+0xf2>
		LCD_WR_REG(lcddev.setxcmd);
 8000b48:	4b6d      	ldr	r3, [pc, #436]	; (8000d00 <LCD_SetCursor+0x1e0>)
 8000b4a:	895b      	ldrh	r3, [r3, #10]
 8000b4c:	4618      	mov	r0, r3
 8000b4e:	f7ff ff15 	bl	800097c <LCD_WR_REG>
		LCD_WR_DATA(Xpos >> 8);
 8000b52:	4b6c      	ldr	r3, [pc, #432]	; (8000d04 <LCD_SetCursor+0x1e4>)
 8000b54:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000b58:	611a      	str	r2, [r3, #16]
 8000b5a:	4b6a      	ldr	r3, [pc, #424]	; (8000d04 <LCD_SetCursor+0x1e4>)
 8000b5c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000b60:	615a      	str	r2, [r3, #20]
 8000b62:	88fb      	ldrh	r3, [r7, #6]
 8000b64:	0a1b      	lsrs	r3, r3, #8
 8000b66:	b29a      	uxth	r2, r3
 8000b68:	4b67      	ldr	r3, [pc, #412]	; (8000d08 <LCD_SetCursor+0x1e8>)
 8000b6a:	60da      	str	r2, [r3, #12]
 8000b6c:	4b65      	ldr	r3, [pc, #404]	; (8000d04 <LCD_SetCursor+0x1e4>)
 8000b6e:	2280      	movs	r2, #128	; 0x80
 8000b70:	615a      	str	r2, [r3, #20]
 8000b72:	4b64      	ldr	r3, [pc, #400]	; (8000d04 <LCD_SetCursor+0x1e4>)
 8000b74:	2280      	movs	r2, #128	; 0x80
 8000b76:	611a      	str	r2, [r3, #16]
 8000b78:	4b62      	ldr	r3, [pc, #392]	; (8000d04 <LCD_SetCursor+0x1e4>)
 8000b7a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000b7e:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(Xpos & 0XFF);
 8000b80:	4b60      	ldr	r3, [pc, #384]	; (8000d04 <LCD_SetCursor+0x1e4>)
 8000b82:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000b86:	611a      	str	r2, [r3, #16]
 8000b88:	4b5e      	ldr	r3, [pc, #376]	; (8000d04 <LCD_SetCursor+0x1e4>)
 8000b8a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000b8e:	615a      	str	r2, [r3, #20]
 8000b90:	88fb      	ldrh	r3, [r7, #6]
 8000b92:	4a5d      	ldr	r2, [pc, #372]	; (8000d08 <LCD_SetCursor+0x1e8>)
 8000b94:	b2db      	uxtb	r3, r3
 8000b96:	60d3      	str	r3, [r2, #12]
 8000b98:	4b5a      	ldr	r3, [pc, #360]	; (8000d04 <LCD_SetCursor+0x1e4>)
 8000b9a:	2280      	movs	r2, #128	; 0x80
 8000b9c:	615a      	str	r2, [r3, #20]
 8000b9e:	4b59      	ldr	r3, [pc, #356]	; (8000d04 <LCD_SetCursor+0x1e4>)
 8000ba0:	2280      	movs	r2, #128	; 0x80
 8000ba2:	611a      	str	r2, [r3, #16]
 8000ba4:	4b57      	ldr	r3, [pc, #348]	; (8000d04 <LCD_SetCursor+0x1e4>)
 8000ba6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000baa:	611a      	str	r2, [r3, #16]
		LCD_WR_REG(lcddev.setycmd);
 8000bac:	4b54      	ldr	r3, [pc, #336]	; (8000d00 <LCD_SetCursor+0x1e0>)
 8000bae:	899b      	ldrh	r3, [r3, #12]
 8000bb0:	4618      	mov	r0, r3
 8000bb2:	f7ff fee3 	bl	800097c <LCD_WR_REG>
		LCD_WR_DATA(Ypos >> 8);
 8000bb6:	4b53      	ldr	r3, [pc, #332]	; (8000d04 <LCD_SetCursor+0x1e4>)
 8000bb8:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000bbc:	611a      	str	r2, [r3, #16]
 8000bbe:	4b51      	ldr	r3, [pc, #324]	; (8000d04 <LCD_SetCursor+0x1e4>)
 8000bc0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000bc4:	615a      	str	r2, [r3, #20]
 8000bc6:	88bb      	ldrh	r3, [r7, #4]
 8000bc8:	0a1b      	lsrs	r3, r3, #8
 8000bca:	b29a      	uxth	r2, r3
 8000bcc:	4b4e      	ldr	r3, [pc, #312]	; (8000d08 <LCD_SetCursor+0x1e8>)
 8000bce:	60da      	str	r2, [r3, #12]
 8000bd0:	4b4c      	ldr	r3, [pc, #304]	; (8000d04 <LCD_SetCursor+0x1e4>)
 8000bd2:	2280      	movs	r2, #128	; 0x80
 8000bd4:	615a      	str	r2, [r3, #20]
 8000bd6:	4b4b      	ldr	r3, [pc, #300]	; (8000d04 <LCD_SetCursor+0x1e4>)
 8000bd8:	2280      	movs	r2, #128	; 0x80
 8000bda:	611a      	str	r2, [r3, #16]
 8000bdc:	4b49      	ldr	r3, [pc, #292]	; (8000d04 <LCD_SetCursor+0x1e4>)
 8000bde:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000be2:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(Ypos & 0XFF);
 8000be4:	4b47      	ldr	r3, [pc, #284]	; (8000d04 <LCD_SetCursor+0x1e4>)
 8000be6:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000bea:	611a      	str	r2, [r3, #16]
 8000bec:	4b45      	ldr	r3, [pc, #276]	; (8000d04 <LCD_SetCursor+0x1e4>)
 8000bee:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000bf2:	615a      	str	r2, [r3, #20]
 8000bf4:	88bb      	ldrh	r3, [r7, #4]
 8000bf6:	4a44      	ldr	r2, [pc, #272]	; (8000d08 <LCD_SetCursor+0x1e8>)
 8000bf8:	b2db      	uxtb	r3, r3
 8000bfa:	60d3      	str	r3, [r2, #12]
 8000bfc:	4b41      	ldr	r3, [pc, #260]	; (8000d04 <LCD_SetCursor+0x1e4>)
 8000bfe:	2280      	movs	r2, #128	; 0x80
 8000c00:	615a      	str	r2, [r3, #20]
 8000c02:	4b40      	ldr	r3, [pc, #256]	; (8000d04 <LCD_SetCursor+0x1e4>)
 8000c04:	2280      	movs	r2, #128	; 0x80
 8000c06:	611a      	str	r2, [r3, #16]
 8000c08:	4b3e      	ldr	r3, [pc, #248]	; (8000d04 <LCD_SetCursor+0x1e4>)
 8000c0a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000c0e:	611a      	str	r2, [r3, #16]
		if (lcddev.dir == 1)
			Xpos = lcddev.width - 1 - Xpos;	//横屏其实就是调转x,y坐标
		LCD_WriteReg(lcddev.setxcmd, Xpos);
		LCD_WriteReg(lcddev.setycmd, Ypos);
	}
}
 8000c10:	e248      	b.n	80010a4 <LCD_SetCursor+0x584>
	} else if (lcddev.id == 0X6804) {
 8000c12:	4b3b      	ldr	r3, [pc, #236]	; (8000d00 <LCD_SetCursor+0x1e0>)
 8000c14:	889b      	ldrh	r3, [r3, #4]
 8000c16:	f646 0204 	movw	r2, #26628	; 0x6804
 8000c1a:	4293      	cmp	r3, r2
 8000c1c:	d176      	bne.n	8000d0c <LCD_SetCursor+0x1ec>
		if (lcddev.dir == 1)
 8000c1e:	4b38      	ldr	r3, [pc, #224]	; (8000d00 <LCD_SetCursor+0x1e0>)
 8000c20:	799b      	ldrb	r3, [r3, #6]
 8000c22:	2b01      	cmp	r3, #1
 8000c24:	d106      	bne.n	8000c34 <LCD_SetCursor+0x114>
			Xpos = lcddev.width - 1 - Xpos;	//横屏时处理
 8000c26:	4b36      	ldr	r3, [pc, #216]	; (8000d00 <LCD_SetCursor+0x1e0>)
 8000c28:	881a      	ldrh	r2, [r3, #0]
 8000c2a:	88fb      	ldrh	r3, [r7, #6]
 8000c2c:	1ad3      	subs	r3, r2, r3
 8000c2e:	b29b      	uxth	r3, r3
 8000c30:	3b01      	subs	r3, #1
 8000c32:	80fb      	strh	r3, [r7, #6]
		LCD_WR_REG(lcddev.setxcmd);
 8000c34:	4b32      	ldr	r3, [pc, #200]	; (8000d00 <LCD_SetCursor+0x1e0>)
 8000c36:	895b      	ldrh	r3, [r3, #10]
 8000c38:	4618      	mov	r0, r3
 8000c3a:	f7ff fe9f 	bl	800097c <LCD_WR_REG>
		LCD_WR_DATA(Xpos >> 8);
 8000c3e:	4b31      	ldr	r3, [pc, #196]	; (8000d04 <LCD_SetCursor+0x1e4>)
 8000c40:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000c44:	611a      	str	r2, [r3, #16]
 8000c46:	4b2f      	ldr	r3, [pc, #188]	; (8000d04 <LCD_SetCursor+0x1e4>)
 8000c48:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000c4c:	615a      	str	r2, [r3, #20]
 8000c4e:	88fb      	ldrh	r3, [r7, #6]
 8000c50:	0a1b      	lsrs	r3, r3, #8
 8000c52:	b29a      	uxth	r2, r3
 8000c54:	4b2c      	ldr	r3, [pc, #176]	; (8000d08 <LCD_SetCursor+0x1e8>)
 8000c56:	60da      	str	r2, [r3, #12]
 8000c58:	4b2a      	ldr	r3, [pc, #168]	; (8000d04 <LCD_SetCursor+0x1e4>)
 8000c5a:	2280      	movs	r2, #128	; 0x80
 8000c5c:	615a      	str	r2, [r3, #20]
 8000c5e:	4b29      	ldr	r3, [pc, #164]	; (8000d04 <LCD_SetCursor+0x1e4>)
 8000c60:	2280      	movs	r2, #128	; 0x80
 8000c62:	611a      	str	r2, [r3, #16]
 8000c64:	4b27      	ldr	r3, [pc, #156]	; (8000d04 <LCD_SetCursor+0x1e4>)
 8000c66:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000c6a:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(Xpos & 0XFF);
 8000c6c:	4b25      	ldr	r3, [pc, #148]	; (8000d04 <LCD_SetCursor+0x1e4>)
 8000c6e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000c72:	611a      	str	r2, [r3, #16]
 8000c74:	4b23      	ldr	r3, [pc, #140]	; (8000d04 <LCD_SetCursor+0x1e4>)
 8000c76:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000c7a:	615a      	str	r2, [r3, #20]
 8000c7c:	88fb      	ldrh	r3, [r7, #6]
 8000c7e:	4a22      	ldr	r2, [pc, #136]	; (8000d08 <LCD_SetCursor+0x1e8>)
 8000c80:	b2db      	uxtb	r3, r3
 8000c82:	60d3      	str	r3, [r2, #12]
 8000c84:	4b1f      	ldr	r3, [pc, #124]	; (8000d04 <LCD_SetCursor+0x1e4>)
 8000c86:	2280      	movs	r2, #128	; 0x80
 8000c88:	615a      	str	r2, [r3, #20]
 8000c8a:	4b1e      	ldr	r3, [pc, #120]	; (8000d04 <LCD_SetCursor+0x1e4>)
 8000c8c:	2280      	movs	r2, #128	; 0x80
 8000c8e:	611a      	str	r2, [r3, #16]
 8000c90:	4b1c      	ldr	r3, [pc, #112]	; (8000d04 <LCD_SetCursor+0x1e4>)
 8000c92:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000c96:	611a      	str	r2, [r3, #16]
		LCD_WR_REG(lcddev.setycmd);
 8000c98:	4b19      	ldr	r3, [pc, #100]	; (8000d00 <LCD_SetCursor+0x1e0>)
 8000c9a:	899b      	ldrh	r3, [r3, #12]
 8000c9c:	4618      	mov	r0, r3
 8000c9e:	f7ff fe6d 	bl	800097c <LCD_WR_REG>
		LCD_WR_DATA(Ypos >> 8);
 8000ca2:	4b18      	ldr	r3, [pc, #96]	; (8000d04 <LCD_SetCursor+0x1e4>)
 8000ca4:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000ca8:	611a      	str	r2, [r3, #16]
 8000caa:	4b16      	ldr	r3, [pc, #88]	; (8000d04 <LCD_SetCursor+0x1e4>)
 8000cac:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000cb0:	615a      	str	r2, [r3, #20]
 8000cb2:	88bb      	ldrh	r3, [r7, #4]
 8000cb4:	0a1b      	lsrs	r3, r3, #8
 8000cb6:	b29a      	uxth	r2, r3
 8000cb8:	4b13      	ldr	r3, [pc, #76]	; (8000d08 <LCD_SetCursor+0x1e8>)
 8000cba:	60da      	str	r2, [r3, #12]
 8000cbc:	4b11      	ldr	r3, [pc, #68]	; (8000d04 <LCD_SetCursor+0x1e4>)
 8000cbe:	2280      	movs	r2, #128	; 0x80
 8000cc0:	615a      	str	r2, [r3, #20]
 8000cc2:	4b10      	ldr	r3, [pc, #64]	; (8000d04 <LCD_SetCursor+0x1e4>)
 8000cc4:	2280      	movs	r2, #128	; 0x80
 8000cc6:	611a      	str	r2, [r3, #16]
 8000cc8:	4b0e      	ldr	r3, [pc, #56]	; (8000d04 <LCD_SetCursor+0x1e4>)
 8000cca:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000cce:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(Ypos & 0XFF);
 8000cd0:	4b0c      	ldr	r3, [pc, #48]	; (8000d04 <LCD_SetCursor+0x1e4>)
 8000cd2:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000cd6:	611a      	str	r2, [r3, #16]
 8000cd8:	4b0a      	ldr	r3, [pc, #40]	; (8000d04 <LCD_SetCursor+0x1e4>)
 8000cda:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000cde:	615a      	str	r2, [r3, #20]
 8000ce0:	88bb      	ldrh	r3, [r7, #4]
 8000ce2:	4a09      	ldr	r2, [pc, #36]	; (8000d08 <LCD_SetCursor+0x1e8>)
 8000ce4:	b2db      	uxtb	r3, r3
 8000ce6:	60d3      	str	r3, [r2, #12]
 8000ce8:	4b06      	ldr	r3, [pc, #24]	; (8000d04 <LCD_SetCursor+0x1e4>)
 8000cea:	2280      	movs	r2, #128	; 0x80
 8000cec:	615a      	str	r2, [r3, #20]
 8000cee:	4b05      	ldr	r3, [pc, #20]	; (8000d04 <LCD_SetCursor+0x1e4>)
 8000cf0:	2280      	movs	r2, #128	; 0x80
 8000cf2:	611a      	str	r2, [r3, #16]
 8000cf4:	4b03      	ldr	r3, [pc, #12]	; (8000d04 <LCD_SetCursor+0x1e4>)
 8000cf6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000cfa:	611a      	str	r2, [r3, #16]
}
 8000cfc:	e1d2      	b.n	80010a4 <LCD_SetCursor+0x584>
 8000cfe:	bf00      	nop
 8000d00:	20000028 	.word	0x20000028
 8000d04:	40011000 	.word	0x40011000
 8000d08:	40010c00 	.word	0x40010c00
	} else if (lcddev.id == 0X1963) {
 8000d0c:	4b99      	ldr	r3, [pc, #612]	; (8000f74 <LCD_SetCursor+0x454>)
 8000d0e:	889b      	ldrh	r3, [r3, #4]
 8000d10:	f641 1263 	movw	r2, #6499	; 0x1963
 8000d14:	4293      	cmp	r3, r2
 8000d16:	f040 8133 	bne.w	8000f80 <LCD_SetCursor+0x460>
		if (lcddev.dir == 0)	//x坐标需要变换
 8000d1a:	4b96      	ldr	r3, [pc, #600]	; (8000f74 <LCD_SetCursor+0x454>)
 8000d1c:	799b      	ldrb	r3, [r3, #6]
 8000d1e:	2b00      	cmp	r3, #0
 8000d20:	d163      	bne.n	8000dea <LCD_SetCursor+0x2ca>
			Xpos = lcddev.width - 1 - Xpos;
 8000d22:	4b94      	ldr	r3, [pc, #592]	; (8000f74 <LCD_SetCursor+0x454>)
 8000d24:	881a      	ldrh	r2, [r3, #0]
 8000d26:	88fb      	ldrh	r3, [r7, #6]
 8000d28:	1ad3      	subs	r3, r2, r3
 8000d2a:	b29b      	uxth	r3, r3
 8000d2c:	3b01      	subs	r3, #1
 8000d2e:	80fb      	strh	r3, [r7, #6]
			LCD_WR_REG(lcddev.setxcmd);
 8000d30:	4b90      	ldr	r3, [pc, #576]	; (8000f74 <LCD_SetCursor+0x454>)
 8000d32:	895b      	ldrh	r3, [r3, #10]
 8000d34:	4618      	mov	r0, r3
 8000d36:	f7ff fe21 	bl	800097c <LCD_WR_REG>
			LCD_WR_DATA(0);
 8000d3a:	4b8f      	ldr	r3, [pc, #572]	; (8000f78 <LCD_SetCursor+0x458>)
 8000d3c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000d40:	611a      	str	r2, [r3, #16]
 8000d42:	4b8d      	ldr	r3, [pc, #564]	; (8000f78 <LCD_SetCursor+0x458>)
 8000d44:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000d48:	615a      	str	r2, [r3, #20]
 8000d4a:	4b8c      	ldr	r3, [pc, #560]	; (8000f7c <LCD_SetCursor+0x45c>)
 8000d4c:	2200      	movs	r2, #0
 8000d4e:	60da      	str	r2, [r3, #12]
 8000d50:	4b89      	ldr	r3, [pc, #548]	; (8000f78 <LCD_SetCursor+0x458>)
 8000d52:	2280      	movs	r2, #128	; 0x80
 8000d54:	615a      	str	r2, [r3, #20]
 8000d56:	4b88      	ldr	r3, [pc, #544]	; (8000f78 <LCD_SetCursor+0x458>)
 8000d58:	2280      	movs	r2, #128	; 0x80
 8000d5a:	611a      	str	r2, [r3, #16]
 8000d5c:	4b86      	ldr	r3, [pc, #536]	; (8000f78 <LCD_SetCursor+0x458>)
 8000d5e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000d62:	611a      	str	r2, [r3, #16]
			LCD_WR_DATA(0);
 8000d64:	4b84      	ldr	r3, [pc, #528]	; (8000f78 <LCD_SetCursor+0x458>)
 8000d66:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000d6a:	611a      	str	r2, [r3, #16]
 8000d6c:	4b82      	ldr	r3, [pc, #520]	; (8000f78 <LCD_SetCursor+0x458>)
 8000d6e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000d72:	615a      	str	r2, [r3, #20]
 8000d74:	4b81      	ldr	r3, [pc, #516]	; (8000f7c <LCD_SetCursor+0x45c>)
 8000d76:	2200      	movs	r2, #0
 8000d78:	60da      	str	r2, [r3, #12]
 8000d7a:	4b7f      	ldr	r3, [pc, #508]	; (8000f78 <LCD_SetCursor+0x458>)
 8000d7c:	2280      	movs	r2, #128	; 0x80
 8000d7e:	615a      	str	r2, [r3, #20]
 8000d80:	4b7d      	ldr	r3, [pc, #500]	; (8000f78 <LCD_SetCursor+0x458>)
 8000d82:	2280      	movs	r2, #128	; 0x80
 8000d84:	611a      	str	r2, [r3, #16]
 8000d86:	4b7c      	ldr	r3, [pc, #496]	; (8000f78 <LCD_SetCursor+0x458>)
 8000d88:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000d8c:	611a      	str	r2, [r3, #16]
			LCD_WR_DATA(Xpos >> 8);
 8000d8e:	4b7a      	ldr	r3, [pc, #488]	; (8000f78 <LCD_SetCursor+0x458>)
 8000d90:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000d94:	611a      	str	r2, [r3, #16]
 8000d96:	4b78      	ldr	r3, [pc, #480]	; (8000f78 <LCD_SetCursor+0x458>)
 8000d98:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000d9c:	615a      	str	r2, [r3, #20]
 8000d9e:	88fb      	ldrh	r3, [r7, #6]
 8000da0:	0a1b      	lsrs	r3, r3, #8
 8000da2:	b29a      	uxth	r2, r3
 8000da4:	4b75      	ldr	r3, [pc, #468]	; (8000f7c <LCD_SetCursor+0x45c>)
 8000da6:	60da      	str	r2, [r3, #12]
 8000da8:	4b73      	ldr	r3, [pc, #460]	; (8000f78 <LCD_SetCursor+0x458>)
 8000daa:	2280      	movs	r2, #128	; 0x80
 8000dac:	615a      	str	r2, [r3, #20]
 8000dae:	4b72      	ldr	r3, [pc, #456]	; (8000f78 <LCD_SetCursor+0x458>)
 8000db0:	2280      	movs	r2, #128	; 0x80
 8000db2:	611a      	str	r2, [r3, #16]
 8000db4:	4b70      	ldr	r3, [pc, #448]	; (8000f78 <LCD_SetCursor+0x458>)
 8000db6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000dba:	611a      	str	r2, [r3, #16]
			LCD_WR_DATA(Xpos & 0XFF);
 8000dbc:	4b6e      	ldr	r3, [pc, #440]	; (8000f78 <LCD_SetCursor+0x458>)
 8000dbe:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000dc2:	611a      	str	r2, [r3, #16]
 8000dc4:	4b6c      	ldr	r3, [pc, #432]	; (8000f78 <LCD_SetCursor+0x458>)
 8000dc6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000dca:	615a      	str	r2, [r3, #20]
 8000dcc:	88fb      	ldrh	r3, [r7, #6]
 8000dce:	4a6b      	ldr	r2, [pc, #428]	; (8000f7c <LCD_SetCursor+0x45c>)
 8000dd0:	b2db      	uxtb	r3, r3
 8000dd2:	60d3      	str	r3, [r2, #12]
 8000dd4:	4b68      	ldr	r3, [pc, #416]	; (8000f78 <LCD_SetCursor+0x458>)
 8000dd6:	2280      	movs	r2, #128	; 0x80
 8000dd8:	615a      	str	r2, [r3, #20]
 8000dda:	4b67      	ldr	r3, [pc, #412]	; (8000f78 <LCD_SetCursor+0x458>)
 8000ddc:	2280      	movs	r2, #128	; 0x80
 8000dde:	611a      	str	r2, [r3, #16]
 8000de0:	4b65      	ldr	r3, [pc, #404]	; (8000f78 <LCD_SetCursor+0x458>)
 8000de2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000de6:	611a      	str	r2, [r3, #16]
 8000de8:	e061      	b.n	8000eae <LCD_SetCursor+0x38e>
			LCD_WR_REG(lcddev.setxcmd);
 8000dea:	4b62      	ldr	r3, [pc, #392]	; (8000f74 <LCD_SetCursor+0x454>)
 8000dec:	895b      	ldrh	r3, [r3, #10]
 8000dee:	4618      	mov	r0, r3
 8000df0:	f7ff fdc4 	bl	800097c <LCD_WR_REG>
			LCD_WR_DATA(Xpos >> 8);
 8000df4:	4b60      	ldr	r3, [pc, #384]	; (8000f78 <LCD_SetCursor+0x458>)
 8000df6:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000dfa:	611a      	str	r2, [r3, #16]
 8000dfc:	4b5e      	ldr	r3, [pc, #376]	; (8000f78 <LCD_SetCursor+0x458>)
 8000dfe:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000e02:	615a      	str	r2, [r3, #20]
 8000e04:	88fb      	ldrh	r3, [r7, #6]
 8000e06:	0a1b      	lsrs	r3, r3, #8
 8000e08:	b29a      	uxth	r2, r3
 8000e0a:	4b5c      	ldr	r3, [pc, #368]	; (8000f7c <LCD_SetCursor+0x45c>)
 8000e0c:	60da      	str	r2, [r3, #12]
 8000e0e:	4b5a      	ldr	r3, [pc, #360]	; (8000f78 <LCD_SetCursor+0x458>)
 8000e10:	2280      	movs	r2, #128	; 0x80
 8000e12:	615a      	str	r2, [r3, #20]
 8000e14:	4b58      	ldr	r3, [pc, #352]	; (8000f78 <LCD_SetCursor+0x458>)
 8000e16:	2280      	movs	r2, #128	; 0x80
 8000e18:	611a      	str	r2, [r3, #16]
 8000e1a:	4b57      	ldr	r3, [pc, #348]	; (8000f78 <LCD_SetCursor+0x458>)
 8000e1c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000e20:	611a      	str	r2, [r3, #16]
			LCD_WR_DATA(Xpos & 0XFF);
 8000e22:	4b55      	ldr	r3, [pc, #340]	; (8000f78 <LCD_SetCursor+0x458>)
 8000e24:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000e28:	611a      	str	r2, [r3, #16]
 8000e2a:	4b53      	ldr	r3, [pc, #332]	; (8000f78 <LCD_SetCursor+0x458>)
 8000e2c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000e30:	615a      	str	r2, [r3, #20]
 8000e32:	88fb      	ldrh	r3, [r7, #6]
 8000e34:	4a51      	ldr	r2, [pc, #324]	; (8000f7c <LCD_SetCursor+0x45c>)
 8000e36:	b2db      	uxtb	r3, r3
 8000e38:	60d3      	str	r3, [r2, #12]
 8000e3a:	4b4f      	ldr	r3, [pc, #316]	; (8000f78 <LCD_SetCursor+0x458>)
 8000e3c:	2280      	movs	r2, #128	; 0x80
 8000e3e:	615a      	str	r2, [r3, #20]
 8000e40:	4b4d      	ldr	r3, [pc, #308]	; (8000f78 <LCD_SetCursor+0x458>)
 8000e42:	2280      	movs	r2, #128	; 0x80
 8000e44:	611a      	str	r2, [r3, #16]
 8000e46:	4b4c      	ldr	r3, [pc, #304]	; (8000f78 <LCD_SetCursor+0x458>)
 8000e48:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000e4c:	611a      	str	r2, [r3, #16]
			LCD_WR_DATA((lcddev.width - 1) >> 8);
 8000e4e:	4b4a      	ldr	r3, [pc, #296]	; (8000f78 <LCD_SetCursor+0x458>)
 8000e50:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000e54:	611a      	str	r2, [r3, #16]
 8000e56:	4b48      	ldr	r3, [pc, #288]	; (8000f78 <LCD_SetCursor+0x458>)
 8000e58:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000e5c:	615a      	str	r2, [r3, #20]
 8000e5e:	4b45      	ldr	r3, [pc, #276]	; (8000f74 <LCD_SetCursor+0x454>)
 8000e60:	881b      	ldrh	r3, [r3, #0]
 8000e62:	3b01      	subs	r3, #1
 8000e64:	121a      	asrs	r2, r3, #8
 8000e66:	4b45      	ldr	r3, [pc, #276]	; (8000f7c <LCD_SetCursor+0x45c>)
 8000e68:	60da      	str	r2, [r3, #12]
 8000e6a:	4b43      	ldr	r3, [pc, #268]	; (8000f78 <LCD_SetCursor+0x458>)
 8000e6c:	2280      	movs	r2, #128	; 0x80
 8000e6e:	615a      	str	r2, [r3, #20]
 8000e70:	4b41      	ldr	r3, [pc, #260]	; (8000f78 <LCD_SetCursor+0x458>)
 8000e72:	2280      	movs	r2, #128	; 0x80
 8000e74:	611a      	str	r2, [r3, #16]
 8000e76:	4b40      	ldr	r3, [pc, #256]	; (8000f78 <LCD_SetCursor+0x458>)
 8000e78:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000e7c:	611a      	str	r2, [r3, #16]
			LCD_WR_DATA((lcddev.width - 1) & 0XFF);
 8000e7e:	4b3e      	ldr	r3, [pc, #248]	; (8000f78 <LCD_SetCursor+0x458>)
 8000e80:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000e84:	611a      	str	r2, [r3, #16]
 8000e86:	4b3c      	ldr	r3, [pc, #240]	; (8000f78 <LCD_SetCursor+0x458>)
 8000e88:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000e8c:	615a      	str	r2, [r3, #20]
 8000e8e:	4b39      	ldr	r3, [pc, #228]	; (8000f74 <LCD_SetCursor+0x454>)
 8000e90:	881b      	ldrh	r3, [r3, #0]
 8000e92:	3b01      	subs	r3, #1
 8000e94:	4a39      	ldr	r2, [pc, #228]	; (8000f7c <LCD_SetCursor+0x45c>)
 8000e96:	b2db      	uxtb	r3, r3
 8000e98:	60d3      	str	r3, [r2, #12]
 8000e9a:	4b37      	ldr	r3, [pc, #220]	; (8000f78 <LCD_SetCursor+0x458>)
 8000e9c:	2280      	movs	r2, #128	; 0x80
 8000e9e:	615a      	str	r2, [r3, #20]
 8000ea0:	4b35      	ldr	r3, [pc, #212]	; (8000f78 <LCD_SetCursor+0x458>)
 8000ea2:	2280      	movs	r2, #128	; 0x80
 8000ea4:	611a      	str	r2, [r3, #16]
 8000ea6:	4b34      	ldr	r3, [pc, #208]	; (8000f78 <LCD_SetCursor+0x458>)
 8000ea8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000eac:	611a      	str	r2, [r3, #16]
		LCD_WR_REG(lcddev.setycmd);
 8000eae:	4b31      	ldr	r3, [pc, #196]	; (8000f74 <LCD_SetCursor+0x454>)
 8000eb0:	899b      	ldrh	r3, [r3, #12]
 8000eb2:	4618      	mov	r0, r3
 8000eb4:	f7ff fd62 	bl	800097c <LCD_WR_REG>
		LCD_WR_DATA(Ypos >> 8);
 8000eb8:	4b2f      	ldr	r3, [pc, #188]	; (8000f78 <LCD_SetCursor+0x458>)
 8000eba:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000ebe:	611a      	str	r2, [r3, #16]
 8000ec0:	4b2d      	ldr	r3, [pc, #180]	; (8000f78 <LCD_SetCursor+0x458>)
 8000ec2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000ec6:	615a      	str	r2, [r3, #20]
 8000ec8:	88bb      	ldrh	r3, [r7, #4]
 8000eca:	0a1b      	lsrs	r3, r3, #8
 8000ecc:	b29a      	uxth	r2, r3
 8000ece:	4b2b      	ldr	r3, [pc, #172]	; (8000f7c <LCD_SetCursor+0x45c>)
 8000ed0:	60da      	str	r2, [r3, #12]
 8000ed2:	4b29      	ldr	r3, [pc, #164]	; (8000f78 <LCD_SetCursor+0x458>)
 8000ed4:	2280      	movs	r2, #128	; 0x80
 8000ed6:	615a      	str	r2, [r3, #20]
 8000ed8:	4b27      	ldr	r3, [pc, #156]	; (8000f78 <LCD_SetCursor+0x458>)
 8000eda:	2280      	movs	r2, #128	; 0x80
 8000edc:	611a      	str	r2, [r3, #16]
 8000ede:	4b26      	ldr	r3, [pc, #152]	; (8000f78 <LCD_SetCursor+0x458>)
 8000ee0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000ee4:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(Ypos & 0XFF);
 8000ee6:	4b24      	ldr	r3, [pc, #144]	; (8000f78 <LCD_SetCursor+0x458>)
 8000ee8:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000eec:	611a      	str	r2, [r3, #16]
 8000eee:	4b22      	ldr	r3, [pc, #136]	; (8000f78 <LCD_SetCursor+0x458>)
 8000ef0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000ef4:	615a      	str	r2, [r3, #20]
 8000ef6:	88bb      	ldrh	r3, [r7, #4]
 8000ef8:	4a20      	ldr	r2, [pc, #128]	; (8000f7c <LCD_SetCursor+0x45c>)
 8000efa:	b2db      	uxtb	r3, r3
 8000efc:	60d3      	str	r3, [r2, #12]
 8000efe:	4b1e      	ldr	r3, [pc, #120]	; (8000f78 <LCD_SetCursor+0x458>)
 8000f00:	2280      	movs	r2, #128	; 0x80
 8000f02:	615a      	str	r2, [r3, #20]
 8000f04:	4b1c      	ldr	r3, [pc, #112]	; (8000f78 <LCD_SetCursor+0x458>)
 8000f06:	2280      	movs	r2, #128	; 0x80
 8000f08:	611a      	str	r2, [r3, #16]
 8000f0a:	4b1b      	ldr	r3, [pc, #108]	; (8000f78 <LCD_SetCursor+0x458>)
 8000f0c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000f10:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA((lcddev.height - 1) >> 8);
 8000f12:	4b19      	ldr	r3, [pc, #100]	; (8000f78 <LCD_SetCursor+0x458>)
 8000f14:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000f18:	611a      	str	r2, [r3, #16]
 8000f1a:	4b17      	ldr	r3, [pc, #92]	; (8000f78 <LCD_SetCursor+0x458>)
 8000f1c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000f20:	615a      	str	r2, [r3, #20]
 8000f22:	4b14      	ldr	r3, [pc, #80]	; (8000f74 <LCD_SetCursor+0x454>)
 8000f24:	885b      	ldrh	r3, [r3, #2]
 8000f26:	3b01      	subs	r3, #1
 8000f28:	121a      	asrs	r2, r3, #8
 8000f2a:	4b14      	ldr	r3, [pc, #80]	; (8000f7c <LCD_SetCursor+0x45c>)
 8000f2c:	60da      	str	r2, [r3, #12]
 8000f2e:	4b12      	ldr	r3, [pc, #72]	; (8000f78 <LCD_SetCursor+0x458>)
 8000f30:	2280      	movs	r2, #128	; 0x80
 8000f32:	615a      	str	r2, [r3, #20]
 8000f34:	4b10      	ldr	r3, [pc, #64]	; (8000f78 <LCD_SetCursor+0x458>)
 8000f36:	2280      	movs	r2, #128	; 0x80
 8000f38:	611a      	str	r2, [r3, #16]
 8000f3a:	4b0f      	ldr	r3, [pc, #60]	; (8000f78 <LCD_SetCursor+0x458>)
 8000f3c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000f40:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA((lcddev.height - 1) & 0XFF);
 8000f42:	4b0d      	ldr	r3, [pc, #52]	; (8000f78 <LCD_SetCursor+0x458>)
 8000f44:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000f48:	611a      	str	r2, [r3, #16]
 8000f4a:	4b0b      	ldr	r3, [pc, #44]	; (8000f78 <LCD_SetCursor+0x458>)
 8000f4c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000f50:	615a      	str	r2, [r3, #20]
 8000f52:	4b08      	ldr	r3, [pc, #32]	; (8000f74 <LCD_SetCursor+0x454>)
 8000f54:	885b      	ldrh	r3, [r3, #2]
 8000f56:	3b01      	subs	r3, #1
 8000f58:	4a08      	ldr	r2, [pc, #32]	; (8000f7c <LCD_SetCursor+0x45c>)
 8000f5a:	b2db      	uxtb	r3, r3
 8000f5c:	60d3      	str	r3, [r2, #12]
 8000f5e:	4b06      	ldr	r3, [pc, #24]	; (8000f78 <LCD_SetCursor+0x458>)
 8000f60:	2280      	movs	r2, #128	; 0x80
 8000f62:	615a      	str	r2, [r3, #20]
 8000f64:	4b04      	ldr	r3, [pc, #16]	; (8000f78 <LCD_SetCursor+0x458>)
 8000f66:	2280      	movs	r2, #128	; 0x80
 8000f68:	611a      	str	r2, [r3, #16]
 8000f6a:	4b03      	ldr	r3, [pc, #12]	; (8000f78 <LCD_SetCursor+0x458>)
 8000f6c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000f70:	611a      	str	r2, [r3, #16]
}
 8000f72:	e097      	b.n	80010a4 <LCD_SetCursor+0x584>
 8000f74:	20000028 	.word	0x20000028
 8000f78:	40011000 	.word	0x40011000
 8000f7c:	40010c00 	.word	0x40010c00
	} else if (lcddev.id == 0X5510) {
 8000f80:	4b4a      	ldr	r3, [pc, #296]	; (80010ac <LCD_SetCursor+0x58c>)
 8000f82:	889b      	ldrh	r3, [r3, #4]
 8000f84:	f245 5210 	movw	r2, #21776	; 0x5510
 8000f88:	4293      	cmp	r3, r2
 8000f8a:	d172      	bne.n	8001072 <LCD_SetCursor+0x552>
		LCD_WR_REG(lcddev.setxcmd);
 8000f8c:	4b47      	ldr	r3, [pc, #284]	; (80010ac <LCD_SetCursor+0x58c>)
 8000f8e:	895b      	ldrh	r3, [r3, #10]
 8000f90:	4618      	mov	r0, r3
 8000f92:	f7ff fcf3 	bl	800097c <LCD_WR_REG>
		LCD_WR_DATA(Xpos >> 8);
 8000f96:	4b46      	ldr	r3, [pc, #280]	; (80010b0 <LCD_SetCursor+0x590>)
 8000f98:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000f9c:	611a      	str	r2, [r3, #16]
 8000f9e:	4b44      	ldr	r3, [pc, #272]	; (80010b0 <LCD_SetCursor+0x590>)
 8000fa0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000fa4:	615a      	str	r2, [r3, #20]
 8000fa6:	88fb      	ldrh	r3, [r7, #6]
 8000fa8:	0a1b      	lsrs	r3, r3, #8
 8000faa:	b29a      	uxth	r2, r3
 8000fac:	4b41      	ldr	r3, [pc, #260]	; (80010b4 <LCD_SetCursor+0x594>)
 8000fae:	60da      	str	r2, [r3, #12]
 8000fb0:	4b3f      	ldr	r3, [pc, #252]	; (80010b0 <LCD_SetCursor+0x590>)
 8000fb2:	2280      	movs	r2, #128	; 0x80
 8000fb4:	615a      	str	r2, [r3, #20]
 8000fb6:	4b3e      	ldr	r3, [pc, #248]	; (80010b0 <LCD_SetCursor+0x590>)
 8000fb8:	2280      	movs	r2, #128	; 0x80
 8000fba:	611a      	str	r2, [r3, #16]
 8000fbc:	4b3c      	ldr	r3, [pc, #240]	; (80010b0 <LCD_SetCursor+0x590>)
 8000fbe:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000fc2:	611a      	str	r2, [r3, #16]
		LCD_WR_REG(lcddev.setxcmd + 1);
 8000fc4:	4b39      	ldr	r3, [pc, #228]	; (80010ac <LCD_SetCursor+0x58c>)
 8000fc6:	895b      	ldrh	r3, [r3, #10]
 8000fc8:	3301      	adds	r3, #1
 8000fca:	b29b      	uxth	r3, r3
 8000fcc:	4618      	mov	r0, r3
 8000fce:	f7ff fcd5 	bl	800097c <LCD_WR_REG>
		LCD_WR_DATA(Xpos & 0XFF);
 8000fd2:	4b37      	ldr	r3, [pc, #220]	; (80010b0 <LCD_SetCursor+0x590>)
 8000fd4:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000fd8:	611a      	str	r2, [r3, #16]
 8000fda:	4b35      	ldr	r3, [pc, #212]	; (80010b0 <LCD_SetCursor+0x590>)
 8000fdc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000fe0:	615a      	str	r2, [r3, #20]
 8000fe2:	88fb      	ldrh	r3, [r7, #6]
 8000fe4:	4a33      	ldr	r2, [pc, #204]	; (80010b4 <LCD_SetCursor+0x594>)
 8000fe6:	b2db      	uxtb	r3, r3
 8000fe8:	60d3      	str	r3, [r2, #12]
 8000fea:	4b31      	ldr	r3, [pc, #196]	; (80010b0 <LCD_SetCursor+0x590>)
 8000fec:	2280      	movs	r2, #128	; 0x80
 8000fee:	615a      	str	r2, [r3, #20]
 8000ff0:	4b2f      	ldr	r3, [pc, #188]	; (80010b0 <LCD_SetCursor+0x590>)
 8000ff2:	2280      	movs	r2, #128	; 0x80
 8000ff4:	611a      	str	r2, [r3, #16]
 8000ff6:	4b2e      	ldr	r3, [pc, #184]	; (80010b0 <LCD_SetCursor+0x590>)
 8000ff8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000ffc:	611a      	str	r2, [r3, #16]
		LCD_WR_REG(lcddev.setycmd);
 8000ffe:	4b2b      	ldr	r3, [pc, #172]	; (80010ac <LCD_SetCursor+0x58c>)
 8001000:	899b      	ldrh	r3, [r3, #12]
 8001002:	4618      	mov	r0, r3
 8001004:	f7ff fcba 	bl	800097c <LCD_WR_REG>
		LCD_WR_DATA(Ypos >> 8);
 8001008:	4b29      	ldr	r3, [pc, #164]	; (80010b0 <LCD_SetCursor+0x590>)
 800100a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800100e:	611a      	str	r2, [r3, #16]
 8001010:	4b27      	ldr	r3, [pc, #156]	; (80010b0 <LCD_SetCursor+0x590>)
 8001012:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001016:	615a      	str	r2, [r3, #20]
 8001018:	88bb      	ldrh	r3, [r7, #4]
 800101a:	0a1b      	lsrs	r3, r3, #8
 800101c:	b29a      	uxth	r2, r3
 800101e:	4b25      	ldr	r3, [pc, #148]	; (80010b4 <LCD_SetCursor+0x594>)
 8001020:	60da      	str	r2, [r3, #12]
 8001022:	4b23      	ldr	r3, [pc, #140]	; (80010b0 <LCD_SetCursor+0x590>)
 8001024:	2280      	movs	r2, #128	; 0x80
 8001026:	615a      	str	r2, [r3, #20]
 8001028:	4b21      	ldr	r3, [pc, #132]	; (80010b0 <LCD_SetCursor+0x590>)
 800102a:	2280      	movs	r2, #128	; 0x80
 800102c:	611a      	str	r2, [r3, #16]
 800102e:	4b20      	ldr	r3, [pc, #128]	; (80010b0 <LCD_SetCursor+0x590>)
 8001030:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001034:	611a      	str	r2, [r3, #16]
		LCD_WR_REG(lcddev.setycmd + 1);
 8001036:	4b1d      	ldr	r3, [pc, #116]	; (80010ac <LCD_SetCursor+0x58c>)
 8001038:	899b      	ldrh	r3, [r3, #12]
 800103a:	3301      	adds	r3, #1
 800103c:	b29b      	uxth	r3, r3
 800103e:	4618      	mov	r0, r3
 8001040:	f7ff fc9c 	bl	800097c <LCD_WR_REG>
		LCD_WR_DATA(Ypos & 0XFF);
 8001044:	4b1a      	ldr	r3, [pc, #104]	; (80010b0 <LCD_SetCursor+0x590>)
 8001046:	f44f 7280 	mov.w	r2, #256	; 0x100
 800104a:	611a      	str	r2, [r3, #16]
 800104c:	4b18      	ldr	r3, [pc, #96]	; (80010b0 <LCD_SetCursor+0x590>)
 800104e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001052:	615a      	str	r2, [r3, #20]
 8001054:	88bb      	ldrh	r3, [r7, #4]
 8001056:	4a17      	ldr	r2, [pc, #92]	; (80010b4 <LCD_SetCursor+0x594>)
 8001058:	b2db      	uxtb	r3, r3
 800105a:	60d3      	str	r3, [r2, #12]
 800105c:	4b14      	ldr	r3, [pc, #80]	; (80010b0 <LCD_SetCursor+0x590>)
 800105e:	2280      	movs	r2, #128	; 0x80
 8001060:	615a      	str	r2, [r3, #20]
 8001062:	4b13      	ldr	r3, [pc, #76]	; (80010b0 <LCD_SetCursor+0x590>)
 8001064:	2280      	movs	r2, #128	; 0x80
 8001066:	611a      	str	r2, [r3, #16]
 8001068:	4b11      	ldr	r3, [pc, #68]	; (80010b0 <LCD_SetCursor+0x590>)
 800106a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800106e:	611a      	str	r2, [r3, #16]
}
 8001070:	e018      	b.n	80010a4 <LCD_SetCursor+0x584>
		if (lcddev.dir == 1)
 8001072:	4b0e      	ldr	r3, [pc, #56]	; (80010ac <LCD_SetCursor+0x58c>)
 8001074:	799b      	ldrb	r3, [r3, #6]
 8001076:	2b01      	cmp	r3, #1
 8001078:	d106      	bne.n	8001088 <LCD_SetCursor+0x568>
			Xpos = lcddev.width - 1 - Xpos;	//横屏其实就是调转x,y坐标
 800107a:	4b0c      	ldr	r3, [pc, #48]	; (80010ac <LCD_SetCursor+0x58c>)
 800107c:	881a      	ldrh	r2, [r3, #0]
 800107e:	88fb      	ldrh	r3, [r7, #6]
 8001080:	1ad3      	subs	r3, r2, r3
 8001082:	b29b      	uxth	r3, r3
 8001084:	3b01      	subs	r3, #1
 8001086:	80fb      	strh	r3, [r7, #6]
		LCD_WriteReg(lcddev.setxcmd, Xpos);
 8001088:	4b08      	ldr	r3, [pc, #32]	; (80010ac <LCD_SetCursor+0x58c>)
 800108a:	895b      	ldrh	r3, [r3, #10]
 800108c:	88fa      	ldrh	r2, [r7, #6]
 800108e:	4611      	mov	r1, r2
 8001090:	4618      	mov	r0, r3
 8001092:	f7ff fcff 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(lcddev.setycmd, Ypos);
 8001096:	4b05      	ldr	r3, [pc, #20]	; (80010ac <LCD_SetCursor+0x58c>)
 8001098:	899b      	ldrh	r3, [r3, #12]
 800109a:	88ba      	ldrh	r2, [r7, #4]
 800109c:	4611      	mov	r1, r2
 800109e:	4618      	mov	r0, r3
 80010a0:	f7ff fcf8 	bl	8000a94 <LCD_WriteReg>
}
 80010a4:	bf00      	nop
 80010a6:	3708      	adds	r7, #8
 80010a8:	46bd      	mov	sp, r7
 80010aa:	bd80      	pop	{r7, pc}
 80010ac:	20000028 	.word	0x20000028
 80010b0:	40011000 	.word	0x40011000
 80010b4:	40010c00 	.word	0x40010c00

080010b8 <LCD_Scan_Dir>:
//设置LCD的自动扫描方向
//注意:其他函数可能会受到此函数设置的影响(尤其是9341/6804这两个奇葩),
//所以,一般设置为L2R_U2D即可,如果设置为其他扫描方式,可能导致显示不正常.
//dir:0~7,代表8个方向(具体定义见lcd.h)
//9320/9325/9328/4531/4535/1505/b505/5408/9341/5310/5510/1963等IC已经实际测试	   	   
void LCD_Scan_Dir(uint8_t dir) {
 80010b8:	b580      	push	{r7, lr}
 80010ba:	b084      	sub	sp, #16
 80010bc:	af00      	add	r7, sp, #0
 80010be:	4603      	mov	r3, r0
 80010c0:	71fb      	strb	r3, [r7, #7]
	uint16_t regval = 0;
 80010c2:	2300      	movs	r3, #0
 80010c4:	81fb      	strh	r3, [r7, #14]
	uint16_t dirreg = 0;
 80010c6:	2300      	movs	r3, #0
 80010c8:	81bb      	strh	r3, [r7, #12]
	uint16_t temp;
	if ((lcddev.dir == 1 && lcddev.id != 0X6804 && lcddev.id != 0X1963)
 80010ca:	4b78      	ldr	r3, [pc, #480]	; (80012ac <LCD_Scan_Dir+0x1f4>)
 80010cc:	799b      	ldrb	r3, [r3, #6]
 80010ce:	2b01      	cmp	r3, #1
 80010d0:	d10b      	bne.n	80010ea <LCD_Scan_Dir+0x32>
 80010d2:	4b76      	ldr	r3, [pc, #472]	; (80012ac <LCD_Scan_Dir+0x1f4>)
 80010d4:	889b      	ldrh	r3, [r3, #4]
 80010d6:	f646 0204 	movw	r2, #26628	; 0x6804
 80010da:	4293      	cmp	r3, r2
 80010dc:	d005      	beq.n	80010ea <LCD_Scan_Dir+0x32>
 80010de:	4b73      	ldr	r3, [pc, #460]	; (80012ac <LCD_Scan_Dir+0x1f4>)
 80010e0:	889b      	ldrh	r3, [r3, #4]
 80010e2:	f641 1263 	movw	r2, #6499	; 0x1963
 80010e6:	4293      	cmp	r3, r2
 80010e8:	d109      	bne.n	80010fe <LCD_Scan_Dir+0x46>
			|| (lcddev.dir == 0 && lcddev.id == 0X1963))//横屏时，对6804和1963不改变扫描方向！竖屏时1963改变方向
 80010ea:	4b70      	ldr	r3, [pc, #448]	; (80012ac <LCD_Scan_Dir+0x1f4>)
 80010ec:	799b      	ldrb	r3, [r3, #6]
 80010ee:	2b00      	cmp	r3, #0
 80010f0:	d134      	bne.n	800115c <LCD_Scan_Dir+0xa4>
 80010f2:	4b6e      	ldr	r3, [pc, #440]	; (80012ac <LCD_Scan_Dir+0x1f4>)
 80010f4:	889b      	ldrh	r3, [r3, #4]
 80010f6:	f641 1263 	movw	r2, #6499	; 0x1963
 80010fa:	4293      	cmp	r3, r2
 80010fc:	d12e      	bne.n	800115c <LCD_Scan_Dir+0xa4>
			{
		switch (dir)	//方向转换
 80010fe:	79fb      	ldrb	r3, [r7, #7]
 8001100:	2b07      	cmp	r3, #7
 8001102:	d82b      	bhi.n	800115c <LCD_Scan_Dir+0xa4>
 8001104:	a201      	add	r2, pc, #4	; (adr r2, 800110c <LCD_Scan_Dir+0x54>)
 8001106:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800110a:	bf00      	nop
 800110c:	0800112d 	.word	0x0800112d
 8001110:	08001133 	.word	0x08001133
 8001114:	08001139 	.word	0x08001139
 8001118:	0800113f 	.word	0x0800113f
 800111c:	08001145 	.word	0x08001145
 8001120:	0800114b 	.word	0x0800114b
 8001124:	08001151 	.word	0x08001151
 8001128:	08001157 	.word	0x08001157
		{
		case 0:
			dir = 6;
 800112c:	2306      	movs	r3, #6
 800112e:	71fb      	strb	r3, [r7, #7]
			break;
 8001130:	e014      	b.n	800115c <LCD_Scan_Dir+0xa4>
		case 1:
			dir = 7;
 8001132:	2307      	movs	r3, #7
 8001134:	71fb      	strb	r3, [r7, #7]
			break;
 8001136:	e011      	b.n	800115c <LCD_Scan_Dir+0xa4>
		case 2:
			dir = 4;
 8001138:	2304      	movs	r3, #4
 800113a:	71fb      	strb	r3, [r7, #7]
			break;
 800113c:	e00e      	b.n	800115c <LCD_Scan_Dir+0xa4>
		case 3:
			dir = 5;
 800113e:	2305      	movs	r3, #5
 8001140:	71fb      	strb	r3, [r7, #7]
			break;
 8001142:	e00b      	b.n	800115c <LCD_Scan_Dir+0xa4>
		case 4:
			dir = 1;
 8001144:	2301      	movs	r3, #1
 8001146:	71fb      	strb	r3, [r7, #7]
			break;
 8001148:	e008      	b.n	800115c <LCD_Scan_Dir+0xa4>
		case 5:
			dir = 0;
 800114a:	2300      	movs	r3, #0
 800114c:	71fb      	strb	r3, [r7, #7]
			break;
 800114e:	e005      	b.n	800115c <LCD_Scan_Dir+0xa4>
		case 6:
			dir = 3;
 8001150:	2303      	movs	r3, #3
 8001152:	71fb      	strb	r3, [r7, #7]
			break;
 8001154:	e002      	b.n	800115c <LCD_Scan_Dir+0xa4>
		case 7:
			dir = 2;
 8001156:	2302      	movs	r3, #2
 8001158:	71fb      	strb	r3, [r7, #7]
			break;
 800115a:	bf00      	nop
		}
	}
	if (lcddev.id == 0x9341 || lcddev.id == 0X6804 || lcddev.id == 0X5310
 800115c:	4b53      	ldr	r3, [pc, #332]	; (80012ac <LCD_Scan_Dir+0x1f4>)
 800115e:	889b      	ldrh	r3, [r3, #4]
 8001160:	f249 3241 	movw	r2, #37697	; 0x9341
 8001164:	4293      	cmp	r3, r2
 8001166:	d018      	beq.n	800119a <LCD_Scan_Dir+0xe2>
 8001168:	4b50      	ldr	r3, [pc, #320]	; (80012ac <LCD_Scan_Dir+0x1f4>)
 800116a:	889b      	ldrh	r3, [r3, #4]
 800116c:	f646 0204 	movw	r2, #26628	; 0x6804
 8001170:	4293      	cmp	r3, r2
 8001172:	d012      	beq.n	800119a <LCD_Scan_Dir+0xe2>
 8001174:	4b4d      	ldr	r3, [pc, #308]	; (80012ac <LCD_Scan_Dir+0x1f4>)
 8001176:	889b      	ldrh	r3, [r3, #4]
 8001178:	f245 3210 	movw	r2, #21264	; 0x5310
 800117c:	4293      	cmp	r3, r2
 800117e:	d00c      	beq.n	800119a <LCD_Scan_Dir+0xe2>
			|| lcddev.id == 0X5510 || lcddev.id == 0X1963)//9341/6804/5310/5510/1963,特殊处理
 8001180:	4b4a      	ldr	r3, [pc, #296]	; (80012ac <LCD_Scan_Dir+0x1f4>)
 8001182:	889b      	ldrh	r3, [r3, #4]
 8001184:	f245 5210 	movw	r2, #21776	; 0x5510
 8001188:	4293      	cmp	r3, r2
 800118a:	d006      	beq.n	800119a <LCD_Scan_Dir+0xe2>
 800118c:	4b47      	ldr	r3, [pc, #284]	; (80012ac <LCD_Scan_Dir+0x1f4>)
 800118e:	889b      	ldrh	r3, [r3, #4]
 8001190:	f641 1263 	movw	r2, #6499	; 0x1963
 8001194:	4293      	cmp	r3, r2
 8001196:	f040 8250 	bne.w	800163a <LCD_Scan_Dir+0x582>
					{
		switch (dir) {
 800119a:	79fb      	ldrb	r3, [r7, #7]
 800119c:	2b07      	cmp	r3, #7
 800119e:	d836      	bhi.n	800120e <LCD_Scan_Dir+0x156>
 80011a0:	a201      	add	r2, pc, #4	; (adr r2, 80011a8 <LCD_Scan_Dir+0xf0>)
 80011a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80011a6:	bf00      	nop
 80011a8:	0800120f 	.word	0x0800120f
 80011ac:	080011c9 	.word	0x080011c9
 80011b0:	080011d3 	.word	0x080011d3
 80011b4:	080011dd 	.word	0x080011dd
 80011b8:	080011e7 	.word	0x080011e7
 80011bc:	080011f1 	.word	0x080011f1
 80011c0:	080011fb 	.word	0x080011fb
 80011c4:	08001205 	.word	0x08001205
		case L2R_U2D:	//从左到右,从上到下
			regval |= (0 << 7) | (0 << 6) | (0 << 5);
			break;
		case L2R_D2U:	//从左到右,从下到上
			regval |= (1 << 7) | (0 << 6) | (0 << 5);
 80011c8:	89fb      	ldrh	r3, [r7, #14]
 80011ca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80011ce:	81fb      	strh	r3, [r7, #14]
			break;
 80011d0:	e01d      	b.n	800120e <LCD_Scan_Dir+0x156>
		case R2L_U2D:	//从右到左,从上到下
			regval |= (0 << 7) | (1 << 6) | (0 << 5);
 80011d2:	89fb      	ldrh	r3, [r7, #14]
 80011d4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80011d8:	81fb      	strh	r3, [r7, #14]
			break;
 80011da:	e018      	b.n	800120e <LCD_Scan_Dir+0x156>
		case R2L_D2U:	//从右到左,从下到上
			regval |= (1 << 7) | (1 << 6) | (0 << 5);
 80011dc:	89fb      	ldrh	r3, [r7, #14]
 80011de:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80011e2:	81fb      	strh	r3, [r7, #14]
			break;
 80011e4:	e013      	b.n	800120e <LCD_Scan_Dir+0x156>
		case U2D_L2R:	//从上到下,从左到右
			regval |= (0 << 7) | (0 << 6) | (1 << 5);
 80011e6:	89fb      	ldrh	r3, [r7, #14]
 80011e8:	f043 0320 	orr.w	r3, r3, #32
 80011ec:	81fb      	strh	r3, [r7, #14]
			break;
 80011ee:	e00e      	b.n	800120e <LCD_Scan_Dir+0x156>
		case U2D_R2L:	//从上到下,从右到左
			regval |= (0 << 7) | (1 << 6) | (1 << 5);
 80011f0:	89fb      	ldrh	r3, [r7, #14]
 80011f2:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80011f6:	81fb      	strh	r3, [r7, #14]
			break;
 80011f8:	e009      	b.n	800120e <LCD_Scan_Dir+0x156>
		case D2U_L2R:	//从下到上,从左到右
			regval |= (1 << 7) | (0 << 6) | (1 << 5);
 80011fa:	89fb      	ldrh	r3, [r7, #14]
 80011fc:	f043 03a0 	orr.w	r3, r3, #160	; 0xa0
 8001200:	81fb      	strh	r3, [r7, #14]
			break;
 8001202:	e004      	b.n	800120e <LCD_Scan_Dir+0x156>
		case D2U_R2L:	//从下到上,从右到左
			regval |= (1 << 7) | (1 << 6) | (1 << 5);
 8001204:	89fb      	ldrh	r3, [r7, #14]
 8001206:	f043 03e0 	orr.w	r3, r3, #224	; 0xe0
 800120a:	81fb      	strh	r3, [r7, #14]
			break;
 800120c:	bf00      	nop
		}
		if (lcddev.id == 0X5510)
 800120e:	4b27      	ldr	r3, [pc, #156]	; (80012ac <LCD_Scan_Dir+0x1f4>)
 8001210:	889b      	ldrh	r3, [r3, #4]
 8001212:	f245 5210 	movw	r2, #21776	; 0x5510
 8001216:	4293      	cmp	r3, r2
 8001218:	d103      	bne.n	8001222 <LCD_Scan_Dir+0x16a>
			dirreg = 0X3600;
 800121a:	f44f 5358 	mov.w	r3, #13824	; 0x3600
 800121e:	81bb      	strh	r3, [r7, #12]
 8001220:	e001      	b.n	8001226 <LCD_Scan_Dir+0x16e>
		else
			dirreg = 0X36;
 8001222:	2336      	movs	r3, #54	; 0x36
 8001224:	81bb      	strh	r3, [r7, #12]
		if ((lcddev.id != 0X5310) && (lcddev.id != 0X5510) && (lcddev.id != 0X1963))
 8001226:	4b21      	ldr	r3, [pc, #132]	; (80012ac <LCD_Scan_Dir+0x1f4>)
 8001228:	889b      	ldrh	r3, [r3, #4]
 800122a:	f245 3210 	movw	r2, #21264	; 0x5310
 800122e:	4293      	cmp	r3, r2
 8001230:	d00f      	beq.n	8001252 <LCD_Scan_Dir+0x19a>
 8001232:	4b1e      	ldr	r3, [pc, #120]	; (80012ac <LCD_Scan_Dir+0x1f4>)
 8001234:	889b      	ldrh	r3, [r3, #4]
 8001236:	f245 5210 	movw	r2, #21776	; 0x5510
 800123a:	4293      	cmp	r3, r2
 800123c:	d009      	beq.n	8001252 <LCD_Scan_Dir+0x19a>
 800123e:	4b1b      	ldr	r3, [pc, #108]	; (80012ac <LCD_Scan_Dir+0x1f4>)
 8001240:	889b      	ldrh	r3, [r3, #4]
 8001242:	f641 1263 	movw	r2, #6499	; 0x1963
 8001246:	4293      	cmp	r3, r2
 8001248:	d003      	beq.n	8001252 <LCD_Scan_Dir+0x19a>
			regval |= 0X08;	//5310/5510/1963不需要BGR
 800124a:	89fb      	ldrh	r3, [r7, #14]
 800124c:	f043 0308 	orr.w	r3, r3, #8
 8001250:	81fb      	strh	r3, [r7, #14]
		if (lcddev.id == 0X6804)
 8001252:	4b16      	ldr	r3, [pc, #88]	; (80012ac <LCD_Scan_Dir+0x1f4>)
 8001254:	889b      	ldrh	r3, [r3, #4]
 8001256:	f646 0204 	movw	r2, #26628	; 0x6804
 800125a:	4293      	cmp	r3, r2
 800125c:	d103      	bne.n	8001266 <LCD_Scan_Dir+0x1ae>
			regval |= 0x02;	//6804的BIT6和9341的反了
 800125e:	89fb      	ldrh	r3, [r7, #14]
 8001260:	f043 0302 	orr.w	r3, r3, #2
 8001264:	81fb      	strh	r3, [r7, #14]
		LCD_WriteReg(dirreg, regval);
 8001266:	89fa      	ldrh	r2, [r7, #14]
 8001268:	89bb      	ldrh	r3, [r7, #12]
 800126a:	4611      	mov	r1, r2
 800126c:	4618      	mov	r0, r3
 800126e:	f7ff fc11 	bl	8000a94 <LCD_WriteReg>
		if (lcddev.id != 0X1963)	//1963不做坐标处理
 8001272:	4b0e      	ldr	r3, [pc, #56]	; (80012ac <LCD_Scan_Dir+0x1f4>)
 8001274:	889b      	ldrh	r3, [r3, #4]
 8001276:	f641 1263 	movw	r2, #6499	; 0x1963
 800127a:	4293      	cmp	r3, r2
 800127c:	d028      	beq.n	80012d0 <LCD_Scan_Dir+0x218>
				{
			if (regval & 0X20) {
 800127e:	89fb      	ldrh	r3, [r7, #14]
 8001280:	f003 0320 	and.w	r3, r3, #32
 8001284:	2b00      	cmp	r3, #0
 8001286:	d013      	beq.n	80012b0 <LCD_Scan_Dir+0x1f8>
				if (lcddev.width < lcddev.height)	//交换X,Y
 8001288:	4b08      	ldr	r3, [pc, #32]	; (80012ac <LCD_Scan_Dir+0x1f4>)
 800128a:	881a      	ldrh	r2, [r3, #0]
 800128c:	4b07      	ldr	r3, [pc, #28]	; (80012ac <LCD_Scan_Dir+0x1f4>)
 800128e:	885b      	ldrh	r3, [r3, #2]
 8001290:	429a      	cmp	r2, r3
 8001292:	d21d      	bcs.n	80012d0 <LCD_Scan_Dir+0x218>
						{
					temp = lcddev.width;
 8001294:	4b05      	ldr	r3, [pc, #20]	; (80012ac <LCD_Scan_Dir+0x1f4>)
 8001296:	881b      	ldrh	r3, [r3, #0]
 8001298:	817b      	strh	r3, [r7, #10]
					lcddev.width = lcddev.height;
 800129a:	4b04      	ldr	r3, [pc, #16]	; (80012ac <LCD_Scan_Dir+0x1f4>)
 800129c:	885a      	ldrh	r2, [r3, #2]
 800129e:	4b03      	ldr	r3, [pc, #12]	; (80012ac <LCD_Scan_Dir+0x1f4>)
 80012a0:	801a      	strh	r2, [r3, #0]
					lcddev.height = temp;
 80012a2:	4a02      	ldr	r2, [pc, #8]	; (80012ac <LCD_Scan_Dir+0x1f4>)
 80012a4:	897b      	ldrh	r3, [r7, #10]
 80012a6:	8053      	strh	r3, [r2, #2]
 80012a8:	e012      	b.n	80012d0 <LCD_Scan_Dir+0x218>
 80012aa:	bf00      	nop
 80012ac:	20000028 	.word	0x20000028
				}
			} else {
				if (lcddev.width > lcddev.height)	//交换X,Y
 80012b0:	4b7f      	ldr	r3, [pc, #508]	; (80014b0 <LCD_Scan_Dir+0x3f8>)
 80012b2:	881a      	ldrh	r2, [r3, #0]
 80012b4:	4b7e      	ldr	r3, [pc, #504]	; (80014b0 <LCD_Scan_Dir+0x3f8>)
 80012b6:	885b      	ldrh	r3, [r3, #2]
 80012b8:	429a      	cmp	r2, r3
 80012ba:	d909      	bls.n	80012d0 <LCD_Scan_Dir+0x218>
						{
					temp = lcddev.width;
 80012bc:	4b7c      	ldr	r3, [pc, #496]	; (80014b0 <LCD_Scan_Dir+0x3f8>)
 80012be:	881b      	ldrh	r3, [r3, #0]
 80012c0:	817b      	strh	r3, [r7, #10]
					lcddev.width = lcddev.height;
 80012c2:	4b7b      	ldr	r3, [pc, #492]	; (80014b0 <LCD_Scan_Dir+0x3f8>)
 80012c4:	885a      	ldrh	r2, [r3, #2]
 80012c6:	4b7a      	ldr	r3, [pc, #488]	; (80014b0 <LCD_Scan_Dir+0x3f8>)
 80012c8:	801a      	strh	r2, [r3, #0]
					lcddev.height = temp;
 80012ca:	4a79      	ldr	r2, [pc, #484]	; (80014b0 <LCD_Scan_Dir+0x3f8>)
 80012cc:	897b      	ldrh	r3, [r7, #10]
 80012ce:	8053      	strh	r3, [r2, #2]
				}
			}
		}
		if (lcddev.id == 0X5510) {
 80012d0:	4b77      	ldr	r3, [pc, #476]	; (80014b0 <LCD_Scan_Dir+0x3f8>)
 80012d2:	889b      	ldrh	r3, [r3, #4]
 80012d4:	f245 5210 	movw	r2, #21776	; 0x5510
 80012d8:	4293      	cmp	r3, r2
 80012da:	f040 80ef 	bne.w	80014bc <LCD_Scan_Dir+0x404>
			LCD_WR_REG(lcddev.setxcmd);
 80012de:	4b74      	ldr	r3, [pc, #464]	; (80014b0 <LCD_Scan_Dir+0x3f8>)
 80012e0:	895b      	ldrh	r3, [r3, #10]
 80012e2:	4618      	mov	r0, r3
 80012e4:	f7ff fb4a 	bl	800097c <LCD_WR_REG>
			LCD_WR_DATA(0);
 80012e8:	4b72      	ldr	r3, [pc, #456]	; (80014b4 <LCD_Scan_Dir+0x3fc>)
 80012ea:	f44f 7280 	mov.w	r2, #256	; 0x100
 80012ee:	611a      	str	r2, [r3, #16]
 80012f0:	4b70      	ldr	r3, [pc, #448]	; (80014b4 <LCD_Scan_Dir+0x3fc>)
 80012f2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80012f6:	615a      	str	r2, [r3, #20]
 80012f8:	4b6f      	ldr	r3, [pc, #444]	; (80014b8 <LCD_Scan_Dir+0x400>)
 80012fa:	2200      	movs	r2, #0
 80012fc:	60da      	str	r2, [r3, #12]
 80012fe:	4b6d      	ldr	r3, [pc, #436]	; (80014b4 <LCD_Scan_Dir+0x3fc>)
 8001300:	2280      	movs	r2, #128	; 0x80
 8001302:	615a      	str	r2, [r3, #20]
 8001304:	4b6b      	ldr	r3, [pc, #428]	; (80014b4 <LCD_Scan_Dir+0x3fc>)
 8001306:	2280      	movs	r2, #128	; 0x80
 8001308:	611a      	str	r2, [r3, #16]
 800130a:	4b6a      	ldr	r3, [pc, #424]	; (80014b4 <LCD_Scan_Dir+0x3fc>)
 800130c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001310:	611a      	str	r2, [r3, #16]
			LCD_WR_REG(lcddev.setxcmd + 1);
 8001312:	4b67      	ldr	r3, [pc, #412]	; (80014b0 <LCD_Scan_Dir+0x3f8>)
 8001314:	895b      	ldrh	r3, [r3, #10]
 8001316:	3301      	adds	r3, #1
 8001318:	b29b      	uxth	r3, r3
 800131a:	4618      	mov	r0, r3
 800131c:	f7ff fb2e 	bl	800097c <LCD_WR_REG>
			LCD_WR_DATA(0);
 8001320:	4b64      	ldr	r3, [pc, #400]	; (80014b4 <LCD_Scan_Dir+0x3fc>)
 8001322:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001326:	611a      	str	r2, [r3, #16]
 8001328:	4b62      	ldr	r3, [pc, #392]	; (80014b4 <LCD_Scan_Dir+0x3fc>)
 800132a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800132e:	615a      	str	r2, [r3, #20]
 8001330:	4b61      	ldr	r3, [pc, #388]	; (80014b8 <LCD_Scan_Dir+0x400>)
 8001332:	2200      	movs	r2, #0
 8001334:	60da      	str	r2, [r3, #12]
 8001336:	4b5f      	ldr	r3, [pc, #380]	; (80014b4 <LCD_Scan_Dir+0x3fc>)
 8001338:	2280      	movs	r2, #128	; 0x80
 800133a:	615a      	str	r2, [r3, #20]
 800133c:	4b5d      	ldr	r3, [pc, #372]	; (80014b4 <LCD_Scan_Dir+0x3fc>)
 800133e:	2280      	movs	r2, #128	; 0x80
 8001340:	611a      	str	r2, [r3, #16]
 8001342:	4b5c      	ldr	r3, [pc, #368]	; (80014b4 <LCD_Scan_Dir+0x3fc>)
 8001344:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001348:	611a      	str	r2, [r3, #16]
			LCD_WR_REG(lcddev.setxcmd + 2);
 800134a:	4b59      	ldr	r3, [pc, #356]	; (80014b0 <LCD_Scan_Dir+0x3f8>)
 800134c:	895b      	ldrh	r3, [r3, #10]
 800134e:	3302      	adds	r3, #2
 8001350:	b29b      	uxth	r3, r3
 8001352:	4618      	mov	r0, r3
 8001354:	f7ff fb12 	bl	800097c <LCD_WR_REG>
			LCD_WR_DATA((lcddev.width - 1) >> 8);
 8001358:	4b56      	ldr	r3, [pc, #344]	; (80014b4 <LCD_Scan_Dir+0x3fc>)
 800135a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800135e:	611a      	str	r2, [r3, #16]
 8001360:	4b54      	ldr	r3, [pc, #336]	; (80014b4 <LCD_Scan_Dir+0x3fc>)
 8001362:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001366:	615a      	str	r2, [r3, #20]
 8001368:	4b51      	ldr	r3, [pc, #324]	; (80014b0 <LCD_Scan_Dir+0x3f8>)
 800136a:	881b      	ldrh	r3, [r3, #0]
 800136c:	3b01      	subs	r3, #1
 800136e:	121a      	asrs	r2, r3, #8
 8001370:	4b51      	ldr	r3, [pc, #324]	; (80014b8 <LCD_Scan_Dir+0x400>)
 8001372:	60da      	str	r2, [r3, #12]
 8001374:	4b4f      	ldr	r3, [pc, #316]	; (80014b4 <LCD_Scan_Dir+0x3fc>)
 8001376:	2280      	movs	r2, #128	; 0x80
 8001378:	615a      	str	r2, [r3, #20]
 800137a:	4b4e      	ldr	r3, [pc, #312]	; (80014b4 <LCD_Scan_Dir+0x3fc>)
 800137c:	2280      	movs	r2, #128	; 0x80
 800137e:	611a      	str	r2, [r3, #16]
 8001380:	4b4c      	ldr	r3, [pc, #304]	; (80014b4 <LCD_Scan_Dir+0x3fc>)
 8001382:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001386:	611a      	str	r2, [r3, #16]
			LCD_WR_REG(lcddev.setxcmd + 3);
 8001388:	4b49      	ldr	r3, [pc, #292]	; (80014b0 <LCD_Scan_Dir+0x3f8>)
 800138a:	895b      	ldrh	r3, [r3, #10]
 800138c:	3303      	adds	r3, #3
 800138e:	b29b      	uxth	r3, r3
 8001390:	4618      	mov	r0, r3
 8001392:	f7ff faf3 	bl	800097c <LCD_WR_REG>
			LCD_WR_DATA((lcddev.width - 1) & 0XFF);
 8001396:	4b47      	ldr	r3, [pc, #284]	; (80014b4 <LCD_Scan_Dir+0x3fc>)
 8001398:	f44f 7280 	mov.w	r2, #256	; 0x100
 800139c:	611a      	str	r2, [r3, #16]
 800139e:	4b45      	ldr	r3, [pc, #276]	; (80014b4 <LCD_Scan_Dir+0x3fc>)
 80013a0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80013a4:	615a      	str	r2, [r3, #20]
 80013a6:	4b42      	ldr	r3, [pc, #264]	; (80014b0 <LCD_Scan_Dir+0x3f8>)
 80013a8:	881b      	ldrh	r3, [r3, #0]
 80013aa:	3b01      	subs	r3, #1
 80013ac:	4a42      	ldr	r2, [pc, #264]	; (80014b8 <LCD_Scan_Dir+0x400>)
 80013ae:	b2db      	uxtb	r3, r3
 80013b0:	60d3      	str	r3, [r2, #12]
 80013b2:	4b40      	ldr	r3, [pc, #256]	; (80014b4 <LCD_Scan_Dir+0x3fc>)
 80013b4:	2280      	movs	r2, #128	; 0x80
 80013b6:	615a      	str	r2, [r3, #20]
 80013b8:	4b3e      	ldr	r3, [pc, #248]	; (80014b4 <LCD_Scan_Dir+0x3fc>)
 80013ba:	2280      	movs	r2, #128	; 0x80
 80013bc:	611a      	str	r2, [r3, #16]
 80013be:	4b3d      	ldr	r3, [pc, #244]	; (80014b4 <LCD_Scan_Dir+0x3fc>)
 80013c0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80013c4:	611a      	str	r2, [r3, #16]
			LCD_WR_REG(lcddev.setycmd);
 80013c6:	4b3a      	ldr	r3, [pc, #232]	; (80014b0 <LCD_Scan_Dir+0x3f8>)
 80013c8:	899b      	ldrh	r3, [r3, #12]
 80013ca:	4618      	mov	r0, r3
 80013cc:	f7ff fad6 	bl	800097c <LCD_WR_REG>
			LCD_WR_DATA(0);
 80013d0:	4b38      	ldr	r3, [pc, #224]	; (80014b4 <LCD_Scan_Dir+0x3fc>)
 80013d2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80013d6:	611a      	str	r2, [r3, #16]
 80013d8:	4b36      	ldr	r3, [pc, #216]	; (80014b4 <LCD_Scan_Dir+0x3fc>)
 80013da:	f44f 7200 	mov.w	r2, #512	; 0x200
 80013de:	615a      	str	r2, [r3, #20]
 80013e0:	4b35      	ldr	r3, [pc, #212]	; (80014b8 <LCD_Scan_Dir+0x400>)
 80013e2:	2200      	movs	r2, #0
 80013e4:	60da      	str	r2, [r3, #12]
 80013e6:	4b33      	ldr	r3, [pc, #204]	; (80014b4 <LCD_Scan_Dir+0x3fc>)
 80013e8:	2280      	movs	r2, #128	; 0x80
 80013ea:	615a      	str	r2, [r3, #20]
 80013ec:	4b31      	ldr	r3, [pc, #196]	; (80014b4 <LCD_Scan_Dir+0x3fc>)
 80013ee:	2280      	movs	r2, #128	; 0x80
 80013f0:	611a      	str	r2, [r3, #16]
 80013f2:	4b30      	ldr	r3, [pc, #192]	; (80014b4 <LCD_Scan_Dir+0x3fc>)
 80013f4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80013f8:	611a      	str	r2, [r3, #16]
			LCD_WR_REG(lcddev.setycmd + 1);
 80013fa:	4b2d      	ldr	r3, [pc, #180]	; (80014b0 <LCD_Scan_Dir+0x3f8>)
 80013fc:	899b      	ldrh	r3, [r3, #12]
 80013fe:	3301      	adds	r3, #1
 8001400:	b29b      	uxth	r3, r3
 8001402:	4618      	mov	r0, r3
 8001404:	f7ff faba 	bl	800097c <LCD_WR_REG>
			LCD_WR_DATA(0);
 8001408:	4b2a      	ldr	r3, [pc, #168]	; (80014b4 <LCD_Scan_Dir+0x3fc>)
 800140a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800140e:	611a      	str	r2, [r3, #16]
 8001410:	4b28      	ldr	r3, [pc, #160]	; (80014b4 <LCD_Scan_Dir+0x3fc>)
 8001412:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001416:	615a      	str	r2, [r3, #20]
 8001418:	4b27      	ldr	r3, [pc, #156]	; (80014b8 <LCD_Scan_Dir+0x400>)
 800141a:	2200      	movs	r2, #0
 800141c:	60da      	str	r2, [r3, #12]
 800141e:	4b25      	ldr	r3, [pc, #148]	; (80014b4 <LCD_Scan_Dir+0x3fc>)
 8001420:	2280      	movs	r2, #128	; 0x80
 8001422:	615a      	str	r2, [r3, #20]
 8001424:	4b23      	ldr	r3, [pc, #140]	; (80014b4 <LCD_Scan_Dir+0x3fc>)
 8001426:	2280      	movs	r2, #128	; 0x80
 8001428:	611a      	str	r2, [r3, #16]
 800142a:	4b22      	ldr	r3, [pc, #136]	; (80014b4 <LCD_Scan_Dir+0x3fc>)
 800142c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001430:	611a      	str	r2, [r3, #16]
			LCD_WR_REG(lcddev.setycmd + 2);
 8001432:	4b1f      	ldr	r3, [pc, #124]	; (80014b0 <LCD_Scan_Dir+0x3f8>)
 8001434:	899b      	ldrh	r3, [r3, #12]
 8001436:	3302      	adds	r3, #2
 8001438:	b29b      	uxth	r3, r3
 800143a:	4618      	mov	r0, r3
 800143c:	f7ff fa9e 	bl	800097c <LCD_WR_REG>
			LCD_WR_DATA((lcddev.height - 1) >> 8);
 8001440:	4b1c      	ldr	r3, [pc, #112]	; (80014b4 <LCD_Scan_Dir+0x3fc>)
 8001442:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001446:	611a      	str	r2, [r3, #16]
 8001448:	4b1a      	ldr	r3, [pc, #104]	; (80014b4 <LCD_Scan_Dir+0x3fc>)
 800144a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800144e:	615a      	str	r2, [r3, #20]
 8001450:	4b17      	ldr	r3, [pc, #92]	; (80014b0 <LCD_Scan_Dir+0x3f8>)
 8001452:	885b      	ldrh	r3, [r3, #2]
 8001454:	3b01      	subs	r3, #1
 8001456:	121a      	asrs	r2, r3, #8
 8001458:	4b17      	ldr	r3, [pc, #92]	; (80014b8 <LCD_Scan_Dir+0x400>)
 800145a:	60da      	str	r2, [r3, #12]
 800145c:	4b15      	ldr	r3, [pc, #84]	; (80014b4 <LCD_Scan_Dir+0x3fc>)
 800145e:	2280      	movs	r2, #128	; 0x80
 8001460:	615a      	str	r2, [r3, #20]
 8001462:	4b14      	ldr	r3, [pc, #80]	; (80014b4 <LCD_Scan_Dir+0x3fc>)
 8001464:	2280      	movs	r2, #128	; 0x80
 8001466:	611a      	str	r2, [r3, #16]
 8001468:	4b12      	ldr	r3, [pc, #72]	; (80014b4 <LCD_Scan_Dir+0x3fc>)
 800146a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800146e:	611a      	str	r2, [r3, #16]
			LCD_WR_REG(lcddev.setycmd + 3);
 8001470:	4b0f      	ldr	r3, [pc, #60]	; (80014b0 <LCD_Scan_Dir+0x3f8>)
 8001472:	899b      	ldrh	r3, [r3, #12]
 8001474:	3303      	adds	r3, #3
 8001476:	b29b      	uxth	r3, r3
 8001478:	4618      	mov	r0, r3
 800147a:	f7ff fa7f 	bl	800097c <LCD_WR_REG>
			LCD_WR_DATA((lcddev.height - 1) & 0XFF);
 800147e:	4b0d      	ldr	r3, [pc, #52]	; (80014b4 <LCD_Scan_Dir+0x3fc>)
 8001480:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001484:	611a      	str	r2, [r3, #16]
 8001486:	4b0b      	ldr	r3, [pc, #44]	; (80014b4 <LCD_Scan_Dir+0x3fc>)
 8001488:	f44f 7200 	mov.w	r2, #512	; 0x200
 800148c:	615a      	str	r2, [r3, #20]
 800148e:	4b08      	ldr	r3, [pc, #32]	; (80014b0 <LCD_Scan_Dir+0x3f8>)
 8001490:	885b      	ldrh	r3, [r3, #2]
 8001492:	3b01      	subs	r3, #1
 8001494:	4a08      	ldr	r2, [pc, #32]	; (80014b8 <LCD_Scan_Dir+0x400>)
 8001496:	b2db      	uxtb	r3, r3
 8001498:	60d3      	str	r3, [r2, #12]
 800149a:	4b06      	ldr	r3, [pc, #24]	; (80014b4 <LCD_Scan_Dir+0x3fc>)
 800149c:	2280      	movs	r2, #128	; 0x80
 800149e:	615a      	str	r2, [r3, #20]
 80014a0:	4b04      	ldr	r3, [pc, #16]	; (80014b4 <LCD_Scan_Dir+0x3fc>)
 80014a2:	2280      	movs	r2, #128	; 0x80
 80014a4:	611a      	str	r2, [r3, #16]
 80014a6:	4b03      	ldr	r3, [pc, #12]	; (80014b4 <LCD_Scan_Dir+0x3fc>)
 80014a8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80014ac:	611a      	str	r2, [r3, #16]
		if (lcddev.id == 0X5510) {
 80014ae:	e10b      	b.n	80016c8 <LCD_Scan_Dir+0x610>
 80014b0:	20000028 	.word	0x20000028
 80014b4:	40011000 	.word	0x40011000
 80014b8:	40010c00 	.word	0x40010c00
		} else {
			LCD_WR_REG(lcddev.setxcmd);
 80014bc:	4b84      	ldr	r3, [pc, #528]	; (80016d0 <LCD_Scan_Dir+0x618>)
 80014be:	895b      	ldrh	r3, [r3, #10]
 80014c0:	4618      	mov	r0, r3
 80014c2:	f7ff fa5b 	bl	800097c <LCD_WR_REG>
			LCD_WR_DATA(0);
 80014c6:	4b83      	ldr	r3, [pc, #524]	; (80016d4 <LCD_Scan_Dir+0x61c>)
 80014c8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80014cc:	611a      	str	r2, [r3, #16]
 80014ce:	4b81      	ldr	r3, [pc, #516]	; (80016d4 <LCD_Scan_Dir+0x61c>)
 80014d0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80014d4:	615a      	str	r2, [r3, #20]
 80014d6:	4b80      	ldr	r3, [pc, #512]	; (80016d8 <LCD_Scan_Dir+0x620>)
 80014d8:	2200      	movs	r2, #0
 80014da:	60da      	str	r2, [r3, #12]
 80014dc:	4b7d      	ldr	r3, [pc, #500]	; (80016d4 <LCD_Scan_Dir+0x61c>)
 80014de:	2280      	movs	r2, #128	; 0x80
 80014e0:	615a      	str	r2, [r3, #20]
 80014e2:	4b7c      	ldr	r3, [pc, #496]	; (80016d4 <LCD_Scan_Dir+0x61c>)
 80014e4:	2280      	movs	r2, #128	; 0x80
 80014e6:	611a      	str	r2, [r3, #16]
 80014e8:	4b7a      	ldr	r3, [pc, #488]	; (80016d4 <LCD_Scan_Dir+0x61c>)
 80014ea:	f44f 7200 	mov.w	r2, #512	; 0x200
 80014ee:	611a      	str	r2, [r3, #16]
			LCD_WR_DATA(0);
 80014f0:	4b78      	ldr	r3, [pc, #480]	; (80016d4 <LCD_Scan_Dir+0x61c>)
 80014f2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80014f6:	611a      	str	r2, [r3, #16]
 80014f8:	4b76      	ldr	r3, [pc, #472]	; (80016d4 <LCD_Scan_Dir+0x61c>)
 80014fa:	f44f 7200 	mov.w	r2, #512	; 0x200
 80014fe:	615a      	str	r2, [r3, #20]
 8001500:	4b75      	ldr	r3, [pc, #468]	; (80016d8 <LCD_Scan_Dir+0x620>)
 8001502:	2200      	movs	r2, #0
 8001504:	60da      	str	r2, [r3, #12]
 8001506:	4b73      	ldr	r3, [pc, #460]	; (80016d4 <LCD_Scan_Dir+0x61c>)
 8001508:	2280      	movs	r2, #128	; 0x80
 800150a:	615a      	str	r2, [r3, #20]
 800150c:	4b71      	ldr	r3, [pc, #452]	; (80016d4 <LCD_Scan_Dir+0x61c>)
 800150e:	2280      	movs	r2, #128	; 0x80
 8001510:	611a      	str	r2, [r3, #16]
 8001512:	4b70      	ldr	r3, [pc, #448]	; (80016d4 <LCD_Scan_Dir+0x61c>)
 8001514:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001518:	611a      	str	r2, [r3, #16]
			LCD_WR_DATA((lcddev.width - 1) >> 8);
 800151a:	4b6e      	ldr	r3, [pc, #440]	; (80016d4 <LCD_Scan_Dir+0x61c>)
 800151c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001520:	611a      	str	r2, [r3, #16]
 8001522:	4b6c      	ldr	r3, [pc, #432]	; (80016d4 <LCD_Scan_Dir+0x61c>)
 8001524:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001528:	615a      	str	r2, [r3, #20]
 800152a:	4b69      	ldr	r3, [pc, #420]	; (80016d0 <LCD_Scan_Dir+0x618>)
 800152c:	881b      	ldrh	r3, [r3, #0]
 800152e:	3b01      	subs	r3, #1
 8001530:	121a      	asrs	r2, r3, #8
 8001532:	4b69      	ldr	r3, [pc, #420]	; (80016d8 <LCD_Scan_Dir+0x620>)
 8001534:	60da      	str	r2, [r3, #12]
 8001536:	4b67      	ldr	r3, [pc, #412]	; (80016d4 <LCD_Scan_Dir+0x61c>)
 8001538:	2280      	movs	r2, #128	; 0x80
 800153a:	615a      	str	r2, [r3, #20]
 800153c:	4b65      	ldr	r3, [pc, #404]	; (80016d4 <LCD_Scan_Dir+0x61c>)
 800153e:	2280      	movs	r2, #128	; 0x80
 8001540:	611a      	str	r2, [r3, #16]
 8001542:	4b64      	ldr	r3, [pc, #400]	; (80016d4 <LCD_Scan_Dir+0x61c>)
 8001544:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001548:	611a      	str	r2, [r3, #16]
			LCD_WR_DATA((lcddev.width - 1) & 0XFF);
 800154a:	4b62      	ldr	r3, [pc, #392]	; (80016d4 <LCD_Scan_Dir+0x61c>)
 800154c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001550:	611a      	str	r2, [r3, #16]
 8001552:	4b60      	ldr	r3, [pc, #384]	; (80016d4 <LCD_Scan_Dir+0x61c>)
 8001554:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001558:	615a      	str	r2, [r3, #20]
 800155a:	4b5d      	ldr	r3, [pc, #372]	; (80016d0 <LCD_Scan_Dir+0x618>)
 800155c:	881b      	ldrh	r3, [r3, #0]
 800155e:	3b01      	subs	r3, #1
 8001560:	4a5d      	ldr	r2, [pc, #372]	; (80016d8 <LCD_Scan_Dir+0x620>)
 8001562:	b2db      	uxtb	r3, r3
 8001564:	60d3      	str	r3, [r2, #12]
 8001566:	4b5b      	ldr	r3, [pc, #364]	; (80016d4 <LCD_Scan_Dir+0x61c>)
 8001568:	2280      	movs	r2, #128	; 0x80
 800156a:	615a      	str	r2, [r3, #20]
 800156c:	4b59      	ldr	r3, [pc, #356]	; (80016d4 <LCD_Scan_Dir+0x61c>)
 800156e:	2280      	movs	r2, #128	; 0x80
 8001570:	611a      	str	r2, [r3, #16]
 8001572:	4b58      	ldr	r3, [pc, #352]	; (80016d4 <LCD_Scan_Dir+0x61c>)
 8001574:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001578:	611a      	str	r2, [r3, #16]
			LCD_WR_REG(lcddev.setycmd);
 800157a:	4b55      	ldr	r3, [pc, #340]	; (80016d0 <LCD_Scan_Dir+0x618>)
 800157c:	899b      	ldrh	r3, [r3, #12]
 800157e:	4618      	mov	r0, r3
 8001580:	f7ff f9fc 	bl	800097c <LCD_WR_REG>
			LCD_WR_DATA(0);
 8001584:	4b53      	ldr	r3, [pc, #332]	; (80016d4 <LCD_Scan_Dir+0x61c>)
 8001586:	f44f 7280 	mov.w	r2, #256	; 0x100
 800158a:	611a      	str	r2, [r3, #16]
 800158c:	4b51      	ldr	r3, [pc, #324]	; (80016d4 <LCD_Scan_Dir+0x61c>)
 800158e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001592:	615a      	str	r2, [r3, #20]
 8001594:	4b50      	ldr	r3, [pc, #320]	; (80016d8 <LCD_Scan_Dir+0x620>)
 8001596:	2200      	movs	r2, #0
 8001598:	60da      	str	r2, [r3, #12]
 800159a:	4b4e      	ldr	r3, [pc, #312]	; (80016d4 <LCD_Scan_Dir+0x61c>)
 800159c:	2280      	movs	r2, #128	; 0x80
 800159e:	615a      	str	r2, [r3, #20]
 80015a0:	4b4c      	ldr	r3, [pc, #304]	; (80016d4 <LCD_Scan_Dir+0x61c>)
 80015a2:	2280      	movs	r2, #128	; 0x80
 80015a4:	611a      	str	r2, [r3, #16]
 80015a6:	4b4b      	ldr	r3, [pc, #300]	; (80016d4 <LCD_Scan_Dir+0x61c>)
 80015a8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80015ac:	611a      	str	r2, [r3, #16]
			LCD_WR_DATA(0);
 80015ae:	4b49      	ldr	r3, [pc, #292]	; (80016d4 <LCD_Scan_Dir+0x61c>)
 80015b0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80015b4:	611a      	str	r2, [r3, #16]
 80015b6:	4b47      	ldr	r3, [pc, #284]	; (80016d4 <LCD_Scan_Dir+0x61c>)
 80015b8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80015bc:	615a      	str	r2, [r3, #20]
 80015be:	4b46      	ldr	r3, [pc, #280]	; (80016d8 <LCD_Scan_Dir+0x620>)
 80015c0:	2200      	movs	r2, #0
 80015c2:	60da      	str	r2, [r3, #12]
 80015c4:	4b43      	ldr	r3, [pc, #268]	; (80016d4 <LCD_Scan_Dir+0x61c>)
 80015c6:	2280      	movs	r2, #128	; 0x80
 80015c8:	615a      	str	r2, [r3, #20]
 80015ca:	4b42      	ldr	r3, [pc, #264]	; (80016d4 <LCD_Scan_Dir+0x61c>)
 80015cc:	2280      	movs	r2, #128	; 0x80
 80015ce:	611a      	str	r2, [r3, #16]
 80015d0:	4b40      	ldr	r3, [pc, #256]	; (80016d4 <LCD_Scan_Dir+0x61c>)
 80015d2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80015d6:	611a      	str	r2, [r3, #16]
			LCD_WR_DATA((lcddev.height - 1) >> 8);
 80015d8:	4b3e      	ldr	r3, [pc, #248]	; (80016d4 <LCD_Scan_Dir+0x61c>)
 80015da:	f44f 7280 	mov.w	r2, #256	; 0x100
 80015de:	611a      	str	r2, [r3, #16]
 80015e0:	4b3c      	ldr	r3, [pc, #240]	; (80016d4 <LCD_Scan_Dir+0x61c>)
 80015e2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80015e6:	615a      	str	r2, [r3, #20]
 80015e8:	4b39      	ldr	r3, [pc, #228]	; (80016d0 <LCD_Scan_Dir+0x618>)
 80015ea:	885b      	ldrh	r3, [r3, #2]
 80015ec:	3b01      	subs	r3, #1
 80015ee:	121a      	asrs	r2, r3, #8
 80015f0:	4b39      	ldr	r3, [pc, #228]	; (80016d8 <LCD_Scan_Dir+0x620>)
 80015f2:	60da      	str	r2, [r3, #12]
 80015f4:	4b37      	ldr	r3, [pc, #220]	; (80016d4 <LCD_Scan_Dir+0x61c>)
 80015f6:	2280      	movs	r2, #128	; 0x80
 80015f8:	615a      	str	r2, [r3, #20]
 80015fa:	4b36      	ldr	r3, [pc, #216]	; (80016d4 <LCD_Scan_Dir+0x61c>)
 80015fc:	2280      	movs	r2, #128	; 0x80
 80015fe:	611a      	str	r2, [r3, #16]
 8001600:	4b34      	ldr	r3, [pc, #208]	; (80016d4 <LCD_Scan_Dir+0x61c>)
 8001602:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001606:	611a      	str	r2, [r3, #16]
			LCD_WR_DATA((lcddev.height - 1) & 0XFF);
 8001608:	4b32      	ldr	r3, [pc, #200]	; (80016d4 <LCD_Scan_Dir+0x61c>)
 800160a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800160e:	611a      	str	r2, [r3, #16]
 8001610:	4b30      	ldr	r3, [pc, #192]	; (80016d4 <LCD_Scan_Dir+0x61c>)
 8001612:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001616:	615a      	str	r2, [r3, #20]
 8001618:	4b2d      	ldr	r3, [pc, #180]	; (80016d0 <LCD_Scan_Dir+0x618>)
 800161a:	885b      	ldrh	r3, [r3, #2]
 800161c:	3b01      	subs	r3, #1
 800161e:	4a2e      	ldr	r2, [pc, #184]	; (80016d8 <LCD_Scan_Dir+0x620>)
 8001620:	b2db      	uxtb	r3, r3
 8001622:	60d3      	str	r3, [r2, #12]
 8001624:	4b2b      	ldr	r3, [pc, #172]	; (80016d4 <LCD_Scan_Dir+0x61c>)
 8001626:	2280      	movs	r2, #128	; 0x80
 8001628:	615a      	str	r2, [r3, #20]
 800162a:	4b2a      	ldr	r3, [pc, #168]	; (80016d4 <LCD_Scan_Dir+0x61c>)
 800162c:	2280      	movs	r2, #128	; 0x80
 800162e:	611a      	str	r2, [r3, #16]
 8001630:	4b28      	ldr	r3, [pc, #160]	; (80016d4 <LCD_Scan_Dir+0x61c>)
 8001632:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001636:	611a      	str	r2, [r3, #16]
		if (lcddev.id == 0X5510) {
 8001638:	e046      	b.n	80016c8 <LCD_Scan_Dir+0x610>
		}
	} else {
		switch (dir) {
 800163a:	79fb      	ldrb	r3, [r7, #7]
 800163c:	2b07      	cmp	r3, #7
 800163e:	d836      	bhi.n	80016ae <LCD_Scan_Dir+0x5f6>
 8001640:	a201      	add	r2, pc, #4	; (adr r2, 8001648 <LCD_Scan_Dir+0x590>)
 8001642:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001646:	bf00      	nop
 8001648:	08001669 	.word	0x08001669
 800164c:	08001673 	.word	0x08001673
 8001650:	0800167d 	.word	0x0800167d
 8001654:	080016af 	.word	0x080016af
 8001658:	08001687 	.word	0x08001687
 800165c:	08001691 	.word	0x08001691
 8001660:	0800169b 	.word	0x0800169b
 8001664:	080016a5 	.word	0x080016a5
		case L2R_U2D:	//从左到右,从上到下
			regval |= (1 << 5) | (1 << 4) | (0 << 3);
 8001668:	89fb      	ldrh	r3, [r7, #14]
 800166a:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 800166e:	81fb      	strh	r3, [r7, #14]
			break;
 8001670:	e01d      	b.n	80016ae <LCD_Scan_Dir+0x5f6>
		case L2R_D2U:	//从左到右,从下到上
			regval |= (0 << 5) | (1 << 4) | (0 << 3);
 8001672:	89fb      	ldrh	r3, [r7, #14]
 8001674:	f043 0310 	orr.w	r3, r3, #16
 8001678:	81fb      	strh	r3, [r7, #14]
			break;
 800167a:	e018      	b.n	80016ae <LCD_Scan_Dir+0x5f6>
		case R2L_U2D:	//从右到左,从上到下
			regval |= (1 << 5) | (0 << 4) | (0 << 3);
 800167c:	89fb      	ldrh	r3, [r7, #14]
 800167e:	f043 0320 	orr.w	r3, r3, #32
 8001682:	81fb      	strh	r3, [r7, #14]
			break;
 8001684:	e013      	b.n	80016ae <LCD_Scan_Dir+0x5f6>
		case R2L_D2U:	//从右到左,从下到上
			regval |= (0 << 5) | (0 << 4) | (0 << 3);
			break;
		case U2D_L2R:	//从上到下,从左到右
			regval |= (1 << 5) | (1 << 4) | (1 << 3);
 8001686:	89fb      	ldrh	r3, [r7, #14]
 8001688:	f043 0338 	orr.w	r3, r3, #56	; 0x38
 800168c:	81fb      	strh	r3, [r7, #14]
			break;
 800168e:	e00e      	b.n	80016ae <LCD_Scan_Dir+0x5f6>
		case U2D_R2L:	//从上到下,从右到左
			regval |= (1 << 5) | (0 << 4) | (1 << 3);
 8001690:	89fb      	ldrh	r3, [r7, #14]
 8001692:	f043 0328 	orr.w	r3, r3, #40	; 0x28
 8001696:	81fb      	strh	r3, [r7, #14]
			break;
 8001698:	e009      	b.n	80016ae <LCD_Scan_Dir+0x5f6>
		case D2U_L2R:	//从下到上,从左到右
			regval |= (0 << 5) | (1 << 4) | (1 << 3);
 800169a:	89fb      	ldrh	r3, [r7, #14]
 800169c:	f043 0318 	orr.w	r3, r3, #24
 80016a0:	81fb      	strh	r3, [r7, #14]
			break;
 80016a2:	e004      	b.n	80016ae <LCD_Scan_Dir+0x5f6>
		case D2U_R2L:	//从下到上,从右到左
			regval |= (0 << 5) | (0 << 4) | (1 << 3);
 80016a4:	89fb      	ldrh	r3, [r7, #14]
 80016a6:	f043 0308 	orr.w	r3, r3, #8
 80016aa:	81fb      	strh	r3, [r7, #14]
			break;
 80016ac:	bf00      	nop
		}
		dirreg = 0X03;
 80016ae:	2303      	movs	r3, #3
 80016b0:	81bb      	strh	r3, [r7, #12]
		regval |= 1 << 12;
 80016b2:	89fb      	ldrh	r3, [r7, #14]
 80016b4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80016b8:	81fb      	strh	r3, [r7, #14]
		LCD_WriteReg(dirreg, regval);
 80016ba:	89fa      	ldrh	r2, [r7, #14]
 80016bc:	89bb      	ldrh	r3, [r7, #12]
 80016be:	4611      	mov	r1, r2
 80016c0:	4618      	mov	r0, r3
 80016c2:	f7ff f9e7 	bl	8000a94 <LCD_WriteReg>
	}
}
 80016c6:	bf00      	nop
 80016c8:	bf00      	nop
 80016ca:	3710      	adds	r7, #16
 80016cc:	46bd      	mov	sp, r7
 80016ce:	bd80      	pop	{r7, pc}
 80016d0:	20000028 	.word	0x20000028
 80016d4:	40011000 	.word	0x40011000
 80016d8:	40010c00 	.word	0x40010c00
 80016dc:	00000000 	.word	0x00000000

080016e0 <LCD_SSD_BackLightSet>:
	LCD_CS_SET;
	LCD_WR_DATA(color);		//写数据
}
//SSD1963 背光设置
//pwm:背光等级,0~100.越大越亮.
void LCD_SSD_BackLightSet(uint8_t pwm) {
 80016e0:	b590      	push	{r4, r7, lr}
 80016e2:	b083      	sub	sp, #12
 80016e4:	af00      	add	r7, sp, #0
 80016e6:	4603      	mov	r3, r0
 80016e8:	71fb      	strb	r3, [r7, #7]
	LCD_WR_REG(0xBE);	//配置PWM输出
 80016ea:	20be      	movs	r0, #190	; 0xbe
 80016ec:	f7ff f946 	bl	800097c <LCD_WR_REG>
	LCD_WR_DATA(0x05);	//1设置PWM频率
 80016f0:	4b4b      	ldr	r3, [pc, #300]	; (8001820 <LCD_SSD_BackLightSet+0x140>)
 80016f2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80016f6:	611a      	str	r2, [r3, #16]
 80016f8:	4b49      	ldr	r3, [pc, #292]	; (8001820 <LCD_SSD_BackLightSet+0x140>)
 80016fa:	f44f 7200 	mov.w	r2, #512	; 0x200
 80016fe:	615a      	str	r2, [r3, #20]
 8001700:	4b48      	ldr	r3, [pc, #288]	; (8001824 <LCD_SSD_BackLightSet+0x144>)
 8001702:	2205      	movs	r2, #5
 8001704:	60da      	str	r2, [r3, #12]
 8001706:	4b46      	ldr	r3, [pc, #280]	; (8001820 <LCD_SSD_BackLightSet+0x140>)
 8001708:	2280      	movs	r2, #128	; 0x80
 800170a:	615a      	str	r2, [r3, #20]
 800170c:	4b44      	ldr	r3, [pc, #272]	; (8001820 <LCD_SSD_BackLightSet+0x140>)
 800170e:	2280      	movs	r2, #128	; 0x80
 8001710:	611a      	str	r2, [r3, #16]
 8001712:	4b43      	ldr	r3, [pc, #268]	; (8001820 <LCD_SSD_BackLightSet+0x140>)
 8001714:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001718:	611a      	str	r2, [r3, #16]
	LCD_WR_DATA(pwm * 2.55);	//2设置PWM占空比
 800171a:	4b41      	ldr	r3, [pc, #260]	; (8001820 <LCD_SSD_BackLightSet+0x140>)
 800171c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001720:	611a      	str	r2, [r3, #16]
 8001722:	4b3f      	ldr	r3, [pc, #252]	; (8001820 <LCD_SSD_BackLightSet+0x140>)
 8001724:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001728:	615a      	str	r2, [r3, #20]
 800172a:	79fb      	ldrb	r3, [r7, #7]
 800172c:	4618      	mov	r0, r3
 800172e:	f7fe fff7 	bl	8000720 <__aeabi_i2d>
 8001732:	a339      	add	r3, pc, #228	; (adr r3, 8001818 <LCD_SSD_BackLightSet+0x138>)
 8001734:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001738:	f7fe fd76 	bl	8000228 <__aeabi_dmul>
 800173c:	4602      	mov	r2, r0
 800173e:	460b      	mov	r3, r1
 8001740:	4c38      	ldr	r4, [pc, #224]	; (8001824 <LCD_SSD_BackLightSet+0x144>)
 8001742:	4610      	mov	r0, r2
 8001744:	4619      	mov	r1, r3
 8001746:	f7ff f855 	bl	80007f4 <__aeabi_d2uiz>
 800174a:	4603      	mov	r3, r0
 800174c:	60e3      	str	r3, [r4, #12]
 800174e:	4b34      	ldr	r3, [pc, #208]	; (8001820 <LCD_SSD_BackLightSet+0x140>)
 8001750:	2280      	movs	r2, #128	; 0x80
 8001752:	615a      	str	r2, [r3, #20]
 8001754:	4b32      	ldr	r3, [pc, #200]	; (8001820 <LCD_SSD_BackLightSet+0x140>)
 8001756:	2280      	movs	r2, #128	; 0x80
 8001758:	611a      	str	r2, [r3, #16]
 800175a:	4b31      	ldr	r3, [pc, #196]	; (8001820 <LCD_SSD_BackLightSet+0x140>)
 800175c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001760:	611a      	str	r2, [r3, #16]
	LCD_WR_DATA(0x01);	//3设置C
 8001762:	4b2f      	ldr	r3, [pc, #188]	; (8001820 <LCD_SSD_BackLightSet+0x140>)
 8001764:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001768:	611a      	str	r2, [r3, #16]
 800176a:	4b2d      	ldr	r3, [pc, #180]	; (8001820 <LCD_SSD_BackLightSet+0x140>)
 800176c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001770:	615a      	str	r2, [r3, #20]
 8001772:	4b2c      	ldr	r3, [pc, #176]	; (8001824 <LCD_SSD_BackLightSet+0x144>)
 8001774:	2201      	movs	r2, #1
 8001776:	60da      	str	r2, [r3, #12]
 8001778:	4b29      	ldr	r3, [pc, #164]	; (8001820 <LCD_SSD_BackLightSet+0x140>)
 800177a:	2280      	movs	r2, #128	; 0x80
 800177c:	615a      	str	r2, [r3, #20]
 800177e:	4b28      	ldr	r3, [pc, #160]	; (8001820 <LCD_SSD_BackLightSet+0x140>)
 8001780:	2280      	movs	r2, #128	; 0x80
 8001782:	611a      	str	r2, [r3, #16]
 8001784:	4b26      	ldr	r3, [pc, #152]	; (8001820 <LCD_SSD_BackLightSet+0x140>)
 8001786:	f44f 7200 	mov.w	r2, #512	; 0x200
 800178a:	611a      	str	r2, [r3, #16]
	LCD_WR_DATA(0xFF);	//4设置D
 800178c:	4b24      	ldr	r3, [pc, #144]	; (8001820 <LCD_SSD_BackLightSet+0x140>)
 800178e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001792:	611a      	str	r2, [r3, #16]
 8001794:	4b22      	ldr	r3, [pc, #136]	; (8001820 <LCD_SSD_BackLightSet+0x140>)
 8001796:	f44f 7200 	mov.w	r2, #512	; 0x200
 800179a:	615a      	str	r2, [r3, #20]
 800179c:	4b21      	ldr	r3, [pc, #132]	; (8001824 <LCD_SSD_BackLightSet+0x144>)
 800179e:	22ff      	movs	r2, #255	; 0xff
 80017a0:	60da      	str	r2, [r3, #12]
 80017a2:	4b1f      	ldr	r3, [pc, #124]	; (8001820 <LCD_SSD_BackLightSet+0x140>)
 80017a4:	2280      	movs	r2, #128	; 0x80
 80017a6:	615a      	str	r2, [r3, #20]
 80017a8:	4b1d      	ldr	r3, [pc, #116]	; (8001820 <LCD_SSD_BackLightSet+0x140>)
 80017aa:	2280      	movs	r2, #128	; 0x80
 80017ac:	611a      	str	r2, [r3, #16]
 80017ae:	4b1c      	ldr	r3, [pc, #112]	; (8001820 <LCD_SSD_BackLightSet+0x140>)
 80017b0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80017b4:	611a      	str	r2, [r3, #16]
	LCD_WR_DATA(0x00);	//5设置E
 80017b6:	4b1a      	ldr	r3, [pc, #104]	; (8001820 <LCD_SSD_BackLightSet+0x140>)
 80017b8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80017bc:	611a      	str	r2, [r3, #16]
 80017be:	4b18      	ldr	r3, [pc, #96]	; (8001820 <LCD_SSD_BackLightSet+0x140>)
 80017c0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80017c4:	615a      	str	r2, [r3, #20]
 80017c6:	4b17      	ldr	r3, [pc, #92]	; (8001824 <LCD_SSD_BackLightSet+0x144>)
 80017c8:	2200      	movs	r2, #0
 80017ca:	60da      	str	r2, [r3, #12]
 80017cc:	4b14      	ldr	r3, [pc, #80]	; (8001820 <LCD_SSD_BackLightSet+0x140>)
 80017ce:	2280      	movs	r2, #128	; 0x80
 80017d0:	615a      	str	r2, [r3, #20]
 80017d2:	4b13      	ldr	r3, [pc, #76]	; (8001820 <LCD_SSD_BackLightSet+0x140>)
 80017d4:	2280      	movs	r2, #128	; 0x80
 80017d6:	611a      	str	r2, [r3, #16]
 80017d8:	4b11      	ldr	r3, [pc, #68]	; (8001820 <LCD_SSD_BackLightSet+0x140>)
 80017da:	f44f 7200 	mov.w	r2, #512	; 0x200
 80017de:	611a      	str	r2, [r3, #16]
	LCD_WR_DATA(0x00);	//6设置F
 80017e0:	4b0f      	ldr	r3, [pc, #60]	; (8001820 <LCD_SSD_BackLightSet+0x140>)
 80017e2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80017e6:	611a      	str	r2, [r3, #16]
 80017e8:	4b0d      	ldr	r3, [pc, #52]	; (8001820 <LCD_SSD_BackLightSet+0x140>)
 80017ea:	f44f 7200 	mov.w	r2, #512	; 0x200
 80017ee:	615a      	str	r2, [r3, #20]
 80017f0:	4b0c      	ldr	r3, [pc, #48]	; (8001824 <LCD_SSD_BackLightSet+0x144>)
 80017f2:	2200      	movs	r2, #0
 80017f4:	60da      	str	r2, [r3, #12]
 80017f6:	4b0a      	ldr	r3, [pc, #40]	; (8001820 <LCD_SSD_BackLightSet+0x140>)
 80017f8:	2280      	movs	r2, #128	; 0x80
 80017fa:	615a      	str	r2, [r3, #20]
 80017fc:	4b08      	ldr	r3, [pc, #32]	; (8001820 <LCD_SSD_BackLightSet+0x140>)
 80017fe:	2280      	movs	r2, #128	; 0x80
 8001800:	611a      	str	r2, [r3, #16]
 8001802:	4b07      	ldr	r3, [pc, #28]	; (8001820 <LCD_SSD_BackLightSet+0x140>)
 8001804:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001808:	611a      	str	r2, [r3, #16]
}
 800180a:	bf00      	nop
 800180c:	370c      	adds	r7, #12
 800180e:	46bd      	mov	sp, r7
 8001810:	bd90      	pop	{r4, r7, pc}
 8001812:	bf00      	nop
 8001814:	f3af 8000 	nop.w
 8001818:	66666666 	.word	0x66666666
 800181c:	40046666 	.word	0x40046666
 8001820:	40011000 	.word	0x40011000
 8001824:	40010c00 	.word	0x40010c00

08001828 <LCD_Display_Dir>:
// Set LCD display direction
// dir: 0, vertical 1, horizontal
void LCD_Display_Dir(uint8_t dir) {
 8001828:	b580      	push	{r7, lr}
 800182a:	b082      	sub	sp, #8
 800182c:	af00      	add	r7, sp, #0
 800182e:	4603      	mov	r3, r0
 8001830:	71fb      	strb	r3, [r7, #7]
	if (dir == 0)			//竖屏
 8001832:	79fb      	ldrb	r3, [r7, #7]
 8001834:	2b00      	cmp	r3, #0
 8001836:	d177      	bne.n	8001928 <LCD_Display_Dir+0x100>
			{
		lcddev.dir = 0;	//竖屏
 8001838:	4b80      	ldr	r3, [pc, #512]	; (8001a3c <LCD_Display_Dir+0x214>)
 800183a:	2200      	movs	r2, #0
 800183c:	719a      	strb	r2, [r3, #6]
		lcddev.width = 240;
 800183e:	4b7f      	ldr	r3, [pc, #508]	; (8001a3c <LCD_Display_Dir+0x214>)
 8001840:	22f0      	movs	r2, #240	; 0xf0
 8001842:	801a      	strh	r2, [r3, #0]
		lcddev.height = 320;
 8001844:	4b7d      	ldr	r3, [pc, #500]	; (8001a3c <LCD_Display_Dir+0x214>)
 8001846:	f44f 72a0 	mov.w	r2, #320	; 0x140
 800184a:	805a      	strh	r2, [r3, #2]
		if (lcddev.id == 0X9341 || lcddev.id == 0X6804 || lcddev.id == 0X5310) {
 800184c:	4b7b      	ldr	r3, [pc, #492]	; (8001a3c <LCD_Display_Dir+0x214>)
 800184e:	889b      	ldrh	r3, [r3, #4]
 8001850:	f249 3241 	movw	r2, #37697	; 0x9341
 8001854:	4293      	cmp	r3, r2
 8001856:	d00b      	beq.n	8001870 <LCD_Display_Dir+0x48>
 8001858:	4b78      	ldr	r3, [pc, #480]	; (8001a3c <LCD_Display_Dir+0x214>)
 800185a:	889b      	ldrh	r3, [r3, #4]
 800185c:	f646 0204 	movw	r2, #26628	; 0x6804
 8001860:	4293      	cmp	r3, r2
 8001862:	d005      	beq.n	8001870 <LCD_Display_Dir+0x48>
 8001864:	4b75      	ldr	r3, [pc, #468]	; (8001a3c <LCD_Display_Dir+0x214>)
 8001866:	889b      	ldrh	r3, [r3, #4]
 8001868:	f245 3210 	movw	r2, #21264	; 0x5310
 800186c:	4293      	cmp	r3, r2
 800186e:	d11e      	bne.n	80018ae <LCD_Display_Dir+0x86>
			lcddev.wramcmd = 0X2C;
 8001870:	4b72      	ldr	r3, [pc, #456]	; (8001a3c <LCD_Display_Dir+0x214>)
 8001872:	222c      	movs	r2, #44	; 0x2c
 8001874:	811a      	strh	r2, [r3, #8]
			lcddev.setxcmd = 0X2A;
 8001876:	4b71      	ldr	r3, [pc, #452]	; (8001a3c <LCD_Display_Dir+0x214>)
 8001878:	222a      	movs	r2, #42	; 0x2a
 800187a:	815a      	strh	r2, [r3, #10]
			lcddev.setycmd = 0X2B;
 800187c:	4b6f      	ldr	r3, [pc, #444]	; (8001a3c <LCD_Display_Dir+0x214>)
 800187e:	222b      	movs	r2, #43	; 0x2b
 8001880:	819a      	strh	r2, [r3, #12]
			if (lcddev.id == 0X6804 || lcddev.id == 0X5310) {
 8001882:	4b6e      	ldr	r3, [pc, #440]	; (8001a3c <LCD_Display_Dir+0x214>)
 8001884:	889b      	ldrh	r3, [r3, #4]
 8001886:	f646 0204 	movw	r2, #26628	; 0x6804
 800188a:	4293      	cmp	r3, r2
 800188c:	d006      	beq.n	800189c <LCD_Display_Dir+0x74>
 800188e:	4b6b      	ldr	r3, [pc, #428]	; (8001a3c <LCD_Display_Dir+0x214>)
 8001890:	889b      	ldrh	r3, [r3, #4]
 8001892:	f245 3210 	movw	r2, #21264	; 0x5310
 8001896:	4293      	cmp	r3, r2
 8001898:	f040 80c7 	bne.w	8001a2a <LCD_Display_Dir+0x202>
				lcddev.width = 320;
 800189c:	4b67      	ldr	r3, [pc, #412]	; (8001a3c <LCD_Display_Dir+0x214>)
 800189e:	f44f 72a0 	mov.w	r2, #320	; 0x140
 80018a2:	801a      	strh	r2, [r3, #0]
				lcddev.height = 480;
 80018a4:	4b65      	ldr	r3, [pc, #404]	; (8001a3c <LCD_Display_Dir+0x214>)
 80018a6:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 80018aa:	805a      	strh	r2, [r3, #2]
			if (lcddev.id == 0X6804 || lcddev.id == 0X5310) {
 80018ac:	e0bd      	b.n	8001a2a <LCD_Display_Dir+0x202>
			}
		} else if (lcddev.id == 0x5510) {
 80018ae:	4b63      	ldr	r3, [pc, #396]	; (8001a3c <LCD_Display_Dir+0x214>)
 80018b0:	889b      	ldrh	r3, [r3, #4]
 80018b2:	f245 5210 	movw	r2, #21776	; 0x5510
 80018b6:	4293      	cmp	r3, r2
 80018b8:	d114      	bne.n	80018e4 <LCD_Display_Dir+0xbc>
			lcddev.wramcmd = 0X2C00;
 80018ba:	4b60      	ldr	r3, [pc, #384]	; (8001a3c <LCD_Display_Dir+0x214>)
 80018bc:	f44f 5230 	mov.w	r2, #11264	; 0x2c00
 80018c0:	811a      	strh	r2, [r3, #8]
			lcddev.setxcmd = 0X2A00;
 80018c2:	4b5e      	ldr	r3, [pc, #376]	; (8001a3c <LCD_Display_Dir+0x214>)
 80018c4:	f44f 5228 	mov.w	r2, #10752	; 0x2a00
 80018c8:	815a      	strh	r2, [r3, #10]
			lcddev.setycmd = 0X2B00;
 80018ca:	4b5c      	ldr	r3, [pc, #368]	; (8001a3c <LCD_Display_Dir+0x214>)
 80018cc:	f44f 522c 	mov.w	r2, #11008	; 0x2b00
 80018d0:	819a      	strh	r2, [r3, #12]
			lcddev.width = 480;
 80018d2:	4b5a      	ldr	r3, [pc, #360]	; (8001a3c <LCD_Display_Dir+0x214>)
 80018d4:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 80018d8:	801a      	strh	r2, [r3, #0]
			lcddev.height = 800;
 80018da:	4b58      	ldr	r3, [pc, #352]	; (8001a3c <LCD_Display_Dir+0x214>)
 80018dc:	f44f 7248 	mov.w	r2, #800	; 0x320
 80018e0:	805a      	strh	r2, [r3, #2]
 80018e2:	e0a3      	b.n	8001a2c <LCD_Display_Dir+0x204>
		} else if (lcddev.id == 0X1963) {
 80018e4:	4b55      	ldr	r3, [pc, #340]	; (8001a3c <LCD_Display_Dir+0x214>)
 80018e6:	889b      	ldrh	r3, [r3, #4]
 80018e8:	f641 1263 	movw	r2, #6499	; 0x1963
 80018ec:	4293      	cmp	r3, r2
 80018ee:	d111      	bne.n	8001914 <LCD_Display_Dir+0xec>
			lcddev.wramcmd = 0X2C;	//设置写入GRAM的指令
 80018f0:	4b52      	ldr	r3, [pc, #328]	; (8001a3c <LCD_Display_Dir+0x214>)
 80018f2:	222c      	movs	r2, #44	; 0x2c
 80018f4:	811a      	strh	r2, [r3, #8]
			lcddev.setxcmd = 0X2B;	//设置写X坐标指令
 80018f6:	4b51      	ldr	r3, [pc, #324]	; (8001a3c <LCD_Display_Dir+0x214>)
 80018f8:	222b      	movs	r2, #43	; 0x2b
 80018fa:	815a      	strh	r2, [r3, #10]
			lcddev.setycmd = 0X2A;	//设置写Y坐标指令
 80018fc:	4b4f      	ldr	r3, [pc, #316]	; (8001a3c <LCD_Display_Dir+0x214>)
 80018fe:	222a      	movs	r2, #42	; 0x2a
 8001900:	819a      	strh	r2, [r3, #12]
			lcddev.width = 480;		//设置宽度480
 8001902:	4b4e      	ldr	r3, [pc, #312]	; (8001a3c <LCD_Display_Dir+0x214>)
 8001904:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8001908:	801a      	strh	r2, [r3, #0]
			lcddev.height = 800;		//设置高度800
 800190a:	4b4c      	ldr	r3, [pc, #304]	; (8001a3c <LCD_Display_Dir+0x214>)
 800190c:	f44f 7248 	mov.w	r2, #800	; 0x320
 8001910:	805a      	strh	r2, [r3, #2]
 8001912:	e08b      	b.n	8001a2c <LCD_Display_Dir+0x204>
		} else {
			lcddev.wramcmd = 0X22;
 8001914:	4b49      	ldr	r3, [pc, #292]	; (8001a3c <LCD_Display_Dir+0x214>)
 8001916:	2222      	movs	r2, #34	; 0x22
 8001918:	811a      	strh	r2, [r3, #8]
			lcddev.setxcmd = 0X20;
 800191a:	4b48      	ldr	r3, [pc, #288]	; (8001a3c <LCD_Display_Dir+0x214>)
 800191c:	2220      	movs	r2, #32
 800191e:	815a      	strh	r2, [r3, #10]
			lcddev.setycmd = 0X21;
 8001920:	4b46      	ldr	r3, [pc, #280]	; (8001a3c <LCD_Display_Dir+0x214>)
 8001922:	2221      	movs	r2, #33	; 0x21
 8001924:	819a      	strh	r2, [r3, #12]
 8001926:	e081      	b.n	8001a2c <LCD_Display_Dir+0x204>
		}
	} else 				//横屏
	{
		lcddev.dir = 1;	//横屏
 8001928:	4b44      	ldr	r3, [pc, #272]	; (8001a3c <LCD_Display_Dir+0x214>)
 800192a:	2201      	movs	r2, #1
 800192c:	719a      	strb	r2, [r3, #6]
		lcddev.width = 320;
 800192e:	4b43      	ldr	r3, [pc, #268]	; (8001a3c <LCD_Display_Dir+0x214>)
 8001930:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8001934:	801a      	strh	r2, [r3, #0]
		lcddev.height = 240;
 8001936:	4b41      	ldr	r3, [pc, #260]	; (8001a3c <LCD_Display_Dir+0x214>)
 8001938:	22f0      	movs	r2, #240	; 0xf0
 800193a:	805a      	strh	r2, [r3, #2]
		if (lcddev.id == 0X9341 || lcddev.id == 0X5310) {
 800193c:	4b3f      	ldr	r3, [pc, #252]	; (8001a3c <LCD_Display_Dir+0x214>)
 800193e:	889b      	ldrh	r3, [r3, #4]
 8001940:	f249 3241 	movw	r2, #37697	; 0x9341
 8001944:	4293      	cmp	r3, r2
 8001946:	d005      	beq.n	8001954 <LCD_Display_Dir+0x12c>
 8001948:	4b3c      	ldr	r3, [pc, #240]	; (8001a3c <LCD_Display_Dir+0x214>)
 800194a:	889b      	ldrh	r3, [r3, #4]
 800194c:	f245 3210 	movw	r2, #21264	; 0x5310
 8001950:	4293      	cmp	r3, r2
 8001952:	d109      	bne.n	8001968 <LCD_Display_Dir+0x140>
			lcddev.wramcmd = 0X2C;
 8001954:	4b39      	ldr	r3, [pc, #228]	; (8001a3c <LCD_Display_Dir+0x214>)
 8001956:	222c      	movs	r2, #44	; 0x2c
 8001958:	811a      	strh	r2, [r3, #8]
			lcddev.setxcmd = 0X2A;
 800195a:	4b38      	ldr	r3, [pc, #224]	; (8001a3c <LCD_Display_Dir+0x214>)
 800195c:	222a      	movs	r2, #42	; 0x2a
 800195e:	815a      	strh	r2, [r3, #10]
			lcddev.setycmd = 0X2B;
 8001960:	4b36      	ldr	r3, [pc, #216]	; (8001a3c <LCD_Display_Dir+0x214>)
 8001962:	222b      	movs	r2, #43	; 0x2b
 8001964:	819a      	strh	r2, [r3, #12]
 8001966:	e04b      	b.n	8001a00 <LCD_Display_Dir+0x1d8>
		} else if (lcddev.id == 0X6804) {
 8001968:	4b34      	ldr	r3, [pc, #208]	; (8001a3c <LCD_Display_Dir+0x214>)
 800196a:	889b      	ldrh	r3, [r3, #4]
 800196c:	f646 0204 	movw	r2, #26628	; 0x6804
 8001970:	4293      	cmp	r3, r2
 8001972:	d109      	bne.n	8001988 <LCD_Display_Dir+0x160>
			lcddev.wramcmd = 0X2C;
 8001974:	4b31      	ldr	r3, [pc, #196]	; (8001a3c <LCD_Display_Dir+0x214>)
 8001976:	222c      	movs	r2, #44	; 0x2c
 8001978:	811a      	strh	r2, [r3, #8]
			lcddev.setxcmd = 0X2B;
 800197a:	4b30      	ldr	r3, [pc, #192]	; (8001a3c <LCD_Display_Dir+0x214>)
 800197c:	222b      	movs	r2, #43	; 0x2b
 800197e:	815a      	strh	r2, [r3, #10]
			lcddev.setycmd = 0X2A;
 8001980:	4b2e      	ldr	r3, [pc, #184]	; (8001a3c <LCD_Display_Dir+0x214>)
 8001982:	222a      	movs	r2, #42	; 0x2a
 8001984:	819a      	strh	r2, [r3, #12]
 8001986:	e03b      	b.n	8001a00 <LCD_Display_Dir+0x1d8>
		} else if (lcddev.id == 0x5510) {
 8001988:	4b2c      	ldr	r3, [pc, #176]	; (8001a3c <LCD_Display_Dir+0x214>)
 800198a:	889b      	ldrh	r3, [r3, #4]
 800198c:	f245 5210 	movw	r2, #21776	; 0x5510
 8001990:	4293      	cmp	r3, r2
 8001992:	d114      	bne.n	80019be <LCD_Display_Dir+0x196>
			lcddev.wramcmd = 0X2C00;
 8001994:	4b29      	ldr	r3, [pc, #164]	; (8001a3c <LCD_Display_Dir+0x214>)
 8001996:	f44f 5230 	mov.w	r2, #11264	; 0x2c00
 800199a:	811a      	strh	r2, [r3, #8]
			lcddev.setxcmd = 0X2A00;
 800199c:	4b27      	ldr	r3, [pc, #156]	; (8001a3c <LCD_Display_Dir+0x214>)
 800199e:	f44f 5228 	mov.w	r2, #10752	; 0x2a00
 80019a2:	815a      	strh	r2, [r3, #10]
			lcddev.setycmd = 0X2B00;
 80019a4:	4b25      	ldr	r3, [pc, #148]	; (8001a3c <LCD_Display_Dir+0x214>)
 80019a6:	f44f 522c 	mov.w	r2, #11008	; 0x2b00
 80019aa:	819a      	strh	r2, [r3, #12]
			lcddev.width = 800;
 80019ac:	4b23      	ldr	r3, [pc, #140]	; (8001a3c <LCD_Display_Dir+0x214>)
 80019ae:	f44f 7248 	mov.w	r2, #800	; 0x320
 80019b2:	801a      	strh	r2, [r3, #0]
			lcddev.height = 480;
 80019b4:	4b21      	ldr	r3, [pc, #132]	; (8001a3c <LCD_Display_Dir+0x214>)
 80019b6:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 80019ba:	805a      	strh	r2, [r3, #2]
 80019bc:	e020      	b.n	8001a00 <LCD_Display_Dir+0x1d8>
		} else if (lcddev.id == 0X1963) {
 80019be:	4b1f      	ldr	r3, [pc, #124]	; (8001a3c <LCD_Display_Dir+0x214>)
 80019c0:	889b      	ldrh	r3, [r3, #4]
 80019c2:	f641 1263 	movw	r2, #6499	; 0x1963
 80019c6:	4293      	cmp	r3, r2
 80019c8:	d111      	bne.n	80019ee <LCD_Display_Dir+0x1c6>
			lcddev.wramcmd = 0X2C;	//设置写入GRAM的指令
 80019ca:	4b1c      	ldr	r3, [pc, #112]	; (8001a3c <LCD_Display_Dir+0x214>)
 80019cc:	222c      	movs	r2, #44	; 0x2c
 80019ce:	811a      	strh	r2, [r3, #8]
			lcddev.setxcmd = 0X2A;	//设置写X坐标指令
 80019d0:	4b1a      	ldr	r3, [pc, #104]	; (8001a3c <LCD_Display_Dir+0x214>)
 80019d2:	222a      	movs	r2, #42	; 0x2a
 80019d4:	815a      	strh	r2, [r3, #10]
			lcddev.setycmd = 0X2B;	//设置写Y坐标指令
 80019d6:	4b19      	ldr	r3, [pc, #100]	; (8001a3c <LCD_Display_Dir+0x214>)
 80019d8:	222b      	movs	r2, #43	; 0x2b
 80019da:	819a      	strh	r2, [r3, #12]
			lcddev.width = 800;		//设置宽度800
 80019dc:	4b17      	ldr	r3, [pc, #92]	; (8001a3c <LCD_Display_Dir+0x214>)
 80019de:	f44f 7248 	mov.w	r2, #800	; 0x320
 80019e2:	801a      	strh	r2, [r3, #0]
			lcddev.height = 480;		//设置高度480
 80019e4:	4b15      	ldr	r3, [pc, #84]	; (8001a3c <LCD_Display_Dir+0x214>)
 80019e6:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 80019ea:	805a      	strh	r2, [r3, #2]
 80019ec:	e008      	b.n	8001a00 <LCD_Display_Dir+0x1d8>
		} else {
			lcddev.wramcmd = 0X22;
 80019ee:	4b13      	ldr	r3, [pc, #76]	; (8001a3c <LCD_Display_Dir+0x214>)
 80019f0:	2222      	movs	r2, #34	; 0x22
 80019f2:	811a      	strh	r2, [r3, #8]
			lcddev.setxcmd = 0X21;
 80019f4:	4b11      	ldr	r3, [pc, #68]	; (8001a3c <LCD_Display_Dir+0x214>)
 80019f6:	2221      	movs	r2, #33	; 0x21
 80019f8:	815a      	strh	r2, [r3, #10]
			lcddev.setycmd = 0X20;
 80019fa:	4b10      	ldr	r3, [pc, #64]	; (8001a3c <LCD_Display_Dir+0x214>)
 80019fc:	2220      	movs	r2, #32
 80019fe:	819a      	strh	r2, [r3, #12]
		}
		if (lcddev.id == 0X6804 || lcddev.id == 0X5310) {
 8001a00:	4b0e      	ldr	r3, [pc, #56]	; (8001a3c <LCD_Display_Dir+0x214>)
 8001a02:	889b      	ldrh	r3, [r3, #4]
 8001a04:	f646 0204 	movw	r2, #26628	; 0x6804
 8001a08:	4293      	cmp	r3, r2
 8001a0a:	d005      	beq.n	8001a18 <LCD_Display_Dir+0x1f0>
 8001a0c:	4b0b      	ldr	r3, [pc, #44]	; (8001a3c <LCD_Display_Dir+0x214>)
 8001a0e:	889b      	ldrh	r3, [r3, #4]
 8001a10:	f245 3210 	movw	r2, #21264	; 0x5310
 8001a14:	4293      	cmp	r3, r2
 8001a16:	d109      	bne.n	8001a2c <LCD_Display_Dir+0x204>
			lcddev.width = 480;
 8001a18:	4b08      	ldr	r3, [pc, #32]	; (8001a3c <LCD_Display_Dir+0x214>)
 8001a1a:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8001a1e:	801a      	strh	r2, [r3, #0]
			lcddev.height = 320;
 8001a20:	4b06      	ldr	r3, [pc, #24]	; (8001a3c <LCD_Display_Dir+0x214>)
 8001a22:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8001a26:	805a      	strh	r2, [r3, #2]
 8001a28:	e000      	b.n	8001a2c <LCD_Display_Dir+0x204>
			if (lcddev.id == 0X6804 || lcddev.id == 0X5310) {
 8001a2a:	bf00      	nop
		}
	}
	LCD_Scan_Dir(DFT_SCAN_DIR);	//默认扫描方向
 8001a2c:	2000      	movs	r0, #0
 8001a2e:	f7ff fb43 	bl	80010b8 <LCD_Scan_Dir>
}
 8001a32:	bf00      	nop
 8001a34:	3708      	adds	r7, #8
 8001a36:	46bd      	mov	sp, r7
 8001a38:	bd80      	pop	{r7, pc}
 8001a3a:	bf00      	nop
 8001a3c:	20000028 	.word	0x20000028

08001a40 <LCD_Init>:
	}
}
//初始化lcd
//该初始化函数可以初始化各种ALIENTEK出品的LCD液晶屏
//本函数占用较大flash,用户可以根据自己的实际情况,删掉未用到的LCD初始化代码.以节省空间.
void LCD_Init(void) {
 8001a40:	b580      	push	{r7, lr}
 8001a42:	b086      	sub	sp, #24
 8001a44:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_Initure;

	__HAL_RCC_GPIOB_CLK_ENABLE();           	//开启GPIOB时钟
 8001a46:	4b90      	ldr	r3, [pc, #576]	; (8001c88 <LCD_Init+0x248>)
 8001a48:	699b      	ldr	r3, [r3, #24]
 8001a4a:	4a8f      	ldr	r2, [pc, #572]	; (8001c88 <LCD_Init+0x248>)
 8001a4c:	f043 0308 	orr.w	r3, r3, #8
 8001a50:	6193      	str	r3, [r2, #24]
 8001a52:	4b8d      	ldr	r3, [pc, #564]	; (8001c88 <LCD_Init+0x248>)
 8001a54:	699b      	ldr	r3, [r3, #24]
 8001a56:	f003 0308 	and.w	r3, r3, #8
 8001a5a:	607b      	str	r3, [r7, #4]
 8001a5c:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOC_CLK_ENABLE();           	//开启GPIOC时钟
 8001a5e:	4b8a      	ldr	r3, [pc, #552]	; (8001c88 <LCD_Init+0x248>)
 8001a60:	699b      	ldr	r3, [r3, #24]
 8001a62:	4a89      	ldr	r2, [pc, #548]	; (8001c88 <LCD_Init+0x248>)
 8001a64:	f043 0310 	orr.w	r3, r3, #16
 8001a68:	6193      	str	r3, [r2, #24]
 8001a6a:	4b87      	ldr	r3, [pc, #540]	; (8001c88 <LCD_Init+0x248>)
 8001a6c:	699b      	ldr	r3, [r3, #24]
 8001a6e:	f003 0310 	and.w	r3, r3, #16
 8001a72:	603b      	str	r3, [r7, #0]
 8001a74:	683b      	ldr	r3, [r7, #0]

	//PC6,7,8,9,10
	GPIO_Initure.Pin = GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_8 |\
 8001a76:	f44f 63f8 	mov.w	r3, #1984	; 0x7c0
 8001a7a:	60bb      	str	r3, [r7, #8]
 GPIO_PIN_9
			| GPIO_PIN_10;
	GPIO_Initure.Mode = GPIO_MODE_OUTPUT_PP;  	//推挽输出
 8001a7c:	2301      	movs	r3, #1
 8001a7e:	60fb      	str	r3, [r7, #12]
	GPIO_Initure.Pull = GPIO_PULLUP;          	//上拉
 8001a80:	2301      	movs	r3, #1
 8001a82:	613b      	str	r3, [r7, #16]
	GPIO_Initure.Speed = GPIO_SPEED_FREQ_HIGH;    	 	//高速
 8001a84:	2303      	movs	r3, #3
 8001a86:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIOC, &GPIO_Initure);
 8001a88:	f107 0308 	add.w	r3, r7, #8
 8001a8c:	4619      	mov	r1, r3
 8001a8e:	487f      	ldr	r0, [pc, #508]	; (8001c8c <LCD_Init+0x24c>)
 8001a90:	f004 fc28 	bl	80062e4 <HAL_GPIO_Init>

	//PB0~15
	GPIO_Initure.Pin = GPIO_PIN_All;				//PB推挽输出
 8001a94:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001a98:	60bb      	str	r3, [r7, #8]
	HAL_GPIO_Init(GPIOB, &GPIO_Initure);
 8001a9a:	f107 0308 	add.w	r3, r7, #8
 8001a9e:	4619      	mov	r1, r3
 8001aa0:	487b      	ldr	r0, [pc, #492]	; (8001c90 <LCD_Init+0x250>)
 8001aa2:	f004 fc1f 	bl	80062e4 <HAL_GPIO_Init>

//	__HAL_AFIO_REMAP_SWJ_DISABLE();				//禁止JTAG

	HAL_Delay(50); // delay 50 ms
 8001aa6:	2032      	movs	r0, #50	; 0x32
 8001aa8:	f004 f9a8 	bl	8005dfc <HAL_Delay>
	LCD_WriteReg(0x0000, 0x0001);
 8001aac:	2101      	movs	r1, #1
 8001aae:	2000      	movs	r0, #0
 8001ab0:	f7fe fff0 	bl	8000a94 <LCD_WriteReg>
	HAL_Delay(50); // delay 50 ms
 8001ab4:	2032      	movs	r0, #50	; 0x32
 8001ab6:	f004 f9a1 	bl	8005dfc <HAL_Delay>
	lcddev.id = LCD_ReadReg(0x0000);
 8001aba:	2000      	movs	r0, #0
 8001abc:	f7ff f814 	bl	8000ae8 <LCD_ReadReg>
 8001ac0:	4603      	mov	r3, r0
 8001ac2:	461a      	mov	r2, r3
 8001ac4:	4b73      	ldr	r3, [pc, #460]	; (8001c94 <LCD_Init+0x254>)
 8001ac6:	809a      	strh	r2, [r3, #4]
	if (lcddev.id < 0XFF || lcddev.id == 0XFFFF || lcddev.id == 0X9300) //读到ID不正确,新增lcddev.id==0X9300判断，因为9341在未被复位的情况下会被读成9300
 8001ac8:	4b72      	ldr	r3, [pc, #456]	; (8001c94 <LCD_Init+0x254>)
 8001aca:	889b      	ldrh	r3, [r3, #4]
 8001acc:	2bfe      	cmp	r3, #254	; 0xfe
 8001ace:	d90b      	bls.n	8001ae8 <LCD_Init+0xa8>
 8001ad0:	4b70      	ldr	r3, [pc, #448]	; (8001c94 <LCD_Init+0x254>)
 8001ad2:	889b      	ldrh	r3, [r3, #4]
 8001ad4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001ad8:	4293      	cmp	r3, r2
 8001ada:	d005      	beq.n	8001ae8 <LCD_Init+0xa8>
 8001adc:	4b6d      	ldr	r3, [pc, #436]	; (8001c94 <LCD_Init+0x254>)
 8001ade:	889b      	ldrh	r3, [r3, #4]
 8001ae0:	f5b3 4f13 	cmp.w	r3, #37632	; 0x9300
 8001ae4:	f040 80c8 	bne.w	8001c78 <LCD_Init+0x238>
			{
		//尝试9341 ID的读取
		LCD_WR_REG(0XD3);
 8001ae8:	20d3      	movs	r0, #211	; 0xd3
 8001aea:	f7fe ff47 	bl	800097c <LCD_WR_REG>
		LCD_RD_DATA(); 				//dummy read 	
 8001aee:	f7fe ff8d 	bl	8000a0c <LCD_RD_DATA>
		LCD_RD_DATA();   	    	//读到0X00
 8001af2:	f7fe ff8b 	bl	8000a0c <LCD_RD_DATA>
		lcddev.id = LCD_RD_DATA();   	//读取93
 8001af6:	f7fe ff89 	bl	8000a0c <LCD_RD_DATA>
 8001afa:	4603      	mov	r3, r0
 8001afc:	461a      	mov	r2, r3
 8001afe:	4b65      	ldr	r3, [pc, #404]	; (8001c94 <LCD_Init+0x254>)
 8001b00:	809a      	strh	r2, [r3, #4]
		lcddev.id <<= 8;
 8001b02:	4b64      	ldr	r3, [pc, #400]	; (8001c94 <LCD_Init+0x254>)
 8001b04:	889b      	ldrh	r3, [r3, #4]
 8001b06:	021b      	lsls	r3, r3, #8
 8001b08:	b29a      	uxth	r2, r3
 8001b0a:	4b62      	ldr	r3, [pc, #392]	; (8001c94 <LCD_Init+0x254>)
 8001b0c:	809a      	strh	r2, [r3, #4]
		lcddev.id |= LCD_RD_DATA();  	//读取41
 8001b0e:	f7fe ff7d 	bl	8000a0c <LCD_RD_DATA>
 8001b12:	4603      	mov	r3, r0
 8001b14:	461a      	mov	r2, r3
 8001b16:	4b5f      	ldr	r3, [pc, #380]	; (8001c94 <LCD_Init+0x254>)
 8001b18:	889b      	ldrh	r3, [r3, #4]
 8001b1a:	4313      	orrs	r3, r2
 8001b1c:	b29a      	uxth	r2, r3
 8001b1e:	4b5d      	ldr	r3, [pc, #372]	; (8001c94 <LCD_Init+0x254>)
 8001b20:	809a      	strh	r2, [r3, #4]
		if (lcddev.id != 0X9341)		//非9341,尝试是不是6804
 8001b22:	4b5c      	ldr	r3, [pc, #368]	; (8001c94 <LCD_Init+0x254>)
 8001b24:	889b      	ldrh	r3, [r3, #4]
 8001b26:	f249 3241 	movw	r2, #37697	; 0x9341
 8001b2a:	4293      	cmp	r3, r2
 8001b2c:	f000 80a4 	beq.w	8001c78 <LCD_Init+0x238>
				{
			LCD_WR_REG(0XBF);
 8001b30:	20bf      	movs	r0, #191	; 0xbf
 8001b32:	f7fe ff23 	bl	800097c <LCD_WR_REG>
			LCD_RD_DATA(); 			//dummy read 	 
 8001b36:	f7fe ff69 	bl	8000a0c <LCD_RD_DATA>
			LCD_RD_DATA();   	    //读回0X01
 8001b3a:	f7fe ff67 	bl	8000a0c <LCD_RD_DATA>
			LCD_RD_DATA(); 			//读回0XD0
 8001b3e:	f7fe ff65 	bl	8000a0c <LCD_RD_DATA>
			lcddev.id = LCD_RD_DATA(); 			//这里读回0X68
 8001b42:	f7fe ff63 	bl	8000a0c <LCD_RD_DATA>
 8001b46:	4603      	mov	r3, r0
 8001b48:	461a      	mov	r2, r3
 8001b4a:	4b52      	ldr	r3, [pc, #328]	; (8001c94 <LCD_Init+0x254>)
 8001b4c:	809a      	strh	r2, [r3, #4]
			lcddev.id <<= 8;
 8001b4e:	4b51      	ldr	r3, [pc, #324]	; (8001c94 <LCD_Init+0x254>)
 8001b50:	889b      	ldrh	r3, [r3, #4]
 8001b52:	021b      	lsls	r3, r3, #8
 8001b54:	b29a      	uxth	r2, r3
 8001b56:	4b4f      	ldr	r3, [pc, #316]	; (8001c94 <LCD_Init+0x254>)
 8001b58:	809a      	strh	r2, [r3, #4]
			lcddev.id |= LCD_RD_DATA(); 			//这里读回0X04
 8001b5a:	f7fe ff57 	bl	8000a0c <LCD_RD_DATA>
 8001b5e:	4603      	mov	r3, r0
 8001b60:	461a      	mov	r2, r3
 8001b62:	4b4c      	ldr	r3, [pc, #304]	; (8001c94 <LCD_Init+0x254>)
 8001b64:	889b      	ldrh	r3, [r3, #4]
 8001b66:	4313      	orrs	r3, r2
 8001b68:	b29a      	uxth	r2, r3
 8001b6a:	4b4a      	ldr	r3, [pc, #296]	; (8001c94 <LCD_Init+0x254>)
 8001b6c:	809a      	strh	r2, [r3, #4]
			if (lcddev.id != 0X6804)	//也不是6804,尝试看看是不是NT35310
 8001b6e:	4b49      	ldr	r3, [pc, #292]	; (8001c94 <LCD_Init+0x254>)
 8001b70:	889b      	ldrh	r3, [r3, #4]
 8001b72:	f646 0204 	movw	r2, #26628	; 0x6804
 8001b76:	4293      	cmp	r3, r2
 8001b78:	d07e      	beq.n	8001c78 <LCD_Init+0x238>
					{
				LCD_WR_REG(0XD4);
 8001b7a:	20d4      	movs	r0, #212	; 0xd4
 8001b7c:	f7fe fefe 	bl	800097c <LCD_WR_REG>
				LCD_RD_DATA(); 				//dummy read  
 8001b80:	f7fe ff44 	bl	8000a0c <LCD_RD_DATA>
				LCD_RD_DATA();   			//读回0X01	 
 8001b84:	f7fe ff42 	bl	8000a0c <LCD_RD_DATA>
				lcddev.id = LCD_RD_DATA();	//读回0X53
 8001b88:	f7fe ff40 	bl	8000a0c <LCD_RD_DATA>
 8001b8c:	4603      	mov	r3, r0
 8001b8e:	461a      	mov	r2, r3
 8001b90:	4b40      	ldr	r3, [pc, #256]	; (8001c94 <LCD_Init+0x254>)
 8001b92:	809a      	strh	r2, [r3, #4]
				lcddev.id <<= 8;
 8001b94:	4b3f      	ldr	r3, [pc, #252]	; (8001c94 <LCD_Init+0x254>)
 8001b96:	889b      	ldrh	r3, [r3, #4]
 8001b98:	021b      	lsls	r3, r3, #8
 8001b9a:	b29a      	uxth	r2, r3
 8001b9c:	4b3d      	ldr	r3, [pc, #244]	; (8001c94 <LCD_Init+0x254>)
 8001b9e:	809a      	strh	r2, [r3, #4]
				lcddev.id |= LCD_RD_DATA();	//这里读回0X10
 8001ba0:	f7fe ff34 	bl	8000a0c <LCD_RD_DATA>
 8001ba4:	4603      	mov	r3, r0
 8001ba6:	461a      	mov	r2, r3
 8001ba8:	4b3a      	ldr	r3, [pc, #232]	; (8001c94 <LCD_Init+0x254>)
 8001baa:	889b      	ldrh	r3, [r3, #4]
 8001bac:	4313      	orrs	r3, r2
 8001bae:	b29a      	uxth	r2, r3
 8001bb0:	4b38      	ldr	r3, [pc, #224]	; (8001c94 <LCD_Init+0x254>)
 8001bb2:	809a      	strh	r2, [r3, #4]
				if (lcddev.id != 0X5310)		//也不是NT35310,尝试看看是不是NT35510
 8001bb4:	4b37      	ldr	r3, [pc, #220]	; (8001c94 <LCD_Init+0x254>)
 8001bb6:	889b      	ldrh	r3, [r3, #4]
 8001bb8:	f245 3210 	movw	r2, #21264	; 0x5310
 8001bbc:	4293      	cmp	r3, r2
 8001bbe:	d05b      	beq.n	8001c78 <LCD_Init+0x238>
						{
					LCD_WR_REG(0XDA00);
 8001bc0:	f44f 405a 	mov.w	r0, #55808	; 0xda00
 8001bc4:	f7fe feda 	bl	800097c <LCD_WR_REG>
					LCD_RD_DATA();   		//读回0X00	 
 8001bc8:	f7fe ff20 	bl	8000a0c <LCD_RD_DATA>
					LCD_WR_REG(0XDB00);
 8001bcc:	f44f 405b 	mov.w	r0, #56064	; 0xdb00
 8001bd0:	f7fe fed4 	bl	800097c <LCD_WR_REG>
					lcddev.id = LCD_RD_DATA();   		//读回0X80
 8001bd4:	f7fe ff1a 	bl	8000a0c <LCD_RD_DATA>
 8001bd8:	4603      	mov	r3, r0
 8001bda:	461a      	mov	r2, r3
 8001bdc:	4b2d      	ldr	r3, [pc, #180]	; (8001c94 <LCD_Init+0x254>)
 8001bde:	809a      	strh	r2, [r3, #4]
					lcddev.id <<= 8;
 8001be0:	4b2c      	ldr	r3, [pc, #176]	; (8001c94 <LCD_Init+0x254>)
 8001be2:	889b      	ldrh	r3, [r3, #4]
 8001be4:	021b      	lsls	r3, r3, #8
 8001be6:	b29a      	uxth	r2, r3
 8001be8:	4b2a      	ldr	r3, [pc, #168]	; (8001c94 <LCD_Init+0x254>)
 8001bea:	809a      	strh	r2, [r3, #4]
					LCD_WR_REG(0XDC00);
 8001bec:	f44f 405c 	mov.w	r0, #56320	; 0xdc00
 8001bf0:	f7fe fec4 	bl	800097c <LCD_WR_REG>
					lcddev.id |= LCD_RD_DATA();   		//读回0X00
 8001bf4:	f7fe ff0a 	bl	8000a0c <LCD_RD_DATA>
 8001bf8:	4603      	mov	r3, r0
 8001bfa:	461a      	mov	r2, r3
 8001bfc:	4b25      	ldr	r3, [pc, #148]	; (8001c94 <LCD_Init+0x254>)
 8001bfe:	889b      	ldrh	r3, [r3, #4]
 8001c00:	4313      	orrs	r3, r2
 8001c02:	b29a      	uxth	r2, r3
 8001c04:	4b23      	ldr	r3, [pc, #140]	; (8001c94 <LCD_Init+0x254>)
 8001c06:	809a      	strh	r2, [r3, #4]
					if (lcddev.id == 0x8000)
 8001c08:	4b22      	ldr	r3, [pc, #136]	; (8001c94 <LCD_Init+0x254>)
 8001c0a:	889b      	ldrh	r3, [r3, #4]
 8001c0c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001c10:	d103      	bne.n	8001c1a <LCD_Init+0x1da>
						lcddev.id = 0x5510;   		//NT35510读回的ID是8000H,为方便区分,我们强制设置为5510
 8001c12:	4b20      	ldr	r3, [pc, #128]	; (8001c94 <LCD_Init+0x254>)
 8001c14:	f245 5210 	movw	r2, #21776	; 0x5510
 8001c18:	809a      	strh	r2, [r3, #4]
					if (lcddev.id != 0X5510)			//也不是NT5510,尝试看看是不是SSD1963
 8001c1a:	4b1e      	ldr	r3, [pc, #120]	; (8001c94 <LCD_Init+0x254>)
 8001c1c:	889b      	ldrh	r3, [r3, #4]
 8001c1e:	f245 5210 	movw	r2, #21776	; 0x5510
 8001c22:	4293      	cmp	r3, r2
 8001c24:	d028      	beq.n	8001c78 <LCD_Init+0x238>
							{
						LCD_WR_REG(0XA1);
 8001c26:	20a1      	movs	r0, #161	; 0xa1
 8001c28:	f7fe fea8 	bl	800097c <LCD_WR_REG>
						lcddev.id = LCD_RD_DATA();
 8001c2c:	f7fe feee 	bl	8000a0c <LCD_RD_DATA>
 8001c30:	4603      	mov	r3, r0
 8001c32:	461a      	mov	r2, r3
 8001c34:	4b17      	ldr	r3, [pc, #92]	; (8001c94 <LCD_Init+0x254>)
 8001c36:	809a      	strh	r2, [r3, #4]
						lcddev.id = LCD_RD_DATA();	//读回0X57
 8001c38:	f7fe fee8 	bl	8000a0c <LCD_RD_DATA>
 8001c3c:	4603      	mov	r3, r0
 8001c3e:	461a      	mov	r2, r3
 8001c40:	4b14      	ldr	r3, [pc, #80]	; (8001c94 <LCD_Init+0x254>)
 8001c42:	809a      	strh	r2, [r3, #4]
						lcddev.id <<= 8;
 8001c44:	4b13      	ldr	r3, [pc, #76]	; (8001c94 <LCD_Init+0x254>)
 8001c46:	889b      	ldrh	r3, [r3, #4]
 8001c48:	021b      	lsls	r3, r3, #8
 8001c4a:	b29a      	uxth	r2, r3
 8001c4c:	4b11      	ldr	r3, [pc, #68]	; (8001c94 <LCD_Init+0x254>)
 8001c4e:	809a      	strh	r2, [r3, #4]
						lcddev.id |= LCD_RD_DATA();	//读回0X61
 8001c50:	f7fe fedc 	bl	8000a0c <LCD_RD_DATA>
 8001c54:	4603      	mov	r3, r0
 8001c56:	461a      	mov	r2, r3
 8001c58:	4b0e      	ldr	r3, [pc, #56]	; (8001c94 <LCD_Init+0x254>)
 8001c5a:	889b      	ldrh	r3, [r3, #4]
 8001c5c:	4313      	orrs	r3, r2
 8001c5e:	b29a      	uxth	r2, r3
 8001c60:	4b0c      	ldr	r3, [pc, #48]	; (8001c94 <LCD_Init+0x254>)
 8001c62:	809a      	strh	r2, [r3, #4]
						if (lcddev.id == 0X5761)
 8001c64:	4b0b      	ldr	r3, [pc, #44]	; (8001c94 <LCD_Init+0x254>)
 8001c66:	889b      	ldrh	r3, [r3, #4]
 8001c68:	f245 7261 	movw	r2, #22369	; 0x5761
 8001c6c:	4293      	cmp	r3, r2
 8001c6e:	d103      	bne.n	8001c78 <LCD_Init+0x238>
							lcddev.id = 0X1963;	//SSD1963读回的ID是5761H,为方便区分,我们强制设置为1963
 8001c70:	4b08      	ldr	r3, [pc, #32]	; (8001c94 <LCD_Init+0x254>)
 8001c72:	f641 1263 	movw	r2, #6499	; 0x1963
 8001c76:	809a      	strh	r2, [r3, #4]
				}
			}
		}
	}
// 	printf(" LCD ID:%x\r\n",lcddev.id); //打印LCD ID
	if (lcddev.id == 0X9341)	//9341初始化
 8001c78:	4b06      	ldr	r3, [pc, #24]	; (8001c94 <LCD_Init+0x254>)
 8001c7a:	889b      	ldrh	r3, [r3, #4]
 8001c7c:	f249 3241 	movw	r2, #37697	; 0x9341
 8001c80:	4293      	cmp	r3, r2
 8001c82:	f040 811f 	bne.w	8001ec4 <LCD_Init+0x484>
 8001c86:	e007      	b.n	8001c98 <LCD_Init+0x258>
 8001c88:	40021000 	.word	0x40021000
 8001c8c:	40011000 	.word	0x40011000
 8001c90:	40010c00 	.word	0x40010c00
 8001c94:	20000028 	.word	0x20000028
			{
		LCD_WR_REG(0xCF);
 8001c98:	20cf      	movs	r0, #207	; 0xcf
 8001c9a:	f7fe fe6f 	bl	800097c <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 8001c9e:	2000      	movs	r0, #0
 8001ca0:	f7fe fe90 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xC1);
 8001ca4:	20c1      	movs	r0, #193	; 0xc1
 8001ca6:	f7fe fe8d 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X30);
 8001caa:	2030      	movs	r0, #48	; 0x30
 8001cac:	f7fe fe8a 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_REG(0xED);
 8001cb0:	20ed      	movs	r0, #237	; 0xed
 8001cb2:	f7fe fe63 	bl	800097c <LCD_WR_REG>
		LCD_WR_DATAX(0x64);
 8001cb6:	2064      	movs	r0, #100	; 0x64
 8001cb8:	f7fe fe84 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x03);
 8001cbc:	2003      	movs	r0, #3
 8001cbe:	f7fe fe81 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X12);
 8001cc2:	2012      	movs	r0, #18
 8001cc4:	f7fe fe7e 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X81);
 8001cc8:	2081      	movs	r0, #129	; 0x81
 8001cca:	f7fe fe7b 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_REG(0xE8);
 8001cce:	20e8      	movs	r0, #232	; 0xe8
 8001cd0:	f7fe fe54 	bl	800097c <LCD_WR_REG>
		LCD_WR_DATAX(0x85);
 8001cd4:	2085      	movs	r0, #133	; 0x85
 8001cd6:	f7fe fe75 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x10);
 8001cda:	2010      	movs	r0, #16
 8001cdc:	f7fe fe72 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x7A);
 8001ce0:	207a      	movs	r0, #122	; 0x7a
 8001ce2:	f7fe fe6f 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_REG(0xCB);
 8001ce6:	20cb      	movs	r0, #203	; 0xcb
 8001ce8:	f7fe fe48 	bl	800097c <LCD_WR_REG>
		LCD_WR_DATAX(0x39);
 8001cec:	2039      	movs	r0, #57	; 0x39
 8001cee:	f7fe fe69 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x2C);
 8001cf2:	202c      	movs	r0, #44	; 0x2c
 8001cf4:	f7fe fe66 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8001cf8:	2000      	movs	r0, #0
 8001cfa:	f7fe fe63 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x34);
 8001cfe:	2034      	movs	r0, #52	; 0x34
 8001d00:	f7fe fe60 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x02);
 8001d04:	2002      	movs	r0, #2
 8001d06:	f7fe fe5d 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_REG(0xF7);
 8001d0a:	20f7      	movs	r0, #247	; 0xf7
 8001d0c:	f7fe fe36 	bl	800097c <LCD_WR_REG>
		LCD_WR_DATAX(0x20);
 8001d10:	2020      	movs	r0, #32
 8001d12:	f7fe fe57 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_REG(0xEA);
 8001d16:	20ea      	movs	r0, #234	; 0xea
 8001d18:	f7fe fe30 	bl	800097c <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 8001d1c:	2000      	movs	r0, #0
 8001d1e:	f7fe fe51 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8001d22:	2000      	movs	r0, #0
 8001d24:	f7fe fe4e 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_REG(0xC0);    //Power control 
 8001d28:	20c0      	movs	r0, #192	; 0xc0
 8001d2a:	f7fe fe27 	bl	800097c <LCD_WR_REG>
		LCD_WR_DATAX(0x1B);   //VRH[5:0] 
 8001d2e:	201b      	movs	r0, #27
 8001d30:	f7fe fe48 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_REG(0xC1);    //Power control 
 8001d34:	20c1      	movs	r0, #193	; 0xc1
 8001d36:	f7fe fe21 	bl	800097c <LCD_WR_REG>
		LCD_WR_DATAX(0x01);   //SAP[2:0];BT[3:0] 
 8001d3a:	2001      	movs	r0, #1
 8001d3c:	f7fe fe42 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_REG(0xC5);    //VCM control 
 8001d40:	20c5      	movs	r0, #197	; 0xc5
 8001d42:	f7fe fe1b 	bl	800097c <LCD_WR_REG>
		LCD_WR_DATAX(0x30); 	 //3F
 8001d46:	2030      	movs	r0, #48	; 0x30
 8001d48:	f7fe fe3c 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x30); 	 //3C
 8001d4c:	2030      	movs	r0, #48	; 0x30
 8001d4e:	f7fe fe39 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_REG(0xC7);    //VCM control2 
 8001d52:	20c7      	movs	r0, #199	; 0xc7
 8001d54:	f7fe fe12 	bl	800097c <LCD_WR_REG>
		LCD_WR_DATAX(0XB7);
 8001d58:	20b7      	movs	r0, #183	; 0xb7
 8001d5a:	f7fe fe33 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_REG(0x36);    // Memory Access Control 
 8001d5e:	2036      	movs	r0, #54	; 0x36
 8001d60:	f7fe fe0c 	bl	800097c <LCD_WR_REG>
		LCD_WR_DATAX(0x48);
 8001d64:	2048      	movs	r0, #72	; 0x48
 8001d66:	f7fe fe2d 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_REG(0x3A);
 8001d6a:	203a      	movs	r0, #58	; 0x3a
 8001d6c:	f7fe fe06 	bl	800097c <LCD_WR_REG>
		LCD_WR_DATAX(0x55);
 8001d70:	2055      	movs	r0, #85	; 0x55
 8001d72:	f7fe fe27 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_REG(0xB1);
 8001d76:	20b1      	movs	r0, #177	; 0xb1
 8001d78:	f7fe fe00 	bl	800097c <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 8001d7c:	2000      	movs	r0, #0
 8001d7e:	f7fe fe21 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x1A);
 8001d82:	201a      	movs	r0, #26
 8001d84:	f7fe fe1e 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_REG(0xB6);    // Display Function Control 
 8001d88:	20b6      	movs	r0, #182	; 0xb6
 8001d8a:	f7fe fdf7 	bl	800097c <LCD_WR_REG>
		LCD_WR_DATAX(0x0A);
 8001d8e:	200a      	movs	r0, #10
 8001d90:	f7fe fe18 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xA2);
 8001d94:	20a2      	movs	r0, #162	; 0xa2
 8001d96:	f7fe fe15 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_REG(0xF2);    // 3Gamma Function Disable 
 8001d9a:	20f2      	movs	r0, #242	; 0xf2
 8001d9c:	f7fe fdee 	bl	800097c <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 8001da0:	2000      	movs	r0, #0
 8001da2:	f7fe fe0f 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_REG(0x26);    //Gamma curve selected 
 8001da6:	2026      	movs	r0, #38	; 0x26
 8001da8:	f7fe fde8 	bl	800097c <LCD_WR_REG>
		LCD_WR_DATAX(0x01);
 8001dac:	2001      	movs	r0, #1
 8001dae:	f7fe fe09 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_REG(0xE0);    //Set Gamma 
 8001db2:	20e0      	movs	r0, #224	; 0xe0
 8001db4:	f7fe fde2 	bl	800097c <LCD_WR_REG>
		LCD_WR_DATAX(0x0F);
 8001db8:	200f      	movs	r0, #15
 8001dba:	f7fe fe03 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x2A);
 8001dbe:	202a      	movs	r0, #42	; 0x2a
 8001dc0:	f7fe fe00 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x28);
 8001dc4:	2028      	movs	r0, #40	; 0x28
 8001dc6:	f7fe fdfd 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x08);
 8001dca:	2008      	movs	r0, #8
 8001dcc:	f7fe fdfa 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x0E);
 8001dd0:	200e      	movs	r0, #14
 8001dd2:	f7fe fdf7 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x08);
 8001dd6:	2008      	movs	r0, #8
 8001dd8:	f7fe fdf4 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x54);
 8001ddc:	2054      	movs	r0, #84	; 0x54
 8001dde:	f7fe fdf1 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0XA9);
 8001de2:	20a9      	movs	r0, #169	; 0xa9
 8001de4:	f7fe fdee 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x43);
 8001de8:	2043      	movs	r0, #67	; 0x43
 8001dea:	f7fe fdeb 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x0A);
 8001dee:	200a      	movs	r0, #10
 8001df0:	f7fe fde8 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x0F);
 8001df4:	200f      	movs	r0, #15
 8001df6:	f7fe fde5 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8001dfa:	2000      	movs	r0, #0
 8001dfc:	f7fe fde2 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8001e00:	2000      	movs	r0, #0
 8001e02:	f7fe fddf 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8001e06:	2000      	movs	r0, #0
 8001e08:	f7fe fddc 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8001e0c:	2000      	movs	r0, #0
 8001e0e:	f7fe fdd9 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_REG(0XE1);    //Set Gamma 
 8001e12:	20e1      	movs	r0, #225	; 0xe1
 8001e14:	f7fe fdb2 	bl	800097c <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 8001e18:	2000      	movs	r0, #0
 8001e1a:	f7fe fdd3 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x15);
 8001e1e:	2015      	movs	r0, #21
 8001e20:	f7fe fdd0 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x17);
 8001e24:	2017      	movs	r0, #23
 8001e26:	f7fe fdcd 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x07);
 8001e2a:	2007      	movs	r0, #7
 8001e2c:	f7fe fdca 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x11);
 8001e30:	2011      	movs	r0, #17
 8001e32:	f7fe fdc7 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x06);
 8001e36:	2006      	movs	r0, #6
 8001e38:	f7fe fdc4 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x2B);
 8001e3c:	202b      	movs	r0, #43	; 0x2b
 8001e3e:	f7fe fdc1 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x56);
 8001e42:	2056      	movs	r0, #86	; 0x56
 8001e44:	f7fe fdbe 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x3C);
 8001e48:	203c      	movs	r0, #60	; 0x3c
 8001e4a:	f7fe fdbb 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x05);
 8001e4e:	2005      	movs	r0, #5
 8001e50:	f7fe fdb8 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x10);
 8001e54:	2010      	movs	r0, #16
 8001e56:	f7fe fdb5 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x0F);
 8001e5a:	200f      	movs	r0, #15
 8001e5c:	f7fe fdb2 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x3F);
 8001e60:	203f      	movs	r0, #63	; 0x3f
 8001e62:	f7fe fdaf 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x3F);
 8001e66:	203f      	movs	r0, #63	; 0x3f
 8001e68:	f7fe fdac 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x0F);
 8001e6c:	200f      	movs	r0, #15
 8001e6e:	f7fe fda9 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_REG(0x2B);
 8001e72:	202b      	movs	r0, #43	; 0x2b
 8001e74:	f7fe fd82 	bl	800097c <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 8001e78:	2000      	movs	r0, #0
 8001e7a:	f7fe fda3 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8001e7e:	2000      	movs	r0, #0
 8001e80:	f7fe fda0 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x01);
 8001e84:	2001      	movs	r0, #1
 8001e86:	f7fe fd9d 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x3f);
 8001e8a:	203f      	movs	r0, #63	; 0x3f
 8001e8c:	f7fe fd9a 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_REG(0x2A);
 8001e90:	202a      	movs	r0, #42	; 0x2a
 8001e92:	f7fe fd73 	bl	800097c <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 8001e96:	2000      	movs	r0, #0
 8001e98:	f7fe fd94 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8001e9c:	2000      	movs	r0, #0
 8001e9e:	f7fe fd91 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8001ea2:	2000      	movs	r0, #0
 8001ea4:	f7fe fd8e 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xef);
 8001ea8:	20ef      	movs	r0, #239	; 0xef
 8001eaa:	f7fe fd8b 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_REG(0x11); //Exit Sleep
 8001eae:	2011      	movs	r0, #17
 8001eb0:	f7fe fd64 	bl	800097c <LCD_WR_REG>
		HAL_Delay(120);
 8001eb4:	2078      	movs	r0, #120	; 0x78
 8001eb6:	f003 ffa1 	bl	8005dfc <HAL_Delay>
		LCD_WR_REG(0x29); //display on	
 8001eba:	2029      	movs	r0, #41	; 0x29
 8001ebc:	f7fe fd5e 	bl	800097c <LCD_WR_REG>
 8001ec0:	f003 bcd8 	b.w	8005874 <LCD_Init+0x3e34>
	} else if (lcddev.id == 0x6804) //6804初始化
 8001ec4:	4b58      	ldr	r3, [pc, #352]	; (8002028 <LCD_Init+0x5e8>)
 8001ec6:	889b      	ldrh	r3, [r3, #4]
 8001ec8:	f646 0204 	movw	r2, #26628	; 0x6804
 8001ecc:	4293      	cmp	r3, r2
 8001ece:	f040 80ad 	bne.w	800202c <LCD_Init+0x5ec>
			{
		LCD_WR_REG(0X11);
 8001ed2:	2011      	movs	r0, #17
 8001ed4:	f7fe fd52 	bl	800097c <LCD_WR_REG>
		HAL_Delay(20);
 8001ed8:	2014      	movs	r0, #20
 8001eda:	f003 ff8f 	bl	8005dfc <HAL_Delay>
		LCD_WR_REG(0XD0); //VCI1  VCL  VGH  VGL DDVDH VREG1OUT power amplitude setting
 8001ede:	20d0      	movs	r0, #208	; 0xd0
 8001ee0:	f7fe fd4c 	bl	800097c <LCD_WR_REG>
		LCD_WR_DATAX(0X07);
 8001ee4:	2007      	movs	r0, #7
 8001ee6:	f7fe fd6d 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X42);
 8001eea:	2042      	movs	r0, #66	; 0x42
 8001eec:	f7fe fd6a 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X1D);
 8001ef0:	201d      	movs	r0, #29
 8001ef2:	f7fe fd67 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_REG(0XD1); //VCOMH VCOM_AC amplitude setting
 8001ef6:	20d1      	movs	r0, #209	; 0xd1
 8001ef8:	f7fe fd40 	bl	800097c <LCD_WR_REG>
		LCD_WR_DATAX(0X00);
 8001efc:	2000      	movs	r0, #0
 8001efe:	f7fe fd61 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X1a);
 8001f02:	201a      	movs	r0, #26
 8001f04:	f7fe fd5e 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X09);
 8001f08:	2009      	movs	r0, #9
 8001f0a:	f7fe fd5b 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_REG(0XD2); //Operational Amplifier Circuit Constant Current Adjust , charge pump frequency setting
 8001f0e:	20d2      	movs	r0, #210	; 0xd2
 8001f10:	f7fe fd34 	bl	800097c <LCD_WR_REG>
		LCD_WR_DATAX(0X01);
 8001f14:	2001      	movs	r0, #1
 8001f16:	f7fe fd55 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X22);
 8001f1a:	2022      	movs	r0, #34	; 0x22
 8001f1c:	f7fe fd52 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_REG(0XC0); //REV SM GS
 8001f20:	20c0      	movs	r0, #192	; 0xc0
 8001f22:	f7fe fd2b 	bl	800097c <LCD_WR_REG>
		LCD_WR_DATAX(0X10);
 8001f26:	2010      	movs	r0, #16
 8001f28:	f7fe fd4c 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X3B);
 8001f2c:	203b      	movs	r0, #59	; 0x3b
 8001f2e:	f7fe fd49 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X00);
 8001f32:	2000      	movs	r0, #0
 8001f34:	f7fe fd46 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X02);
 8001f38:	2002      	movs	r0, #2
 8001f3a:	f7fe fd43 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X11);
 8001f3e:	2011      	movs	r0, #17
 8001f40:	f7fe fd40 	bl	80009c4 <LCD_WR_DATAX>

		LCD_WR_REG(0XC5); // Frame rate setting = 72HZ  when setting 0x03
 8001f44:	20c5      	movs	r0, #197	; 0xc5
 8001f46:	f7fe fd19 	bl	800097c <LCD_WR_REG>
		LCD_WR_DATAX(0X03);
 8001f4a:	2003      	movs	r0, #3
 8001f4c:	f7fe fd3a 	bl	80009c4 <LCD_WR_DATAX>

		LCD_WR_REG(0XC8); //Gamma setting
 8001f50:	20c8      	movs	r0, #200	; 0xc8
 8001f52:	f7fe fd13 	bl	800097c <LCD_WR_REG>
		LCD_WR_DATAX(0X00);
 8001f56:	2000      	movs	r0, #0
 8001f58:	f7fe fd34 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X25);
 8001f5c:	2025      	movs	r0, #37	; 0x25
 8001f5e:	f7fe fd31 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X21);
 8001f62:	2021      	movs	r0, #33	; 0x21
 8001f64:	f7fe fd2e 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X05);
 8001f68:	2005      	movs	r0, #5
 8001f6a:	f7fe fd2b 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X00);
 8001f6e:	2000      	movs	r0, #0
 8001f70:	f7fe fd28 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X0a);
 8001f74:	200a      	movs	r0, #10
 8001f76:	f7fe fd25 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X65);
 8001f7a:	2065      	movs	r0, #101	; 0x65
 8001f7c:	f7fe fd22 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X25);
 8001f80:	2025      	movs	r0, #37	; 0x25
 8001f82:	f7fe fd1f 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X77);
 8001f86:	2077      	movs	r0, #119	; 0x77
 8001f88:	f7fe fd1c 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X50);
 8001f8c:	2050      	movs	r0, #80	; 0x50
 8001f8e:	f7fe fd19 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X0f);
 8001f92:	200f      	movs	r0, #15
 8001f94:	f7fe fd16 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X00);
 8001f98:	2000      	movs	r0, #0
 8001f9a:	f7fe fd13 	bl	80009c4 <LCD_WR_DATAX>

		LCD_WR_REG(0XF8);
 8001f9e:	20f8      	movs	r0, #248	; 0xf8
 8001fa0:	f7fe fcec 	bl	800097c <LCD_WR_REG>
		LCD_WR_DATAX(0X01);
 8001fa4:	2001      	movs	r0, #1
 8001fa6:	f7fe fd0d 	bl	80009c4 <LCD_WR_DATAX>

		LCD_WR_REG(0XFE);
 8001faa:	20fe      	movs	r0, #254	; 0xfe
 8001fac:	f7fe fce6 	bl	800097c <LCD_WR_REG>
		LCD_WR_DATAX(0X00);
 8001fb0:	2000      	movs	r0, #0
 8001fb2:	f7fe fd07 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X02);
 8001fb6:	2002      	movs	r0, #2
 8001fb8:	f7fe fd04 	bl	80009c4 <LCD_WR_DATAX>

		LCD_WR_REG(0X20); //Exit invert mode
 8001fbc:	2020      	movs	r0, #32
 8001fbe:	f7fe fcdd 	bl	800097c <LCD_WR_REG>

		LCD_WR_REG(0X36);
 8001fc2:	2036      	movs	r0, #54	; 0x36
 8001fc4:	f7fe fcda 	bl	800097c <LCD_WR_REG>
		LCD_WR_DATAX(0X08); //原来是a
 8001fc8:	2008      	movs	r0, #8
 8001fca:	f7fe fcfb 	bl	80009c4 <LCD_WR_DATAX>

		LCD_WR_REG(0X3A);
 8001fce:	203a      	movs	r0, #58	; 0x3a
 8001fd0:	f7fe fcd4 	bl	800097c <LCD_WR_REG>
		LCD_WR_DATAX(0X55); //16位模式
 8001fd4:	2055      	movs	r0, #85	; 0x55
 8001fd6:	f7fe fcf5 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_REG(0X2B);
 8001fda:	202b      	movs	r0, #43	; 0x2b
 8001fdc:	f7fe fcce 	bl	800097c <LCD_WR_REG>
		LCD_WR_DATAX(0X00);
 8001fe0:	2000      	movs	r0, #0
 8001fe2:	f7fe fcef 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X00);
 8001fe6:	2000      	movs	r0, #0
 8001fe8:	f7fe fcec 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X01);
 8001fec:	2001      	movs	r0, #1
 8001fee:	f7fe fce9 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X3F);
 8001ff2:	203f      	movs	r0, #63	; 0x3f
 8001ff4:	f7fe fce6 	bl	80009c4 <LCD_WR_DATAX>

		LCD_WR_REG(0X2A);
 8001ff8:	202a      	movs	r0, #42	; 0x2a
 8001ffa:	f7fe fcbf 	bl	800097c <LCD_WR_REG>
		LCD_WR_DATAX(0X00);
 8001ffe:	2000      	movs	r0, #0
 8002000:	f7fe fce0 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X00);
 8002004:	2000      	movs	r0, #0
 8002006:	f7fe fcdd 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X01);
 800200a:	2001      	movs	r0, #1
 800200c:	f7fe fcda 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0XDF);
 8002010:	20df      	movs	r0, #223	; 0xdf
 8002012:	f7fe fcd7 	bl	80009c4 <LCD_WR_DATAX>
		HAL_Delay(120);
 8002016:	2078      	movs	r0, #120	; 0x78
 8002018:	f003 fef0 	bl	8005dfc <HAL_Delay>
		LCD_WR_REG(0X29);
 800201c:	2029      	movs	r0, #41	; 0x29
 800201e:	f7fe fcad 	bl	800097c <LCD_WR_REG>
 8002022:	f003 bc27 	b.w	8005874 <LCD_Init+0x3e34>
 8002026:	bf00      	nop
 8002028:	20000028 	.word	0x20000028
	} else if (lcddev.id == 0x5310) {
 800202c:	4b03      	ldr	r3, [pc, #12]	; (800203c <LCD_Init+0x5fc>)
 800202e:	889b      	ldrh	r3, [r3, #4]
 8002030:	f245 3210 	movw	r2, #21264	; 0x5310
 8002034:	4293      	cmp	r3, r2
 8002036:	f040 877c 	bne.w	8002f32 <LCD_Init+0x14f2>
 800203a:	e001      	b.n	8002040 <LCD_Init+0x600>
 800203c:	20000028 	.word	0x20000028
		LCD_WR_REG(0xED);
 8002040:	20ed      	movs	r0, #237	; 0xed
 8002042:	f7fe fc9b 	bl	800097c <LCD_WR_REG>
		LCD_WR_DATAX(0x01);
 8002046:	2001      	movs	r0, #1
 8002048:	f7fe fcbc 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xFE);
 800204c:	20fe      	movs	r0, #254	; 0xfe
 800204e:	f7fe fcb9 	bl	80009c4 <LCD_WR_DATAX>

		LCD_WR_REG(0xEE);
 8002052:	20ee      	movs	r0, #238	; 0xee
 8002054:	f7fe fc92 	bl	800097c <LCD_WR_REG>
		LCD_WR_DATAX(0xDE);
 8002058:	20de      	movs	r0, #222	; 0xde
 800205a:	f7fe fcb3 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x21);
 800205e:	2021      	movs	r0, #33	; 0x21
 8002060:	f7fe fcb0 	bl	80009c4 <LCD_WR_DATAX>

		LCD_WR_REG(0xF1);
 8002064:	20f1      	movs	r0, #241	; 0xf1
 8002066:	f7fe fc89 	bl	800097c <LCD_WR_REG>
		LCD_WR_DATAX(0x01);
 800206a:	2001      	movs	r0, #1
 800206c:	f7fe fcaa 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_REG(0xDF);
 8002070:	20df      	movs	r0, #223	; 0xdf
 8002072:	f7fe fc83 	bl	800097c <LCD_WR_REG>
		LCD_WR_DATAX(0x10);
 8002076:	2010      	movs	r0, #16
 8002078:	f7fe fca4 	bl	80009c4 <LCD_WR_DATAX>

		//VCOMvoltage//
		LCD_WR_REG(0xC4);
 800207c:	20c4      	movs	r0, #196	; 0xc4
 800207e:	f7fe fc7d 	bl	800097c <LCD_WR_REG>
		LCD_WR_DATAX(0x8F);	  //5f
 8002082:	208f      	movs	r0, #143	; 0x8f
 8002084:	f7fe fc9e 	bl	80009c4 <LCD_WR_DATAX>

		LCD_WR_REG(0xC6);
 8002088:	20c6      	movs	r0, #198	; 0xc6
 800208a:	f7fe fc77 	bl	800097c <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 800208e:	2000      	movs	r0, #0
 8002090:	f7fe fc98 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xE2);
 8002094:	20e2      	movs	r0, #226	; 0xe2
 8002096:	f7fe fc95 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xE2);
 800209a:	20e2      	movs	r0, #226	; 0xe2
 800209c:	f7fe fc92 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xE2);
 80020a0:	20e2      	movs	r0, #226	; 0xe2
 80020a2:	f7fe fc8f 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_REG(0xBF);
 80020a6:	20bf      	movs	r0, #191	; 0xbf
 80020a8:	f7fe fc68 	bl	800097c <LCD_WR_REG>
		LCD_WR_DATAX(0xAA);
 80020ac:	20aa      	movs	r0, #170	; 0xaa
 80020ae:	f7fe fc89 	bl	80009c4 <LCD_WR_DATAX>

		LCD_WR_REG(0xB0);
 80020b2:	20b0      	movs	r0, #176	; 0xb0
 80020b4:	f7fe fc62 	bl	800097c <LCD_WR_REG>
		LCD_WR_DATAX(0x0D);
 80020b8:	200d      	movs	r0, #13
 80020ba:	f7fe fc83 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80020be:	2000      	movs	r0, #0
 80020c0:	f7fe fc80 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x0D);
 80020c4:	200d      	movs	r0, #13
 80020c6:	f7fe fc7d 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80020ca:	2000      	movs	r0, #0
 80020cc:	f7fe fc7a 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x11);
 80020d0:	2011      	movs	r0, #17
 80020d2:	f7fe fc77 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80020d6:	2000      	movs	r0, #0
 80020d8:	f7fe fc74 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x19);
 80020dc:	2019      	movs	r0, #25
 80020de:	f7fe fc71 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80020e2:	2000      	movs	r0, #0
 80020e4:	f7fe fc6e 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x21);
 80020e8:	2021      	movs	r0, #33	; 0x21
 80020ea:	f7fe fc6b 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80020ee:	2000      	movs	r0, #0
 80020f0:	f7fe fc68 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x2D);
 80020f4:	202d      	movs	r0, #45	; 0x2d
 80020f6:	f7fe fc65 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80020fa:	2000      	movs	r0, #0
 80020fc:	f7fe fc62 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x3D);
 8002100:	203d      	movs	r0, #61	; 0x3d
 8002102:	f7fe fc5f 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002106:	2000      	movs	r0, #0
 8002108:	f7fe fc5c 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x5D);
 800210c:	205d      	movs	r0, #93	; 0x5d
 800210e:	f7fe fc59 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002112:	2000      	movs	r0, #0
 8002114:	f7fe fc56 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x5D);
 8002118:	205d      	movs	r0, #93	; 0x5d
 800211a:	f7fe fc53 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800211e:	2000      	movs	r0, #0
 8002120:	f7fe fc50 	bl	80009c4 <LCD_WR_DATAX>

		LCD_WR_REG(0xB1);
 8002124:	20b1      	movs	r0, #177	; 0xb1
 8002126:	f7fe fc29 	bl	800097c <LCD_WR_REG>
		LCD_WR_DATAX(0x80);
 800212a:	2080      	movs	r0, #128	; 0x80
 800212c:	f7fe fc4a 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002130:	2000      	movs	r0, #0
 8002132:	f7fe fc47 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x8B);
 8002136:	208b      	movs	r0, #139	; 0x8b
 8002138:	f7fe fc44 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800213c:	2000      	movs	r0, #0
 800213e:	f7fe fc41 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x96);
 8002142:	2096      	movs	r0, #150	; 0x96
 8002144:	f7fe fc3e 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002148:	2000      	movs	r0, #0
 800214a:	f7fe fc3b 	bl	80009c4 <LCD_WR_DATAX>

		LCD_WR_REG(0xB2);
 800214e:	20b2      	movs	r0, #178	; 0xb2
 8002150:	f7fe fc14 	bl	800097c <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 8002154:	2000      	movs	r0, #0
 8002156:	f7fe fc35 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800215a:	2000      	movs	r0, #0
 800215c:	f7fe fc32 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x02);
 8002160:	2002      	movs	r0, #2
 8002162:	f7fe fc2f 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002166:	2000      	movs	r0, #0
 8002168:	f7fe fc2c 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x03);
 800216c:	2003      	movs	r0, #3
 800216e:	f7fe fc29 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002172:	2000      	movs	r0, #0
 8002174:	f7fe fc26 	bl	80009c4 <LCD_WR_DATAX>

		LCD_WR_REG(0xB3);
 8002178:	20b3      	movs	r0, #179	; 0xb3
 800217a:	f7fe fbff 	bl	800097c <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 800217e:	2000      	movs	r0, #0
 8002180:	f7fe fc20 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002184:	2000      	movs	r0, #0
 8002186:	f7fe fc1d 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800218a:	2000      	movs	r0, #0
 800218c:	f7fe fc1a 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002190:	2000      	movs	r0, #0
 8002192:	f7fe fc17 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002196:	2000      	movs	r0, #0
 8002198:	f7fe fc14 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800219c:	2000      	movs	r0, #0
 800219e:	f7fe fc11 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80021a2:	2000      	movs	r0, #0
 80021a4:	f7fe fc0e 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80021a8:	2000      	movs	r0, #0
 80021aa:	f7fe fc0b 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80021ae:	2000      	movs	r0, #0
 80021b0:	f7fe fc08 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80021b4:	2000      	movs	r0, #0
 80021b6:	f7fe fc05 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80021ba:	2000      	movs	r0, #0
 80021bc:	f7fe fc02 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80021c0:	2000      	movs	r0, #0
 80021c2:	f7fe fbff 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80021c6:	2000      	movs	r0, #0
 80021c8:	f7fe fbfc 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80021cc:	2000      	movs	r0, #0
 80021ce:	f7fe fbf9 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80021d2:	2000      	movs	r0, #0
 80021d4:	f7fe fbf6 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80021d8:	2000      	movs	r0, #0
 80021da:	f7fe fbf3 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80021de:	2000      	movs	r0, #0
 80021e0:	f7fe fbf0 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80021e4:	2000      	movs	r0, #0
 80021e6:	f7fe fbed 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80021ea:	2000      	movs	r0, #0
 80021ec:	f7fe fbea 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80021f0:	2000      	movs	r0, #0
 80021f2:	f7fe fbe7 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80021f6:	2000      	movs	r0, #0
 80021f8:	f7fe fbe4 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80021fc:	2000      	movs	r0, #0
 80021fe:	f7fe fbe1 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002202:	2000      	movs	r0, #0
 8002204:	f7fe fbde 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002208:	2000      	movs	r0, #0
 800220a:	f7fe fbdb 	bl	80009c4 <LCD_WR_DATAX>

		LCD_WR_REG(0xB4);
 800220e:	20b4      	movs	r0, #180	; 0xb4
 8002210:	f7fe fbb4 	bl	800097c <LCD_WR_REG>
		LCD_WR_DATAX(0x8B);
 8002214:	208b      	movs	r0, #139	; 0x8b
 8002216:	f7fe fbd5 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800221a:	2000      	movs	r0, #0
 800221c:	f7fe fbd2 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x96);
 8002220:	2096      	movs	r0, #150	; 0x96
 8002222:	f7fe fbcf 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002226:	2000      	movs	r0, #0
 8002228:	f7fe fbcc 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xA1);
 800222c:	20a1      	movs	r0, #161	; 0xa1
 800222e:	f7fe fbc9 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002232:	2000      	movs	r0, #0
 8002234:	f7fe fbc6 	bl	80009c4 <LCD_WR_DATAX>

		LCD_WR_REG(0xB5);
 8002238:	20b5      	movs	r0, #181	; 0xb5
 800223a:	f7fe fb9f 	bl	800097c <LCD_WR_REG>
		LCD_WR_DATAX(0x02);
 800223e:	2002      	movs	r0, #2
 8002240:	f7fe fbc0 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002244:	2000      	movs	r0, #0
 8002246:	f7fe fbbd 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x03);
 800224a:	2003      	movs	r0, #3
 800224c:	f7fe fbba 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002250:	2000      	movs	r0, #0
 8002252:	f7fe fbb7 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x04);
 8002256:	2004      	movs	r0, #4
 8002258:	f7fe fbb4 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800225c:	2000      	movs	r0, #0
 800225e:	f7fe fbb1 	bl	80009c4 <LCD_WR_DATAX>

		LCD_WR_REG(0xB6);
 8002262:	20b6      	movs	r0, #182	; 0xb6
 8002264:	f7fe fb8a 	bl	800097c <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 8002268:	2000      	movs	r0, #0
 800226a:	f7fe fbab 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800226e:	2000      	movs	r0, #0
 8002270:	f7fe fba8 	bl	80009c4 <LCD_WR_DATAX>

		LCD_WR_REG(0xB7);
 8002274:	20b7      	movs	r0, #183	; 0xb7
 8002276:	f7fe fb81 	bl	800097c <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 800227a:	2000      	movs	r0, #0
 800227c:	f7fe fba2 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002280:	2000      	movs	r0, #0
 8002282:	f7fe fb9f 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x3F);
 8002286:	203f      	movs	r0, #63	; 0x3f
 8002288:	f7fe fb9c 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800228c:	2000      	movs	r0, #0
 800228e:	f7fe fb99 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x5E);
 8002292:	205e      	movs	r0, #94	; 0x5e
 8002294:	f7fe fb96 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002298:	2000      	movs	r0, #0
 800229a:	f7fe fb93 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x64);
 800229e:	2064      	movs	r0, #100	; 0x64
 80022a0:	f7fe fb90 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80022a4:	2000      	movs	r0, #0
 80022a6:	f7fe fb8d 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x8C);
 80022aa:	208c      	movs	r0, #140	; 0x8c
 80022ac:	f7fe fb8a 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80022b0:	2000      	movs	r0, #0
 80022b2:	f7fe fb87 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xAC);
 80022b6:	20ac      	movs	r0, #172	; 0xac
 80022b8:	f7fe fb84 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80022bc:	2000      	movs	r0, #0
 80022be:	f7fe fb81 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xDC);
 80022c2:	20dc      	movs	r0, #220	; 0xdc
 80022c4:	f7fe fb7e 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80022c8:	2000      	movs	r0, #0
 80022ca:	f7fe fb7b 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x70);
 80022ce:	2070      	movs	r0, #112	; 0x70
 80022d0:	f7fe fb78 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80022d4:	2000      	movs	r0, #0
 80022d6:	f7fe fb75 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x90);
 80022da:	2090      	movs	r0, #144	; 0x90
 80022dc:	f7fe fb72 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80022e0:	2000      	movs	r0, #0
 80022e2:	f7fe fb6f 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xEB);
 80022e6:	20eb      	movs	r0, #235	; 0xeb
 80022e8:	f7fe fb6c 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80022ec:	2000      	movs	r0, #0
 80022ee:	f7fe fb69 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xDC);
 80022f2:	20dc      	movs	r0, #220	; 0xdc
 80022f4:	f7fe fb66 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80022f8:	2000      	movs	r0, #0
 80022fa:	f7fe fb63 	bl	80009c4 <LCD_WR_DATAX>

		LCD_WR_REG(0xB8);
 80022fe:	20b8      	movs	r0, #184	; 0xb8
 8002300:	f7fe fb3c 	bl	800097c <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 8002304:	2000      	movs	r0, #0
 8002306:	f7fe fb5d 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800230a:	2000      	movs	r0, #0
 800230c:	f7fe fb5a 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002310:	2000      	movs	r0, #0
 8002312:	f7fe fb57 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002316:	2000      	movs	r0, #0
 8002318:	f7fe fb54 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800231c:	2000      	movs	r0, #0
 800231e:	f7fe fb51 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002322:	2000      	movs	r0, #0
 8002324:	f7fe fb4e 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002328:	2000      	movs	r0, #0
 800232a:	f7fe fb4b 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800232e:	2000      	movs	r0, #0
 8002330:	f7fe fb48 	bl	80009c4 <LCD_WR_DATAX>

		LCD_WR_REG(0xBA);
 8002334:	20ba      	movs	r0, #186	; 0xba
 8002336:	f7fe fb21 	bl	800097c <LCD_WR_REG>
		LCD_WR_DATAX(0x24);
 800233a:	2024      	movs	r0, #36	; 0x24
 800233c:	f7fe fb42 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002340:	2000      	movs	r0, #0
 8002342:	f7fe fb3f 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002346:	2000      	movs	r0, #0
 8002348:	f7fe fb3c 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800234c:	2000      	movs	r0, #0
 800234e:	f7fe fb39 	bl	80009c4 <LCD_WR_DATAX>

		LCD_WR_REG(0xC1);
 8002352:	20c1      	movs	r0, #193	; 0xc1
 8002354:	f7fe fb12 	bl	800097c <LCD_WR_REG>
		LCD_WR_DATAX(0x20);
 8002358:	2020      	movs	r0, #32
 800235a:	f7fe fb33 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800235e:	2000      	movs	r0, #0
 8002360:	f7fe fb30 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x54);
 8002364:	2054      	movs	r0, #84	; 0x54
 8002366:	f7fe fb2d 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800236a:	2000      	movs	r0, #0
 800236c:	f7fe fb2a 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xFF);
 8002370:	20ff      	movs	r0, #255	; 0xff
 8002372:	f7fe fb27 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002376:	2000      	movs	r0, #0
 8002378:	f7fe fb24 	bl	80009c4 <LCD_WR_DATAX>

		LCD_WR_REG(0xC2);
 800237c:	20c2      	movs	r0, #194	; 0xc2
 800237e:	f7fe fafd 	bl	800097c <LCD_WR_REG>
		LCD_WR_DATAX(0x0A);
 8002382:	200a      	movs	r0, #10
 8002384:	f7fe fb1e 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002388:	2000      	movs	r0, #0
 800238a:	f7fe fb1b 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x04);
 800238e:	2004      	movs	r0, #4
 8002390:	f7fe fb18 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002394:	2000      	movs	r0, #0
 8002396:	f7fe fb15 	bl	80009c4 <LCD_WR_DATAX>

		LCD_WR_REG(0xC3);
 800239a:	20c3      	movs	r0, #195	; 0xc3
 800239c:	f7fe faee 	bl	800097c <LCD_WR_REG>
		LCD_WR_DATAX(0x3C);
 80023a0:	203c      	movs	r0, #60	; 0x3c
 80023a2:	f7fe fb0f 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80023a6:	2000      	movs	r0, #0
 80023a8:	f7fe fb0c 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x3A);
 80023ac:	203a      	movs	r0, #58	; 0x3a
 80023ae:	f7fe fb09 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80023b2:	2000      	movs	r0, #0
 80023b4:	f7fe fb06 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x39);
 80023b8:	2039      	movs	r0, #57	; 0x39
 80023ba:	f7fe fb03 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80023be:	2000      	movs	r0, #0
 80023c0:	f7fe fb00 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x37);
 80023c4:	2037      	movs	r0, #55	; 0x37
 80023c6:	f7fe fafd 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80023ca:	2000      	movs	r0, #0
 80023cc:	f7fe fafa 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x3C);
 80023d0:	203c      	movs	r0, #60	; 0x3c
 80023d2:	f7fe faf7 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80023d6:	2000      	movs	r0, #0
 80023d8:	f7fe faf4 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x36);
 80023dc:	2036      	movs	r0, #54	; 0x36
 80023de:	f7fe faf1 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80023e2:	2000      	movs	r0, #0
 80023e4:	f7fe faee 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x32);
 80023e8:	2032      	movs	r0, #50	; 0x32
 80023ea:	f7fe faeb 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80023ee:	2000      	movs	r0, #0
 80023f0:	f7fe fae8 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x2F);
 80023f4:	202f      	movs	r0, #47	; 0x2f
 80023f6:	f7fe fae5 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80023fa:	2000      	movs	r0, #0
 80023fc:	f7fe fae2 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x2C);
 8002400:	202c      	movs	r0, #44	; 0x2c
 8002402:	f7fe fadf 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002406:	2000      	movs	r0, #0
 8002408:	f7fe fadc 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x29);
 800240c:	2029      	movs	r0, #41	; 0x29
 800240e:	f7fe fad9 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002412:	2000      	movs	r0, #0
 8002414:	f7fe fad6 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x26);
 8002418:	2026      	movs	r0, #38	; 0x26
 800241a:	f7fe fad3 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800241e:	2000      	movs	r0, #0
 8002420:	f7fe fad0 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x24);
 8002424:	2024      	movs	r0, #36	; 0x24
 8002426:	f7fe facd 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800242a:	2000      	movs	r0, #0
 800242c:	f7fe faca 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x24);
 8002430:	2024      	movs	r0, #36	; 0x24
 8002432:	f7fe fac7 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002436:	2000      	movs	r0, #0
 8002438:	f7fe fac4 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x23);
 800243c:	2023      	movs	r0, #35	; 0x23
 800243e:	f7fe fac1 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002442:	2000      	movs	r0, #0
 8002444:	f7fe fabe 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x3C);
 8002448:	203c      	movs	r0, #60	; 0x3c
 800244a:	f7fe fabb 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800244e:	2000      	movs	r0, #0
 8002450:	f7fe fab8 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x36);
 8002454:	2036      	movs	r0, #54	; 0x36
 8002456:	f7fe fab5 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800245a:	2000      	movs	r0, #0
 800245c:	f7fe fab2 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x32);
 8002460:	2032      	movs	r0, #50	; 0x32
 8002462:	f7fe faaf 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002466:	2000      	movs	r0, #0
 8002468:	f7fe faac 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x2F);
 800246c:	202f      	movs	r0, #47	; 0x2f
 800246e:	f7fe faa9 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002472:	2000      	movs	r0, #0
 8002474:	f7fe faa6 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x2C);
 8002478:	202c      	movs	r0, #44	; 0x2c
 800247a:	f7fe faa3 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800247e:	2000      	movs	r0, #0
 8002480:	f7fe faa0 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x29);
 8002484:	2029      	movs	r0, #41	; 0x29
 8002486:	f7fe fa9d 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800248a:	2000      	movs	r0, #0
 800248c:	f7fe fa9a 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x26);
 8002490:	2026      	movs	r0, #38	; 0x26
 8002492:	f7fe fa97 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002496:	2000      	movs	r0, #0
 8002498:	f7fe fa94 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x24);
 800249c:	2024      	movs	r0, #36	; 0x24
 800249e:	f7fe fa91 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80024a2:	2000      	movs	r0, #0
 80024a4:	f7fe fa8e 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x24);
 80024a8:	2024      	movs	r0, #36	; 0x24
 80024aa:	f7fe fa8b 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80024ae:	2000      	movs	r0, #0
 80024b0:	f7fe fa88 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x23);
 80024b4:	2023      	movs	r0, #35	; 0x23
 80024b6:	f7fe fa85 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80024ba:	2000      	movs	r0, #0
 80024bc:	f7fe fa82 	bl	80009c4 <LCD_WR_DATAX>

		LCD_WR_REG(0xC4);
 80024c0:	20c4      	movs	r0, #196	; 0xc4
 80024c2:	f7fe fa5b 	bl	800097c <LCD_WR_REG>
		LCD_WR_DATAX(0x62);
 80024c6:	2062      	movs	r0, #98	; 0x62
 80024c8:	f7fe fa7c 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80024cc:	2000      	movs	r0, #0
 80024ce:	f7fe fa79 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x05);
 80024d2:	2005      	movs	r0, #5
 80024d4:	f7fe fa76 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80024d8:	2000      	movs	r0, #0
 80024da:	f7fe fa73 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x84);
 80024de:	2084      	movs	r0, #132	; 0x84
 80024e0:	f7fe fa70 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80024e4:	2000      	movs	r0, #0
 80024e6:	f7fe fa6d 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xF0);
 80024ea:	20f0      	movs	r0, #240	; 0xf0
 80024ec:	f7fe fa6a 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80024f0:	2000      	movs	r0, #0
 80024f2:	f7fe fa67 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x18);
 80024f6:	2018      	movs	r0, #24
 80024f8:	f7fe fa64 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80024fc:	2000      	movs	r0, #0
 80024fe:	f7fe fa61 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xA4);
 8002502:	20a4      	movs	r0, #164	; 0xa4
 8002504:	f7fe fa5e 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002508:	2000      	movs	r0, #0
 800250a:	f7fe fa5b 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x18);
 800250e:	2018      	movs	r0, #24
 8002510:	f7fe fa58 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002514:	2000      	movs	r0, #0
 8002516:	f7fe fa55 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x50);
 800251a:	2050      	movs	r0, #80	; 0x50
 800251c:	f7fe fa52 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002520:	2000      	movs	r0, #0
 8002522:	f7fe fa4f 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x0C);
 8002526:	200c      	movs	r0, #12
 8002528:	f7fe fa4c 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800252c:	2000      	movs	r0, #0
 800252e:	f7fe fa49 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x17);
 8002532:	2017      	movs	r0, #23
 8002534:	f7fe fa46 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002538:	2000      	movs	r0, #0
 800253a:	f7fe fa43 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x95);
 800253e:	2095      	movs	r0, #149	; 0x95
 8002540:	f7fe fa40 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002544:	2000      	movs	r0, #0
 8002546:	f7fe fa3d 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xF3);
 800254a:	20f3      	movs	r0, #243	; 0xf3
 800254c:	f7fe fa3a 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002550:	2000      	movs	r0, #0
 8002552:	f7fe fa37 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xE6);
 8002556:	20e6      	movs	r0, #230	; 0xe6
 8002558:	f7fe fa34 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800255c:	2000      	movs	r0, #0
 800255e:	f7fe fa31 	bl	80009c4 <LCD_WR_DATAX>

		LCD_WR_REG(0xC5);
 8002562:	20c5      	movs	r0, #197	; 0xc5
 8002564:	f7fe fa0a 	bl	800097c <LCD_WR_REG>
		LCD_WR_DATAX(0x32);
 8002568:	2032      	movs	r0, #50	; 0x32
 800256a:	f7fe fa2b 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800256e:	2000      	movs	r0, #0
 8002570:	f7fe fa28 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x44);
 8002574:	2044      	movs	r0, #68	; 0x44
 8002576:	f7fe fa25 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800257a:	2000      	movs	r0, #0
 800257c:	f7fe fa22 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x65);
 8002580:	2065      	movs	r0, #101	; 0x65
 8002582:	f7fe fa1f 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002586:	2000      	movs	r0, #0
 8002588:	f7fe fa1c 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x76);
 800258c:	2076      	movs	r0, #118	; 0x76
 800258e:	f7fe fa19 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002592:	2000      	movs	r0, #0
 8002594:	f7fe fa16 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x88);
 8002598:	2088      	movs	r0, #136	; 0x88
 800259a:	f7fe fa13 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800259e:	2000      	movs	r0, #0
 80025a0:	f7fe fa10 	bl	80009c4 <LCD_WR_DATAX>

		LCD_WR_REG(0xC6);
 80025a4:	20c6      	movs	r0, #198	; 0xc6
 80025a6:	f7fe f9e9 	bl	800097c <LCD_WR_REG>
		LCD_WR_DATAX(0x20);
 80025aa:	2020      	movs	r0, #32
 80025ac:	f7fe fa0a 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80025b0:	2000      	movs	r0, #0
 80025b2:	f7fe fa07 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x17);
 80025b6:	2017      	movs	r0, #23
 80025b8:	f7fe fa04 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80025bc:	2000      	movs	r0, #0
 80025be:	f7fe fa01 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x01);
 80025c2:	2001      	movs	r0, #1
 80025c4:	f7fe f9fe 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80025c8:	2000      	movs	r0, #0
 80025ca:	f7fe f9fb 	bl	80009c4 <LCD_WR_DATAX>

		LCD_WR_REG(0xC7);
 80025ce:	20c7      	movs	r0, #199	; 0xc7
 80025d0:	f7fe f9d4 	bl	800097c <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 80025d4:	2000      	movs	r0, #0
 80025d6:	f7fe f9f5 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80025da:	2000      	movs	r0, #0
 80025dc:	f7fe f9f2 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80025e0:	2000      	movs	r0, #0
 80025e2:	f7fe f9ef 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80025e6:	2000      	movs	r0, #0
 80025e8:	f7fe f9ec 	bl	80009c4 <LCD_WR_DATAX>

		LCD_WR_REG(0xC8);
 80025ec:	20c8      	movs	r0, #200	; 0xc8
 80025ee:	f7fe f9c5 	bl	800097c <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 80025f2:	2000      	movs	r0, #0
 80025f4:	f7fe f9e6 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80025f8:	2000      	movs	r0, #0
 80025fa:	f7fe f9e3 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80025fe:	2000      	movs	r0, #0
 8002600:	f7fe f9e0 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002604:	2000      	movs	r0, #0
 8002606:	f7fe f9dd 	bl	80009c4 <LCD_WR_DATAX>

		LCD_WR_REG(0xC9);
 800260a:	20c9      	movs	r0, #201	; 0xc9
 800260c:	f7fe f9b6 	bl	800097c <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 8002610:	2000      	movs	r0, #0
 8002612:	f7fe f9d7 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002616:	2000      	movs	r0, #0
 8002618:	f7fe f9d4 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800261c:	2000      	movs	r0, #0
 800261e:	f7fe f9d1 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002622:	2000      	movs	r0, #0
 8002624:	f7fe f9ce 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002628:	2000      	movs	r0, #0
 800262a:	f7fe f9cb 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800262e:	2000      	movs	r0, #0
 8002630:	f7fe f9c8 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002634:	2000      	movs	r0, #0
 8002636:	f7fe f9c5 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800263a:	2000      	movs	r0, #0
 800263c:	f7fe f9c2 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002640:	2000      	movs	r0, #0
 8002642:	f7fe f9bf 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002646:	2000      	movs	r0, #0
 8002648:	f7fe f9bc 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800264c:	2000      	movs	r0, #0
 800264e:	f7fe f9b9 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002652:	2000      	movs	r0, #0
 8002654:	f7fe f9b6 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002658:	2000      	movs	r0, #0
 800265a:	f7fe f9b3 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800265e:	2000      	movs	r0, #0
 8002660:	f7fe f9b0 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002664:	2000      	movs	r0, #0
 8002666:	f7fe f9ad 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800266a:	2000      	movs	r0, #0
 800266c:	f7fe f9aa 	bl	80009c4 <LCD_WR_DATAX>

		LCD_WR_REG(0xE0);
 8002670:	20e0      	movs	r0, #224	; 0xe0
 8002672:	f7fe f983 	bl	800097c <LCD_WR_REG>
		LCD_WR_DATAX(0x16);
 8002676:	2016      	movs	r0, #22
 8002678:	f7fe f9a4 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800267c:	2000      	movs	r0, #0
 800267e:	f7fe f9a1 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x1C);
 8002682:	201c      	movs	r0, #28
 8002684:	f7fe f99e 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002688:	2000      	movs	r0, #0
 800268a:	f7fe f99b 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x21);
 800268e:	2021      	movs	r0, #33	; 0x21
 8002690:	f7fe f998 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002694:	2000      	movs	r0, #0
 8002696:	f7fe f995 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x36);
 800269a:	2036      	movs	r0, #54	; 0x36
 800269c:	f7fe f992 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80026a0:	2000      	movs	r0, #0
 80026a2:	f7fe f98f 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x46);
 80026a6:	2046      	movs	r0, #70	; 0x46
 80026a8:	f7fe f98c 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80026ac:	2000      	movs	r0, #0
 80026ae:	f7fe f989 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x52);
 80026b2:	2052      	movs	r0, #82	; 0x52
 80026b4:	f7fe f986 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80026b8:	2000      	movs	r0, #0
 80026ba:	f7fe f983 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x64);
 80026be:	2064      	movs	r0, #100	; 0x64
 80026c0:	f7fe f980 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80026c4:	2000      	movs	r0, #0
 80026c6:	f7fe f97d 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x7A);
 80026ca:	207a      	movs	r0, #122	; 0x7a
 80026cc:	f7fe f97a 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80026d0:	2000      	movs	r0, #0
 80026d2:	f7fe f977 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x8B);
 80026d6:	208b      	movs	r0, #139	; 0x8b
 80026d8:	f7fe f974 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80026dc:	2000      	movs	r0, #0
 80026de:	f7fe f971 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x99);
 80026e2:	2099      	movs	r0, #153	; 0x99
 80026e4:	f7fe f96e 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80026e8:	2000      	movs	r0, #0
 80026ea:	f7fe f96b 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xA8);
 80026ee:	20a8      	movs	r0, #168	; 0xa8
 80026f0:	f7fe f968 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80026f4:	2000      	movs	r0, #0
 80026f6:	f7fe f965 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xB9);
 80026fa:	20b9      	movs	r0, #185	; 0xb9
 80026fc:	f7fe f962 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002700:	2000      	movs	r0, #0
 8002702:	f7fe f95f 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xC4);
 8002706:	20c4      	movs	r0, #196	; 0xc4
 8002708:	f7fe f95c 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800270c:	2000      	movs	r0, #0
 800270e:	f7fe f959 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xCA);
 8002712:	20ca      	movs	r0, #202	; 0xca
 8002714:	f7fe f956 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002718:	2000      	movs	r0, #0
 800271a:	f7fe f953 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xD2);
 800271e:	20d2      	movs	r0, #210	; 0xd2
 8002720:	f7fe f950 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002724:	2000      	movs	r0, #0
 8002726:	f7fe f94d 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xD9);
 800272a:	20d9      	movs	r0, #217	; 0xd9
 800272c:	f7fe f94a 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002730:	2000      	movs	r0, #0
 8002732:	f7fe f947 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xE0);
 8002736:	20e0      	movs	r0, #224	; 0xe0
 8002738:	f7fe f944 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800273c:	2000      	movs	r0, #0
 800273e:	f7fe f941 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xF3);
 8002742:	20f3      	movs	r0, #243	; 0xf3
 8002744:	f7fe f93e 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002748:	2000      	movs	r0, #0
 800274a:	f7fe f93b 	bl	80009c4 <LCD_WR_DATAX>

		LCD_WR_REG(0xE1);
 800274e:	20e1      	movs	r0, #225	; 0xe1
 8002750:	f7fe f914 	bl	800097c <LCD_WR_REG>
		LCD_WR_DATAX(0x16);
 8002754:	2016      	movs	r0, #22
 8002756:	f7fe f935 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800275a:	2000      	movs	r0, #0
 800275c:	f7fe f932 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x1C);
 8002760:	201c      	movs	r0, #28
 8002762:	f7fe f92f 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002766:	2000      	movs	r0, #0
 8002768:	f7fe f92c 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x22);
 800276c:	2022      	movs	r0, #34	; 0x22
 800276e:	f7fe f929 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002772:	2000      	movs	r0, #0
 8002774:	f7fe f926 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x36);
 8002778:	2036      	movs	r0, #54	; 0x36
 800277a:	f7fe f923 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800277e:	2000      	movs	r0, #0
 8002780:	f7fe f920 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x45);
 8002784:	2045      	movs	r0, #69	; 0x45
 8002786:	f7fe f91d 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800278a:	2000      	movs	r0, #0
 800278c:	f7fe f91a 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x52);
 8002790:	2052      	movs	r0, #82	; 0x52
 8002792:	f7fe f917 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002796:	2000      	movs	r0, #0
 8002798:	f7fe f914 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x64);
 800279c:	2064      	movs	r0, #100	; 0x64
 800279e:	f7fe f911 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80027a2:	2000      	movs	r0, #0
 80027a4:	f7fe f90e 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x7A);
 80027a8:	207a      	movs	r0, #122	; 0x7a
 80027aa:	f7fe f90b 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80027ae:	2000      	movs	r0, #0
 80027b0:	f7fe f908 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x8B);
 80027b4:	208b      	movs	r0, #139	; 0x8b
 80027b6:	f7fe f905 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80027ba:	2000      	movs	r0, #0
 80027bc:	f7fe f902 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x99);
 80027c0:	2099      	movs	r0, #153	; 0x99
 80027c2:	f7fe f8ff 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80027c6:	2000      	movs	r0, #0
 80027c8:	f7fe f8fc 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xA8);
 80027cc:	20a8      	movs	r0, #168	; 0xa8
 80027ce:	f7fe f8f9 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80027d2:	2000      	movs	r0, #0
 80027d4:	f7fe f8f6 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xB9);
 80027d8:	20b9      	movs	r0, #185	; 0xb9
 80027da:	f7fe f8f3 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80027de:	2000      	movs	r0, #0
 80027e0:	f7fe f8f0 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xC4);
 80027e4:	20c4      	movs	r0, #196	; 0xc4
 80027e6:	f7fe f8ed 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80027ea:	2000      	movs	r0, #0
 80027ec:	f7fe f8ea 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xCA);
 80027f0:	20ca      	movs	r0, #202	; 0xca
 80027f2:	f7fe f8e7 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80027f6:	2000      	movs	r0, #0
 80027f8:	f7fe f8e4 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xD2);
 80027fc:	20d2      	movs	r0, #210	; 0xd2
 80027fe:	f7fe f8e1 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002802:	2000      	movs	r0, #0
 8002804:	f7fe f8de 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xD8);
 8002808:	20d8      	movs	r0, #216	; 0xd8
 800280a:	f7fe f8db 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800280e:	2000      	movs	r0, #0
 8002810:	f7fe f8d8 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xE0);
 8002814:	20e0      	movs	r0, #224	; 0xe0
 8002816:	f7fe f8d5 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800281a:	2000      	movs	r0, #0
 800281c:	f7fe f8d2 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xF3);
 8002820:	20f3      	movs	r0, #243	; 0xf3
 8002822:	f7fe f8cf 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002826:	2000      	movs	r0, #0
 8002828:	f7fe f8cc 	bl	80009c4 <LCD_WR_DATAX>

		LCD_WR_REG(0xE2);
 800282c:	20e2      	movs	r0, #226	; 0xe2
 800282e:	f7fe f8a5 	bl	800097c <LCD_WR_REG>
		LCD_WR_DATAX(0x05);
 8002832:	2005      	movs	r0, #5
 8002834:	f7fe f8c6 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002838:	2000      	movs	r0, #0
 800283a:	f7fe f8c3 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x0B);
 800283e:	200b      	movs	r0, #11
 8002840:	f7fe f8c0 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002844:	2000      	movs	r0, #0
 8002846:	f7fe f8bd 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x1B);
 800284a:	201b      	movs	r0, #27
 800284c:	f7fe f8ba 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002850:	2000      	movs	r0, #0
 8002852:	f7fe f8b7 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x34);
 8002856:	2034      	movs	r0, #52	; 0x34
 8002858:	f7fe f8b4 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800285c:	2000      	movs	r0, #0
 800285e:	f7fe f8b1 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x44);
 8002862:	2044      	movs	r0, #68	; 0x44
 8002864:	f7fe f8ae 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002868:	2000      	movs	r0, #0
 800286a:	f7fe f8ab 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x4F);
 800286e:	204f      	movs	r0, #79	; 0x4f
 8002870:	f7fe f8a8 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002874:	2000      	movs	r0, #0
 8002876:	f7fe f8a5 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x61);
 800287a:	2061      	movs	r0, #97	; 0x61
 800287c:	f7fe f8a2 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002880:	2000      	movs	r0, #0
 8002882:	f7fe f89f 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x79);
 8002886:	2079      	movs	r0, #121	; 0x79
 8002888:	f7fe f89c 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800288c:	2000      	movs	r0, #0
 800288e:	f7fe f899 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x88);
 8002892:	2088      	movs	r0, #136	; 0x88
 8002894:	f7fe f896 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002898:	2000      	movs	r0, #0
 800289a:	f7fe f893 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x97);
 800289e:	2097      	movs	r0, #151	; 0x97
 80028a0:	f7fe f890 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80028a4:	2000      	movs	r0, #0
 80028a6:	f7fe f88d 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xA6);
 80028aa:	20a6      	movs	r0, #166	; 0xa6
 80028ac:	f7fe f88a 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80028b0:	2000      	movs	r0, #0
 80028b2:	f7fe f887 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xB7);
 80028b6:	20b7      	movs	r0, #183	; 0xb7
 80028b8:	f7fe f884 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80028bc:	2000      	movs	r0, #0
 80028be:	f7fe f881 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xC2);
 80028c2:	20c2      	movs	r0, #194	; 0xc2
 80028c4:	f7fe f87e 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80028c8:	2000      	movs	r0, #0
 80028ca:	f7fe f87b 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xC7);
 80028ce:	20c7      	movs	r0, #199	; 0xc7
 80028d0:	f7fe f878 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80028d4:	2000      	movs	r0, #0
 80028d6:	f7fe f875 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xD1);
 80028da:	20d1      	movs	r0, #209	; 0xd1
 80028dc:	f7fe f872 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80028e0:	2000      	movs	r0, #0
 80028e2:	f7fe f86f 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xD6);
 80028e6:	20d6      	movs	r0, #214	; 0xd6
 80028e8:	f7fe f86c 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80028ec:	2000      	movs	r0, #0
 80028ee:	f7fe f869 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xDD);
 80028f2:	20dd      	movs	r0, #221	; 0xdd
 80028f4:	f7fe f866 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80028f8:	2000      	movs	r0, #0
 80028fa:	f7fe f863 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xF3);
 80028fe:	20f3      	movs	r0, #243	; 0xf3
 8002900:	f7fe f860 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002904:	2000      	movs	r0, #0
 8002906:	f7fe f85d 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_REG(0xE3);
 800290a:	20e3      	movs	r0, #227	; 0xe3
 800290c:	f7fe f836 	bl	800097c <LCD_WR_REG>
		LCD_WR_DATAX(0x05);
 8002910:	2005      	movs	r0, #5
 8002912:	f7fe f857 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002916:	2000      	movs	r0, #0
 8002918:	f7fe f854 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xA);
 800291c:	200a      	movs	r0, #10
 800291e:	f7fe f851 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002922:	2000      	movs	r0, #0
 8002924:	f7fe f84e 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x1C);
 8002928:	201c      	movs	r0, #28
 800292a:	f7fe f84b 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800292e:	2000      	movs	r0, #0
 8002930:	f7fe f848 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x33);
 8002934:	2033      	movs	r0, #51	; 0x33
 8002936:	f7fe f845 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800293a:	2000      	movs	r0, #0
 800293c:	f7fe f842 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x44);
 8002940:	2044      	movs	r0, #68	; 0x44
 8002942:	f7fe f83f 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002946:	2000      	movs	r0, #0
 8002948:	f7fe f83c 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x50);
 800294c:	2050      	movs	r0, #80	; 0x50
 800294e:	f7fe f839 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002952:	2000      	movs	r0, #0
 8002954:	f7fe f836 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x62);
 8002958:	2062      	movs	r0, #98	; 0x62
 800295a:	f7fe f833 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800295e:	2000      	movs	r0, #0
 8002960:	f7fe f830 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x78);
 8002964:	2078      	movs	r0, #120	; 0x78
 8002966:	f7fe f82d 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800296a:	2000      	movs	r0, #0
 800296c:	f7fe f82a 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x88);
 8002970:	2088      	movs	r0, #136	; 0x88
 8002972:	f7fe f827 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002976:	2000      	movs	r0, #0
 8002978:	f7fe f824 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x97);
 800297c:	2097      	movs	r0, #151	; 0x97
 800297e:	f7fe f821 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002982:	2000      	movs	r0, #0
 8002984:	f7fe f81e 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xA6);
 8002988:	20a6      	movs	r0, #166	; 0xa6
 800298a:	f7fe f81b 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800298e:	2000      	movs	r0, #0
 8002990:	f7fe f818 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xB7);
 8002994:	20b7      	movs	r0, #183	; 0xb7
 8002996:	f7fe f815 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800299a:	2000      	movs	r0, #0
 800299c:	f7fe f812 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xC2);
 80029a0:	20c2      	movs	r0, #194	; 0xc2
 80029a2:	f7fe f80f 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80029a6:	2000      	movs	r0, #0
 80029a8:	f7fe f80c 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xC7);
 80029ac:	20c7      	movs	r0, #199	; 0xc7
 80029ae:	f7fe f809 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80029b2:	2000      	movs	r0, #0
 80029b4:	f7fe f806 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xD1);
 80029b8:	20d1      	movs	r0, #209	; 0xd1
 80029ba:	f7fe f803 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80029be:	2000      	movs	r0, #0
 80029c0:	f7fe f800 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xD5);
 80029c4:	20d5      	movs	r0, #213	; 0xd5
 80029c6:	f7fd fffd 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80029ca:	2000      	movs	r0, #0
 80029cc:	f7fd fffa 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xDD);
 80029d0:	20dd      	movs	r0, #221	; 0xdd
 80029d2:	f7fd fff7 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80029d6:	2000      	movs	r0, #0
 80029d8:	f7fd fff4 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xF3);
 80029dc:	20f3      	movs	r0, #243	; 0xf3
 80029de:	f7fd fff1 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80029e2:	2000      	movs	r0, #0
 80029e4:	f7fd ffee 	bl	80009c4 <LCD_WR_DATAX>

		LCD_WR_REG(0xE4);
 80029e8:	20e4      	movs	r0, #228	; 0xe4
 80029ea:	f7fd ffc7 	bl	800097c <LCD_WR_REG>
		LCD_WR_DATAX(0x01);
 80029ee:	2001      	movs	r0, #1
 80029f0:	f7fd ffe8 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80029f4:	2000      	movs	r0, #0
 80029f6:	f7fd ffe5 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x01);
 80029fa:	2001      	movs	r0, #1
 80029fc:	f7fd ffe2 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002a00:	2000      	movs	r0, #0
 8002a02:	f7fd ffdf 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x02);
 8002a06:	2002      	movs	r0, #2
 8002a08:	f7fd ffdc 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002a0c:	2000      	movs	r0, #0
 8002a0e:	f7fd ffd9 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x2A);
 8002a12:	202a      	movs	r0, #42	; 0x2a
 8002a14:	f7fd ffd6 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002a18:	2000      	movs	r0, #0
 8002a1a:	f7fd ffd3 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x3C);
 8002a1e:	203c      	movs	r0, #60	; 0x3c
 8002a20:	f7fd ffd0 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002a24:	2000      	movs	r0, #0
 8002a26:	f7fd ffcd 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x4B);
 8002a2a:	204b      	movs	r0, #75	; 0x4b
 8002a2c:	f7fd ffca 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002a30:	2000      	movs	r0, #0
 8002a32:	f7fd ffc7 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x5D);
 8002a36:	205d      	movs	r0, #93	; 0x5d
 8002a38:	f7fd ffc4 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002a3c:	2000      	movs	r0, #0
 8002a3e:	f7fd ffc1 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x74);
 8002a42:	2074      	movs	r0, #116	; 0x74
 8002a44:	f7fd ffbe 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002a48:	2000      	movs	r0, #0
 8002a4a:	f7fd ffbb 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x84);
 8002a4e:	2084      	movs	r0, #132	; 0x84
 8002a50:	f7fd ffb8 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002a54:	2000      	movs	r0, #0
 8002a56:	f7fd ffb5 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x93);
 8002a5a:	2093      	movs	r0, #147	; 0x93
 8002a5c:	f7fd ffb2 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002a60:	2000      	movs	r0, #0
 8002a62:	f7fd ffaf 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xA2);
 8002a66:	20a2      	movs	r0, #162	; 0xa2
 8002a68:	f7fd ffac 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002a6c:	2000      	movs	r0, #0
 8002a6e:	f7fd ffa9 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xB3);
 8002a72:	20b3      	movs	r0, #179	; 0xb3
 8002a74:	f7fd ffa6 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002a78:	2000      	movs	r0, #0
 8002a7a:	f7fd ffa3 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xBE);
 8002a7e:	20be      	movs	r0, #190	; 0xbe
 8002a80:	f7fd ffa0 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002a84:	2000      	movs	r0, #0
 8002a86:	f7fd ff9d 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xC4);
 8002a8a:	20c4      	movs	r0, #196	; 0xc4
 8002a8c:	f7fd ff9a 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002a90:	2000      	movs	r0, #0
 8002a92:	f7fd ff97 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xCD);
 8002a96:	20cd      	movs	r0, #205	; 0xcd
 8002a98:	f7fd ff94 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002a9c:	2000      	movs	r0, #0
 8002a9e:	f7fd ff91 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xD3);
 8002aa2:	20d3      	movs	r0, #211	; 0xd3
 8002aa4:	f7fd ff8e 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002aa8:	2000      	movs	r0, #0
 8002aaa:	f7fd ff8b 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xDD);
 8002aae:	20dd      	movs	r0, #221	; 0xdd
 8002ab0:	f7fd ff88 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002ab4:	2000      	movs	r0, #0
 8002ab6:	f7fd ff85 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xF3);
 8002aba:	20f3      	movs	r0, #243	; 0xf3
 8002abc:	f7fd ff82 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002ac0:	2000      	movs	r0, #0
 8002ac2:	f7fd ff7f 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_REG(0xE5);
 8002ac6:	20e5      	movs	r0, #229	; 0xe5
 8002ac8:	f7fd ff58 	bl	800097c <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 8002acc:	2000      	movs	r0, #0
 8002ace:	f7fd ff79 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002ad2:	2000      	movs	r0, #0
 8002ad4:	f7fd ff76 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002ad8:	2000      	movs	r0, #0
 8002ada:	f7fd ff73 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002ade:	2000      	movs	r0, #0
 8002ae0:	f7fd ff70 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x02);
 8002ae4:	2002      	movs	r0, #2
 8002ae6:	f7fd ff6d 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002aea:	2000      	movs	r0, #0
 8002aec:	f7fd ff6a 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x29);
 8002af0:	2029      	movs	r0, #41	; 0x29
 8002af2:	f7fd ff67 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002af6:	2000      	movs	r0, #0
 8002af8:	f7fd ff64 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x3C);
 8002afc:	203c      	movs	r0, #60	; 0x3c
 8002afe:	f7fd ff61 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002b02:	2000      	movs	r0, #0
 8002b04:	f7fd ff5e 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x4B);
 8002b08:	204b      	movs	r0, #75	; 0x4b
 8002b0a:	f7fd ff5b 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002b0e:	2000      	movs	r0, #0
 8002b10:	f7fd ff58 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x5D);
 8002b14:	205d      	movs	r0, #93	; 0x5d
 8002b16:	f7fd ff55 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002b1a:	2000      	movs	r0, #0
 8002b1c:	f7fd ff52 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x74);
 8002b20:	2074      	movs	r0, #116	; 0x74
 8002b22:	f7fd ff4f 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002b26:	2000      	movs	r0, #0
 8002b28:	f7fd ff4c 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x84);
 8002b2c:	2084      	movs	r0, #132	; 0x84
 8002b2e:	f7fd ff49 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002b32:	2000      	movs	r0, #0
 8002b34:	f7fd ff46 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x93);
 8002b38:	2093      	movs	r0, #147	; 0x93
 8002b3a:	f7fd ff43 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002b3e:	2000      	movs	r0, #0
 8002b40:	f7fd ff40 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xA2);
 8002b44:	20a2      	movs	r0, #162	; 0xa2
 8002b46:	f7fd ff3d 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002b4a:	2000      	movs	r0, #0
 8002b4c:	f7fd ff3a 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xB3);
 8002b50:	20b3      	movs	r0, #179	; 0xb3
 8002b52:	f7fd ff37 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002b56:	2000      	movs	r0, #0
 8002b58:	f7fd ff34 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xBE);
 8002b5c:	20be      	movs	r0, #190	; 0xbe
 8002b5e:	f7fd ff31 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002b62:	2000      	movs	r0, #0
 8002b64:	f7fd ff2e 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xC4);
 8002b68:	20c4      	movs	r0, #196	; 0xc4
 8002b6a:	f7fd ff2b 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002b6e:	2000      	movs	r0, #0
 8002b70:	f7fd ff28 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xCD);
 8002b74:	20cd      	movs	r0, #205	; 0xcd
 8002b76:	f7fd ff25 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002b7a:	2000      	movs	r0, #0
 8002b7c:	f7fd ff22 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xD3);
 8002b80:	20d3      	movs	r0, #211	; 0xd3
 8002b82:	f7fd ff1f 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002b86:	2000      	movs	r0, #0
 8002b88:	f7fd ff1c 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xDC);
 8002b8c:	20dc      	movs	r0, #220	; 0xdc
 8002b8e:	f7fd ff19 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002b92:	2000      	movs	r0, #0
 8002b94:	f7fd ff16 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xF3);
 8002b98:	20f3      	movs	r0, #243	; 0xf3
 8002b9a:	f7fd ff13 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002b9e:	2000      	movs	r0, #0
 8002ba0:	f7fd ff10 	bl	80009c4 <LCD_WR_DATAX>

		LCD_WR_REG(0xE6);
 8002ba4:	20e6      	movs	r0, #230	; 0xe6
 8002ba6:	f7fd fee9 	bl	800097c <LCD_WR_REG>
		LCD_WR_DATAX(0x11);
 8002baa:	2011      	movs	r0, #17
 8002bac:	f7fd ff0a 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002bb0:	2000      	movs	r0, #0
 8002bb2:	f7fd ff07 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x34);
 8002bb6:	2034      	movs	r0, #52	; 0x34
 8002bb8:	f7fd ff04 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002bbc:	2000      	movs	r0, #0
 8002bbe:	f7fd ff01 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x56);
 8002bc2:	2056      	movs	r0, #86	; 0x56
 8002bc4:	f7fd fefe 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002bc8:	2000      	movs	r0, #0
 8002bca:	f7fd fefb 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x76);
 8002bce:	2076      	movs	r0, #118	; 0x76
 8002bd0:	f7fd fef8 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002bd4:	2000      	movs	r0, #0
 8002bd6:	f7fd fef5 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x77);
 8002bda:	2077      	movs	r0, #119	; 0x77
 8002bdc:	f7fd fef2 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002be0:	2000      	movs	r0, #0
 8002be2:	f7fd feef 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x66);
 8002be6:	2066      	movs	r0, #102	; 0x66
 8002be8:	f7fd feec 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002bec:	2000      	movs	r0, #0
 8002bee:	f7fd fee9 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x88);
 8002bf2:	2088      	movs	r0, #136	; 0x88
 8002bf4:	f7fd fee6 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002bf8:	2000      	movs	r0, #0
 8002bfa:	f7fd fee3 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x99);
 8002bfe:	2099      	movs	r0, #153	; 0x99
 8002c00:	f7fd fee0 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002c04:	2000      	movs	r0, #0
 8002c06:	f7fd fedd 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xBB);
 8002c0a:	20bb      	movs	r0, #187	; 0xbb
 8002c0c:	f7fd feda 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002c10:	2000      	movs	r0, #0
 8002c12:	f7fd fed7 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x99);
 8002c16:	2099      	movs	r0, #153	; 0x99
 8002c18:	f7fd fed4 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002c1c:	2000      	movs	r0, #0
 8002c1e:	f7fd fed1 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x66);
 8002c22:	2066      	movs	r0, #102	; 0x66
 8002c24:	f7fd fece 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002c28:	2000      	movs	r0, #0
 8002c2a:	f7fd fecb 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x55);
 8002c2e:	2055      	movs	r0, #85	; 0x55
 8002c30:	f7fd fec8 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002c34:	2000      	movs	r0, #0
 8002c36:	f7fd fec5 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x55);
 8002c3a:	2055      	movs	r0, #85	; 0x55
 8002c3c:	f7fd fec2 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002c40:	2000      	movs	r0, #0
 8002c42:	f7fd febf 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x45);
 8002c46:	2045      	movs	r0, #69	; 0x45
 8002c48:	f7fd febc 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002c4c:	2000      	movs	r0, #0
 8002c4e:	f7fd feb9 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x43);
 8002c52:	2043      	movs	r0, #67	; 0x43
 8002c54:	f7fd feb6 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002c58:	2000      	movs	r0, #0
 8002c5a:	f7fd feb3 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x44);
 8002c5e:	2044      	movs	r0, #68	; 0x44
 8002c60:	f7fd feb0 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002c64:	2000      	movs	r0, #0
 8002c66:	f7fd fead 	bl	80009c4 <LCD_WR_DATAX>

		LCD_WR_REG(0xE7);
 8002c6a:	20e7      	movs	r0, #231	; 0xe7
 8002c6c:	f7fd fe86 	bl	800097c <LCD_WR_REG>
		LCD_WR_DATAX(0x32);
 8002c70:	2032      	movs	r0, #50	; 0x32
 8002c72:	f7fd fea7 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002c76:	2000      	movs	r0, #0
 8002c78:	f7fd fea4 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x55);
 8002c7c:	2055      	movs	r0, #85	; 0x55
 8002c7e:	f7fd fea1 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002c82:	2000      	movs	r0, #0
 8002c84:	f7fd fe9e 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x76);
 8002c88:	2076      	movs	r0, #118	; 0x76
 8002c8a:	f7fd fe9b 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002c8e:	2000      	movs	r0, #0
 8002c90:	f7fd fe98 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x66);
 8002c94:	2066      	movs	r0, #102	; 0x66
 8002c96:	f7fd fe95 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002c9a:	2000      	movs	r0, #0
 8002c9c:	f7fd fe92 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x67);
 8002ca0:	2067      	movs	r0, #103	; 0x67
 8002ca2:	f7fd fe8f 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002ca6:	2000      	movs	r0, #0
 8002ca8:	f7fd fe8c 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x67);
 8002cac:	2067      	movs	r0, #103	; 0x67
 8002cae:	f7fd fe89 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002cb2:	2000      	movs	r0, #0
 8002cb4:	f7fd fe86 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x87);
 8002cb8:	2087      	movs	r0, #135	; 0x87
 8002cba:	f7fd fe83 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002cbe:	2000      	movs	r0, #0
 8002cc0:	f7fd fe80 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x99);
 8002cc4:	2099      	movs	r0, #153	; 0x99
 8002cc6:	f7fd fe7d 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002cca:	2000      	movs	r0, #0
 8002ccc:	f7fd fe7a 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xBB);
 8002cd0:	20bb      	movs	r0, #187	; 0xbb
 8002cd2:	f7fd fe77 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002cd6:	2000      	movs	r0, #0
 8002cd8:	f7fd fe74 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x99);
 8002cdc:	2099      	movs	r0, #153	; 0x99
 8002cde:	f7fd fe71 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002ce2:	2000      	movs	r0, #0
 8002ce4:	f7fd fe6e 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x77);
 8002ce8:	2077      	movs	r0, #119	; 0x77
 8002cea:	f7fd fe6b 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002cee:	2000      	movs	r0, #0
 8002cf0:	f7fd fe68 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x44);
 8002cf4:	2044      	movs	r0, #68	; 0x44
 8002cf6:	f7fd fe65 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002cfa:	2000      	movs	r0, #0
 8002cfc:	f7fd fe62 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x56);
 8002d00:	2056      	movs	r0, #86	; 0x56
 8002d02:	f7fd fe5f 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002d06:	2000      	movs	r0, #0
 8002d08:	f7fd fe5c 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x23);
 8002d0c:	2023      	movs	r0, #35	; 0x23
 8002d0e:	f7fd fe59 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002d12:	2000      	movs	r0, #0
 8002d14:	f7fd fe56 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x33);
 8002d18:	2033      	movs	r0, #51	; 0x33
 8002d1a:	f7fd fe53 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002d1e:	2000      	movs	r0, #0
 8002d20:	f7fd fe50 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x45);
 8002d24:	2045      	movs	r0, #69	; 0x45
 8002d26:	f7fd fe4d 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002d2a:	2000      	movs	r0, #0
 8002d2c:	f7fd fe4a 	bl	80009c4 <LCD_WR_DATAX>

		LCD_WR_REG(0xE8);
 8002d30:	20e8      	movs	r0, #232	; 0xe8
 8002d32:	f7fd fe23 	bl	800097c <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 8002d36:	2000      	movs	r0, #0
 8002d38:	f7fd fe44 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002d3c:	2000      	movs	r0, #0
 8002d3e:	f7fd fe41 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x99);
 8002d42:	2099      	movs	r0, #153	; 0x99
 8002d44:	f7fd fe3e 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002d48:	2000      	movs	r0, #0
 8002d4a:	f7fd fe3b 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x87);
 8002d4e:	2087      	movs	r0, #135	; 0x87
 8002d50:	f7fd fe38 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002d54:	2000      	movs	r0, #0
 8002d56:	f7fd fe35 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x88);
 8002d5a:	2088      	movs	r0, #136	; 0x88
 8002d5c:	f7fd fe32 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002d60:	2000      	movs	r0, #0
 8002d62:	f7fd fe2f 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x77);
 8002d66:	2077      	movs	r0, #119	; 0x77
 8002d68:	f7fd fe2c 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002d6c:	2000      	movs	r0, #0
 8002d6e:	f7fd fe29 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x66);
 8002d72:	2066      	movs	r0, #102	; 0x66
 8002d74:	f7fd fe26 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002d78:	2000      	movs	r0, #0
 8002d7a:	f7fd fe23 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x88);
 8002d7e:	2088      	movs	r0, #136	; 0x88
 8002d80:	f7fd fe20 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002d84:	2000      	movs	r0, #0
 8002d86:	f7fd fe1d 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xAA);
 8002d8a:	20aa      	movs	r0, #170	; 0xaa
 8002d8c:	f7fd fe1a 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002d90:	2000      	movs	r0, #0
 8002d92:	f7fd fe17 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xBB);
 8002d96:	20bb      	movs	r0, #187	; 0xbb
 8002d98:	f7fd fe14 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002d9c:	2000      	movs	r0, #0
 8002d9e:	f7fd fe11 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x99);
 8002da2:	2099      	movs	r0, #153	; 0x99
 8002da4:	f7fd fe0e 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002da8:	2000      	movs	r0, #0
 8002daa:	f7fd fe0b 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x66);
 8002dae:	2066      	movs	r0, #102	; 0x66
 8002db0:	f7fd fe08 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002db4:	2000      	movs	r0, #0
 8002db6:	f7fd fe05 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x55);
 8002dba:	2055      	movs	r0, #85	; 0x55
 8002dbc:	f7fd fe02 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002dc0:	2000      	movs	r0, #0
 8002dc2:	f7fd fdff 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x55);
 8002dc6:	2055      	movs	r0, #85	; 0x55
 8002dc8:	f7fd fdfc 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002dcc:	2000      	movs	r0, #0
 8002dce:	f7fd fdf9 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x44);
 8002dd2:	2044      	movs	r0, #68	; 0x44
 8002dd4:	f7fd fdf6 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002dd8:	2000      	movs	r0, #0
 8002dda:	f7fd fdf3 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x44);
 8002dde:	2044      	movs	r0, #68	; 0x44
 8002de0:	f7fd fdf0 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002de4:	2000      	movs	r0, #0
 8002de6:	f7fd fded 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x55);
 8002dea:	2055      	movs	r0, #85	; 0x55
 8002dec:	f7fd fdea 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002df0:	2000      	movs	r0, #0
 8002df2:	f7fd fde7 	bl	80009c4 <LCD_WR_DATAX>

		LCD_WR_REG(0xE9);
 8002df6:	20e9      	movs	r0, #233	; 0xe9
 8002df8:	f7fd fdc0 	bl	800097c <LCD_WR_REG>
		LCD_WR_DATAX(0xAA);
 8002dfc:	20aa      	movs	r0, #170	; 0xaa
 8002dfe:	f7fd fde1 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002e02:	2000      	movs	r0, #0
 8002e04:	f7fd fdde 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002e08:	2000      	movs	r0, #0
 8002e0a:	f7fd fddb 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002e0e:	2000      	movs	r0, #0
 8002e10:	f7fd fdd8 	bl	80009c4 <LCD_WR_DATAX>

		LCD_WR_REG(0x00);
 8002e14:	2000      	movs	r0, #0
 8002e16:	f7fd fdb1 	bl	800097c <LCD_WR_REG>
		LCD_WR_DATAX(0xAA);
 8002e1a:	20aa      	movs	r0, #170	; 0xaa
 8002e1c:	f7fd fdd2 	bl	80009c4 <LCD_WR_DATAX>

		LCD_WR_REG(0xCF);
 8002e20:	20cf      	movs	r0, #207	; 0xcf
 8002e22:	f7fd fdab 	bl	800097c <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 8002e26:	2000      	movs	r0, #0
 8002e28:	f7fd fdcc 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002e2c:	2000      	movs	r0, #0
 8002e2e:	f7fd fdc9 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002e32:	2000      	movs	r0, #0
 8002e34:	f7fd fdc6 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002e38:	2000      	movs	r0, #0
 8002e3a:	f7fd fdc3 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002e3e:	2000      	movs	r0, #0
 8002e40:	f7fd fdc0 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002e44:	2000      	movs	r0, #0
 8002e46:	f7fd fdbd 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002e4a:	2000      	movs	r0, #0
 8002e4c:	f7fd fdba 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002e50:	2000      	movs	r0, #0
 8002e52:	f7fd fdb7 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002e56:	2000      	movs	r0, #0
 8002e58:	f7fd fdb4 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002e5c:	2000      	movs	r0, #0
 8002e5e:	f7fd fdb1 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002e62:	2000      	movs	r0, #0
 8002e64:	f7fd fdae 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002e68:	2000      	movs	r0, #0
 8002e6a:	f7fd fdab 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002e6e:	2000      	movs	r0, #0
 8002e70:	f7fd fda8 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002e74:	2000      	movs	r0, #0
 8002e76:	f7fd fda5 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002e7a:	2000      	movs	r0, #0
 8002e7c:	f7fd fda2 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002e80:	2000      	movs	r0, #0
 8002e82:	f7fd fd9f 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002e86:	2000      	movs	r0, #0
 8002e88:	f7fd fd9c 	bl	80009c4 <LCD_WR_DATAX>

		LCD_WR_REG(0xF0);
 8002e8c:	20f0      	movs	r0, #240	; 0xf0
 8002e8e:	f7fd fd75 	bl	800097c <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 8002e92:	2000      	movs	r0, #0
 8002e94:	f7fd fd96 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x50);
 8002e98:	2050      	movs	r0, #80	; 0x50
 8002e9a:	f7fd fd93 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002e9e:	2000      	movs	r0, #0
 8002ea0:	f7fd fd90 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002ea4:	2000      	movs	r0, #0
 8002ea6:	f7fd fd8d 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002eaa:	2000      	movs	r0, #0
 8002eac:	f7fd fd8a 	bl	80009c4 <LCD_WR_DATAX>

		LCD_WR_REG(0xF3);
 8002eb0:	20f3      	movs	r0, #243	; 0xf3
 8002eb2:	f7fd fd63 	bl	800097c <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 8002eb6:	2000      	movs	r0, #0
 8002eb8:	f7fd fd84 	bl	80009c4 <LCD_WR_DATAX>

		LCD_WR_REG(0xF9);
 8002ebc:	20f9      	movs	r0, #249	; 0xf9
 8002ebe:	f7fd fd5d 	bl	800097c <LCD_WR_REG>
		LCD_WR_DATAX(0x06);
 8002ec2:	2006      	movs	r0, #6
 8002ec4:	f7fd fd7e 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x10);
 8002ec8:	2010      	movs	r0, #16
 8002eca:	f7fd fd7b 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x29);
 8002ece:	2029      	movs	r0, #41	; 0x29
 8002ed0:	f7fd fd78 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002ed4:	2000      	movs	r0, #0
 8002ed6:	f7fd fd75 	bl	80009c4 <LCD_WR_DATAX>

		LCD_WR_REG(0x3A);
 8002eda:	203a      	movs	r0, #58	; 0x3a
 8002edc:	f7fd fd4e 	bl	800097c <LCD_WR_REG>
		LCD_WR_DATAX(0x55);	//66
 8002ee0:	2055      	movs	r0, #85	; 0x55
 8002ee2:	f7fd fd6f 	bl	80009c4 <LCD_WR_DATAX>

		LCD_WR_REG(0x11);
 8002ee6:	2011      	movs	r0, #17
 8002ee8:	f7fd fd48 	bl	800097c <LCD_WR_REG>
		HAL_Delay(100);
 8002eec:	2064      	movs	r0, #100	; 0x64
 8002eee:	f002 ff85 	bl	8005dfc <HAL_Delay>
		LCD_WR_REG(0x29);
 8002ef2:	2029      	movs	r0, #41	; 0x29
 8002ef4:	f7fd fd42 	bl	800097c <LCD_WR_REG>
		LCD_WR_REG(0x35);
 8002ef8:	2035      	movs	r0, #53	; 0x35
 8002efa:	f7fd fd3f 	bl	800097c <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 8002efe:	2000      	movs	r0, #0
 8002f00:	f7fd fd60 	bl	80009c4 <LCD_WR_DATAX>

		LCD_WR_REG(0x51);
 8002f04:	2051      	movs	r0, #81	; 0x51
 8002f06:	f7fd fd39 	bl	800097c <LCD_WR_REG>
		LCD_WR_DATAX(0xFF);
 8002f0a:	20ff      	movs	r0, #255	; 0xff
 8002f0c:	f7fd fd5a 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_REG(0x53);
 8002f10:	2053      	movs	r0, #83	; 0x53
 8002f12:	f7fd fd33 	bl	800097c <LCD_WR_REG>
		LCD_WR_DATAX(0x2C);
 8002f16:	202c      	movs	r0, #44	; 0x2c
 8002f18:	f7fd fd54 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_REG(0x55);
 8002f1c:	2055      	movs	r0, #85	; 0x55
 8002f1e:	f7fd fd2d 	bl	800097c <LCD_WR_REG>
		LCD_WR_DATAX(0x82);
 8002f22:	2082      	movs	r0, #130	; 0x82
 8002f24:	f7fd fd4e 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_REG(0x2c);
 8002f28:	202c      	movs	r0, #44	; 0x2c
 8002f2a:	f7fd fd27 	bl	800097c <LCD_WR_REG>
 8002f2e:	f002 bca1 	b.w	8005874 <LCD_Init+0x3e34>
	} else if (lcddev.id == 0x5510) {
 8002f32:	4b04      	ldr	r3, [pc, #16]	; (8002f44 <LCD_Init+0x1504>)
 8002f34:	889b      	ldrh	r3, [r3, #4]
 8002f36:	f245 5210 	movw	r2, #21776	; 0x5510
 8002f3a:	4293      	cmp	r3, r2
 8002f3c:	f040 8782 	bne.w	8003e44 <LCD_Init+0x2404>
 8002f40:	e002      	b.n	8002f48 <LCD_Init+0x1508>
 8002f42:	bf00      	nop
 8002f44:	20000028 	.word	0x20000028
		LCD_WriteReg(0xF000, 0x55);
 8002f48:	2155      	movs	r1, #85	; 0x55
 8002f4a:	f44f 4070 	mov.w	r0, #61440	; 0xf000
 8002f4e:	f7fd fda1 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0xF001, 0xAA);
 8002f52:	21aa      	movs	r1, #170	; 0xaa
 8002f54:	f24f 0001 	movw	r0, #61441	; 0xf001
 8002f58:	f7fd fd9c 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0xF002, 0x52);
 8002f5c:	2152      	movs	r1, #82	; 0x52
 8002f5e:	f24f 0002 	movw	r0, #61442	; 0xf002
 8002f62:	f7fd fd97 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0xF003, 0x08);
 8002f66:	2108      	movs	r1, #8
 8002f68:	f24f 0003 	movw	r0, #61443	; 0xf003
 8002f6c:	f7fd fd92 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0xF004, 0x01);
 8002f70:	2101      	movs	r1, #1
 8002f72:	f24f 0004 	movw	r0, #61444	; 0xf004
 8002f76:	f7fd fd8d 	bl	8000a94 <LCD_WriteReg>
		//AVDD Set AVDD 5.2V
		LCD_WriteReg(0xB000, 0x0D);
 8002f7a:	210d      	movs	r1, #13
 8002f7c:	f44f 4030 	mov.w	r0, #45056	; 0xb000
 8002f80:	f7fd fd88 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0xB001, 0x0D);
 8002f84:	210d      	movs	r1, #13
 8002f86:	f24b 0001 	movw	r0, #45057	; 0xb001
 8002f8a:	f7fd fd83 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0xB002, 0x0D);
 8002f8e:	210d      	movs	r1, #13
 8002f90:	f24b 0002 	movw	r0, #45058	; 0xb002
 8002f94:	f7fd fd7e 	bl	8000a94 <LCD_WriteReg>
		//AVDD ratio
		LCD_WriteReg(0xB600, 0x34);
 8002f98:	2134      	movs	r1, #52	; 0x34
 8002f9a:	f44f 4036 	mov.w	r0, #46592	; 0xb600
 8002f9e:	f7fd fd79 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0xB601, 0x34);
 8002fa2:	2134      	movs	r1, #52	; 0x34
 8002fa4:	f24b 6001 	movw	r0, #46593	; 0xb601
 8002fa8:	f7fd fd74 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0xB602, 0x34);
 8002fac:	2134      	movs	r1, #52	; 0x34
 8002fae:	f24b 6002 	movw	r0, #46594	; 0xb602
 8002fb2:	f7fd fd6f 	bl	8000a94 <LCD_WriteReg>
		//AVEE -5.2V
		LCD_WriteReg(0xB100, 0x0D);
 8002fb6:	210d      	movs	r1, #13
 8002fb8:	f44f 4031 	mov.w	r0, #45312	; 0xb100
 8002fbc:	f7fd fd6a 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0xB101, 0x0D);
 8002fc0:	210d      	movs	r1, #13
 8002fc2:	f24b 1001 	movw	r0, #45313	; 0xb101
 8002fc6:	f7fd fd65 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0xB102, 0x0D);
 8002fca:	210d      	movs	r1, #13
 8002fcc:	f24b 1002 	movw	r0, #45314	; 0xb102
 8002fd0:	f7fd fd60 	bl	8000a94 <LCD_WriteReg>
		//AVEE ratio
		LCD_WriteReg(0xB700, 0x34);
 8002fd4:	2134      	movs	r1, #52	; 0x34
 8002fd6:	f44f 4037 	mov.w	r0, #46848	; 0xb700
 8002fda:	f7fd fd5b 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0xB701, 0x34);
 8002fde:	2134      	movs	r1, #52	; 0x34
 8002fe0:	f24b 7001 	movw	r0, #46849	; 0xb701
 8002fe4:	f7fd fd56 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0xB702, 0x34);
 8002fe8:	2134      	movs	r1, #52	; 0x34
 8002fea:	f24b 7002 	movw	r0, #46850	; 0xb702
 8002fee:	f7fd fd51 	bl	8000a94 <LCD_WriteReg>
		//VCL -2.5V
		LCD_WriteReg(0xB200, 0x00);
 8002ff2:	2100      	movs	r1, #0
 8002ff4:	f44f 4032 	mov.w	r0, #45568	; 0xb200
 8002ff8:	f7fd fd4c 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0xB201, 0x00);
 8002ffc:	2100      	movs	r1, #0
 8002ffe:	f24b 2001 	movw	r0, #45569	; 0xb201
 8003002:	f7fd fd47 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0xB202, 0x00);
 8003006:	2100      	movs	r1, #0
 8003008:	f24b 2002 	movw	r0, #45570	; 0xb202
 800300c:	f7fd fd42 	bl	8000a94 <LCD_WriteReg>
		//VCL ratio
		LCD_WriteReg(0xB800, 0x24);
 8003010:	2124      	movs	r1, #36	; 0x24
 8003012:	f44f 4038 	mov.w	r0, #47104	; 0xb800
 8003016:	f7fd fd3d 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0xB801, 0x24);
 800301a:	2124      	movs	r1, #36	; 0x24
 800301c:	f64b 0001 	movw	r0, #47105	; 0xb801
 8003020:	f7fd fd38 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0xB802, 0x24);
 8003024:	2124      	movs	r1, #36	; 0x24
 8003026:	f64b 0002 	movw	r0, #47106	; 0xb802
 800302a:	f7fd fd33 	bl	8000a94 <LCD_WriteReg>
		//VGH 15V (Free pump)
		LCD_WriteReg(0xBF00, 0x01);
 800302e:	2101      	movs	r1, #1
 8003030:	f44f 403f 	mov.w	r0, #48896	; 0xbf00
 8003034:	f7fd fd2e 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0xB300, 0x0F);
 8003038:	210f      	movs	r1, #15
 800303a:	f44f 4033 	mov.w	r0, #45824	; 0xb300
 800303e:	f7fd fd29 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0xB301, 0x0F);
 8003042:	210f      	movs	r1, #15
 8003044:	f24b 3001 	movw	r0, #45825	; 0xb301
 8003048:	f7fd fd24 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0xB302, 0x0F);
 800304c:	210f      	movs	r1, #15
 800304e:	f24b 3002 	movw	r0, #45826	; 0xb302
 8003052:	f7fd fd1f 	bl	8000a94 <LCD_WriteReg>
		//VGH ratio
		LCD_WriteReg(0xB900, 0x34);
 8003056:	2134      	movs	r1, #52	; 0x34
 8003058:	f44f 4039 	mov.w	r0, #47360	; 0xb900
 800305c:	f7fd fd1a 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0xB901, 0x34);
 8003060:	2134      	movs	r1, #52	; 0x34
 8003062:	f64b 1001 	movw	r0, #47361	; 0xb901
 8003066:	f7fd fd15 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0xB902, 0x34);
 800306a:	2134      	movs	r1, #52	; 0x34
 800306c:	f64b 1002 	movw	r0, #47362	; 0xb902
 8003070:	f7fd fd10 	bl	8000a94 <LCD_WriteReg>
		//VGL_REG -10V
		LCD_WriteReg(0xB500, 0x08);
 8003074:	2108      	movs	r1, #8
 8003076:	f44f 4035 	mov.w	r0, #46336	; 0xb500
 800307a:	f7fd fd0b 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0xB501, 0x08);
 800307e:	2108      	movs	r1, #8
 8003080:	f24b 5001 	movw	r0, #46337	; 0xb501
 8003084:	f7fd fd06 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0xB502, 0x08);
 8003088:	2108      	movs	r1, #8
 800308a:	f24b 5002 	movw	r0, #46338	; 0xb502
 800308e:	f7fd fd01 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0xC200, 0x03);
 8003092:	2103      	movs	r1, #3
 8003094:	f44f 4042 	mov.w	r0, #49664	; 0xc200
 8003098:	f7fd fcfc 	bl	8000a94 <LCD_WriteReg>
		//VGLX ratio
		LCD_WriteReg(0xBA00, 0x24);
 800309c:	2124      	movs	r1, #36	; 0x24
 800309e:	f44f 403a 	mov.w	r0, #47616	; 0xba00
 80030a2:	f7fd fcf7 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0xBA01, 0x24);
 80030a6:	2124      	movs	r1, #36	; 0x24
 80030a8:	f64b 2001 	movw	r0, #47617	; 0xba01
 80030ac:	f7fd fcf2 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0xBA02, 0x24);
 80030b0:	2124      	movs	r1, #36	; 0x24
 80030b2:	f64b 2002 	movw	r0, #47618	; 0xba02
 80030b6:	f7fd fced 	bl	8000a94 <LCD_WriteReg>
		//VGMP/VGSP 4.5V/0V
		LCD_WriteReg(0xBC00, 0x00);
 80030ba:	2100      	movs	r1, #0
 80030bc:	f44f 403c 	mov.w	r0, #48128	; 0xbc00
 80030c0:	f7fd fce8 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0xBC01, 0x78);
 80030c4:	2178      	movs	r1, #120	; 0x78
 80030c6:	f64b 4001 	movw	r0, #48129	; 0xbc01
 80030ca:	f7fd fce3 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0xBC02, 0x00);
 80030ce:	2100      	movs	r1, #0
 80030d0:	f64b 4002 	movw	r0, #48130	; 0xbc02
 80030d4:	f7fd fcde 	bl	8000a94 <LCD_WriteReg>
		//VGMN/VGSN -4.5V/0V
		LCD_WriteReg(0xBD00, 0x00);
 80030d8:	2100      	movs	r1, #0
 80030da:	f44f 403d 	mov.w	r0, #48384	; 0xbd00
 80030de:	f7fd fcd9 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0xBD01, 0x78);
 80030e2:	2178      	movs	r1, #120	; 0x78
 80030e4:	f64b 5001 	movw	r0, #48385	; 0xbd01
 80030e8:	f7fd fcd4 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0xBD02, 0x00);
 80030ec:	2100      	movs	r1, #0
 80030ee:	f64b 5002 	movw	r0, #48386	; 0xbd02
 80030f2:	f7fd fccf 	bl	8000a94 <LCD_WriteReg>
		//VCOM
		LCD_WriteReg(0xBE00, 0x00);
 80030f6:	2100      	movs	r1, #0
 80030f8:	f44f 403e 	mov.w	r0, #48640	; 0xbe00
 80030fc:	f7fd fcca 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0xBE01, 0x64);
 8003100:	2164      	movs	r1, #100	; 0x64
 8003102:	f64b 6001 	movw	r0, #48641	; 0xbe01
 8003106:	f7fd fcc5 	bl	8000a94 <LCD_WriteReg>
		//Gamma Setting
		LCD_WriteReg(0xD100, 0x00);
 800310a:	2100      	movs	r1, #0
 800310c:	f44f 4051 	mov.w	r0, #53504	; 0xd100
 8003110:	f7fd fcc0 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0xD101, 0x33);
 8003114:	2133      	movs	r1, #51	; 0x33
 8003116:	f24d 1001 	movw	r0, #53505	; 0xd101
 800311a:	f7fd fcbb 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0xD102, 0x00);
 800311e:	2100      	movs	r1, #0
 8003120:	f24d 1002 	movw	r0, #53506	; 0xd102
 8003124:	f7fd fcb6 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0xD103, 0x34);
 8003128:	2134      	movs	r1, #52	; 0x34
 800312a:	f24d 1003 	movw	r0, #53507	; 0xd103
 800312e:	f7fd fcb1 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0xD104, 0x00);
 8003132:	2100      	movs	r1, #0
 8003134:	f24d 1004 	movw	r0, #53508	; 0xd104
 8003138:	f7fd fcac 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0xD105, 0x3A);
 800313c:	213a      	movs	r1, #58	; 0x3a
 800313e:	f24d 1005 	movw	r0, #53509	; 0xd105
 8003142:	f7fd fca7 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0xD106, 0x00);
 8003146:	2100      	movs	r1, #0
 8003148:	f24d 1006 	movw	r0, #53510	; 0xd106
 800314c:	f7fd fca2 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0xD107, 0x4A);
 8003150:	214a      	movs	r1, #74	; 0x4a
 8003152:	f24d 1007 	movw	r0, #53511	; 0xd107
 8003156:	f7fd fc9d 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0xD108, 0x00);
 800315a:	2100      	movs	r1, #0
 800315c:	f24d 1008 	movw	r0, #53512	; 0xd108
 8003160:	f7fd fc98 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0xD109, 0x5C);
 8003164:	215c      	movs	r1, #92	; 0x5c
 8003166:	f24d 1009 	movw	r0, #53513	; 0xd109
 800316a:	f7fd fc93 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0xD10A, 0x00);
 800316e:	2100      	movs	r1, #0
 8003170:	f24d 100a 	movw	r0, #53514	; 0xd10a
 8003174:	f7fd fc8e 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0xD10B, 0x81);
 8003178:	2181      	movs	r1, #129	; 0x81
 800317a:	f24d 100b 	movw	r0, #53515	; 0xd10b
 800317e:	f7fd fc89 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0xD10C, 0x00);
 8003182:	2100      	movs	r1, #0
 8003184:	f24d 100c 	movw	r0, #53516	; 0xd10c
 8003188:	f7fd fc84 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0xD10D, 0xA6);
 800318c:	21a6      	movs	r1, #166	; 0xa6
 800318e:	f24d 100d 	movw	r0, #53517	; 0xd10d
 8003192:	f7fd fc7f 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0xD10E, 0x00);
 8003196:	2100      	movs	r1, #0
 8003198:	f24d 100e 	movw	r0, #53518	; 0xd10e
 800319c:	f7fd fc7a 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0xD10F, 0xE5);
 80031a0:	21e5      	movs	r1, #229	; 0xe5
 80031a2:	f24d 100f 	movw	r0, #53519	; 0xd10f
 80031a6:	f7fd fc75 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0xD110, 0x01);
 80031aa:	2101      	movs	r1, #1
 80031ac:	f24d 1010 	movw	r0, #53520	; 0xd110
 80031b0:	f7fd fc70 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0xD111, 0x13);
 80031b4:	2113      	movs	r1, #19
 80031b6:	f24d 1011 	movw	r0, #53521	; 0xd111
 80031ba:	f7fd fc6b 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0xD112, 0x01);
 80031be:	2101      	movs	r1, #1
 80031c0:	f24d 1012 	movw	r0, #53522	; 0xd112
 80031c4:	f7fd fc66 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0xD113, 0x54);
 80031c8:	2154      	movs	r1, #84	; 0x54
 80031ca:	f24d 1013 	movw	r0, #53523	; 0xd113
 80031ce:	f7fd fc61 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0xD114, 0x01);
 80031d2:	2101      	movs	r1, #1
 80031d4:	f24d 1014 	movw	r0, #53524	; 0xd114
 80031d8:	f7fd fc5c 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0xD115, 0x82);
 80031dc:	2182      	movs	r1, #130	; 0x82
 80031de:	f24d 1015 	movw	r0, #53525	; 0xd115
 80031e2:	f7fd fc57 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0xD116, 0x01);
 80031e6:	2101      	movs	r1, #1
 80031e8:	f24d 1016 	movw	r0, #53526	; 0xd116
 80031ec:	f7fd fc52 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0xD117, 0xCA);
 80031f0:	21ca      	movs	r1, #202	; 0xca
 80031f2:	f24d 1017 	movw	r0, #53527	; 0xd117
 80031f6:	f7fd fc4d 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0xD118, 0x02);
 80031fa:	2102      	movs	r1, #2
 80031fc:	f24d 1018 	movw	r0, #53528	; 0xd118
 8003200:	f7fd fc48 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0xD119, 0x00);
 8003204:	2100      	movs	r1, #0
 8003206:	f24d 1019 	movw	r0, #53529	; 0xd119
 800320a:	f7fd fc43 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0xD11A, 0x02);
 800320e:	2102      	movs	r1, #2
 8003210:	f24d 101a 	movw	r0, #53530	; 0xd11a
 8003214:	f7fd fc3e 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0xD11B, 0x01);
 8003218:	2101      	movs	r1, #1
 800321a:	f24d 101b 	movw	r0, #53531	; 0xd11b
 800321e:	f7fd fc39 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0xD11C, 0x02);
 8003222:	2102      	movs	r1, #2
 8003224:	f24d 101c 	movw	r0, #53532	; 0xd11c
 8003228:	f7fd fc34 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0xD11D, 0x34);
 800322c:	2134      	movs	r1, #52	; 0x34
 800322e:	f24d 101d 	movw	r0, #53533	; 0xd11d
 8003232:	f7fd fc2f 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0xD11E, 0x02);
 8003236:	2102      	movs	r1, #2
 8003238:	f24d 101e 	movw	r0, #53534	; 0xd11e
 800323c:	f7fd fc2a 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0xD11F, 0x67);
 8003240:	2167      	movs	r1, #103	; 0x67
 8003242:	f24d 101f 	movw	r0, #53535	; 0xd11f
 8003246:	f7fd fc25 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0xD120, 0x02);
 800324a:	2102      	movs	r1, #2
 800324c:	f24d 1020 	movw	r0, #53536	; 0xd120
 8003250:	f7fd fc20 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0xD121, 0x84);
 8003254:	2184      	movs	r1, #132	; 0x84
 8003256:	f24d 1021 	movw	r0, #53537	; 0xd121
 800325a:	f7fd fc1b 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0xD122, 0x02);
 800325e:	2102      	movs	r1, #2
 8003260:	f24d 1022 	movw	r0, #53538	; 0xd122
 8003264:	f7fd fc16 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0xD123, 0xA4);
 8003268:	21a4      	movs	r1, #164	; 0xa4
 800326a:	f24d 1023 	movw	r0, #53539	; 0xd123
 800326e:	f7fd fc11 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0xD124, 0x02);
 8003272:	2102      	movs	r1, #2
 8003274:	f24d 1024 	movw	r0, #53540	; 0xd124
 8003278:	f7fd fc0c 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0xD125, 0xB7);
 800327c:	21b7      	movs	r1, #183	; 0xb7
 800327e:	f24d 1025 	movw	r0, #53541	; 0xd125
 8003282:	f7fd fc07 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0xD126, 0x02);
 8003286:	2102      	movs	r1, #2
 8003288:	f24d 1026 	movw	r0, #53542	; 0xd126
 800328c:	f7fd fc02 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0xD127, 0xCF);
 8003290:	21cf      	movs	r1, #207	; 0xcf
 8003292:	f24d 1027 	movw	r0, #53543	; 0xd127
 8003296:	f7fd fbfd 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0xD128, 0x02);
 800329a:	2102      	movs	r1, #2
 800329c:	f24d 1028 	movw	r0, #53544	; 0xd128
 80032a0:	f7fd fbf8 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0xD129, 0xDE);
 80032a4:	21de      	movs	r1, #222	; 0xde
 80032a6:	f24d 1029 	movw	r0, #53545	; 0xd129
 80032aa:	f7fd fbf3 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0xD12A, 0x02);
 80032ae:	2102      	movs	r1, #2
 80032b0:	f24d 102a 	movw	r0, #53546	; 0xd12a
 80032b4:	f7fd fbee 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0xD12B, 0xF2);
 80032b8:	21f2      	movs	r1, #242	; 0xf2
 80032ba:	f24d 102b 	movw	r0, #53547	; 0xd12b
 80032be:	f7fd fbe9 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0xD12C, 0x02);
 80032c2:	2102      	movs	r1, #2
 80032c4:	f24d 102c 	movw	r0, #53548	; 0xd12c
 80032c8:	f7fd fbe4 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0xD12D, 0xFE);
 80032cc:	21fe      	movs	r1, #254	; 0xfe
 80032ce:	f24d 102d 	movw	r0, #53549	; 0xd12d
 80032d2:	f7fd fbdf 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0xD12E, 0x03);
 80032d6:	2103      	movs	r1, #3
 80032d8:	f24d 102e 	movw	r0, #53550	; 0xd12e
 80032dc:	f7fd fbda 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0xD12F, 0x10);
 80032e0:	2110      	movs	r1, #16
 80032e2:	f24d 102f 	movw	r0, #53551	; 0xd12f
 80032e6:	f7fd fbd5 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0xD130, 0x03);
 80032ea:	2103      	movs	r1, #3
 80032ec:	f24d 1030 	movw	r0, #53552	; 0xd130
 80032f0:	f7fd fbd0 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0xD131, 0x33);
 80032f4:	2133      	movs	r1, #51	; 0x33
 80032f6:	f24d 1031 	movw	r0, #53553	; 0xd131
 80032fa:	f7fd fbcb 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0xD132, 0x03);
 80032fe:	2103      	movs	r1, #3
 8003300:	f24d 1032 	movw	r0, #53554	; 0xd132
 8003304:	f7fd fbc6 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0xD133, 0x6D);
 8003308:	216d      	movs	r1, #109	; 0x6d
 800330a:	f24d 1033 	movw	r0, #53555	; 0xd133
 800330e:	f7fd fbc1 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0xD200, 0x00);
 8003312:	2100      	movs	r1, #0
 8003314:	f44f 4052 	mov.w	r0, #53760	; 0xd200
 8003318:	f7fd fbbc 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0xD201, 0x33);
 800331c:	2133      	movs	r1, #51	; 0x33
 800331e:	f24d 2001 	movw	r0, #53761	; 0xd201
 8003322:	f7fd fbb7 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0xD202, 0x00);
 8003326:	2100      	movs	r1, #0
 8003328:	f24d 2002 	movw	r0, #53762	; 0xd202
 800332c:	f7fd fbb2 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0xD203, 0x34);
 8003330:	2134      	movs	r1, #52	; 0x34
 8003332:	f24d 2003 	movw	r0, #53763	; 0xd203
 8003336:	f7fd fbad 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0xD204, 0x00);
 800333a:	2100      	movs	r1, #0
 800333c:	f24d 2004 	movw	r0, #53764	; 0xd204
 8003340:	f7fd fba8 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0xD205, 0x3A);
 8003344:	213a      	movs	r1, #58	; 0x3a
 8003346:	f24d 2005 	movw	r0, #53765	; 0xd205
 800334a:	f7fd fba3 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0xD206, 0x00);
 800334e:	2100      	movs	r1, #0
 8003350:	f24d 2006 	movw	r0, #53766	; 0xd206
 8003354:	f7fd fb9e 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0xD207, 0x4A);
 8003358:	214a      	movs	r1, #74	; 0x4a
 800335a:	f24d 2007 	movw	r0, #53767	; 0xd207
 800335e:	f7fd fb99 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0xD208, 0x00);
 8003362:	2100      	movs	r1, #0
 8003364:	f24d 2008 	movw	r0, #53768	; 0xd208
 8003368:	f7fd fb94 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0xD209, 0x5C);
 800336c:	215c      	movs	r1, #92	; 0x5c
 800336e:	f24d 2009 	movw	r0, #53769	; 0xd209
 8003372:	f7fd fb8f 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0xD20A, 0x00);
 8003376:	2100      	movs	r1, #0
 8003378:	f24d 200a 	movw	r0, #53770	; 0xd20a
 800337c:	f7fd fb8a 	bl	8000a94 <LCD_WriteReg>

		LCD_WriteReg(0xD20B, 0x81);
 8003380:	2181      	movs	r1, #129	; 0x81
 8003382:	f24d 200b 	movw	r0, #53771	; 0xd20b
 8003386:	f7fd fb85 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0xD20C, 0x00);
 800338a:	2100      	movs	r1, #0
 800338c:	f24d 200c 	movw	r0, #53772	; 0xd20c
 8003390:	f7fd fb80 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0xD20D, 0xA6);
 8003394:	21a6      	movs	r1, #166	; 0xa6
 8003396:	f24d 200d 	movw	r0, #53773	; 0xd20d
 800339a:	f7fd fb7b 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0xD20E, 0x00);
 800339e:	2100      	movs	r1, #0
 80033a0:	f24d 200e 	movw	r0, #53774	; 0xd20e
 80033a4:	f7fd fb76 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0xD20F, 0xE5);
 80033a8:	21e5      	movs	r1, #229	; 0xe5
 80033aa:	f24d 200f 	movw	r0, #53775	; 0xd20f
 80033ae:	f7fd fb71 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0xD210, 0x01);
 80033b2:	2101      	movs	r1, #1
 80033b4:	f24d 2010 	movw	r0, #53776	; 0xd210
 80033b8:	f7fd fb6c 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0xD211, 0x13);
 80033bc:	2113      	movs	r1, #19
 80033be:	f24d 2011 	movw	r0, #53777	; 0xd211
 80033c2:	f7fd fb67 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0xD212, 0x01);
 80033c6:	2101      	movs	r1, #1
 80033c8:	f24d 2012 	movw	r0, #53778	; 0xd212
 80033cc:	f7fd fb62 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0xD213, 0x54);
 80033d0:	2154      	movs	r1, #84	; 0x54
 80033d2:	f24d 2013 	movw	r0, #53779	; 0xd213
 80033d6:	f7fd fb5d 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0xD214, 0x01);
 80033da:	2101      	movs	r1, #1
 80033dc:	f24d 2014 	movw	r0, #53780	; 0xd214
 80033e0:	f7fd fb58 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0xD215, 0x82);
 80033e4:	2182      	movs	r1, #130	; 0x82
 80033e6:	f24d 2015 	movw	r0, #53781	; 0xd215
 80033ea:	f7fd fb53 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0xD216, 0x01);
 80033ee:	2101      	movs	r1, #1
 80033f0:	f24d 2016 	movw	r0, #53782	; 0xd216
 80033f4:	f7fd fb4e 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0xD217, 0xCA);
 80033f8:	21ca      	movs	r1, #202	; 0xca
 80033fa:	f24d 2017 	movw	r0, #53783	; 0xd217
 80033fe:	f7fd fb49 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0xD218, 0x02);
 8003402:	2102      	movs	r1, #2
 8003404:	f24d 2018 	movw	r0, #53784	; 0xd218
 8003408:	f7fd fb44 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0xD219, 0x00);
 800340c:	2100      	movs	r1, #0
 800340e:	f24d 2019 	movw	r0, #53785	; 0xd219
 8003412:	f7fd fb3f 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0xD21A, 0x02);
 8003416:	2102      	movs	r1, #2
 8003418:	f24d 201a 	movw	r0, #53786	; 0xd21a
 800341c:	f7fd fb3a 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0xD21B, 0x01);
 8003420:	2101      	movs	r1, #1
 8003422:	f24d 201b 	movw	r0, #53787	; 0xd21b
 8003426:	f7fd fb35 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0xD21C, 0x02);
 800342a:	2102      	movs	r1, #2
 800342c:	f24d 201c 	movw	r0, #53788	; 0xd21c
 8003430:	f7fd fb30 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0xD21D, 0x34);
 8003434:	2134      	movs	r1, #52	; 0x34
 8003436:	f24d 201d 	movw	r0, #53789	; 0xd21d
 800343a:	f7fd fb2b 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0xD21E, 0x02);
 800343e:	2102      	movs	r1, #2
 8003440:	f24d 201e 	movw	r0, #53790	; 0xd21e
 8003444:	f7fd fb26 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0xD21F, 0x67);
 8003448:	2167      	movs	r1, #103	; 0x67
 800344a:	f24d 201f 	movw	r0, #53791	; 0xd21f
 800344e:	f7fd fb21 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0xD220, 0x02);
 8003452:	2102      	movs	r1, #2
 8003454:	f24d 2020 	movw	r0, #53792	; 0xd220
 8003458:	f7fd fb1c 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0xD221, 0x84);
 800345c:	2184      	movs	r1, #132	; 0x84
 800345e:	f24d 2021 	movw	r0, #53793	; 0xd221
 8003462:	f7fd fb17 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0xD222, 0x02);
 8003466:	2102      	movs	r1, #2
 8003468:	f24d 2022 	movw	r0, #53794	; 0xd222
 800346c:	f7fd fb12 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0xD223, 0xA4);
 8003470:	21a4      	movs	r1, #164	; 0xa4
 8003472:	f24d 2023 	movw	r0, #53795	; 0xd223
 8003476:	f7fd fb0d 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0xD224, 0x02);
 800347a:	2102      	movs	r1, #2
 800347c:	f24d 2024 	movw	r0, #53796	; 0xd224
 8003480:	f7fd fb08 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0xD225, 0xB7);
 8003484:	21b7      	movs	r1, #183	; 0xb7
 8003486:	f24d 2025 	movw	r0, #53797	; 0xd225
 800348a:	f7fd fb03 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0xD226, 0x02);
 800348e:	2102      	movs	r1, #2
 8003490:	f24d 2026 	movw	r0, #53798	; 0xd226
 8003494:	f7fd fafe 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0xD227, 0xCF);
 8003498:	21cf      	movs	r1, #207	; 0xcf
 800349a:	f24d 2027 	movw	r0, #53799	; 0xd227
 800349e:	f7fd faf9 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0xD228, 0x02);
 80034a2:	2102      	movs	r1, #2
 80034a4:	f24d 2028 	movw	r0, #53800	; 0xd228
 80034a8:	f7fd faf4 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0xD229, 0xDE);
 80034ac:	21de      	movs	r1, #222	; 0xde
 80034ae:	f24d 2029 	movw	r0, #53801	; 0xd229
 80034b2:	f7fd faef 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0xD22A, 0x02);
 80034b6:	2102      	movs	r1, #2
 80034b8:	f24d 202a 	movw	r0, #53802	; 0xd22a
 80034bc:	f7fd faea 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0xD22B, 0xF2);
 80034c0:	21f2      	movs	r1, #242	; 0xf2
 80034c2:	f24d 202b 	movw	r0, #53803	; 0xd22b
 80034c6:	f7fd fae5 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0xD22C, 0x02);
 80034ca:	2102      	movs	r1, #2
 80034cc:	f24d 202c 	movw	r0, #53804	; 0xd22c
 80034d0:	f7fd fae0 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0xD22D, 0xFE);
 80034d4:	21fe      	movs	r1, #254	; 0xfe
 80034d6:	f24d 202d 	movw	r0, #53805	; 0xd22d
 80034da:	f7fd fadb 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0xD22E, 0x03);
 80034de:	2103      	movs	r1, #3
 80034e0:	f24d 202e 	movw	r0, #53806	; 0xd22e
 80034e4:	f7fd fad6 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0xD22F, 0x10);
 80034e8:	2110      	movs	r1, #16
 80034ea:	f24d 202f 	movw	r0, #53807	; 0xd22f
 80034ee:	f7fd fad1 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0xD230, 0x03);
 80034f2:	2103      	movs	r1, #3
 80034f4:	f24d 2030 	movw	r0, #53808	; 0xd230
 80034f8:	f7fd facc 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0xD231, 0x33);
 80034fc:	2133      	movs	r1, #51	; 0x33
 80034fe:	f24d 2031 	movw	r0, #53809	; 0xd231
 8003502:	f7fd fac7 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0xD232, 0x03);
 8003506:	2103      	movs	r1, #3
 8003508:	f24d 2032 	movw	r0, #53810	; 0xd232
 800350c:	f7fd fac2 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0xD233, 0x6D);
 8003510:	216d      	movs	r1, #109	; 0x6d
 8003512:	f24d 2033 	movw	r0, #53811	; 0xd233
 8003516:	f7fd fabd 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0xD300, 0x00);
 800351a:	2100      	movs	r1, #0
 800351c:	f44f 4053 	mov.w	r0, #54016	; 0xd300
 8003520:	f7fd fab8 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0xD301, 0x33);
 8003524:	2133      	movs	r1, #51	; 0x33
 8003526:	f24d 3001 	movw	r0, #54017	; 0xd301
 800352a:	f7fd fab3 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0xD302, 0x00);
 800352e:	2100      	movs	r1, #0
 8003530:	f24d 3002 	movw	r0, #54018	; 0xd302
 8003534:	f7fd faae 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0xD303, 0x34);
 8003538:	2134      	movs	r1, #52	; 0x34
 800353a:	f24d 3003 	movw	r0, #54019	; 0xd303
 800353e:	f7fd faa9 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0xD304, 0x00);
 8003542:	2100      	movs	r1, #0
 8003544:	f24d 3004 	movw	r0, #54020	; 0xd304
 8003548:	f7fd faa4 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0xD305, 0x3A);
 800354c:	213a      	movs	r1, #58	; 0x3a
 800354e:	f24d 3005 	movw	r0, #54021	; 0xd305
 8003552:	f7fd fa9f 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0xD306, 0x00);
 8003556:	2100      	movs	r1, #0
 8003558:	f24d 3006 	movw	r0, #54022	; 0xd306
 800355c:	f7fd fa9a 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0xD307, 0x4A);
 8003560:	214a      	movs	r1, #74	; 0x4a
 8003562:	f24d 3007 	movw	r0, #54023	; 0xd307
 8003566:	f7fd fa95 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0xD308, 0x00);
 800356a:	2100      	movs	r1, #0
 800356c:	f24d 3008 	movw	r0, #54024	; 0xd308
 8003570:	f7fd fa90 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0xD309, 0x5C);
 8003574:	215c      	movs	r1, #92	; 0x5c
 8003576:	f24d 3009 	movw	r0, #54025	; 0xd309
 800357a:	f7fd fa8b 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0xD30A, 0x00);
 800357e:	2100      	movs	r1, #0
 8003580:	f24d 300a 	movw	r0, #54026	; 0xd30a
 8003584:	f7fd fa86 	bl	8000a94 <LCD_WriteReg>

		LCD_WriteReg(0xD30B, 0x81);
 8003588:	2181      	movs	r1, #129	; 0x81
 800358a:	f24d 300b 	movw	r0, #54027	; 0xd30b
 800358e:	f7fd fa81 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0xD30C, 0x00);
 8003592:	2100      	movs	r1, #0
 8003594:	f24d 300c 	movw	r0, #54028	; 0xd30c
 8003598:	f7fd fa7c 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0xD30D, 0xA6);
 800359c:	21a6      	movs	r1, #166	; 0xa6
 800359e:	f24d 300d 	movw	r0, #54029	; 0xd30d
 80035a2:	f7fd fa77 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0xD30E, 0x00);
 80035a6:	2100      	movs	r1, #0
 80035a8:	f24d 300e 	movw	r0, #54030	; 0xd30e
 80035ac:	f7fd fa72 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0xD30F, 0xE5);
 80035b0:	21e5      	movs	r1, #229	; 0xe5
 80035b2:	f24d 300f 	movw	r0, #54031	; 0xd30f
 80035b6:	f7fd fa6d 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0xD310, 0x01);
 80035ba:	2101      	movs	r1, #1
 80035bc:	f24d 3010 	movw	r0, #54032	; 0xd310
 80035c0:	f7fd fa68 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0xD311, 0x13);
 80035c4:	2113      	movs	r1, #19
 80035c6:	f24d 3011 	movw	r0, #54033	; 0xd311
 80035ca:	f7fd fa63 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0xD312, 0x01);
 80035ce:	2101      	movs	r1, #1
 80035d0:	f24d 3012 	movw	r0, #54034	; 0xd312
 80035d4:	f7fd fa5e 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0xD313, 0x54);
 80035d8:	2154      	movs	r1, #84	; 0x54
 80035da:	f24d 3013 	movw	r0, #54035	; 0xd313
 80035de:	f7fd fa59 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0xD314, 0x01);
 80035e2:	2101      	movs	r1, #1
 80035e4:	f24d 3014 	movw	r0, #54036	; 0xd314
 80035e8:	f7fd fa54 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0xD315, 0x82);
 80035ec:	2182      	movs	r1, #130	; 0x82
 80035ee:	f24d 3015 	movw	r0, #54037	; 0xd315
 80035f2:	f7fd fa4f 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0xD316, 0x01);
 80035f6:	2101      	movs	r1, #1
 80035f8:	f24d 3016 	movw	r0, #54038	; 0xd316
 80035fc:	f7fd fa4a 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0xD317, 0xCA);
 8003600:	21ca      	movs	r1, #202	; 0xca
 8003602:	f24d 3017 	movw	r0, #54039	; 0xd317
 8003606:	f7fd fa45 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0xD318, 0x02);
 800360a:	2102      	movs	r1, #2
 800360c:	f24d 3018 	movw	r0, #54040	; 0xd318
 8003610:	f7fd fa40 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0xD319, 0x00);
 8003614:	2100      	movs	r1, #0
 8003616:	f24d 3019 	movw	r0, #54041	; 0xd319
 800361a:	f7fd fa3b 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0xD31A, 0x02);
 800361e:	2102      	movs	r1, #2
 8003620:	f24d 301a 	movw	r0, #54042	; 0xd31a
 8003624:	f7fd fa36 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0xD31B, 0x01);
 8003628:	2101      	movs	r1, #1
 800362a:	f24d 301b 	movw	r0, #54043	; 0xd31b
 800362e:	f7fd fa31 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0xD31C, 0x02);
 8003632:	2102      	movs	r1, #2
 8003634:	f24d 301c 	movw	r0, #54044	; 0xd31c
 8003638:	f7fd fa2c 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0xD31D, 0x34);
 800363c:	2134      	movs	r1, #52	; 0x34
 800363e:	f24d 301d 	movw	r0, #54045	; 0xd31d
 8003642:	f7fd fa27 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0xD31E, 0x02);
 8003646:	2102      	movs	r1, #2
 8003648:	f24d 301e 	movw	r0, #54046	; 0xd31e
 800364c:	f7fd fa22 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0xD31F, 0x67);
 8003650:	2167      	movs	r1, #103	; 0x67
 8003652:	f24d 301f 	movw	r0, #54047	; 0xd31f
 8003656:	f7fd fa1d 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0xD320, 0x02);
 800365a:	2102      	movs	r1, #2
 800365c:	f24d 3020 	movw	r0, #54048	; 0xd320
 8003660:	f7fd fa18 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0xD321, 0x84);
 8003664:	2184      	movs	r1, #132	; 0x84
 8003666:	f24d 3021 	movw	r0, #54049	; 0xd321
 800366a:	f7fd fa13 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0xD322, 0x02);
 800366e:	2102      	movs	r1, #2
 8003670:	f24d 3022 	movw	r0, #54050	; 0xd322
 8003674:	f7fd fa0e 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0xD323, 0xA4);
 8003678:	21a4      	movs	r1, #164	; 0xa4
 800367a:	f24d 3023 	movw	r0, #54051	; 0xd323
 800367e:	f7fd fa09 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0xD324, 0x02);
 8003682:	2102      	movs	r1, #2
 8003684:	f24d 3024 	movw	r0, #54052	; 0xd324
 8003688:	f7fd fa04 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0xD325, 0xB7);
 800368c:	21b7      	movs	r1, #183	; 0xb7
 800368e:	f24d 3025 	movw	r0, #54053	; 0xd325
 8003692:	f7fd f9ff 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0xD326, 0x02);
 8003696:	2102      	movs	r1, #2
 8003698:	f24d 3026 	movw	r0, #54054	; 0xd326
 800369c:	f7fd f9fa 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0xD327, 0xCF);
 80036a0:	21cf      	movs	r1, #207	; 0xcf
 80036a2:	f24d 3027 	movw	r0, #54055	; 0xd327
 80036a6:	f7fd f9f5 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0xD328, 0x02);
 80036aa:	2102      	movs	r1, #2
 80036ac:	f24d 3028 	movw	r0, #54056	; 0xd328
 80036b0:	f7fd f9f0 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0xD329, 0xDE);
 80036b4:	21de      	movs	r1, #222	; 0xde
 80036b6:	f24d 3029 	movw	r0, #54057	; 0xd329
 80036ba:	f7fd f9eb 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0xD32A, 0x02);
 80036be:	2102      	movs	r1, #2
 80036c0:	f24d 302a 	movw	r0, #54058	; 0xd32a
 80036c4:	f7fd f9e6 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0xD32B, 0xF2);
 80036c8:	21f2      	movs	r1, #242	; 0xf2
 80036ca:	f24d 302b 	movw	r0, #54059	; 0xd32b
 80036ce:	f7fd f9e1 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0xD32C, 0x02);
 80036d2:	2102      	movs	r1, #2
 80036d4:	f24d 302c 	movw	r0, #54060	; 0xd32c
 80036d8:	f7fd f9dc 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0xD32D, 0xFE);
 80036dc:	21fe      	movs	r1, #254	; 0xfe
 80036de:	f24d 302d 	movw	r0, #54061	; 0xd32d
 80036e2:	f7fd f9d7 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0xD32E, 0x03);
 80036e6:	2103      	movs	r1, #3
 80036e8:	f24d 302e 	movw	r0, #54062	; 0xd32e
 80036ec:	f7fd f9d2 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0xD32F, 0x10);
 80036f0:	2110      	movs	r1, #16
 80036f2:	f24d 302f 	movw	r0, #54063	; 0xd32f
 80036f6:	f7fd f9cd 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0xD330, 0x03);
 80036fa:	2103      	movs	r1, #3
 80036fc:	f24d 3030 	movw	r0, #54064	; 0xd330
 8003700:	f7fd f9c8 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0xD331, 0x33);
 8003704:	2133      	movs	r1, #51	; 0x33
 8003706:	f24d 3031 	movw	r0, #54065	; 0xd331
 800370a:	f7fd f9c3 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0xD332, 0x03);
 800370e:	2103      	movs	r1, #3
 8003710:	f24d 3032 	movw	r0, #54066	; 0xd332
 8003714:	f7fd f9be 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0xD333, 0x6D);
 8003718:	216d      	movs	r1, #109	; 0x6d
 800371a:	f24d 3033 	movw	r0, #54067	; 0xd333
 800371e:	f7fd f9b9 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0xD400, 0x00);
 8003722:	2100      	movs	r1, #0
 8003724:	f44f 4054 	mov.w	r0, #54272	; 0xd400
 8003728:	f7fd f9b4 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0xD401, 0x33);
 800372c:	2133      	movs	r1, #51	; 0x33
 800372e:	f24d 4001 	movw	r0, #54273	; 0xd401
 8003732:	f7fd f9af 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0xD402, 0x00);
 8003736:	2100      	movs	r1, #0
 8003738:	f24d 4002 	movw	r0, #54274	; 0xd402
 800373c:	f7fd f9aa 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0xD403, 0x34);
 8003740:	2134      	movs	r1, #52	; 0x34
 8003742:	f24d 4003 	movw	r0, #54275	; 0xd403
 8003746:	f7fd f9a5 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0xD404, 0x00);
 800374a:	2100      	movs	r1, #0
 800374c:	f24d 4004 	movw	r0, #54276	; 0xd404
 8003750:	f7fd f9a0 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0xD405, 0x3A);
 8003754:	213a      	movs	r1, #58	; 0x3a
 8003756:	f24d 4005 	movw	r0, #54277	; 0xd405
 800375a:	f7fd f99b 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0xD406, 0x00);
 800375e:	2100      	movs	r1, #0
 8003760:	f24d 4006 	movw	r0, #54278	; 0xd406
 8003764:	f7fd f996 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0xD407, 0x4A);
 8003768:	214a      	movs	r1, #74	; 0x4a
 800376a:	f24d 4007 	movw	r0, #54279	; 0xd407
 800376e:	f7fd f991 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0xD408, 0x00);
 8003772:	2100      	movs	r1, #0
 8003774:	f24d 4008 	movw	r0, #54280	; 0xd408
 8003778:	f7fd f98c 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0xD409, 0x5C);
 800377c:	215c      	movs	r1, #92	; 0x5c
 800377e:	f24d 4009 	movw	r0, #54281	; 0xd409
 8003782:	f7fd f987 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0xD40A, 0x00);
 8003786:	2100      	movs	r1, #0
 8003788:	f24d 400a 	movw	r0, #54282	; 0xd40a
 800378c:	f7fd f982 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0xD40B, 0x81);
 8003790:	2181      	movs	r1, #129	; 0x81
 8003792:	f24d 400b 	movw	r0, #54283	; 0xd40b
 8003796:	f7fd f97d 	bl	8000a94 <LCD_WriteReg>

		LCD_WriteReg(0xD40C, 0x00);
 800379a:	2100      	movs	r1, #0
 800379c:	f24d 400c 	movw	r0, #54284	; 0xd40c
 80037a0:	f7fd f978 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0xD40D, 0xA6);
 80037a4:	21a6      	movs	r1, #166	; 0xa6
 80037a6:	f24d 400d 	movw	r0, #54285	; 0xd40d
 80037aa:	f7fd f973 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0xD40E, 0x00);
 80037ae:	2100      	movs	r1, #0
 80037b0:	f24d 400e 	movw	r0, #54286	; 0xd40e
 80037b4:	f7fd f96e 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0xD40F, 0xE5);
 80037b8:	21e5      	movs	r1, #229	; 0xe5
 80037ba:	f24d 400f 	movw	r0, #54287	; 0xd40f
 80037be:	f7fd f969 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0xD410, 0x01);
 80037c2:	2101      	movs	r1, #1
 80037c4:	f24d 4010 	movw	r0, #54288	; 0xd410
 80037c8:	f7fd f964 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0xD411, 0x13);
 80037cc:	2113      	movs	r1, #19
 80037ce:	f24d 4011 	movw	r0, #54289	; 0xd411
 80037d2:	f7fd f95f 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0xD412, 0x01);
 80037d6:	2101      	movs	r1, #1
 80037d8:	f24d 4012 	movw	r0, #54290	; 0xd412
 80037dc:	f7fd f95a 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0xD413, 0x54);
 80037e0:	2154      	movs	r1, #84	; 0x54
 80037e2:	f24d 4013 	movw	r0, #54291	; 0xd413
 80037e6:	f7fd f955 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0xD414, 0x01);
 80037ea:	2101      	movs	r1, #1
 80037ec:	f24d 4014 	movw	r0, #54292	; 0xd414
 80037f0:	f7fd f950 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0xD415, 0x82);
 80037f4:	2182      	movs	r1, #130	; 0x82
 80037f6:	f24d 4015 	movw	r0, #54293	; 0xd415
 80037fa:	f7fd f94b 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0xD416, 0x01);
 80037fe:	2101      	movs	r1, #1
 8003800:	f24d 4016 	movw	r0, #54294	; 0xd416
 8003804:	f7fd f946 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0xD417, 0xCA);
 8003808:	21ca      	movs	r1, #202	; 0xca
 800380a:	f24d 4017 	movw	r0, #54295	; 0xd417
 800380e:	f7fd f941 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0xD418, 0x02);
 8003812:	2102      	movs	r1, #2
 8003814:	f24d 4018 	movw	r0, #54296	; 0xd418
 8003818:	f7fd f93c 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0xD419, 0x00);
 800381c:	2100      	movs	r1, #0
 800381e:	f24d 4019 	movw	r0, #54297	; 0xd419
 8003822:	f7fd f937 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0xD41A, 0x02);
 8003826:	2102      	movs	r1, #2
 8003828:	f24d 401a 	movw	r0, #54298	; 0xd41a
 800382c:	f7fd f932 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0xD41B, 0x01);
 8003830:	2101      	movs	r1, #1
 8003832:	f24d 401b 	movw	r0, #54299	; 0xd41b
 8003836:	f7fd f92d 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0xD41C, 0x02);
 800383a:	2102      	movs	r1, #2
 800383c:	f24d 401c 	movw	r0, #54300	; 0xd41c
 8003840:	f7fd f928 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0xD41D, 0x34);
 8003844:	2134      	movs	r1, #52	; 0x34
 8003846:	f24d 401d 	movw	r0, #54301	; 0xd41d
 800384a:	f7fd f923 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0xD41E, 0x02);
 800384e:	2102      	movs	r1, #2
 8003850:	f24d 401e 	movw	r0, #54302	; 0xd41e
 8003854:	f7fd f91e 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0xD41F, 0x67);
 8003858:	2167      	movs	r1, #103	; 0x67
 800385a:	f24d 401f 	movw	r0, #54303	; 0xd41f
 800385e:	f7fd f919 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0xD420, 0x02);
 8003862:	2102      	movs	r1, #2
 8003864:	f24d 4020 	movw	r0, #54304	; 0xd420
 8003868:	f7fd f914 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0xD421, 0x84);
 800386c:	2184      	movs	r1, #132	; 0x84
 800386e:	f24d 4021 	movw	r0, #54305	; 0xd421
 8003872:	f7fd f90f 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0xD422, 0x02);
 8003876:	2102      	movs	r1, #2
 8003878:	f24d 4022 	movw	r0, #54306	; 0xd422
 800387c:	f7fd f90a 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0xD423, 0xA4);
 8003880:	21a4      	movs	r1, #164	; 0xa4
 8003882:	f24d 4023 	movw	r0, #54307	; 0xd423
 8003886:	f7fd f905 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0xD424, 0x02);
 800388a:	2102      	movs	r1, #2
 800388c:	f24d 4024 	movw	r0, #54308	; 0xd424
 8003890:	f7fd f900 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0xD425, 0xB7);
 8003894:	21b7      	movs	r1, #183	; 0xb7
 8003896:	f24d 4025 	movw	r0, #54309	; 0xd425
 800389a:	f7fd f8fb 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0xD426, 0x02);
 800389e:	2102      	movs	r1, #2
 80038a0:	f24d 4026 	movw	r0, #54310	; 0xd426
 80038a4:	f7fd f8f6 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0xD427, 0xCF);
 80038a8:	21cf      	movs	r1, #207	; 0xcf
 80038aa:	f24d 4027 	movw	r0, #54311	; 0xd427
 80038ae:	f7fd f8f1 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0xD428, 0x02);
 80038b2:	2102      	movs	r1, #2
 80038b4:	f24d 4028 	movw	r0, #54312	; 0xd428
 80038b8:	f7fd f8ec 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0xD429, 0xDE);
 80038bc:	21de      	movs	r1, #222	; 0xde
 80038be:	f24d 4029 	movw	r0, #54313	; 0xd429
 80038c2:	f7fd f8e7 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0xD42A, 0x02);
 80038c6:	2102      	movs	r1, #2
 80038c8:	f24d 402a 	movw	r0, #54314	; 0xd42a
 80038cc:	f7fd f8e2 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0xD42B, 0xF2);
 80038d0:	21f2      	movs	r1, #242	; 0xf2
 80038d2:	f24d 402b 	movw	r0, #54315	; 0xd42b
 80038d6:	f7fd f8dd 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0xD42C, 0x02);
 80038da:	2102      	movs	r1, #2
 80038dc:	f24d 402c 	movw	r0, #54316	; 0xd42c
 80038e0:	f7fd f8d8 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0xD42D, 0xFE);
 80038e4:	21fe      	movs	r1, #254	; 0xfe
 80038e6:	f24d 402d 	movw	r0, #54317	; 0xd42d
 80038ea:	f7fd f8d3 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0xD42E, 0x03);
 80038ee:	2103      	movs	r1, #3
 80038f0:	f24d 402e 	movw	r0, #54318	; 0xd42e
 80038f4:	f7fd f8ce 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0xD42F, 0x10);
 80038f8:	2110      	movs	r1, #16
 80038fa:	f24d 402f 	movw	r0, #54319	; 0xd42f
 80038fe:	f7fd f8c9 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0xD430, 0x03);
 8003902:	2103      	movs	r1, #3
 8003904:	f24d 4030 	movw	r0, #54320	; 0xd430
 8003908:	f7fd f8c4 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0xD431, 0x33);
 800390c:	2133      	movs	r1, #51	; 0x33
 800390e:	f24d 4031 	movw	r0, #54321	; 0xd431
 8003912:	f7fd f8bf 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0xD432, 0x03);
 8003916:	2103      	movs	r1, #3
 8003918:	f24d 4032 	movw	r0, #54322	; 0xd432
 800391c:	f7fd f8ba 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0xD433, 0x6D);
 8003920:	216d      	movs	r1, #109	; 0x6d
 8003922:	f24d 4033 	movw	r0, #54323	; 0xd433
 8003926:	f7fd f8b5 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0xD500, 0x00);
 800392a:	2100      	movs	r1, #0
 800392c:	f44f 4055 	mov.w	r0, #54528	; 0xd500
 8003930:	f7fd f8b0 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0xD501, 0x33);
 8003934:	2133      	movs	r1, #51	; 0x33
 8003936:	f24d 5001 	movw	r0, #54529	; 0xd501
 800393a:	f7fd f8ab 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0xD502, 0x00);
 800393e:	2100      	movs	r1, #0
 8003940:	f24d 5002 	movw	r0, #54530	; 0xd502
 8003944:	f7fd f8a6 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0xD503, 0x34);
 8003948:	2134      	movs	r1, #52	; 0x34
 800394a:	f24d 5003 	movw	r0, #54531	; 0xd503
 800394e:	f7fd f8a1 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0xD504, 0x00);
 8003952:	2100      	movs	r1, #0
 8003954:	f24d 5004 	movw	r0, #54532	; 0xd504
 8003958:	f7fd f89c 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0xD505, 0x3A);
 800395c:	213a      	movs	r1, #58	; 0x3a
 800395e:	f24d 5005 	movw	r0, #54533	; 0xd505
 8003962:	f7fd f897 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0xD506, 0x00);
 8003966:	2100      	movs	r1, #0
 8003968:	f24d 5006 	movw	r0, #54534	; 0xd506
 800396c:	f7fd f892 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0xD507, 0x4A);
 8003970:	214a      	movs	r1, #74	; 0x4a
 8003972:	f24d 5007 	movw	r0, #54535	; 0xd507
 8003976:	f7fd f88d 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0xD508, 0x00);
 800397a:	2100      	movs	r1, #0
 800397c:	f24d 5008 	movw	r0, #54536	; 0xd508
 8003980:	f7fd f888 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0xD509, 0x5C);
 8003984:	215c      	movs	r1, #92	; 0x5c
 8003986:	f24d 5009 	movw	r0, #54537	; 0xd509
 800398a:	f7fd f883 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0xD50A, 0x00);
 800398e:	2100      	movs	r1, #0
 8003990:	f24d 500a 	movw	r0, #54538	; 0xd50a
 8003994:	f7fd f87e 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0xD50B, 0x81);
 8003998:	2181      	movs	r1, #129	; 0x81
 800399a:	f24d 500b 	movw	r0, #54539	; 0xd50b
 800399e:	f7fd f879 	bl	8000a94 <LCD_WriteReg>

		LCD_WriteReg(0xD50C, 0x00);
 80039a2:	2100      	movs	r1, #0
 80039a4:	f24d 500c 	movw	r0, #54540	; 0xd50c
 80039a8:	f7fd f874 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0xD50D, 0xA6);
 80039ac:	21a6      	movs	r1, #166	; 0xa6
 80039ae:	f24d 500d 	movw	r0, #54541	; 0xd50d
 80039b2:	f7fd f86f 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0xD50E, 0x00);
 80039b6:	2100      	movs	r1, #0
 80039b8:	f24d 500e 	movw	r0, #54542	; 0xd50e
 80039bc:	f7fd f86a 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0xD50F, 0xE5);
 80039c0:	21e5      	movs	r1, #229	; 0xe5
 80039c2:	f24d 500f 	movw	r0, #54543	; 0xd50f
 80039c6:	f7fd f865 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0xD510, 0x01);
 80039ca:	2101      	movs	r1, #1
 80039cc:	f24d 5010 	movw	r0, #54544	; 0xd510
 80039d0:	f7fd f860 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0xD511, 0x13);
 80039d4:	2113      	movs	r1, #19
 80039d6:	f24d 5011 	movw	r0, #54545	; 0xd511
 80039da:	f7fd f85b 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0xD512, 0x01);
 80039de:	2101      	movs	r1, #1
 80039e0:	f24d 5012 	movw	r0, #54546	; 0xd512
 80039e4:	f7fd f856 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0xD513, 0x54);
 80039e8:	2154      	movs	r1, #84	; 0x54
 80039ea:	f24d 5013 	movw	r0, #54547	; 0xd513
 80039ee:	f7fd f851 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0xD514, 0x01);
 80039f2:	2101      	movs	r1, #1
 80039f4:	f24d 5014 	movw	r0, #54548	; 0xd514
 80039f8:	f7fd f84c 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0xD515, 0x82);
 80039fc:	2182      	movs	r1, #130	; 0x82
 80039fe:	f24d 5015 	movw	r0, #54549	; 0xd515
 8003a02:	f7fd f847 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0xD516, 0x01);
 8003a06:	2101      	movs	r1, #1
 8003a08:	f24d 5016 	movw	r0, #54550	; 0xd516
 8003a0c:	f7fd f842 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0xD517, 0xCA);
 8003a10:	21ca      	movs	r1, #202	; 0xca
 8003a12:	f24d 5017 	movw	r0, #54551	; 0xd517
 8003a16:	f7fd f83d 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0xD518, 0x02);
 8003a1a:	2102      	movs	r1, #2
 8003a1c:	f24d 5018 	movw	r0, #54552	; 0xd518
 8003a20:	f7fd f838 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0xD519, 0x00);
 8003a24:	2100      	movs	r1, #0
 8003a26:	f24d 5019 	movw	r0, #54553	; 0xd519
 8003a2a:	f7fd f833 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0xD51A, 0x02);
 8003a2e:	2102      	movs	r1, #2
 8003a30:	f24d 501a 	movw	r0, #54554	; 0xd51a
 8003a34:	f7fd f82e 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0xD51B, 0x01);
 8003a38:	2101      	movs	r1, #1
 8003a3a:	f24d 501b 	movw	r0, #54555	; 0xd51b
 8003a3e:	f7fd f829 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0xD51C, 0x02);
 8003a42:	2102      	movs	r1, #2
 8003a44:	f24d 501c 	movw	r0, #54556	; 0xd51c
 8003a48:	f7fd f824 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0xD51D, 0x34);
 8003a4c:	2134      	movs	r1, #52	; 0x34
 8003a4e:	f24d 501d 	movw	r0, #54557	; 0xd51d
 8003a52:	f7fd f81f 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0xD51E, 0x02);
 8003a56:	2102      	movs	r1, #2
 8003a58:	f24d 501e 	movw	r0, #54558	; 0xd51e
 8003a5c:	f7fd f81a 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0xD51F, 0x67);
 8003a60:	2167      	movs	r1, #103	; 0x67
 8003a62:	f24d 501f 	movw	r0, #54559	; 0xd51f
 8003a66:	f7fd f815 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0xD520, 0x02);
 8003a6a:	2102      	movs	r1, #2
 8003a6c:	f24d 5020 	movw	r0, #54560	; 0xd520
 8003a70:	f7fd f810 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0xD521, 0x84);
 8003a74:	2184      	movs	r1, #132	; 0x84
 8003a76:	f24d 5021 	movw	r0, #54561	; 0xd521
 8003a7a:	f7fd f80b 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0xD522, 0x02);
 8003a7e:	2102      	movs	r1, #2
 8003a80:	f24d 5022 	movw	r0, #54562	; 0xd522
 8003a84:	f7fd f806 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0xD523, 0xA4);
 8003a88:	21a4      	movs	r1, #164	; 0xa4
 8003a8a:	f24d 5023 	movw	r0, #54563	; 0xd523
 8003a8e:	f7fd f801 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0xD524, 0x02);
 8003a92:	2102      	movs	r1, #2
 8003a94:	f24d 5024 	movw	r0, #54564	; 0xd524
 8003a98:	f7fc fffc 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0xD525, 0xB7);
 8003a9c:	21b7      	movs	r1, #183	; 0xb7
 8003a9e:	f24d 5025 	movw	r0, #54565	; 0xd525
 8003aa2:	f7fc fff7 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0xD526, 0x02);
 8003aa6:	2102      	movs	r1, #2
 8003aa8:	f24d 5026 	movw	r0, #54566	; 0xd526
 8003aac:	f7fc fff2 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0xD527, 0xCF);
 8003ab0:	21cf      	movs	r1, #207	; 0xcf
 8003ab2:	f24d 5027 	movw	r0, #54567	; 0xd527
 8003ab6:	f7fc ffed 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0xD528, 0x02);
 8003aba:	2102      	movs	r1, #2
 8003abc:	f24d 5028 	movw	r0, #54568	; 0xd528
 8003ac0:	f7fc ffe8 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0xD529, 0xDE);
 8003ac4:	21de      	movs	r1, #222	; 0xde
 8003ac6:	f24d 5029 	movw	r0, #54569	; 0xd529
 8003aca:	f7fc ffe3 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0xD52A, 0x02);
 8003ace:	2102      	movs	r1, #2
 8003ad0:	f24d 502a 	movw	r0, #54570	; 0xd52a
 8003ad4:	f7fc ffde 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0xD52B, 0xF2);
 8003ad8:	21f2      	movs	r1, #242	; 0xf2
 8003ada:	f24d 502b 	movw	r0, #54571	; 0xd52b
 8003ade:	f7fc ffd9 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0xD52C, 0x02);
 8003ae2:	2102      	movs	r1, #2
 8003ae4:	f24d 502c 	movw	r0, #54572	; 0xd52c
 8003ae8:	f7fc ffd4 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0xD52D, 0xFE);
 8003aec:	21fe      	movs	r1, #254	; 0xfe
 8003aee:	f24d 502d 	movw	r0, #54573	; 0xd52d
 8003af2:	f7fc ffcf 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0xD52E, 0x03);
 8003af6:	2103      	movs	r1, #3
 8003af8:	f24d 502e 	movw	r0, #54574	; 0xd52e
 8003afc:	f7fc ffca 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0xD52F, 0x10);
 8003b00:	2110      	movs	r1, #16
 8003b02:	f24d 502f 	movw	r0, #54575	; 0xd52f
 8003b06:	f7fc ffc5 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0xD530, 0x03);
 8003b0a:	2103      	movs	r1, #3
 8003b0c:	f24d 5030 	movw	r0, #54576	; 0xd530
 8003b10:	f7fc ffc0 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0xD531, 0x33);
 8003b14:	2133      	movs	r1, #51	; 0x33
 8003b16:	f24d 5031 	movw	r0, #54577	; 0xd531
 8003b1a:	f7fc ffbb 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0xD532, 0x03);
 8003b1e:	2103      	movs	r1, #3
 8003b20:	f24d 5032 	movw	r0, #54578	; 0xd532
 8003b24:	f7fc ffb6 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0xD533, 0x6D);
 8003b28:	216d      	movs	r1, #109	; 0x6d
 8003b2a:	f24d 5033 	movw	r0, #54579	; 0xd533
 8003b2e:	f7fc ffb1 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0xD600, 0x00);
 8003b32:	2100      	movs	r1, #0
 8003b34:	f44f 4056 	mov.w	r0, #54784	; 0xd600
 8003b38:	f7fc ffac 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0xD601, 0x33);
 8003b3c:	2133      	movs	r1, #51	; 0x33
 8003b3e:	f24d 6001 	movw	r0, #54785	; 0xd601
 8003b42:	f7fc ffa7 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0xD602, 0x00);
 8003b46:	2100      	movs	r1, #0
 8003b48:	f24d 6002 	movw	r0, #54786	; 0xd602
 8003b4c:	f7fc ffa2 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0xD603, 0x34);
 8003b50:	2134      	movs	r1, #52	; 0x34
 8003b52:	f24d 6003 	movw	r0, #54787	; 0xd603
 8003b56:	f7fc ff9d 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0xD604, 0x00);
 8003b5a:	2100      	movs	r1, #0
 8003b5c:	f24d 6004 	movw	r0, #54788	; 0xd604
 8003b60:	f7fc ff98 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0xD605, 0x3A);
 8003b64:	213a      	movs	r1, #58	; 0x3a
 8003b66:	f24d 6005 	movw	r0, #54789	; 0xd605
 8003b6a:	f7fc ff93 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0xD606, 0x00);
 8003b6e:	2100      	movs	r1, #0
 8003b70:	f24d 6006 	movw	r0, #54790	; 0xd606
 8003b74:	f7fc ff8e 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0xD607, 0x4A);
 8003b78:	214a      	movs	r1, #74	; 0x4a
 8003b7a:	f24d 6007 	movw	r0, #54791	; 0xd607
 8003b7e:	f7fc ff89 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0xD608, 0x00);
 8003b82:	2100      	movs	r1, #0
 8003b84:	f24d 6008 	movw	r0, #54792	; 0xd608
 8003b88:	f7fc ff84 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0xD609, 0x5C);
 8003b8c:	215c      	movs	r1, #92	; 0x5c
 8003b8e:	f24d 6009 	movw	r0, #54793	; 0xd609
 8003b92:	f7fc ff7f 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0xD60A, 0x00);
 8003b96:	2100      	movs	r1, #0
 8003b98:	f24d 600a 	movw	r0, #54794	; 0xd60a
 8003b9c:	f7fc ff7a 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0xD60B, 0x81);
 8003ba0:	2181      	movs	r1, #129	; 0x81
 8003ba2:	f24d 600b 	movw	r0, #54795	; 0xd60b
 8003ba6:	f7fc ff75 	bl	8000a94 <LCD_WriteReg>

		LCD_WriteReg(0xD60C, 0x00);
 8003baa:	2100      	movs	r1, #0
 8003bac:	f24d 600c 	movw	r0, #54796	; 0xd60c
 8003bb0:	f7fc ff70 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0xD60D, 0xA6);
 8003bb4:	21a6      	movs	r1, #166	; 0xa6
 8003bb6:	f24d 600d 	movw	r0, #54797	; 0xd60d
 8003bba:	f7fc ff6b 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0xD60E, 0x00);
 8003bbe:	2100      	movs	r1, #0
 8003bc0:	f24d 600e 	movw	r0, #54798	; 0xd60e
 8003bc4:	f7fc ff66 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0xD60F, 0xE5);
 8003bc8:	21e5      	movs	r1, #229	; 0xe5
 8003bca:	f24d 600f 	movw	r0, #54799	; 0xd60f
 8003bce:	f7fc ff61 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0xD610, 0x01);
 8003bd2:	2101      	movs	r1, #1
 8003bd4:	f24d 6010 	movw	r0, #54800	; 0xd610
 8003bd8:	f7fc ff5c 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0xD611, 0x13);
 8003bdc:	2113      	movs	r1, #19
 8003bde:	f24d 6011 	movw	r0, #54801	; 0xd611
 8003be2:	f7fc ff57 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0xD612, 0x01);
 8003be6:	2101      	movs	r1, #1
 8003be8:	f24d 6012 	movw	r0, #54802	; 0xd612
 8003bec:	f7fc ff52 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0xD613, 0x54);
 8003bf0:	2154      	movs	r1, #84	; 0x54
 8003bf2:	f24d 6013 	movw	r0, #54803	; 0xd613
 8003bf6:	f7fc ff4d 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0xD614, 0x01);
 8003bfa:	2101      	movs	r1, #1
 8003bfc:	f24d 6014 	movw	r0, #54804	; 0xd614
 8003c00:	f7fc ff48 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0xD615, 0x82);
 8003c04:	2182      	movs	r1, #130	; 0x82
 8003c06:	f24d 6015 	movw	r0, #54805	; 0xd615
 8003c0a:	f7fc ff43 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0xD616, 0x01);
 8003c0e:	2101      	movs	r1, #1
 8003c10:	f24d 6016 	movw	r0, #54806	; 0xd616
 8003c14:	f7fc ff3e 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0xD617, 0xCA);
 8003c18:	21ca      	movs	r1, #202	; 0xca
 8003c1a:	f24d 6017 	movw	r0, #54807	; 0xd617
 8003c1e:	f7fc ff39 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0xD618, 0x02);
 8003c22:	2102      	movs	r1, #2
 8003c24:	f24d 6018 	movw	r0, #54808	; 0xd618
 8003c28:	f7fc ff34 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0xD619, 0x00);
 8003c2c:	2100      	movs	r1, #0
 8003c2e:	f24d 6019 	movw	r0, #54809	; 0xd619
 8003c32:	f7fc ff2f 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0xD61A, 0x02);
 8003c36:	2102      	movs	r1, #2
 8003c38:	f24d 601a 	movw	r0, #54810	; 0xd61a
 8003c3c:	f7fc ff2a 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0xD61B, 0x01);
 8003c40:	2101      	movs	r1, #1
 8003c42:	f24d 601b 	movw	r0, #54811	; 0xd61b
 8003c46:	f7fc ff25 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0xD61C, 0x02);
 8003c4a:	2102      	movs	r1, #2
 8003c4c:	f24d 601c 	movw	r0, #54812	; 0xd61c
 8003c50:	f7fc ff20 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0xD61D, 0x34);
 8003c54:	2134      	movs	r1, #52	; 0x34
 8003c56:	f24d 601d 	movw	r0, #54813	; 0xd61d
 8003c5a:	f7fc ff1b 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0xD61E, 0x02);
 8003c5e:	2102      	movs	r1, #2
 8003c60:	f24d 601e 	movw	r0, #54814	; 0xd61e
 8003c64:	f7fc ff16 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0xD61F, 0x67);
 8003c68:	2167      	movs	r1, #103	; 0x67
 8003c6a:	f24d 601f 	movw	r0, #54815	; 0xd61f
 8003c6e:	f7fc ff11 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0xD620, 0x02);
 8003c72:	2102      	movs	r1, #2
 8003c74:	f24d 6020 	movw	r0, #54816	; 0xd620
 8003c78:	f7fc ff0c 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0xD621, 0x84);
 8003c7c:	2184      	movs	r1, #132	; 0x84
 8003c7e:	f24d 6021 	movw	r0, #54817	; 0xd621
 8003c82:	f7fc ff07 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0xD622, 0x02);
 8003c86:	2102      	movs	r1, #2
 8003c88:	f24d 6022 	movw	r0, #54818	; 0xd622
 8003c8c:	f7fc ff02 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0xD623, 0xA4);
 8003c90:	21a4      	movs	r1, #164	; 0xa4
 8003c92:	f24d 6023 	movw	r0, #54819	; 0xd623
 8003c96:	f7fc fefd 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0xD624, 0x02);
 8003c9a:	2102      	movs	r1, #2
 8003c9c:	f24d 6024 	movw	r0, #54820	; 0xd624
 8003ca0:	f7fc fef8 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0xD625, 0xB7);
 8003ca4:	21b7      	movs	r1, #183	; 0xb7
 8003ca6:	f24d 6025 	movw	r0, #54821	; 0xd625
 8003caa:	f7fc fef3 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0xD626, 0x02);
 8003cae:	2102      	movs	r1, #2
 8003cb0:	f24d 6026 	movw	r0, #54822	; 0xd626
 8003cb4:	f7fc feee 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0xD627, 0xCF);
 8003cb8:	21cf      	movs	r1, #207	; 0xcf
 8003cba:	f24d 6027 	movw	r0, #54823	; 0xd627
 8003cbe:	f7fc fee9 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0xD628, 0x02);
 8003cc2:	2102      	movs	r1, #2
 8003cc4:	f24d 6028 	movw	r0, #54824	; 0xd628
 8003cc8:	f7fc fee4 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0xD629, 0xDE);
 8003ccc:	21de      	movs	r1, #222	; 0xde
 8003cce:	f24d 6029 	movw	r0, #54825	; 0xd629
 8003cd2:	f7fc fedf 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0xD62A, 0x02);
 8003cd6:	2102      	movs	r1, #2
 8003cd8:	f24d 602a 	movw	r0, #54826	; 0xd62a
 8003cdc:	f7fc feda 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0xD62B, 0xF2);
 8003ce0:	21f2      	movs	r1, #242	; 0xf2
 8003ce2:	f24d 602b 	movw	r0, #54827	; 0xd62b
 8003ce6:	f7fc fed5 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0xD62C, 0x02);
 8003cea:	2102      	movs	r1, #2
 8003cec:	f24d 602c 	movw	r0, #54828	; 0xd62c
 8003cf0:	f7fc fed0 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0xD62D, 0xFE);
 8003cf4:	21fe      	movs	r1, #254	; 0xfe
 8003cf6:	f24d 602d 	movw	r0, #54829	; 0xd62d
 8003cfa:	f7fc fecb 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0xD62E, 0x03);
 8003cfe:	2103      	movs	r1, #3
 8003d00:	f24d 602e 	movw	r0, #54830	; 0xd62e
 8003d04:	f7fc fec6 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0xD62F, 0x10);
 8003d08:	2110      	movs	r1, #16
 8003d0a:	f24d 602f 	movw	r0, #54831	; 0xd62f
 8003d0e:	f7fc fec1 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0xD630, 0x03);
 8003d12:	2103      	movs	r1, #3
 8003d14:	f24d 6030 	movw	r0, #54832	; 0xd630
 8003d18:	f7fc febc 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0xD631, 0x33);
 8003d1c:	2133      	movs	r1, #51	; 0x33
 8003d1e:	f24d 6031 	movw	r0, #54833	; 0xd631
 8003d22:	f7fc feb7 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0xD632, 0x03);
 8003d26:	2103      	movs	r1, #3
 8003d28:	f24d 6032 	movw	r0, #54834	; 0xd632
 8003d2c:	f7fc feb2 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0xD633, 0x6D);
 8003d30:	216d      	movs	r1, #109	; 0x6d
 8003d32:	f24d 6033 	movw	r0, #54835	; 0xd633
 8003d36:	f7fc fead 	bl	8000a94 <LCD_WriteReg>
		//LV2 Page 0 enable
		LCD_WriteReg(0xF000, 0x55);
 8003d3a:	2155      	movs	r1, #85	; 0x55
 8003d3c:	f44f 4070 	mov.w	r0, #61440	; 0xf000
 8003d40:	f7fc fea8 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0xF001, 0xAA);
 8003d44:	21aa      	movs	r1, #170	; 0xaa
 8003d46:	f24f 0001 	movw	r0, #61441	; 0xf001
 8003d4a:	f7fc fea3 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0xF002, 0x52);
 8003d4e:	2152      	movs	r1, #82	; 0x52
 8003d50:	f24f 0002 	movw	r0, #61442	; 0xf002
 8003d54:	f7fc fe9e 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0xF003, 0x08);
 8003d58:	2108      	movs	r1, #8
 8003d5a:	f24f 0003 	movw	r0, #61443	; 0xf003
 8003d5e:	f7fc fe99 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0xF004, 0x00);
 8003d62:	2100      	movs	r1, #0
 8003d64:	f24f 0004 	movw	r0, #61444	; 0xf004
 8003d68:	f7fc fe94 	bl	8000a94 <LCD_WriteReg>
		//Display control
		LCD_WriteReg(0xB100, 0xCC);
 8003d6c:	21cc      	movs	r1, #204	; 0xcc
 8003d6e:	f44f 4031 	mov.w	r0, #45312	; 0xb100
 8003d72:	f7fc fe8f 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0xB101, 0x00);
 8003d76:	2100      	movs	r1, #0
 8003d78:	f24b 1001 	movw	r0, #45313	; 0xb101
 8003d7c:	f7fc fe8a 	bl	8000a94 <LCD_WriteReg>
		//Source hold time
		LCD_WriteReg(0xB600, 0x05);
 8003d80:	2105      	movs	r1, #5
 8003d82:	f44f 4036 	mov.w	r0, #46592	; 0xb600
 8003d86:	f7fc fe85 	bl	8000a94 <LCD_WriteReg>
		//Gate EQ control
		LCD_WriteReg(0xB700, 0x70);
 8003d8a:	2170      	movs	r1, #112	; 0x70
 8003d8c:	f44f 4037 	mov.w	r0, #46848	; 0xb700
 8003d90:	f7fc fe80 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0xB701, 0x70);
 8003d94:	2170      	movs	r1, #112	; 0x70
 8003d96:	f24b 7001 	movw	r0, #46849	; 0xb701
 8003d9a:	f7fc fe7b 	bl	8000a94 <LCD_WriteReg>
		//Source EQ control (Mode 2)
		LCD_WriteReg(0xB800, 0x01);
 8003d9e:	2101      	movs	r1, #1
 8003da0:	f44f 4038 	mov.w	r0, #47104	; 0xb800
 8003da4:	f7fc fe76 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0xB801, 0x03);
 8003da8:	2103      	movs	r1, #3
 8003daa:	f64b 0001 	movw	r0, #47105	; 0xb801
 8003dae:	f7fc fe71 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0xB802, 0x03);
 8003db2:	2103      	movs	r1, #3
 8003db4:	f64b 0002 	movw	r0, #47106	; 0xb802
 8003db8:	f7fc fe6c 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0xB803, 0x03);
 8003dbc:	2103      	movs	r1, #3
 8003dbe:	f64b 0003 	movw	r0, #47107	; 0xb803
 8003dc2:	f7fc fe67 	bl	8000a94 <LCD_WriteReg>
		//Inversion mode (2-dot)
		LCD_WriteReg(0xBC00, 0x02);
 8003dc6:	2102      	movs	r1, #2
 8003dc8:	f44f 403c 	mov.w	r0, #48128	; 0xbc00
 8003dcc:	f7fc fe62 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0xBC01, 0x00);
 8003dd0:	2100      	movs	r1, #0
 8003dd2:	f64b 4001 	movw	r0, #48129	; 0xbc01
 8003dd6:	f7fc fe5d 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0xBC02, 0x00);
 8003dda:	2100      	movs	r1, #0
 8003ddc:	f64b 4002 	movw	r0, #48130	; 0xbc02
 8003de0:	f7fc fe58 	bl	8000a94 <LCD_WriteReg>
		//Timing control 4H w/ 4-delay
		LCD_WriteReg(0xC900, 0xD0);
 8003de4:	21d0      	movs	r1, #208	; 0xd0
 8003de6:	f44f 4049 	mov.w	r0, #51456	; 0xc900
 8003dea:	f7fc fe53 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0xC901, 0x02);
 8003dee:	2102      	movs	r1, #2
 8003df0:	f64c 1001 	movw	r0, #51457	; 0xc901
 8003df4:	f7fc fe4e 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0xC902, 0x50);
 8003df8:	2150      	movs	r1, #80	; 0x50
 8003dfa:	f64c 1002 	movw	r0, #51458	; 0xc902
 8003dfe:	f7fc fe49 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0xC903, 0x50);
 8003e02:	2150      	movs	r1, #80	; 0x50
 8003e04:	f64c 1003 	movw	r0, #51459	; 0xc903
 8003e08:	f7fc fe44 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0xC904, 0x50);
 8003e0c:	2150      	movs	r1, #80	; 0x50
 8003e0e:	f64c 1004 	movw	r0, #51460	; 0xc904
 8003e12:	f7fc fe3f 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0x3500, 0x00);
 8003e16:	2100      	movs	r1, #0
 8003e18:	f44f 5054 	mov.w	r0, #13568	; 0x3500
 8003e1c:	f7fc fe3a 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0x3A00, 0x55);  //16-bit/pixel
 8003e20:	2155      	movs	r1, #85	; 0x55
 8003e22:	f44f 5068 	mov.w	r0, #14848	; 0x3a00
 8003e26:	f7fc fe35 	bl	8000a94 <LCD_WriteReg>
		LCD_WR_REG(0x1100);
 8003e2a:	f44f 5088 	mov.w	r0, #4352	; 0x1100
 8003e2e:	f7fc fda5 	bl	800097c <LCD_WR_REG>
//		delay_us(120); // us
		HAL_Delay(1);
 8003e32:	2001      	movs	r0, #1
 8003e34:	f001 ffe2 	bl	8005dfc <HAL_Delay>
		LCD_WR_REG(0x2900);
 8003e38:	f44f 5024 	mov.w	r0, #10496	; 0x2900
 8003e3c:	f7fc fd9e 	bl	800097c <LCD_WR_REG>
 8003e40:	f001 bd18 	b.w	8005874 <LCD_Init+0x3e34>
	} else if (lcddev.id == 0x9325)  //9325
 8003e44:	4bec      	ldr	r3, [pc, #944]	; (80041f8 <LCD_Init+0x27b8>)
 8003e46:	889b      	ldrh	r3, [r3, #4]
 8003e48:	f249 3225 	movw	r2, #37669	; 0x9325
 8003e4c:	4293      	cmp	r3, r2
 8003e4e:	f040 80d7 	bne.w	8004000 <LCD_Init+0x25c0>
			{
		LCD_WriteReg(0x00E5, 0x78F0);
 8003e52:	f647 01f0 	movw	r1, #30960	; 0x78f0
 8003e56:	20e5      	movs	r0, #229	; 0xe5
 8003e58:	f7fc fe1c 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0x0001, 0x0100);
 8003e5c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003e60:	2001      	movs	r0, #1
 8003e62:	f7fc fe17 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0x0002, 0x0700);
 8003e66:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 8003e6a:	2002      	movs	r0, #2
 8003e6c:	f7fc fe12 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0x0003, 0x1030);
 8003e70:	f241 0130 	movw	r1, #4144	; 0x1030
 8003e74:	2003      	movs	r0, #3
 8003e76:	f7fc fe0d 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0x0004, 0x0000);
 8003e7a:	2100      	movs	r1, #0
 8003e7c:	2004      	movs	r0, #4
 8003e7e:	f7fc fe09 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0x0008, 0x0202);
 8003e82:	f240 2102 	movw	r1, #514	; 0x202
 8003e86:	2008      	movs	r0, #8
 8003e88:	f7fc fe04 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0x0009, 0x0000);
 8003e8c:	2100      	movs	r1, #0
 8003e8e:	2009      	movs	r0, #9
 8003e90:	f7fc fe00 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0x000A, 0x0000);
 8003e94:	2100      	movs	r1, #0
 8003e96:	200a      	movs	r0, #10
 8003e98:	f7fc fdfc 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0x000C, 0x0000);
 8003e9c:	2100      	movs	r1, #0
 8003e9e:	200c      	movs	r0, #12
 8003ea0:	f7fc fdf8 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0x000D, 0x0000);
 8003ea4:	2100      	movs	r1, #0
 8003ea6:	200d      	movs	r0, #13
 8003ea8:	f7fc fdf4 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0x000F, 0x0000);
 8003eac:	2100      	movs	r1, #0
 8003eae:	200f      	movs	r0, #15
 8003eb0:	f7fc fdf0 	bl	8000a94 <LCD_WriteReg>
		//power on sequence VGHVGL
		LCD_WriteReg(0x0010, 0x0000);
 8003eb4:	2100      	movs	r1, #0
 8003eb6:	2010      	movs	r0, #16
 8003eb8:	f7fc fdec 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0x0011, 0x0007);
 8003ebc:	2107      	movs	r1, #7
 8003ebe:	2011      	movs	r0, #17
 8003ec0:	f7fc fde8 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0x0012, 0x0000);
 8003ec4:	2100      	movs	r1, #0
 8003ec6:	2012      	movs	r0, #18
 8003ec8:	f7fc fde4 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0x0013, 0x0000);
 8003ecc:	2100      	movs	r1, #0
 8003ece:	2013      	movs	r0, #19
 8003ed0:	f7fc fde0 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0x0007, 0x0000);
 8003ed4:	2100      	movs	r1, #0
 8003ed6:	2007      	movs	r0, #7
 8003ed8:	f7fc fddc 	bl	8000a94 <LCD_WriteReg>
		//vgh 
		LCD_WriteReg(0x0010, 0x1690);
 8003edc:	f241 6190 	movw	r1, #5776	; 0x1690
 8003ee0:	2010      	movs	r0, #16
 8003ee2:	f7fc fdd7 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0x0011, 0x0227);
 8003ee6:	f240 2127 	movw	r1, #551	; 0x227
 8003eea:	2011      	movs	r0, #17
 8003eec:	f7fc fdd2 	bl	8000a94 <LCD_WriteReg>
		//delayms(100);
		//vregiout 
		LCD_WriteReg(0x0012, 0x009D); //0x001b
 8003ef0:	219d      	movs	r1, #157	; 0x9d
 8003ef2:	2012      	movs	r0, #18
 8003ef4:	f7fc fdce 	bl	8000a94 <LCD_WriteReg>
		//delayms(100); 
		//vom amplitude
		LCD_WriteReg(0x0013, 0x1900);
 8003ef8:	f44f 51c8 	mov.w	r1, #6400	; 0x1900
 8003efc:	2013      	movs	r0, #19
 8003efe:	f7fc fdc9 	bl	8000a94 <LCD_WriteReg>
		//delayms(100); 
		//vom H
		LCD_WriteReg(0x0029, 0x0025);
 8003f02:	2125      	movs	r1, #37	; 0x25
 8003f04:	2029      	movs	r0, #41	; 0x29
 8003f06:	f7fc fdc5 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0x002B, 0x000D);
 8003f0a:	210d      	movs	r1, #13
 8003f0c:	202b      	movs	r0, #43	; 0x2b
 8003f0e:	f7fc fdc1 	bl	8000a94 <LCD_WriteReg>
		//gamma
		LCD_WriteReg(0x0030, 0x0007);
 8003f12:	2107      	movs	r1, #7
 8003f14:	2030      	movs	r0, #48	; 0x30
 8003f16:	f7fc fdbd 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0x0031, 0x0303);
 8003f1a:	f240 3103 	movw	r1, #771	; 0x303
 8003f1e:	2031      	movs	r0, #49	; 0x31
 8003f20:	f7fc fdb8 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0x0032, 0x0003);		// 0006
 8003f24:	2103      	movs	r1, #3
 8003f26:	2032      	movs	r0, #50	; 0x32
 8003f28:	f7fc fdb4 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0x0035, 0x0206);
 8003f2c:	f240 2106 	movw	r1, #518	; 0x206
 8003f30:	2035      	movs	r0, #53	; 0x35
 8003f32:	f7fc fdaf 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0x0036, 0x0008);
 8003f36:	2108      	movs	r1, #8
 8003f38:	2036      	movs	r0, #54	; 0x36
 8003f3a:	f7fc fdab 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0x0037, 0x0406);
 8003f3e:	f240 4106 	movw	r1, #1030	; 0x406
 8003f42:	2037      	movs	r0, #55	; 0x37
 8003f44:	f7fc fda6 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0x0038, 0x0304);		//0200
 8003f48:	f44f 7141 	mov.w	r1, #772	; 0x304
 8003f4c:	2038      	movs	r0, #56	; 0x38
 8003f4e:	f7fc fda1 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0x0039, 0x0007);
 8003f52:	2107      	movs	r1, #7
 8003f54:	2039      	movs	r0, #57	; 0x39
 8003f56:	f7fc fd9d 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0x003C, 0x0602);		// 0504
 8003f5a:	f240 6102 	movw	r1, #1538	; 0x602
 8003f5e:	203c      	movs	r0, #60	; 0x3c
 8003f60:	f7fc fd98 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0x003D, 0x0008);
 8003f64:	2108      	movs	r1, #8
 8003f66:	203d      	movs	r0, #61	; 0x3d
 8003f68:	f7fc fd94 	bl	8000a94 <LCD_WriteReg>
		//ram
		LCD_WriteReg(0x0050, 0x0000);
 8003f6c:	2100      	movs	r1, #0
 8003f6e:	2050      	movs	r0, #80	; 0x50
 8003f70:	f7fc fd90 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0x0051, 0x00EF);
 8003f74:	21ef      	movs	r1, #239	; 0xef
 8003f76:	2051      	movs	r0, #81	; 0x51
 8003f78:	f7fc fd8c 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0x0052, 0x0000);
 8003f7c:	2100      	movs	r1, #0
 8003f7e:	2052      	movs	r0, #82	; 0x52
 8003f80:	f7fc fd88 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0x0053, 0x013F);
 8003f84:	f240 113f 	movw	r1, #319	; 0x13f
 8003f88:	2053      	movs	r0, #83	; 0x53
 8003f8a:	f7fc fd83 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0x0060, 0xA700);
 8003f8e:	f44f 4127 	mov.w	r1, #42752	; 0xa700
 8003f92:	2060      	movs	r0, #96	; 0x60
 8003f94:	f7fc fd7e 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0x0061, 0x0001);
 8003f98:	2101      	movs	r1, #1
 8003f9a:	2061      	movs	r0, #97	; 0x61
 8003f9c:	f7fc fd7a 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0x006A, 0x0000);
 8003fa0:	2100      	movs	r1, #0
 8003fa2:	206a      	movs	r0, #106	; 0x6a
 8003fa4:	f7fc fd76 	bl	8000a94 <LCD_WriteReg>
		//
		LCD_WriteReg(0x0080, 0x0000);
 8003fa8:	2100      	movs	r1, #0
 8003faa:	2080      	movs	r0, #128	; 0x80
 8003fac:	f7fc fd72 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0x0081, 0x0000);
 8003fb0:	2100      	movs	r1, #0
 8003fb2:	2081      	movs	r0, #129	; 0x81
 8003fb4:	f7fc fd6e 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0x0082, 0x0000);
 8003fb8:	2100      	movs	r1, #0
 8003fba:	2082      	movs	r0, #130	; 0x82
 8003fbc:	f7fc fd6a 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0x0083, 0x0000);
 8003fc0:	2100      	movs	r1, #0
 8003fc2:	2083      	movs	r0, #131	; 0x83
 8003fc4:	f7fc fd66 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0x0084, 0x0000);
 8003fc8:	2100      	movs	r1, #0
 8003fca:	2084      	movs	r0, #132	; 0x84
 8003fcc:	f7fc fd62 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0x0085, 0x0000);
 8003fd0:	2100      	movs	r1, #0
 8003fd2:	2085      	movs	r0, #133	; 0x85
 8003fd4:	f7fc fd5e 	bl	8000a94 <LCD_WriteReg>
		//
		LCD_WriteReg(0x0090, 0x0010);
 8003fd8:	2110      	movs	r1, #16
 8003fda:	2090      	movs	r0, #144	; 0x90
 8003fdc:	f7fc fd5a 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0x0092, 0x0600);
 8003fe0:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8003fe4:	2092      	movs	r0, #146	; 0x92
 8003fe6:	f7fc fd55 	bl	8000a94 <LCD_WriteReg>

		LCD_WriteReg(0x0007, 0x0133);
 8003fea:	f240 1133 	movw	r1, #307	; 0x133
 8003fee:	2007      	movs	r0, #7
 8003ff0:	f7fc fd50 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0x00, 0x0022);		//
 8003ff4:	2122      	movs	r1, #34	; 0x22
 8003ff6:	2000      	movs	r0, #0
 8003ff8:	f7fc fd4c 	bl	8000a94 <LCD_WriteReg>
 8003ffc:	f001 bc3a 	b.w	8005874 <LCD_Init+0x3e34>
	} else if (lcddev.id == 0x9328)		//ILI9328   OK
 8004000:	4b7d      	ldr	r3, [pc, #500]	; (80041f8 <LCD_Init+0x27b8>)
 8004002:	889b      	ldrh	r3, [r3, #4]
 8004004:	f249 3228 	movw	r2, #37672	; 0x9328
 8004008:	4293      	cmp	r3, r2
 800400a:	f040 80f7 	bne.w	80041fc <LCD_Init+0x27bc>
			{
		LCD_WriteReg(0x00EC, 0x108F);		// internal timeing
 800400e:	f241 018f 	movw	r1, #4239	; 0x108f
 8004012:	20ec      	movs	r0, #236	; 0xec
 8004014:	f7fc fd3e 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0x00EF, 0x1234);		// ADD
 8004018:	f241 2134 	movw	r1, #4660	; 0x1234
 800401c:	20ef      	movs	r0, #239	; 0xef
 800401e:	f7fc fd39 	bl	8000a94 <LCD_WriteReg>
		//LCD_WriteReg(0x00e7,0x0010);      
		//LCD_WriteReg(0x0000,0x0001);//开启内部时钟
		LCD_WriteReg(0x0001, 0x0100);
 8004022:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004026:	2001      	movs	r0, #1
 8004028:	f7fc fd34 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0x0002, 0x0700);        //电源开启
 800402c:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 8004030:	2002      	movs	r0, #2
 8004032:	f7fc fd2f 	bl	8000a94 <LCD_WriteReg>
		// 1  1   0    D->U	L->R
		// 0  0   1	   R->L U->D
		// 1  0   1    U->D	R->L
		// 0  1   1    L->R U->D 正常就用这个.
		// 1  1   1	   U->D	L->R
		LCD_WriteReg(0x0003, (1 << 12) | (3 << 4) | (0 << 3));		//65K
 8004036:	f241 0130 	movw	r1, #4144	; 0x1030
 800403a:	2003      	movs	r0, #3
 800403c:	f7fc fd2a 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0x0004, 0x0000);
 8004040:	2100      	movs	r1, #0
 8004042:	2004      	movs	r0, #4
 8004044:	f7fc fd26 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0x0008, 0x0202);
 8004048:	f240 2102 	movw	r1, #514	; 0x202
 800404c:	2008      	movs	r0, #8
 800404e:	f7fc fd21 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0x0009, 0x0000);
 8004052:	2100      	movs	r1, #0
 8004054:	2009      	movs	r0, #9
 8004056:	f7fc fd1d 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0x000a, 0x0000);		//display setting
 800405a:	2100      	movs	r1, #0
 800405c:	200a      	movs	r0, #10
 800405e:	f7fc fd19 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0x000c, 0x0001);		//display setting
 8004062:	2101      	movs	r1, #1
 8004064:	200c      	movs	r0, #12
 8004066:	f7fc fd15 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0x000d, 0x0000);		//0f3c
 800406a:	2100      	movs	r1, #0
 800406c:	200d      	movs	r0, #13
 800406e:	f7fc fd11 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0x000f, 0x0000);
 8004072:	2100      	movs	r1, #0
 8004074:	200f      	movs	r0, #15
 8004076:	f7fc fd0d 	bl	8000a94 <LCD_WriteReg>
		//电源配置
		LCD_WriteReg(0x0010, 0x0000);
 800407a:	2100      	movs	r1, #0
 800407c:	2010      	movs	r0, #16
 800407e:	f7fc fd09 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0x0011, 0x0007);
 8004082:	2107      	movs	r1, #7
 8004084:	2011      	movs	r0, #17
 8004086:	f7fc fd05 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0x0012, 0x0000);
 800408a:	2100      	movs	r1, #0
 800408c:	2012      	movs	r0, #18
 800408e:	f7fc fd01 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0x0013, 0x0000);
 8004092:	2100      	movs	r1, #0
 8004094:	2013      	movs	r0, #19
 8004096:	f7fc fcfd 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0x0007, 0x0001);
 800409a:	2101      	movs	r1, #1
 800409c:	2007      	movs	r0, #7
 800409e:	f7fc fcf9 	bl	8000a94 <LCD_WriteReg>
		HAL_Delay(50);
 80040a2:	2032      	movs	r0, #50	; 0x32
 80040a4:	f001 feaa 	bl	8005dfc <HAL_Delay>
		LCD_WriteReg(0x0010, 0x1490);
 80040a8:	f241 4190 	movw	r1, #5264	; 0x1490
 80040ac:	2010      	movs	r0, #16
 80040ae:	f7fc fcf1 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0x0011, 0x0227);
 80040b2:	f240 2127 	movw	r1, #551	; 0x227
 80040b6:	2011      	movs	r0, #17
 80040b8:	f7fc fcec 	bl	8000a94 <LCD_WriteReg>
		HAL_Delay(50);
 80040bc:	2032      	movs	r0, #50	; 0x32
 80040be:	f001 fe9d 	bl	8005dfc <HAL_Delay>
		LCD_WriteReg(0x0012, 0x008A);
 80040c2:	218a      	movs	r1, #138	; 0x8a
 80040c4:	2012      	movs	r0, #18
 80040c6:	f7fc fce5 	bl	8000a94 <LCD_WriteReg>
		HAL_Delay(50);
 80040ca:	2032      	movs	r0, #50	; 0x32
 80040cc:	f001 fe96 	bl	8005dfc <HAL_Delay>
		LCD_WriteReg(0x0013, 0x1a00);
 80040d0:	f44f 51d0 	mov.w	r1, #6656	; 0x1a00
 80040d4:	2013      	movs	r0, #19
 80040d6:	f7fc fcdd 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0x0029, 0x0006);
 80040da:	2106      	movs	r1, #6
 80040dc:	2029      	movs	r0, #41	; 0x29
 80040de:	f7fc fcd9 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0x002b, 0x000d);
 80040e2:	210d      	movs	r1, #13
 80040e4:	202b      	movs	r0, #43	; 0x2b
 80040e6:	f7fc fcd5 	bl	8000a94 <LCD_WriteReg>
		HAL_Delay(50);
 80040ea:	2032      	movs	r0, #50	; 0x32
 80040ec:	f001 fe86 	bl	8005dfc <HAL_Delay>
		LCD_WriteReg(0x0020, 0x0000);
 80040f0:	2100      	movs	r1, #0
 80040f2:	2020      	movs	r0, #32
 80040f4:	f7fc fcce 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0x0021, 0x0000);
 80040f8:	2100      	movs	r1, #0
 80040fa:	2021      	movs	r0, #33	; 0x21
 80040fc:	f7fc fcca 	bl	8000a94 <LCD_WriteReg>
		HAL_Delay(50);
 8004100:	2032      	movs	r0, #50	; 0x32
 8004102:	f001 fe7b 	bl	8005dfc <HAL_Delay>
		//伽马校正
		LCD_WriteReg(0x0030, 0x0000);
 8004106:	2100      	movs	r1, #0
 8004108:	2030      	movs	r0, #48	; 0x30
 800410a:	f7fc fcc3 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0x0031, 0x0604);
 800410e:	f240 6104 	movw	r1, #1540	; 0x604
 8004112:	2031      	movs	r0, #49	; 0x31
 8004114:	f7fc fcbe 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0x0032, 0x0305);
 8004118:	f240 3105 	movw	r1, #773	; 0x305
 800411c:	2032      	movs	r0, #50	; 0x32
 800411e:	f7fc fcb9 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0x0035, 0x0000);
 8004122:	2100      	movs	r1, #0
 8004124:	2035      	movs	r0, #53	; 0x35
 8004126:	f7fc fcb5 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0x0036, 0x0C09);
 800412a:	f640 4109 	movw	r1, #3081	; 0xc09
 800412e:	2036      	movs	r0, #54	; 0x36
 8004130:	f7fc fcb0 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0x0037, 0x0204);
 8004134:	f44f 7101 	mov.w	r1, #516	; 0x204
 8004138:	2037      	movs	r0, #55	; 0x37
 800413a:	f7fc fcab 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0x0038, 0x0301);
 800413e:	f240 3101 	movw	r1, #769	; 0x301
 8004142:	2038      	movs	r0, #56	; 0x38
 8004144:	f7fc fca6 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0x0039, 0x0707);
 8004148:	f240 7107 	movw	r1, #1799	; 0x707
 800414c:	2039      	movs	r0, #57	; 0x39
 800414e:	f7fc fca1 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0x003c, 0x0000);
 8004152:	2100      	movs	r1, #0
 8004154:	203c      	movs	r0, #60	; 0x3c
 8004156:	f7fc fc9d 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0x003d, 0x0a0a);
 800415a:	f640 210a 	movw	r1, #2570	; 0xa0a
 800415e:	203d      	movs	r0, #61	; 0x3d
 8004160:	f7fc fc98 	bl	8000a94 <LCD_WriteReg>
		HAL_Delay(50);
 8004164:	2032      	movs	r0, #50	; 0x32
 8004166:	f001 fe49 	bl	8005dfc <HAL_Delay>
		LCD_WriteReg(0x0050, 0x0000); //水平GRAM起始位置
 800416a:	2100      	movs	r1, #0
 800416c:	2050      	movs	r0, #80	; 0x50
 800416e:	f7fc fc91 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0x0051, 0x00ef); //水平GRAM终止位置
 8004172:	21ef      	movs	r1, #239	; 0xef
 8004174:	2051      	movs	r0, #81	; 0x51
 8004176:	f7fc fc8d 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0x0052, 0x0000); //垂直GRAM起始位置
 800417a:	2100      	movs	r1, #0
 800417c:	2052      	movs	r0, #82	; 0x52
 800417e:	f7fc fc89 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0x0053, 0x013f); //垂直GRAM终止位置
 8004182:	f240 113f 	movw	r1, #319	; 0x13f
 8004186:	2053      	movs	r0, #83	; 0x53
 8004188:	f7fc fc84 	bl	8000a94 <LCD_WriteReg>

		LCD_WriteReg(0x0060, 0xa700);
 800418c:	f44f 4127 	mov.w	r1, #42752	; 0xa700
 8004190:	2060      	movs	r0, #96	; 0x60
 8004192:	f7fc fc7f 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0x0061, 0x0001);
 8004196:	2101      	movs	r1, #1
 8004198:	2061      	movs	r0, #97	; 0x61
 800419a:	f7fc fc7b 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0x006a, 0x0000);
 800419e:	2100      	movs	r1, #0
 80041a0:	206a      	movs	r0, #106	; 0x6a
 80041a2:	f7fc fc77 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0x0080, 0x0000);
 80041a6:	2100      	movs	r1, #0
 80041a8:	2080      	movs	r0, #128	; 0x80
 80041aa:	f7fc fc73 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0x0081, 0x0000);
 80041ae:	2100      	movs	r1, #0
 80041b0:	2081      	movs	r0, #129	; 0x81
 80041b2:	f7fc fc6f 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0x0082, 0x0000);
 80041b6:	2100      	movs	r1, #0
 80041b8:	2082      	movs	r0, #130	; 0x82
 80041ba:	f7fc fc6b 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0x0083, 0x0000);
 80041be:	2100      	movs	r1, #0
 80041c0:	2083      	movs	r0, #131	; 0x83
 80041c2:	f7fc fc67 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0x0084, 0x0000);
 80041c6:	2100      	movs	r1, #0
 80041c8:	2084      	movs	r0, #132	; 0x84
 80041ca:	f7fc fc63 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0x0085, 0x0000);
 80041ce:	2100      	movs	r1, #0
 80041d0:	2085      	movs	r0, #133	; 0x85
 80041d2:	f7fc fc5f 	bl	8000a94 <LCD_WriteReg>

		LCD_WriteReg(0x0090, 0x0010);
 80041d6:	2110      	movs	r1, #16
 80041d8:	2090      	movs	r0, #144	; 0x90
 80041da:	f7fc fc5b 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0x0092, 0x0600);
 80041de:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80041e2:	2092      	movs	r0, #146	; 0x92
 80041e4:	f7fc fc56 	bl	8000a94 <LCD_WriteReg>
		//开启显示设置
		LCD_WriteReg(0x0007, 0x0133);
 80041e8:	f240 1133 	movw	r1, #307	; 0x133
 80041ec:	2007      	movs	r0, #7
 80041ee:	f7fc fc51 	bl	8000a94 <LCD_WriteReg>
 80041f2:	f001 bb3f 	b.w	8005874 <LCD_Init+0x3e34>
 80041f6:	bf00      	nop
 80041f8:	20000028 	.word	0x20000028
	} else if (lcddev.id == 0x9320) //测试OK.
 80041fc:	4bce      	ldr	r3, [pc, #824]	; (8004538 <LCD_Init+0x2af8>)
 80041fe:	889b      	ldrh	r3, [r3, #4]
 8004200:	f249 3220 	movw	r2, #37664	; 0x9320
 8004204:	4293      	cmp	r3, r2
 8004206:	f040 80ad 	bne.w	8004364 <LCD_Init+0x2924>
			{
		LCD_WriteReg(0x00, 0x0000);
 800420a:	2100      	movs	r1, #0
 800420c:	2000      	movs	r0, #0
 800420e:	f7fc fc41 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0x01, 0x0100);	//Driver Output Contral.
 8004212:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004216:	2001      	movs	r0, #1
 8004218:	f7fc fc3c 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0x02, 0x0700);	//LCD Driver Waveform Contral.
 800421c:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 8004220:	2002      	movs	r0, #2
 8004222:	f7fc fc37 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0x03, 0x1030);	//Entry Mode Set.
 8004226:	f241 0130 	movw	r1, #4144	; 0x1030
 800422a:	2003      	movs	r0, #3
 800422c:	f7fc fc32 	bl	8000a94 <LCD_WriteReg>
		//LCD_WriteReg(0x03,0x1018);	//Entry Mode Set.

		LCD_WriteReg(0x04, 0x0000);	//Scalling Contral.
 8004230:	2100      	movs	r1, #0
 8004232:	2004      	movs	r0, #4
 8004234:	f7fc fc2e 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0x08, 0x0202);	//Display Contral 2.(0x0207)
 8004238:	f240 2102 	movw	r1, #514	; 0x202
 800423c:	2008      	movs	r0, #8
 800423e:	f7fc fc29 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0x09, 0x0000);	//Display Contral 3.(0x0000)
 8004242:	2100      	movs	r1, #0
 8004244:	2009      	movs	r0, #9
 8004246:	f7fc fc25 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0x0a, 0x0000);	//Frame Cycle Contal.(0x0000)
 800424a:	2100      	movs	r1, #0
 800424c:	200a      	movs	r0, #10
 800424e:	f7fc fc21 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0x0c, (1 << 0));	//Extern Display Interface Contral 1.(0x0000)
 8004252:	2101      	movs	r1, #1
 8004254:	200c      	movs	r0, #12
 8004256:	f7fc fc1d 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0x0d, 0x0000);	//Frame Maker Position.
 800425a:	2100      	movs	r1, #0
 800425c:	200d      	movs	r0, #13
 800425e:	f7fc fc19 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0x0f, 0x0000);	//Extern Display Interface Contral 2.
 8004262:	2100      	movs	r1, #0
 8004264:	200f      	movs	r0, #15
 8004266:	f7fc fc15 	bl	8000a94 <LCD_WriteReg>
		HAL_Delay(50);
 800426a:	2032      	movs	r0, #50	; 0x32
 800426c:	f001 fdc6 	bl	8005dfc <HAL_Delay>
		LCD_WriteReg(0x07, 0x0101);	//Display Contral.
 8004270:	f240 1101 	movw	r1, #257	; 0x101
 8004274:	2007      	movs	r0, #7
 8004276:	f7fc fc0d 	bl	8000a94 <LCD_WriteReg>
		HAL_Delay(50);
 800427a:	2032      	movs	r0, #50	; 0x32
 800427c:	f001 fdbe 	bl	8005dfc <HAL_Delay>
		LCD_WriteReg(0x10, (1 << 12) | (0 << 8) | (1 << 7) | (1 << 6) | (0 << 4));//Power Control 1.(0x16b0)
 8004280:	f44f 5186 	mov.w	r1, #4288	; 0x10c0
 8004284:	2010      	movs	r0, #16
 8004286:	f7fc fc05 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0x11, 0x0007);								//Power Control 2.(0x0001)
 800428a:	2107      	movs	r1, #7
 800428c:	2011      	movs	r0, #17
 800428e:	f7fc fc01 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0x12, (1 << 8) | (1 << 4) | (0 << 0));	//Power Control 3.(0x0138)
 8004292:	f44f 7188 	mov.w	r1, #272	; 0x110
 8004296:	2012      	movs	r0, #18
 8004298:	f7fc fbfc 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0x13, 0x0b00);								//Power Control 4.
 800429c:	f44f 6130 	mov.w	r1, #2816	; 0xb00
 80042a0:	2013      	movs	r0, #19
 80042a2:	f7fc fbf7 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0x29, 0x0000);								//Power Control 7.
 80042a6:	2100      	movs	r1, #0
 80042a8:	2029      	movs	r0, #41	; 0x29
 80042aa:	f7fc fbf3 	bl	8000a94 <LCD_WriteReg>

		LCD_WriteReg(0x2b, (1 << 14) | (1 << 4));
 80042ae:	f244 0110 	movw	r1, #16400	; 0x4010
 80042b2:	202b      	movs	r0, #43	; 0x2b
 80042b4:	f7fc fbee 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0x50, 0);	//Set X Star
 80042b8:	2100      	movs	r1, #0
 80042ba:	2050      	movs	r0, #80	; 0x50
 80042bc:	f7fc fbea 	bl	8000a94 <LCD_WriteReg>
		//水平GRAM终止位置Set X End.
		LCD_WriteReg(0x51, 239);	//Set Y Star
 80042c0:	21ef      	movs	r1, #239	; 0xef
 80042c2:	2051      	movs	r0, #81	; 0x51
 80042c4:	f7fc fbe6 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0x52, 0);	//Set Y End.t.
 80042c8:	2100      	movs	r1, #0
 80042ca:	2052      	movs	r0, #82	; 0x52
 80042cc:	f7fc fbe2 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0x53, 319);	//
 80042d0:	f240 113f 	movw	r1, #319	; 0x13f
 80042d4:	2053      	movs	r0, #83	; 0x53
 80042d6:	f7fc fbdd 	bl	8000a94 <LCD_WriteReg>

		LCD_WriteReg(0x60, 0x2700);	//Driver Output Control.
 80042da:	f44f 511c 	mov.w	r1, #9984	; 0x2700
 80042de:	2060      	movs	r0, #96	; 0x60
 80042e0:	f7fc fbd8 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0x61, 0x0001);	//Driver Output Control.
 80042e4:	2101      	movs	r1, #1
 80042e6:	2061      	movs	r0, #97	; 0x61
 80042e8:	f7fc fbd4 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0x6a, 0x0000);	//Vertical Srcoll Control.
 80042ec:	2100      	movs	r1, #0
 80042ee:	206a      	movs	r0, #106	; 0x6a
 80042f0:	f7fc fbd0 	bl	8000a94 <LCD_WriteReg>

		LCD_WriteReg(0x80, 0x0000);	//Display Position? Partial Display 1.
 80042f4:	2100      	movs	r1, #0
 80042f6:	2080      	movs	r0, #128	; 0x80
 80042f8:	f7fc fbcc 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0x81, 0x0000);	//RAM Address Start? Partial Display 1.
 80042fc:	2100      	movs	r1, #0
 80042fe:	2081      	movs	r0, #129	; 0x81
 8004300:	f7fc fbc8 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0x82, 0x0000);	//RAM Address End-Partial Display 1.
 8004304:	2100      	movs	r1, #0
 8004306:	2082      	movs	r0, #130	; 0x82
 8004308:	f7fc fbc4 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0x83, 0x0000);	//Displsy Position? Partial Display 2.
 800430c:	2100      	movs	r1, #0
 800430e:	2083      	movs	r0, #131	; 0x83
 8004310:	f7fc fbc0 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0x84, 0x0000);	//RAM Address Start? Partial Display 2.
 8004314:	2100      	movs	r1, #0
 8004316:	2084      	movs	r0, #132	; 0x84
 8004318:	f7fc fbbc 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0x85, 0x0000);	//RAM Address End? Partial Display 2.
 800431c:	2100      	movs	r1, #0
 800431e:	2085      	movs	r0, #133	; 0x85
 8004320:	f7fc fbb8 	bl	8000a94 <LCD_WriteReg>

		LCD_WriteReg(0x90, (0 << 7) | (16 << 0));	//Frame Cycle Contral.(0x0013)
 8004324:	2110      	movs	r1, #16
 8004326:	2090      	movs	r0, #144	; 0x90
 8004328:	f7fc fbb4 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0x92, 0x0000);	//Panel Interface Contral 2.(0x0000)
 800432c:	2100      	movs	r1, #0
 800432e:	2092      	movs	r0, #146	; 0x92
 8004330:	f7fc fbb0 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0x93, 0x0001);	//Panel Interface Contral 3.
 8004334:	2101      	movs	r1, #1
 8004336:	2093      	movs	r0, #147	; 0x93
 8004338:	f7fc fbac 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0x95, 0x0110);	//Frame Cycle Contral.(0x0110)
 800433c:	f44f 7188 	mov.w	r1, #272	; 0x110
 8004340:	2095      	movs	r0, #149	; 0x95
 8004342:	f7fc fba7 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0x97, (0 << 8));	//
 8004346:	2100      	movs	r1, #0
 8004348:	2097      	movs	r0, #151	; 0x97
 800434a:	f7fc fba3 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0x98, 0x0000);	//Frame Cycle Contral.
 800434e:	2100      	movs	r1, #0
 8004350:	2098      	movs	r0, #152	; 0x98
 8004352:	f7fc fb9f 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0x07, 0x0173);	//(0x0173)
 8004356:	f240 1173 	movw	r1, #371	; 0x173
 800435a:	2007      	movs	r0, #7
 800435c:	f7fc fb9a 	bl	8000a94 <LCD_WriteReg>
 8004360:	f001 ba88 	b.w	8005874 <LCD_Init+0x3e34>
	} else if (lcddev.id == 0X9331)	//OK |/|/|
 8004364:	4b74      	ldr	r3, [pc, #464]	; (8004538 <LCD_Init+0x2af8>)
 8004366:	889b      	ldrh	r3, [r3, #4]
 8004368:	f249 3231 	movw	r2, #37681	; 0x9331
 800436c:	4293      	cmp	r3, r2
 800436e:	f040 80e5 	bne.w	800453c <LCD_Init+0x2afc>
			{
		LCD_WriteReg(0x00E7, 0x1014);
 8004372:	f241 0114 	movw	r1, #4116	; 0x1014
 8004376:	20e7      	movs	r0, #231	; 0xe7
 8004378:	f7fc fb8c 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0x0001, 0x0100); // set SS and SM bit
 800437c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004380:	2001      	movs	r0, #1
 8004382:	f7fc fb87 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0x0002, 0x0200); // set 1 line inversion
 8004386:	f44f 7100 	mov.w	r1, #512	; 0x200
 800438a:	2002      	movs	r0, #2
 800438c:	f7fc fb82 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0x0003, (1 << 12) | (3 << 4) | (1 << 3)); //65K
 8004390:	f241 0138 	movw	r1, #4152	; 0x1038
 8004394:	2003      	movs	r0, #3
 8004396:	f7fc fb7d 	bl	8000a94 <LCD_WriteReg>
		//LCD_WriteReg(0x0003, 0x1030); // set GRAM write direction and BGR=1.
		LCD_WriteReg(0x0008, 0x0202); // set the back porch and front porch
 800439a:	f240 2102 	movw	r1, #514	; 0x202
 800439e:	2008      	movs	r0, #8
 80043a0:	f7fc fb78 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0x0009, 0x0000); // set non-display area refresh cycle ISC[3:0]
 80043a4:	2100      	movs	r1, #0
 80043a6:	2009      	movs	r0, #9
 80043a8:	f7fc fb74 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0x000A, 0x0000); // FMARK function
 80043ac:	2100      	movs	r1, #0
 80043ae:	200a      	movs	r0, #10
 80043b0:	f7fc fb70 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0x000C, 0x0000); // RGB interface setting
 80043b4:	2100      	movs	r1, #0
 80043b6:	200c      	movs	r0, #12
 80043b8:	f7fc fb6c 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0x000D, 0x0000); // Frame marker Position
 80043bc:	2100      	movs	r1, #0
 80043be:	200d      	movs	r0, #13
 80043c0:	f7fc fb68 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0x000F, 0x0000); // RGB interface polarity
 80043c4:	2100      	movs	r1, #0
 80043c6:	200f      	movs	r0, #15
 80043c8:	f7fc fb64 	bl	8000a94 <LCD_WriteReg>
		//*************Power On sequence ****************//
		LCD_WriteReg(0x0010, 0x0000); // SAP, BT[3:0], AP, DSTB, SLP, STB
 80043cc:	2100      	movs	r1, #0
 80043ce:	2010      	movs	r0, #16
 80043d0:	f7fc fb60 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0x0011, 0x0007); // DC1[2:0], DC0[2:0], VC[2:0]
 80043d4:	2107      	movs	r1, #7
 80043d6:	2011      	movs	r0, #17
 80043d8:	f7fc fb5c 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0x0012, 0x0000); // VREG1OUT voltage
 80043dc:	2100      	movs	r1, #0
 80043de:	2012      	movs	r0, #18
 80043e0:	f7fc fb58 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0x0013, 0x0000); // VDV[4:0] for VCOM amplitude
 80043e4:	2100      	movs	r1, #0
 80043e6:	2013      	movs	r0, #19
 80043e8:	f7fc fb54 	bl	8000a94 <LCD_WriteReg>
		HAL_Delay(200); // Dis-charge capacitor power voltage
 80043ec:	20c8      	movs	r0, #200	; 0xc8
 80043ee:	f001 fd05 	bl	8005dfc <HAL_Delay>
		LCD_WriteReg(0x0010, 0x1690); // SAP, BT[3:0], AP, DSTB, SLP, STB
 80043f2:	f241 6190 	movw	r1, #5776	; 0x1690
 80043f6:	2010      	movs	r0, #16
 80043f8:	f7fc fb4c 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0x0011, 0x0227); // DC1[2:0], DC0[2:0], VC[2:0]
 80043fc:	f240 2127 	movw	r1, #551	; 0x227
 8004400:	2011      	movs	r0, #17
 8004402:	f7fc fb47 	bl	8000a94 <LCD_WriteReg>
		HAL_Delay(50); // Delay 50ms
 8004406:	2032      	movs	r0, #50	; 0x32
 8004408:	f001 fcf8 	bl	8005dfc <HAL_Delay>
		LCD_WriteReg(0x0012, 0x000C); // Internal reference voltage= Vci;
 800440c:	210c      	movs	r1, #12
 800440e:	2012      	movs	r0, #18
 8004410:	f7fc fb40 	bl	8000a94 <LCD_WriteReg>
		HAL_Delay(50); // Delay 50ms
 8004414:	2032      	movs	r0, #50	; 0x32
 8004416:	f001 fcf1 	bl	8005dfc <HAL_Delay>
		LCD_WriteReg(0x0013, 0x0800); // Set VDV[4:0] for VCOM amplitude
 800441a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800441e:	2013      	movs	r0, #19
 8004420:	f7fc fb38 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0x0029, 0x0011); // Set VCM[5:0] for VCOMH
 8004424:	2111      	movs	r1, #17
 8004426:	2029      	movs	r0, #41	; 0x29
 8004428:	f7fc fb34 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0x002B, 0x000B); // Set Frame Rate
 800442c:	210b      	movs	r1, #11
 800442e:	202b      	movs	r0, #43	; 0x2b
 8004430:	f7fc fb30 	bl	8000a94 <LCD_WriteReg>
		HAL_Delay(50); // Delay 50ms
 8004434:	2032      	movs	r0, #50	; 0x32
 8004436:	f001 fce1 	bl	8005dfc <HAL_Delay>
		LCD_WriteReg(0x0020, 0x0000); // GRAM horizontal Address
 800443a:	2100      	movs	r1, #0
 800443c:	2020      	movs	r0, #32
 800443e:	f7fc fb29 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0x0021, 0x013f); // GRAM Vertical Address
 8004442:	f240 113f 	movw	r1, #319	; 0x13f
 8004446:	2021      	movs	r0, #33	; 0x21
 8004448:	f7fc fb24 	bl	8000a94 <LCD_WriteReg>
		// ----------- Adjust the Gamma Curve ----------//
		LCD_WriteReg(0x0030, 0x0000);
 800444c:	2100      	movs	r1, #0
 800444e:	2030      	movs	r0, #48	; 0x30
 8004450:	f7fc fb20 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0x0031, 0x0106);
 8004454:	f44f 7183 	mov.w	r1, #262	; 0x106
 8004458:	2031      	movs	r0, #49	; 0x31
 800445a:	f7fc fb1b 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0x0032, 0x0000);
 800445e:	2100      	movs	r1, #0
 8004460:	2032      	movs	r0, #50	; 0x32
 8004462:	f7fc fb17 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0x0035, 0x0204);
 8004466:	f44f 7101 	mov.w	r1, #516	; 0x204
 800446a:	2035      	movs	r0, #53	; 0x35
 800446c:	f7fc fb12 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0x0036, 0x160A);
 8004470:	f241 610a 	movw	r1, #5642	; 0x160a
 8004474:	2036      	movs	r0, #54	; 0x36
 8004476:	f7fc fb0d 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0x0037, 0x0707);
 800447a:	f240 7107 	movw	r1, #1799	; 0x707
 800447e:	2037      	movs	r0, #55	; 0x37
 8004480:	f7fc fb08 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0x0038, 0x0106);
 8004484:	f44f 7183 	mov.w	r1, #262	; 0x106
 8004488:	2038      	movs	r0, #56	; 0x38
 800448a:	f7fc fb03 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0x0039, 0x0707);
 800448e:	f240 7107 	movw	r1, #1799	; 0x707
 8004492:	2039      	movs	r0, #57	; 0x39
 8004494:	f7fc fafe 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0x003C, 0x0402);
 8004498:	f240 4102 	movw	r1, #1026	; 0x402
 800449c:	203c      	movs	r0, #60	; 0x3c
 800449e:	f7fc faf9 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0x003D, 0x0C0F);
 80044a2:	f640 410f 	movw	r1, #3087	; 0xc0f
 80044a6:	203d      	movs	r0, #61	; 0x3d
 80044a8:	f7fc faf4 	bl	8000a94 <LCD_WriteReg>
		//------------------ Set GRAM area ---------------//
		LCD_WriteReg(0x0050, 0x0000); // Horizontal GRAM Start Address
 80044ac:	2100      	movs	r1, #0
 80044ae:	2050      	movs	r0, #80	; 0x50
 80044b0:	f7fc faf0 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0x0051, 0x00EF); // Horizontal GRAM End Address
 80044b4:	21ef      	movs	r1, #239	; 0xef
 80044b6:	2051      	movs	r0, #81	; 0x51
 80044b8:	f7fc faec 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0x0052, 0x0000); // Vertical GRAM Start Address
 80044bc:	2100      	movs	r1, #0
 80044be:	2052      	movs	r0, #82	; 0x52
 80044c0:	f7fc fae8 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0x0053, 0x013F); // Vertical GRAM Start Address
 80044c4:	f240 113f 	movw	r1, #319	; 0x13f
 80044c8:	2053      	movs	r0, #83	; 0x53
 80044ca:	f7fc fae3 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0x0060, 0x2700); // Gate Scan Line
 80044ce:	f44f 511c 	mov.w	r1, #9984	; 0x2700
 80044d2:	2060      	movs	r0, #96	; 0x60
 80044d4:	f7fc fade 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0x0061, 0x0001); // NDL,VLE, REV 
 80044d8:	2101      	movs	r1, #1
 80044da:	2061      	movs	r0, #97	; 0x61
 80044dc:	f7fc fada 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0x006A, 0x0000); // set scrolling line
 80044e0:	2100      	movs	r1, #0
 80044e2:	206a      	movs	r0, #106	; 0x6a
 80044e4:	f7fc fad6 	bl	8000a94 <LCD_WriteReg>
		//-------------- Partial Display Control ---------//
		LCD_WriteReg(0x0080, 0x0000);
 80044e8:	2100      	movs	r1, #0
 80044ea:	2080      	movs	r0, #128	; 0x80
 80044ec:	f7fc fad2 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0x0081, 0x0000);
 80044f0:	2100      	movs	r1, #0
 80044f2:	2081      	movs	r0, #129	; 0x81
 80044f4:	f7fc face 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0x0082, 0x0000);
 80044f8:	2100      	movs	r1, #0
 80044fa:	2082      	movs	r0, #130	; 0x82
 80044fc:	f7fc faca 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0x0083, 0x0000);
 8004500:	2100      	movs	r1, #0
 8004502:	2083      	movs	r0, #131	; 0x83
 8004504:	f7fc fac6 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0x0084, 0x0000);
 8004508:	2100      	movs	r1, #0
 800450a:	2084      	movs	r0, #132	; 0x84
 800450c:	f7fc fac2 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0x0085, 0x0000);
 8004510:	2100      	movs	r1, #0
 8004512:	2085      	movs	r0, #133	; 0x85
 8004514:	f7fc fabe 	bl	8000a94 <LCD_WriteReg>
		//-------------- Panel Control -------------------//
		LCD_WriteReg(0x0090, 0x0010);
 8004518:	2110      	movs	r1, #16
 800451a:	2090      	movs	r0, #144	; 0x90
 800451c:	f7fc faba 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0x0092, 0x0600);
 8004520:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8004524:	2092      	movs	r0, #146	; 0x92
 8004526:	f7fc fab5 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0x0007, 0x0133); // 262K color and display ON
 800452a:	f240 1133 	movw	r1, #307	; 0x133
 800452e:	2007      	movs	r0, #7
 8004530:	f7fc fab0 	bl	8000a94 <LCD_WriteReg>
 8004534:	f001 b99e 	b.w	8005874 <LCD_Init+0x3e34>
 8004538:	20000028 	.word	0x20000028
	} else if (lcddev.id == 0x5408) {
 800453c:	4be2      	ldr	r3, [pc, #904]	; (80048c8 <LCD_Init+0x2e88>)
 800453e:	889b      	ldrh	r3, [r3, #4]
 8004540:	f245 4208 	movw	r2, #21512	; 0x5408
 8004544:	4293      	cmp	r3, r2
 8004546:	f040 80a3 	bne.w	8004690 <LCD_Init+0x2c50>
		LCD_WriteReg(0x01, 0x0100);
 800454a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800454e:	2001      	movs	r0, #1
 8004550:	f7fc faa0 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0x02, 0x0700); //LCD Driving Waveform Contral
 8004554:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 8004558:	2002      	movs	r0, #2
 800455a:	f7fc fa9b 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0x03, 0x1030); //Entry Mode设置
 800455e:	f241 0130 	movw	r1, #4144	; 0x1030
 8004562:	2003      	movs	r0, #3
 8004564:	f7fc fa96 	bl	8000a94 <LCD_WriteReg>
		//指针从左至右自上而下的自动增模式
		//Normal Mode(Window Mode disable)
		//RGB格式
		//16位数据2次传输的8总线设置
		LCD_WriteReg(0x04, 0x0000); //Scalling Control register
 8004568:	2100      	movs	r1, #0
 800456a:	2004      	movs	r0, #4
 800456c:	f7fc fa92 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0x08, 0x0207); //Display Control 2
 8004570:	f240 2107 	movw	r1, #519	; 0x207
 8004574:	2008      	movs	r0, #8
 8004576:	f7fc fa8d 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0x09, 0x0000); //Display Control 3
 800457a:	2100      	movs	r1, #0
 800457c:	2009      	movs	r0, #9
 800457e:	f7fc fa89 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0x0A, 0x0000); //Frame Cycle Control
 8004582:	2100      	movs	r1, #0
 8004584:	200a      	movs	r0, #10
 8004586:	f7fc fa85 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0x0C, 0x0000); //External Display Interface Control 1
 800458a:	2100      	movs	r1, #0
 800458c:	200c      	movs	r0, #12
 800458e:	f7fc fa81 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0x0D, 0x0000); //Frame Maker Position
 8004592:	2100      	movs	r1, #0
 8004594:	200d      	movs	r0, #13
 8004596:	f7fc fa7d 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0x0F, 0x0000); //External Display Interface Control 2
 800459a:	2100      	movs	r1, #0
 800459c:	200f      	movs	r0, #15
 800459e:	f7fc fa79 	bl	8000a94 <LCD_WriteReg>
		HAL_Delay(20);
 80045a2:	2014      	movs	r0, #20
 80045a4:	f001 fc2a 	bl	8005dfc <HAL_Delay>
		//TFT 液晶彩色图像显示方法14
		LCD_WriteReg(0x10, 0x16B0); //0x14B0 //Power Control 1
 80045a8:	f241 61b0 	movw	r1, #5808	; 0x16b0
 80045ac:	2010      	movs	r0, #16
 80045ae:	f7fc fa71 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0x11, 0x0001); //0x0007 //Power Control 2
 80045b2:	2101      	movs	r1, #1
 80045b4:	2011      	movs	r0, #17
 80045b6:	f7fc fa6d 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0x17, 0x0001); //0x0000 //Power Control 3
 80045ba:	2101      	movs	r1, #1
 80045bc:	2017      	movs	r0, #23
 80045be:	f7fc fa69 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0x12, 0x0138); //0x013B //Power Control 4
 80045c2:	f44f 719c 	mov.w	r1, #312	; 0x138
 80045c6:	2012      	movs	r0, #18
 80045c8:	f7fc fa64 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0x13, 0x0800); //0x0800 //Power Control 5
 80045cc:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80045d0:	2013      	movs	r0, #19
 80045d2:	f7fc fa5f 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0x29, 0x0009); //NVM read data 2
 80045d6:	2109      	movs	r1, #9
 80045d8:	2029      	movs	r0, #41	; 0x29
 80045da:	f7fc fa5b 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0x2a, 0x0009); //NVM read data 3
 80045de:	2109      	movs	r1, #9
 80045e0:	202a      	movs	r0, #42	; 0x2a
 80045e2:	f7fc fa57 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0xa4, 0x0000);
 80045e6:	2100      	movs	r1, #0
 80045e8:	20a4      	movs	r0, #164	; 0xa4
 80045ea:	f7fc fa53 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0x50, 0x0000); //设置操作窗口的X轴开始列
 80045ee:	2100      	movs	r1, #0
 80045f0:	2050      	movs	r0, #80	; 0x50
 80045f2:	f7fc fa4f 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0x51, 0x00EF); //设置操作窗口的X轴结束列
 80045f6:	21ef      	movs	r1, #239	; 0xef
 80045f8:	2051      	movs	r0, #81	; 0x51
 80045fa:	f7fc fa4b 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0x52, 0x0000); //设置操作窗口的Y轴开始行
 80045fe:	2100      	movs	r1, #0
 8004600:	2052      	movs	r0, #82	; 0x52
 8004602:	f7fc fa47 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0x53, 0x013F); //设置操作窗口的Y轴结束行
 8004606:	f240 113f 	movw	r1, #319	; 0x13f
 800460a:	2053      	movs	r0, #83	; 0x53
 800460c:	f7fc fa42 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0x60, 0x2700); //Driver Output Control
 8004610:	f44f 511c 	mov.w	r1, #9984	; 0x2700
 8004614:	2060      	movs	r0, #96	; 0x60
 8004616:	f7fc fa3d 	bl	8000a94 <LCD_WriteReg>
		//设置屏幕的点数以及扫描的起始行
		LCD_WriteReg(0x61, 0x0001); //Driver Output Control
 800461a:	2101      	movs	r1, #1
 800461c:	2061      	movs	r0, #97	; 0x61
 800461e:	f7fc fa39 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0x6A, 0x0000); //Vertical Scroll Control
 8004622:	2100      	movs	r1, #0
 8004624:	206a      	movs	r0, #106	; 0x6a
 8004626:	f7fc fa35 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0x80, 0x0000); //Display Position – Partial Display 1
 800462a:	2100      	movs	r1, #0
 800462c:	2080      	movs	r0, #128	; 0x80
 800462e:	f7fc fa31 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0x81, 0x0000); //RAM Address Start – Partial Display 1
 8004632:	2100      	movs	r1, #0
 8004634:	2081      	movs	r0, #129	; 0x81
 8004636:	f7fc fa2d 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0x82, 0x0000); //RAM address End - Partial Display 1
 800463a:	2100      	movs	r1, #0
 800463c:	2082      	movs	r0, #130	; 0x82
 800463e:	f7fc fa29 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0x83, 0x0000); //Display Position – Partial Display 2
 8004642:	2100      	movs	r1, #0
 8004644:	2083      	movs	r0, #131	; 0x83
 8004646:	f7fc fa25 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0x84, 0x0000); //RAM Address Start – Partial Display 2
 800464a:	2100      	movs	r1, #0
 800464c:	2084      	movs	r0, #132	; 0x84
 800464e:	f7fc fa21 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0x85, 0x0000); //RAM address End – Partail Display2
 8004652:	2100      	movs	r1, #0
 8004654:	2085      	movs	r0, #133	; 0x85
 8004656:	f7fc fa1d 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0x90, 0x0013); //Frame Cycle Control
 800465a:	2113      	movs	r1, #19
 800465c:	2090      	movs	r0, #144	; 0x90
 800465e:	f7fc fa19 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0x92, 0x0000);  //Panel Interface Control 2
 8004662:	2100      	movs	r1, #0
 8004664:	2092      	movs	r0, #146	; 0x92
 8004666:	f7fc fa15 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0x93, 0x0003); //Panel Interface control 3
 800466a:	2103      	movs	r1, #3
 800466c:	2093      	movs	r0, #147	; 0x93
 800466e:	f7fc fa11 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0x95, 0x0110);  //Frame Cycle Control
 8004672:	f44f 7188 	mov.w	r1, #272	; 0x110
 8004676:	2095      	movs	r0, #149	; 0x95
 8004678:	f7fc fa0c 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0x07, 0x0173);
 800467c:	f240 1173 	movw	r1, #371	; 0x173
 8004680:	2007      	movs	r0, #7
 8004682:	f7fc fa07 	bl	8000a94 <LCD_WriteReg>
		HAL_Delay(50);
 8004686:	2032      	movs	r0, #50	; 0x32
 8004688:	f001 fbb8 	bl	8005dfc <HAL_Delay>
 800468c:	f001 b8f2 	b.w	8005874 <LCD_Init+0x3e34>
	} else if (lcddev.id == 0x1505)  //OK
 8004690:	4b8d      	ldr	r3, [pc, #564]	; (80048c8 <LCD_Init+0x2e88>)
 8004692:	889b      	ldrh	r3, [r3, #4]
 8004694:	f241 5205 	movw	r2, #5381	; 0x1505
 8004698:	4293      	cmp	r3, r2
 800469a:	f040 8117 	bne.w	80048cc <LCD_Init+0x2e8c>
			{
		// second release on 3/5  ,luminance is acceptable,water wave appear during camera preview
		LCD_WriteReg(0x0007, 0x0000);
 800469e:	2100      	movs	r1, #0
 80046a0:	2007      	movs	r0, #7
 80046a2:	f7fc f9f7 	bl	8000a94 <LCD_WriteReg>
		HAL_Delay(50);
 80046a6:	2032      	movs	r0, #50	; 0x32
 80046a8:	f001 fba8 	bl	8005dfc <HAL_Delay>
		LCD_WriteReg(0x0012, 0x011C);  //0x011A   why need to set several times?
 80046ac:	f44f 718e 	mov.w	r1, #284	; 0x11c
 80046b0:	2012      	movs	r0, #18
 80046b2:	f7fc f9ef 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0x00A4, 0x0001);  //NVM
 80046b6:	2101      	movs	r1, #1
 80046b8:	20a4      	movs	r0, #164	; 0xa4
 80046ba:	f7fc f9eb 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0x0008, 0x000F);
 80046be:	210f      	movs	r1, #15
 80046c0:	2008      	movs	r0, #8
 80046c2:	f7fc f9e7 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0x000A, 0x0008);
 80046c6:	2108      	movs	r1, #8
 80046c8:	200a      	movs	r0, #10
 80046ca:	f7fc f9e3 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0x000D, 0x0008);
 80046ce:	2108      	movs	r1, #8
 80046d0:	200d      	movs	r0, #13
 80046d2:	f7fc f9df 	bl	8000a94 <LCD_WriteReg>
		//伽马校正
		LCD_WriteReg(0x0030, 0x0707);
 80046d6:	f240 7107 	movw	r1, #1799	; 0x707
 80046da:	2030      	movs	r0, #48	; 0x30
 80046dc:	f7fc f9da 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0x0031, 0x0007); //0x0707
 80046e0:	2107      	movs	r1, #7
 80046e2:	2031      	movs	r0, #49	; 0x31
 80046e4:	f7fc f9d6 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0x0032, 0x0603);
 80046e8:	f240 6103 	movw	r1, #1539	; 0x603
 80046ec:	2032      	movs	r0, #50	; 0x32
 80046ee:	f7fc f9d1 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0x0033, 0x0700);
 80046f2:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 80046f6:	2033      	movs	r0, #51	; 0x33
 80046f8:	f7fc f9cc 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0x0034, 0x0202);
 80046fc:	f240 2102 	movw	r1, #514	; 0x202
 8004700:	2034      	movs	r0, #52	; 0x34
 8004702:	f7fc f9c7 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0x0035, 0x0002); //?0x0606
 8004706:	2102      	movs	r1, #2
 8004708:	2035      	movs	r0, #53	; 0x35
 800470a:	f7fc f9c3 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0x0036, 0x1F0F);
 800470e:	f641 710f 	movw	r1, #7951	; 0x1f0f
 8004712:	2036      	movs	r0, #54	; 0x36
 8004714:	f7fc f9be 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0x0037, 0x0707); //0x0f0f  0x0105
 8004718:	f240 7107 	movw	r1, #1799	; 0x707
 800471c:	2037      	movs	r0, #55	; 0x37
 800471e:	f7fc f9b9 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0x0038, 0x0000);
 8004722:	2100      	movs	r1, #0
 8004724:	2038      	movs	r0, #56	; 0x38
 8004726:	f7fc f9b5 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0x0039, 0x0000);
 800472a:	2100      	movs	r1, #0
 800472c:	2039      	movs	r0, #57	; 0x39
 800472e:	f7fc f9b1 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0x003A, 0x0707);
 8004732:	f240 7107 	movw	r1, #1799	; 0x707
 8004736:	203a      	movs	r0, #58	; 0x3a
 8004738:	f7fc f9ac 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0x003B, 0x0000); //0x0303
 800473c:	2100      	movs	r1, #0
 800473e:	203b      	movs	r0, #59	; 0x3b
 8004740:	f7fc f9a8 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0x003C, 0x0007); //?0x0707
 8004744:	2107      	movs	r1, #7
 8004746:	203c      	movs	r0, #60	; 0x3c
 8004748:	f7fc f9a4 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0x003D, 0x0000); //0x1313//0x1f08
 800474c:	2100      	movs	r1, #0
 800474e:	203d      	movs	r0, #61	; 0x3d
 8004750:	f7fc f9a0 	bl	8000a94 <LCD_WriteReg>
		HAL_Delay(50);
 8004754:	2032      	movs	r0, #50	; 0x32
 8004756:	f001 fb51 	bl	8005dfc <HAL_Delay>
		LCD_WriteReg(0x0007, 0x0001);
 800475a:	2101      	movs	r1, #1
 800475c:	2007      	movs	r0, #7
 800475e:	f7fc f999 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0x0017, 0x0001); //开启电源
 8004762:	2101      	movs	r1, #1
 8004764:	2017      	movs	r0, #23
 8004766:	f7fc f995 	bl	8000a94 <LCD_WriteReg>
		HAL_Delay(50);
 800476a:	2032      	movs	r0, #50	; 0x32
 800476c:	f001 fb46 	bl	8005dfc <HAL_Delay>
		//电源配置
		LCD_WriteReg(0x0010, 0x17A0);
 8004770:	f44f 51bd 	mov.w	r1, #6048	; 0x17a0
 8004774:	2010      	movs	r0, #16
 8004776:	f7fc f98d 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0x0011, 0x0217); //reference voltage VC[2:0]   Vciout = 1.00*Vcivl
 800477a:	f240 2117 	movw	r1, #535	; 0x217
 800477e:	2011      	movs	r0, #17
 8004780:	f7fc f988 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0x0012, 0x011E); //0x011c  //Vreg1out = Vcilvl*1.80   is it the same as Vgama1out ?
 8004784:	f44f 718f 	mov.w	r1, #286	; 0x11e
 8004788:	2012      	movs	r0, #18
 800478a:	f7fc f983 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0x0013, 0x0F00); //VDV[4:0]-->VCOM Amplitude VcomL = VcomH - Vcom Ampl
 800478e:	f44f 6170 	mov.w	r1, #3840	; 0xf00
 8004792:	2013      	movs	r0, #19
 8004794:	f7fc f97e 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0x002A, 0x0000);
 8004798:	2100      	movs	r1, #0
 800479a:	202a      	movs	r0, #42	; 0x2a
 800479c:	f7fc f97a 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0x0029, 0x000A); //0x0001F  Vcomh = VCM1[4:0]*Vreg1out    gate source voltage??
 80047a0:	210a      	movs	r1, #10
 80047a2:	2029      	movs	r0, #41	; 0x29
 80047a4:	f7fc f976 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0x0012, 0x013E); // 0x013C  power supply on
 80047a8:	f44f 719f 	mov.w	r1, #318	; 0x13e
 80047ac:	2012      	movs	r0, #18
 80047ae:	f7fc f971 	bl	8000a94 <LCD_WriteReg>
		//Coordinates Control//
		LCD_WriteReg(0x0050, 0x0000);        //0x0e00
 80047b2:	2100      	movs	r1, #0
 80047b4:	2050      	movs	r0, #80	; 0x50
 80047b6:	f7fc f96d 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0x0051, 0x00EF);
 80047ba:	21ef      	movs	r1, #239	; 0xef
 80047bc:	2051      	movs	r0, #81	; 0x51
 80047be:	f7fc f969 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0x0052, 0x0000);
 80047c2:	2100      	movs	r1, #0
 80047c4:	2052      	movs	r0, #82	; 0x52
 80047c6:	f7fc f965 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0x0053, 0x013F);
 80047ca:	f240 113f 	movw	r1, #319	; 0x13f
 80047ce:	2053      	movs	r0, #83	; 0x53
 80047d0:	f7fc f960 	bl	8000a94 <LCD_WriteReg>
		//Pannel Image Control//
		LCD_WriteReg(0x0060, 0x2700);
 80047d4:	f44f 511c 	mov.w	r1, #9984	; 0x2700
 80047d8:	2060      	movs	r0, #96	; 0x60
 80047da:	f7fc f95b 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0x0061, 0x0001);
 80047de:	2101      	movs	r1, #1
 80047e0:	2061      	movs	r0, #97	; 0x61
 80047e2:	f7fc f957 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0x006A, 0x0000);
 80047e6:	2100      	movs	r1, #0
 80047e8:	206a      	movs	r0, #106	; 0x6a
 80047ea:	f7fc f953 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0x0080, 0x0000);
 80047ee:	2100      	movs	r1, #0
 80047f0:	2080      	movs	r0, #128	; 0x80
 80047f2:	f7fc f94f 	bl	8000a94 <LCD_WriteReg>
		//Partial Image Control//
		LCD_WriteReg(0x0081, 0x0000);
 80047f6:	2100      	movs	r1, #0
 80047f8:	2081      	movs	r0, #129	; 0x81
 80047fa:	f7fc f94b 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0x0082, 0x0000);
 80047fe:	2100      	movs	r1, #0
 8004800:	2082      	movs	r0, #130	; 0x82
 8004802:	f7fc f947 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0x0083, 0x0000);
 8004806:	2100      	movs	r1, #0
 8004808:	2083      	movs	r0, #131	; 0x83
 800480a:	f7fc f943 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0x0084, 0x0000);
 800480e:	2100      	movs	r1, #0
 8004810:	2084      	movs	r0, #132	; 0x84
 8004812:	f7fc f93f 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0x0085, 0x0000);
 8004816:	2100      	movs	r1, #0
 8004818:	2085      	movs	r0, #133	; 0x85
 800481a:	f7fc f93b 	bl	8000a94 <LCD_WriteReg>
		//Panel Interface Control//
		LCD_WriteReg(0x0090, 0x0013);        //0x0010 frenqucy
 800481e:	2113      	movs	r1, #19
 8004820:	2090      	movs	r0, #144	; 0x90
 8004822:	f7fc f937 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0x0092, 0x0300);
 8004826:	f44f 7140 	mov.w	r1, #768	; 0x300
 800482a:	2092      	movs	r0, #146	; 0x92
 800482c:	f7fc f932 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0x0093, 0x0005);
 8004830:	2105      	movs	r1, #5
 8004832:	2093      	movs	r0, #147	; 0x93
 8004834:	f7fc f92e 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0x0095, 0x0000);
 8004838:	2100      	movs	r1, #0
 800483a:	2095      	movs	r0, #149	; 0x95
 800483c:	f7fc f92a 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0x0097, 0x0000);
 8004840:	2100      	movs	r1, #0
 8004842:	2097      	movs	r0, #151	; 0x97
 8004844:	f7fc f926 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0x0098, 0x0000);
 8004848:	2100      	movs	r1, #0
 800484a:	2098      	movs	r0, #152	; 0x98
 800484c:	f7fc f922 	bl	8000a94 <LCD_WriteReg>

		LCD_WriteReg(0x0001, 0x0100);
 8004850:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004854:	2001      	movs	r0, #1
 8004856:	f7fc f91d 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0x0002, 0x0700);
 800485a:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 800485e:	2002      	movs	r0, #2
 8004860:	f7fc f918 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0x0003, 0x1038);        //扫描方向 上->下  左->右
 8004864:	f241 0138 	movw	r1, #4152	; 0x1038
 8004868:	2003      	movs	r0, #3
 800486a:	f7fc f913 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0x0004, 0x0000);
 800486e:	2100      	movs	r1, #0
 8004870:	2004      	movs	r0, #4
 8004872:	f7fc f90f 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0x000C, 0x0000);
 8004876:	2100      	movs	r1, #0
 8004878:	200c      	movs	r0, #12
 800487a:	f7fc f90b 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0x000F, 0x0000);
 800487e:	2100      	movs	r1, #0
 8004880:	200f      	movs	r0, #15
 8004882:	f7fc f907 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0x0020, 0x0000);
 8004886:	2100      	movs	r1, #0
 8004888:	2020      	movs	r0, #32
 800488a:	f7fc f903 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0x0021, 0x0000);
 800488e:	2100      	movs	r1, #0
 8004890:	2021      	movs	r0, #33	; 0x21
 8004892:	f7fc f8ff 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0x0007, 0x0021);
 8004896:	2121      	movs	r1, #33	; 0x21
 8004898:	2007      	movs	r0, #7
 800489a:	f7fc f8fb 	bl	8000a94 <LCD_WriteReg>
		HAL_Delay(20);
 800489e:	2014      	movs	r0, #20
 80048a0:	f001 faac 	bl	8005dfc <HAL_Delay>
		LCD_WriteReg(0x0007, 0x0061);
 80048a4:	2161      	movs	r1, #97	; 0x61
 80048a6:	2007      	movs	r0, #7
 80048a8:	f7fc f8f4 	bl	8000a94 <LCD_WriteReg>
		HAL_Delay(20);
 80048ac:	2014      	movs	r0, #20
 80048ae:	f001 faa5 	bl	8005dfc <HAL_Delay>
		LCD_WriteReg(0x0007, 0x0173);
 80048b2:	f240 1173 	movw	r1, #371	; 0x173
 80048b6:	2007      	movs	r0, #7
 80048b8:	f7fc f8ec 	bl	8000a94 <LCD_WriteReg>
		HAL_Delay(20);
 80048bc:	2014      	movs	r0, #20
 80048be:	f001 fa9d 	bl	8005dfc <HAL_Delay>
 80048c2:	f000 bfd7 	b.w	8005874 <LCD_Init+0x3e34>
 80048c6:	bf00      	nop
 80048c8:	20000028 	.word	0x20000028
	} else if (lcddev.id == 0xB505) {
 80048cc:	4bf0      	ldr	r3, [pc, #960]	; (8004c90 <LCD_Init+0x3250>)
 80048ce:	889b      	ldrh	r3, [r3, #4]
 80048d0:	f24b 5205 	movw	r2, #46341	; 0xb505
 80048d4:	4293      	cmp	r3, r2
 80048d6:	f040 8103 	bne.w	8004ae0 <LCD_Init+0x30a0>
		LCD_WriteReg(0x0000, 0x0000);
 80048da:	2100      	movs	r1, #0
 80048dc:	2000      	movs	r0, #0
 80048de:	f7fc f8d9 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0x0000, 0x0000);
 80048e2:	2100      	movs	r1, #0
 80048e4:	2000      	movs	r0, #0
 80048e6:	f7fc f8d5 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0x0000, 0x0000);
 80048ea:	2100      	movs	r1, #0
 80048ec:	2000      	movs	r0, #0
 80048ee:	f7fc f8d1 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0x0000, 0x0000);
 80048f2:	2100      	movs	r1, #0
 80048f4:	2000      	movs	r0, #0
 80048f6:	f7fc f8cd 	bl	8000a94 <LCD_WriteReg>

		LCD_WriteReg(0x00a4, 0x0001);
 80048fa:	2101      	movs	r1, #1
 80048fc:	20a4      	movs	r0, #164	; 0xa4
 80048fe:	f7fc f8c9 	bl	8000a94 <LCD_WriteReg>
		HAL_Delay(20);
 8004902:	2014      	movs	r0, #20
 8004904:	f001 fa7a 	bl	8005dfc <HAL_Delay>
		LCD_WriteReg(0x0060, 0x2700);
 8004908:	f44f 511c 	mov.w	r1, #9984	; 0x2700
 800490c:	2060      	movs	r0, #96	; 0x60
 800490e:	f7fc f8c1 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0x0008, 0x0202);
 8004912:	f240 2102 	movw	r1, #514	; 0x202
 8004916:	2008      	movs	r0, #8
 8004918:	f7fc f8bc 	bl	8000a94 <LCD_WriteReg>

		LCD_WriteReg(0x0030, 0x0214);
 800491c:	f44f 7105 	mov.w	r1, #532	; 0x214
 8004920:	2030      	movs	r0, #48	; 0x30
 8004922:	f7fc f8b7 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0x0031, 0x3715);
 8004926:	f243 7115 	movw	r1, #14101	; 0x3715
 800492a:	2031      	movs	r0, #49	; 0x31
 800492c:	f7fc f8b2 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0x0032, 0x0604);
 8004930:	f240 6104 	movw	r1, #1540	; 0x604
 8004934:	2032      	movs	r0, #50	; 0x32
 8004936:	f7fc f8ad 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0x0033, 0x0e16);
 800493a:	f640 6116 	movw	r1, #3606	; 0xe16
 800493e:	2033      	movs	r0, #51	; 0x33
 8004940:	f7fc f8a8 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0x0034, 0x2211);
 8004944:	f242 2111 	movw	r1, #8721	; 0x2211
 8004948:	2034      	movs	r0, #52	; 0x34
 800494a:	f7fc f8a3 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0x0035, 0x1500);
 800494e:	f44f 51a8 	mov.w	r1, #5376	; 0x1500
 8004952:	2035      	movs	r0, #53	; 0x35
 8004954:	f7fc f89e 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0x0036, 0x8507);
 8004958:	f248 5107 	movw	r1, #34055	; 0x8507
 800495c:	2036      	movs	r0, #54	; 0x36
 800495e:	f7fc f899 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0x0037, 0x1407);
 8004962:	f241 4107 	movw	r1, #5127	; 0x1407
 8004966:	2037      	movs	r0, #55	; 0x37
 8004968:	f7fc f894 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0x0038, 0x1403);
 800496c:	f241 4103 	movw	r1, #5123	; 0x1403
 8004970:	2038      	movs	r0, #56	; 0x38
 8004972:	f7fc f88f 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0x0039, 0x0020);
 8004976:	2120      	movs	r1, #32
 8004978:	2039      	movs	r0, #57	; 0x39
 800497a:	f7fc f88b 	bl	8000a94 <LCD_WriteReg>

		LCD_WriteReg(0x0090, 0x001a);
 800497e:	211a      	movs	r1, #26
 8004980:	2090      	movs	r0, #144	; 0x90
 8004982:	f7fc f887 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0x0010, 0x0000);
 8004986:	2100      	movs	r1, #0
 8004988:	2010      	movs	r0, #16
 800498a:	f7fc f883 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0x0011, 0x0007);
 800498e:	2107      	movs	r1, #7
 8004990:	2011      	movs	r0, #17
 8004992:	f7fc f87f 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0x0012, 0x0000);
 8004996:	2100      	movs	r1, #0
 8004998:	2012      	movs	r0, #18
 800499a:	f7fc f87b 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0x0013, 0x0000);
 800499e:	2100      	movs	r1, #0
 80049a0:	2013      	movs	r0, #19
 80049a2:	f7fc f877 	bl	8000a94 <LCD_WriteReg>
		HAL_Delay(20);
 80049a6:	2014      	movs	r0, #20
 80049a8:	f001 fa28 	bl	8005dfc <HAL_Delay>

		LCD_WriteReg(0x0010, 0x0730);
 80049ac:	f44f 61e6 	mov.w	r1, #1840	; 0x730
 80049b0:	2010      	movs	r0, #16
 80049b2:	f7fc f86f 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0x0011, 0x0137);
 80049b6:	f240 1137 	movw	r1, #311	; 0x137
 80049ba:	2011      	movs	r0, #17
 80049bc:	f7fc f86a 	bl	8000a94 <LCD_WriteReg>
		HAL_Delay(20);
 80049c0:	2014      	movs	r0, #20
 80049c2:	f001 fa1b 	bl	8005dfc <HAL_Delay>

		LCD_WriteReg(0x0012, 0x01b8);
 80049c6:	f44f 71dc 	mov.w	r1, #440	; 0x1b8
 80049ca:	2012      	movs	r0, #18
 80049cc:	f7fc f862 	bl	8000a94 <LCD_WriteReg>
		HAL_Delay(20);
 80049d0:	2014      	movs	r0, #20
 80049d2:	f001 fa13 	bl	8005dfc <HAL_Delay>

		LCD_WriteReg(0x0013, 0x0f00);
 80049d6:	f44f 6170 	mov.w	r1, #3840	; 0xf00
 80049da:	2013      	movs	r0, #19
 80049dc:	f7fc f85a 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0x002a, 0x0080);
 80049e0:	2180      	movs	r1, #128	; 0x80
 80049e2:	202a      	movs	r0, #42	; 0x2a
 80049e4:	f7fc f856 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0x0029, 0x0048);
 80049e8:	2148      	movs	r1, #72	; 0x48
 80049ea:	2029      	movs	r0, #41	; 0x29
 80049ec:	f7fc f852 	bl	8000a94 <LCD_WriteReg>
		HAL_Delay(20);
 80049f0:	2014      	movs	r0, #20
 80049f2:	f001 fa03 	bl	8005dfc <HAL_Delay>

		LCD_WriteReg(0x0001, 0x0100);
 80049f6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80049fa:	2001      	movs	r0, #1
 80049fc:	f7fc f84a 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0x0002, 0x0700);
 8004a00:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 8004a04:	2002      	movs	r0, #2
 8004a06:	f7fc f845 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0x0003, 0x1038);        //扫描方向 上->下  左->右
 8004a0a:	f241 0138 	movw	r1, #4152	; 0x1038
 8004a0e:	2003      	movs	r0, #3
 8004a10:	f7fc f840 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0x0008, 0x0202);
 8004a14:	f240 2102 	movw	r1, #514	; 0x202
 8004a18:	2008      	movs	r0, #8
 8004a1a:	f7fc f83b 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0x000a, 0x0000);
 8004a1e:	2100      	movs	r1, #0
 8004a20:	200a      	movs	r0, #10
 8004a22:	f7fc f837 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0x000c, 0x0000);
 8004a26:	2100      	movs	r1, #0
 8004a28:	200c      	movs	r0, #12
 8004a2a:	f7fc f833 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0x000d, 0x0000);
 8004a2e:	2100      	movs	r1, #0
 8004a30:	200d      	movs	r0, #13
 8004a32:	f7fc f82f 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0x000e, 0x0030);
 8004a36:	2130      	movs	r1, #48	; 0x30
 8004a38:	200e      	movs	r0, #14
 8004a3a:	f7fc f82b 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0x0050, 0x0000);
 8004a3e:	2100      	movs	r1, #0
 8004a40:	2050      	movs	r0, #80	; 0x50
 8004a42:	f7fc f827 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0x0051, 0x00ef);
 8004a46:	21ef      	movs	r1, #239	; 0xef
 8004a48:	2051      	movs	r0, #81	; 0x51
 8004a4a:	f7fc f823 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0x0052, 0x0000);
 8004a4e:	2100      	movs	r1, #0
 8004a50:	2052      	movs	r0, #82	; 0x52
 8004a52:	f7fc f81f 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0x0053, 0x013f);
 8004a56:	f240 113f 	movw	r1, #319	; 0x13f
 8004a5a:	2053      	movs	r0, #83	; 0x53
 8004a5c:	f7fc f81a 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0x0060, 0x2700);
 8004a60:	f44f 511c 	mov.w	r1, #9984	; 0x2700
 8004a64:	2060      	movs	r0, #96	; 0x60
 8004a66:	f7fc f815 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0x0061, 0x0001);
 8004a6a:	2101      	movs	r1, #1
 8004a6c:	2061      	movs	r0, #97	; 0x61
 8004a6e:	f7fc f811 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0x006a, 0x0000);
 8004a72:	2100      	movs	r1, #0
 8004a74:	206a      	movs	r0, #106	; 0x6a
 8004a76:	f7fc f80d 	bl	8000a94 <LCD_WriteReg>
		//LCD_WriteReg(0x0080,0x0000);
		//LCD_WriteReg(0x0081,0x0000);
		LCD_WriteReg(0x0090, 0X0011);
 8004a7a:	2111      	movs	r1, #17
 8004a7c:	2090      	movs	r0, #144	; 0x90
 8004a7e:	f7fc f809 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0x0092, 0x0600);
 8004a82:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8004a86:	2092      	movs	r0, #146	; 0x92
 8004a88:	f7fc f804 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0x0093, 0x0402);
 8004a8c:	f240 4102 	movw	r1, #1026	; 0x402
 8004a90:	2093      	movs	r0, #147	; 0x93
 8004a92:	f7fb ffff 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0x0094, 0x0002);
 8004a96:	2102      	movs	r1, #2
 8004a98:	2094      	movs	r0, #148	; 0x94
 8004a9a:	f7fb fffb 	bl	8000a94 <LCD_WriteReg>
		HAL_Delay(20);
 8004a9e:	2014      	movs	r0, #20
 8004aa0:	f001 f9ac 	bl	8005dfc <HAL_Delay>

		LCD_WriteReg(0x0007, 0x0001);
 8004aa4:	2101      	movs	r1, #1
 8004aa6:	2007      	movs	r0, #7
 8004aa8:	f7fb fff4 	bl	8000a94 <LCD_WriteReg>
		HAL_Delay(20);
 8004aac:	2014      	movs	r0, #20
 8004aae:	f001 f9a5 	bl	8005dfc <HAL_Delay>
		LCD_WriteReg(0x0007, 0x0061);
 8004ab2:	2161      	movs	r1, #97	; 0x61
 8004ab4:	2007      	movs	r0, #7
 8004ab6:	f7fb ffed 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0x0007, 0x0173);
 8004aba:	f240 1173 	movw	r1, #371	; 0x173
 8004abe:	2007      	movs	r0, #7
 8004ac0:	f7fb ffe8 	bl	8000a94 <LCD_WriteReg>

		LCD_WriteReg(0x0020, 0x0000);
 8004ac4:	2100      	movs	r1, #0
 8004ac6:	2020      	movs	r0, #32
 8004ac8:	f7fb ffe4 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0x0021, 0x0000);
 8004acc:	2100      	movs	r1, #0
 8004ace:	2021      	movs	r0, #33	; 0x21
 8004ad0:	f7fb ffe0 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0x00, 0x22);
 8004ad4:	2122      	movs	r1, #34	; 0x22
 8004ad6:	2000      	movs	r0, #0
 8004ad8:	f7fb ffdc 	bl	8000a94 <LCD_WriteReg>
 8004adc:	f000 beca 	b.w	8005874 <LCD_Init+0x3e34>
	} else if (lcddev.id == 0xC505) {
 8004ae0:	4b6b      	ldr	r3, [pc, #428]	; (8004c90 <LCD_Init+0x3250>)
 8004ae2:	889b      	ldrh	r3, [r3, #4]
 8004ae4:	f24c 5205 	movw	r2, #50437	; 0xc505
 8004ae8:	4293      	cmp	r3, r2
 8004aea:	f040 80d3 	bne.w	8004c94 <LCD_Init+0x3254>
		LCD_WriteReg(0x0000, 0x0000);
 8004aee:	2100      	movs	r1, #0
 8004af0:	2000      	movs	r0, #0
 8004af2:	f7fb ffcf 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0x0000, 0x0000);
 8004af6:	2100      	movs	r1, #0
 8004af8:	2000      	movs	r0, #0
 8004afa:	f7fb ffcb 	bl	8000a94 <LCD_WriteReg>
		HAL_Delay(20);
 8004afe:	2014      	movs	r0, #20
 8004b00:	f001 f97c 	bl	8005dfc <HAL_Delay>
		LCD_WriteReg(0x0000, 0x0000);
 8004b04:	2100      	movs	r1, #0
 8004b06:	2000      	movs	r0, #0
 8004b08:	f7fb ffc4 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0x0000, 0x0000);
 8004b0c:	2100      	movs	r1, #0
 8004b0e:	2000      	movs	r0, #0
 8004b10:	f7fb ffc0 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0x0000, 0x0000);
 8004b14:	2100      	movs	r1, #0
 8004b16:	2000      	movs	r0, #0
 8004b18:	f7fb ffbc 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0x0000, 0x0000);
 8004b1c:	2100      	movs	r1, #0
 8004b1e:	2000      	movs	r0, #0
 8004b20:	f7fb ffb8 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0x00a4, 0x0001);
 8004b24:	2101      	movs	r1, #1
 8004b26:	20a4      	movs	r0, #164	; 0xa4
 8004b28:	f7fb ffb4 	bl	8000a94 <LCD_WriteReg>
		HAL_Delay(20);
 8004b2c:	2014      	movs	r0, #20
 8004b2e:	f001 f965 	bl	8005dfc <HAL_Delay>
		LCD_WriteReg(0x0060, 0x2700);
 8004b32:	f44f 511c 	mov.w	r1, #9984	; 0x2700
 8004b36:	2060      	movs	r0, #96	; 0x60
 8004b38:	f7fb ffac 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0x0008, 0x0806);
 8004b3c:	f640 0106 	movw	r1, #2054	; 0x806
 8004b40:	2008      	movs	r0, #8
 8004b42:	f7fb ffa7 	bl	8000a94 <LCD_WriteReg>

		LCD_WriteReg(0x0030, 0x0703);		//gamma setting
 8004b46:	f240 7103 	movw	r1, #1795	; 0x703
 8004b4a:	2030      	movs	r0, #48	; 0x30
 8004b4c:	f7fb ffa2 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0x0031, 0x0001);
 8004b50:	2101      	movs	r1, #1
 8004b52:	2031      	movs	r0, #49	; 0x31
 8004b54:	f7fb ff9e 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0x0032, 0x0004);
 8004b58:	2104      	movs	r1, #4
 8004b5a:	2032      	movs	r0, #50	; 0x32
 8004b5c:	f7fb ff9a 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0x0033, 0x0102);
 8004b60:	f44f 7181 	mov.w	r1, #258	; 0x102
 8004b64:	2033      	movs	r0, #51	; 0x33
 8004b66:	f7fb ff95 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0x0034, 0x0300);
 8004b6a:	f44f 7140 	mov.w	r1, #768	; 0x300
 8004b6e:	2034      	movs	r0, #52	; 0x34
 8004b70:	f7fb ff90 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0x0035, 0x0103);
 8004b74:	f240 1103 	movw	r1, #259	; 0x103
 8004b78:	2035      	movs	r0, #53	; 0x35
 8004b7a:	f7fb ff8b 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0x0036, 0x001F);
 8004b7e:	211f      	movs	r1, #31
 8004b80:	2036      	movs	r0, #54	; 0x36
 8004b82:	f7fb ff87 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0x0037, 0x0703);
 8004b86:	f240 7103 	movw	r1, #1795	; 0x703
 8004b8a:	2037      	movs	r0, #55	; 0x37
 8004b8c:	f7fb ff82 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0x0038, 0x0001);
 8004b90:	2101      	movs	r1, #1
 8004b92:	2038      	movs	r0, #56	; 0x38
 8004b94:	f7fb ff7e 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0x0039, 0x0004);
 8004b98:	2104      	movs	r1, #4
 8004b9a:	2039      	movs	r0, #57	; 0x39
 8004b9c:	f7fb ff7a 	bl	8000a94 <LCD_WriteReg>

		LCD_WriteReg(0x0090, 0x0015);	//80Hz
 8004ba0:	2115      	movs	r1, #21
 8004ba2:	2090      	movs	r0, #144	; 0x90
 8004ba4:	f7fb ff76 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0x0010, 0X0410);	//BT,AP
 8004ba8:	f44f 6182 	mov.w	r1, #1040	; 0x410
 8004bac:	2010      	movs	r0, #16
 8004bae:	f7fb ff71 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0x0011, 0x0247);	//DC1,DC0,VC
 8004bb2:	f240 2147 	movw	r1, #583	; 0x247
 8004bb6:	2011      	movs	r0, #17
 8004bb8:	f7fb ff6c 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0x0012, 0x01BC);
 8004bbc:	f44f 71de 	mov.w	r1, #444	; 0x1bc
 8004bc0:	2012      	movs	r0, #18
 8004bc2:	f7fb ff67 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0x0013, 0x0e00);
 8004bc6:	f44f 6160 	mov.w	r1, #3584	; 0xe00
 8004bca:	2013      	movs	r0, #19
 8004bcc:	f7fb ff62 	bl	8000a94 <LCD_WriteReg>
		HAL_Delay(120);
 8004bd0:	2078      	movs	r0, #120	; 0x78
 8004bd2:	f001 f913 	bl	8005dfc <HAL_Delay>
		LCD_WriteReg(0x0001, 0x0100);
 8004bd6:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004bda:	2001      	movs	r0, #1
 8004bdc:	f7fb ff5a 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0x0002, 0x0200);
 8004be0:	f44f 7100 	mov.w	r1, #512	; 0x200
 8004be4:	2002      	movs	r0, #2
 8004be6:	f7fb ff55 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0x0003, 0x1030);
 8004bea:	f241 0130 	movw	r1, #4144	; 0x1030
 8004bee:	2003      	movs	r0, #3
 8004bf0:	f7fb ff50 	bl	8000a94 <LCD_WriteReg>

		LCD_WriteReg(0x000A, 0x0008);
 8004bf4:	2108      	movs	r1, #8
 8004bf6:	200a      	movs	r0, #10
 8004bf8:	f7fb ff4c 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0x000C, 0x0000);
 8004bfc:	2100      	movs	r1, #0
 8004bfe:	200c      	movs	r0, #12
 8004c00:	f7fb ff48 	bl	8000a94 <LCD_WriteReg>

		LCD_WriteReg(0x000E, 0x0020);
 8004c04:	2120      	movs	r1, #32
 8004c06:	200e      	movs	r0, #14
 8004c08:	f7fb ff44 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0x000F, 0x0000);
 8004c0c:	2100      	movs	r1, #0
 8004c0e:	200f      	movs	r0, #15
 8004c10:	f7fb ff40 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0x0020, 0x0000);	//H Start
 8004c14:	2100      	movs	r1, #0
 8004c16:	2020      	movs	r0, #32
 8004c18:	f7fb ff3c 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0x0021, 0x0000);	//V Start
 8004c1c:	2100      	movs	r1, #0
 8004c1e:	2021      	movs	r0, #33	; 0x21
 8004c20:	f7fb ff38 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0x002A, 0x003D);	//vcom2
 8004c24:	213d      	movs	r1, #61	; 0x3d
 8004c26:	202a      	movs	r0, #42	; 0x2a
 8004c28:	f7fb ff34 	bl	8000a94 <LCD_WriteReg>
		HAL_Delay(20);
 8004c2c:	2014      	movs	r0, #20
 8004c2e:	f001 f8e5 	bl	8005dfc <HAL_Delay>
		LCD_WriteReg(0x0029, 0x002d);
 8004c32:	212d      	movs	r1, #45	; 0x2d
 8004c34:	2029      	movs	r0, #41	; 0x29
 8004c36:	f7fb ff2d 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0x0050, 0x0000);
 8004c3a:	2100      	movs	r1, #0
 8004c3c:	2050      	movs	r0, #80	; 0x50
 8004c3e:	f7fb ff29 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0x0051, 0xD0EF);
 8004c42:	f24d 01ef 	movw	r1, #53487	; 0xd0ef
 8004c46:	2051      	movs	r0, #81	; 0x51
 8004c48:	f7fb ff24 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0x0052, 0x0000);
 8004c4c:	2100      	movs	r1, #0
 8004c4e:	2052      	movs	r0, #82	; 0x52
 8004c50:	f7fb ff20 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0x0053, 0x013F);
 8004c54:	f240 113f 	movw	r1, #319	; 0x13f
 8004c58:	2053      	movs	r0, #83	; 0x53
 8004c5a:	f7fb ff1b 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0x0061, 0x0000);
 8004c5e:	2100      	movs	r1, #0
 8004c60:	2061      	movs	r0, #97	; 0x61
 8004c62:	f7fb ff17 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0x006A, 0x0000);
 8004c66:	2100      	movs	r1, #0
 8004c68:	206a      	movs	r0, #106	; 0x6a
 8004c6a:	f7fb ff13 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0x0092, 0x0300);
 8004c6e:	f44f 7140 	mov.w	r1, #768	; 0x300
 8004c72:	2092      	movs	r0, #146	; 0x92
 8004c74:	f7fb ff0e 	bl	8000a94 <LCD_WriteReg>

		LCD_WriteReg(0x0093, 0x0005);
 8004c78:	2105      	movs	r1, #5
 8004c7a:	2093      	movs	r0, #147	; 0x93
 8004c7c:	f7fb ff0a 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0x0007, 0x0100);
 8004c80:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004c84:	2007      	movs	r0, #7
 8004c86:	f7fb ff05 	bl	8000a94 <LCD_WriteReg>
 8004c8a:	f000 bdf3 	b.w	8005874 <LCD_Init+0x3e34>
 8004c8e:	bf00      	nop
 8004c90:	20000028 	.word	0x20000028
	} else if (lcddev.id == 0x8989)	//OK |/|/|
 8004c94:	4bc2      	ldr	r3, [pc, #776]	; (8004fa0 <LCD_Init+0x3560>)
 8004c96:	889b      	ldrh	r3, [r3, #4]
 8004c98:	f648 1289 	movw	r2, #35209	; 0x8989
 8004c9c:	4293      	cmp	r3, r2
 8004c9e:	f040 80bc 	bne.w	8004e1a <LCD_Init+0x33da>
			{
		LCD_WriteReg(0x0000, 0x0001);	//打开晶振
 8004ca2:	2101      	movs	r1, #1
 8004ca4:	2000      	movs	r0, #0
 8004ca6:	f7fb fef5 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0x0003, 0xA8A4);	//0xA8A4
 8004caa:	f64a 01a4 	movw	r1, #43172	; 0xa8a4
 8004cae:	2003      	movs	r0, #3
 8004cb0:	f7fb fef0 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0x000C, 0x0000);
 8004cb4:	2100      	movs	r1, #0
 8004cb6:	200c      	movs	r0, #12
 8004cb8:	f7fb feec 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0x000D, 0x080C);
 8004cbc:	f640 010c 	movw	r1, #2060	; 0x80c
 8004cc0:	200d      	movs	r0, #13
 8004cc2:	f7fb fee7 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0x000E, 0x2B00);
 8004cc6:	f44f 512c 	mov.w	r1, #11008	; 0x2b00
 8004cca:	200e      	movs	r0, #14
 8004ccc:	f7fb fee2 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0x001E, 0x00B0);
 8004cd0:	21b0      	movs	r1, #176	; 0xb0
 8004cd2:	201e      	movs	r0, #30
 8004cd4:	f7fb fede 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0x0001, 0x2B3F);	//驱动输出控制320*240  0x6B3F
 8004cd8:	f642 313f 	movw	r1, #11071	; 0x2b3f
 8004cdc:	2001      	movs	r0, #1
 8004cde:	f7fb fed9 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0x0002, 0x0600);
 8004ce2:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8004ce6:	2002      	movs	r0, #2
 8004ce8:	f7fb fed4 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0x0010, 0x0000);
 8004cec:	2100      	movs	r1, #0
 8004cee:	2010      	movs	r0, #16
 8004cf0:	f7fb fed0 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0x0011, 0x6078); //定义数据格式  16位色 		横屏 0x6058
 8004cf4:	f246 0178 	movw	r1, #24696	; 0x6078
 8004cf8:	2011      	movs	r0, #17
 8004cfa:	f7fb fecb 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0x0005, 0x0000);
 8004cfe:	2100      	movs	r1, #0
 8004d00:	2005      	movs	r0, #5
 8004d02:	f7fb fec7 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0x0006, 0x0000);
 8004d06:	2100      	movs	r1, #0
 8004d08:	2006      	movs	r0, #6
 8004d0a:	f7fb fec3 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0x0016, 0xEF1C);
 8004d0e:	f64e 711c 	movw	r1, #61212	; 0xef1c
 8004d12:	2016      	movs	r0, #22
 8004d14:	f7fb febe 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0x0017, 0x0003);
 8004d18:	2103      	movs	r1, #3
 8004d1a:	2017      	movs	r0, #23
 8004d1c:	f7fb feba 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0x0007, 0x0233); //0x0233
 8004d20:	f240 2133 	movw	r1, #563	; 0x233
 8004d24:	2007      	movs	r0, #7
 8004d26:	f7fb feb5 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0x000B, 0x0000);
 8004d2a:	2100      	movs	r1, #0
 8004d2c:	200b      	movs	r0, #11
 8004d2e:	f7fb feb1 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0x000F, 0x0000); //扫描开始地址
 8004d32:	2100      	movs	r1, #0
 8004d34:	200f      	movs	r0, #15
 8004d36:	f7fb fead 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0x0041, 0x0000);
 8004d3a:	2100      	movs	r1, #0
 8004d3c:	2041      	movs	r0, #65	; 0x41
 8004d3e:	f7fb fea9 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0x0042, 0x0000);
 8004d42:	2100      	movs	r1, #0
 8004d44:	2042      	movs	r0, #66	; 0x42
 8004d46:	f7fb fea5 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0x0048, 0x0000);
 8004d4a:	2100      	movs	r1, #0
 8004d4c:	2048      	movs	r0, #72	; 0x48
 8004d4e:	f7fb fea1 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0x0049, 0x013F);
 8004d52:	f240 113f 	movw	r1, #319	; 0x13f
 8004d56:	2049      	movs	r0, #73	; 0x49
 8004d58:	f7fb fe9c 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0x004A, 0x0000);
 8004d5c:	2100      	movs	r1, #0
 8004d5e:	204a      	movs	r0, #74	; 0x4a
 8004d60:	f7fb fe98 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0x004B, 0x0000);
 8004d64:	2100      	movs	r1, #0
 8004d66:	204b      	movs	r0, #75	; 0x4b
 8004d68:	f7fb fe94 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0x0044, 0xEF00);
 8004d6c:	f44f 416f 	mov.w	r1, #61184	; 0xef00
 8004d70:	2044      	movs	r0, #68	; 0x44
 8004d72:	f7fb fe8f 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0x0045, 0x0000);
 8004d76:	2100      	movs	r1, #0
 8004d78:	2045      	movs	r0, #69	; 0x45
 8004d7a:	f7fb fe8b 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0x0046, 0x013F);
 8004d7e:	f240 113f 	movw	r1, #319	; 0x13f
 8004d82:	2046      	movs	r0, #70	; 0x46
 8004d84:	f7fb fe86 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0x0030, 0x0707);
 8004d88:	f240 7107 	movw	r1, #1799	; 0x707
 8004d8c:	2030      	movs	r0, #48	; 0x30
 8004d8e:	f7fb fe81 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0x0031, 0x0204);
 8004d92:	f44f 7101 	mov.w	r1, #516	; 0x204
 8004d96:	2031      	movs	r0, #49	; 0x31
 8004d98:	f7fb fe7c 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0x0032, 0x0204);
 8004d9c:	f44f 7101 	mov.w	r1, #516	; 0x204
 8004da0:	2032      	movs	r0, #50	; 0x32
 8004da2:	f7fb fe77 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0x0033, 0x0502);
 8004da6:	f240 5102 	movw	r1, #1282	; 0x502
 8004daa:	2033      	movs	r0, #51	; 0x33
 8004dac:	f7fb fe72 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0x0034, 0x0507);
 8004db0:	f240 5107 	movw	r1, #1287	; 0x507
 8004db4:	2034      	movs	r0, #52	; 0x34
 8004db6:	f7fb fe6d 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0x0035, 0x0204);
 8004dba:	f44f 7101 	mov.w	r1, #516	; 0x204
 8004dbe:	2035      	movs	r0, #53	; 0x35
 8004dc0:	f7fb fe68 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0x0036, 0x0204);
 8004dc4:	f44f 7101 	mov.w	r1, #516	; 0x204
 8004dc8:	2036      	movs	r0, #54	; 0x36
 8004dca:	f7fb fe63 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0x0037, 0x0502);
 8004dce:	f240 5102 	movw	r1, #1282	; 0x502
 8004dd2:	2037      	movs	r0, #55	; 0x37
 8004dd4:	f7fb fe5e 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0x003A, 0x0302);
 8004dd8:	f240 3102 	movw	r1, #770	; 0x302
 8004ddc:	203a      	movs	r0, #58	; 0x3a
 8004dde:	f7fb fe59 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0x003B, 0x0302);
 8004de2:	f240 3102 	movw	r1, #770	; 0x302
 8004de6:	203b      	movs	r0, #59	; 0x3b
 8004de8:	f7fb fe54 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0x0023, 0x0000);
 8004dec:	2100      	movs	r1, #0
 8004dee:	2023      	movs	r0, #35	; 0x23
 8004df0:	f7fb fe50 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0x0024, 0x0000);
 8004df4:	2100      	movs	r1, #0
 8004df6:	2024      	movs	r0, #36	; 0x24
 8004df8:	f7fb fe4c 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0x0025, 0x8000);
 8004dfc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004e00:	2025      	movs	r0, #37	; 0x25
 8004e02:	f7fb fe47 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0x004f, 0);        //行首址0
 8004e06:	2100      	movs	r1, #0
 8004e08:	204f      	movs	r0, #79	; 0x4f
 8004e0a:	f7fb fe43 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0x004e, 0);        //列首址0
 8004e0e:	2100      	movs	r1, #0
 8004e10:	204e      	movs	r0, #78	; 0x4e
 8004e12:	f7fb fe3f 	bl	8000a94 <LCD_WriteReg>
 8004e16:	f000 bd2d 	b.w	8005874 <LCD_Init+0x3e34>
	} else if (lcddev.id == 0x4531)        //OK |/|/|
 8004e1a:	4b61      	ldr	r3, [pc, #388]	; (8004fa0 <LCD_Init+0x3560>)
 8004e1c:	889b      	ldrh	r3, [r3, #4]
 8004e1e:	f244 5231 	movw	r2, #17713	; 0x4531
 8004e22:	4293      	cmp	r3, r2
 8004e24:	f040 80be 	bne.w	8004fa4 <LCD_Init+0x3564>
			{
		LCD_WriteReg(0X00, 0X0001);
 8004e28:	2101      	movs	r1, #1
 8004e2a:	2000      	movs	r0, #0
 8004e2c:	f7fb fe32 	bl	8000a94 <LCD_WriteReg>
		HAL_Delay(10);
 8004e30:	200a      	movs	r0, #10
 8004e32:	f000 ffe3 	bl	8005dfc <HAL_Delay>
		LCD_WriteReg(0X10, 0X1628);
 8004e36:	f241 6128 	movw	r1, #5672	; 0x1628
 8004e3a:	2010      	movs	r0, #16
 8004e3c:	f7fb fe2a 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0X12, 0X000e);        //0x0006
 8004e40:	210e      	movs	r1, #14
 8004e42:	2012      	movs	r0, #18
 8004e44:	f7fb fe26 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0X13, 0X0A39);
 8004e48:	f640 2139 	movw	r1, #2617	; 0xa39
 8004e4c:	2013      	movs	r0, #19
 8004e4e:	f7fb fe21 	bl	8000a94 <LCD_WriteReg>
		HAL_Delay(10);
 8004e52:	200a      	movs	r0, #10
 8004e54:	f000 ffd2 	bl	8005dfc <HAL_Delay>
		LCD_WriteReg(0X11, 0X0040);
 8004e58:	2140      	movs	r1, #64	; 0x40
 8004e5a:	2011      	movs	r0, #17
 8004e5c:	f7fb fe1a 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0X15, 0X0050);
 8004e60:	2150      	movs	r1, #80	; 0x50
 8004e62:	2015      	movs	r0, #21
 8004e64:	f7fb fe16 	bl	8000a94 <LCD_WriteReg>
		HAL_Delay(10);
 8004e68:	200a      	movs	r0, #10
 8004e6a:	f000 ffc7 	bl	8005dfc <HAL_Delay>
		LCD_WriteReg(0X12, 0X001e);        //16
 8004e6e:	211e      	movs	r1, #30
 8004e70:	2012      	movs	r0, #18
 8004e72:	f7fb fe0f 	bl	8000a94 <LCD_WriteReg>
		HAL_Delay(10);
 8004e76:	200a      	movs	r0, #10
 8004e78:	f000 ffc0 	bl	8005dfc <HAL_Delay>
		LCD_WriteReg(0X10, 0X1620);
 8004e7c:	f44f 51b1 	mov.w	r1, #5664	; 0x1620
 8004e80:	2010      	movs	r0, #16
 8004e82:	f7fb fe07 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0X13, 0X2A39);
 8004e86:	f642 2139 	movw	r1, #10809	; 0x2a39
 8004e8a:	2013      	movs	r0, #19
 8004e8c:	f7fb fe02 	bl	8000a94 <LCD_WriteReg>
		HAL_Delay(10);
 8004e90:	200a      	movs	r0, #10
 8004e92:	f000 ffb3 	bl	8005dfc <HAL_Delay>
		LCD_WriteReg(0X01, 0X0100);
 8004e96:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004e9a:	2001      	movs	r0, #1
 8004e9c:	f7fb fdfa 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0X02, 0X0300);
 8004ea0:	f44f 7140 	mov.w	r1, #768	; 0x300
 8004ea4:	2002      	movs	r0, #2
 8004ea6:	f7fb fdf5 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0X03, 0X1038);        //改变方向的
 8004eaa:	f241 0138 	movw	r1, #4152	; 0x1038
 8004eae:	2003      	movs	r0, #3
 8004eb0:	f7fb fdf0 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0X08, 0X0202);
 8004eb4:	f240 2102 	movw	r1, #514	; 0x202
 8004eb8:	2008      	movs	r0, #8
 8004eba:	f7fb fdeb 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0X0A, 0X0008);
 8004ebe:	2108      	movs	r1, #8
 8004ec0:	200a      	movs	r0, #10
 8004ec2:	f7fb fde7 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0X30, 0X0000);
 8004ec6:	2100      	movs	r1, #0
 8004ec8:	2030      	movs	r0, #48	; 0x30
 8004eca:	f7fb fde3 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0X31, 0X0402);
 8004ece:	f240 4102 	movw	r1, #1026	; 0x402
 8004ed2:	2031      	movs	r0, #49	; 0x31
 8004ed4:	f7fb fdde 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0X32, 0X0106);
 8004ed8:	f44f 7183 	mov.w	r1, #262	; 0x106
 8004edc:	2032      	movs	r0, #50	; 0x32
 8004ede:	f7fb fdd9 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0X33, 0X0503);
 8004ee2:	f240 5103 	movw	r1, #1283	; 0x503
 8004ee6:	2033      	movs	r0, #51	; 0x33
 8004ee8:	f7fb fdd4 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0X34, 0X0104);
 8004eec:	f44f 7182 	mov.w	r1, #260	; 0x104
 8004ef0:	2034      	movs	r0, #52	; 0x34
 8004ef2:	f7fb fdcf 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0X35, 0X0301);
 8004ef6:	f240 3101 	movw	r1, #769	; 0x301
 8004efa:	2035      	movs	r0, #53	; 0x35
 8004efc:	f7fb fdca 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0X36, 0X0707);
 8004f00:	f240 7107 	movw	r1, #1799	; 0x707
 8004f04:	2036      	movs	r0, #54	; 0x36
 8004f06:	f7fb fdc5 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0X37, 0X0305);
 8004f0a:	f240 3105 	movw	r1, #773	; 0x305
 8004f0e:	2037      	movs	r0, #55	; 0x37
 8004f10:	f7fb fdc0 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0X38, 0X0208);
 8004f14:	f44f 7102 	mov.w	r1, #520	; 0x208
 8004f18:	2038      	movs	r0, #56	; 0x38
 8004f1a:	f7fb fdbb 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0X39, 0X0F0B);
 8004f1e:	f640 710b 	movw	r1, #3851	; 0xf0b
 8004f22:	2039      	movs	r0, #57	; 0x39
 8004f24:	f7fb fdb6 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0X41, 0X0002);
 8004f28:	2102      	movs	r1, #2
 8004f2a:	2041      	movs	r0, #65	; 0x41
 8004f2c:	f7fb fdb2 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0X60, 0X2700);
 8004f30:	f44f 511c 	mov.w	r1, #9984	; 0x2700
 8004f34:	2060      	movs	r0, #96	; 0x60
 8004f36:	f7fb fdad 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0X61, 0X0001);
 8004f3a:	2101      	movs	r1, #1
 8004f3c:	2061      	movs	r0, #97	; 0x61
 8004f3e:	f7fb fda9 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0X90, 0X0210);
 8004f42:	f44f 7104 	mov.w	r1, #528	; 0x210
 8004f46:	2090      	movs	r0, #144	; 0x90
 8004f48:	f7fb fda4 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0X92, 0X010A);
 8004f4c:	f44f 7185 	mov.w	r1, #266	; 0x10a
 8004f50:	2092      	movs	r0, #146	; 0x92
 8004f52:	f7fb fd9f 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0X93, 0X0004);
 8004f56:	2104      	movs	r1, #4
 8004f58:	2093      	movs	r0, #147	; 0x93
 8004f5a:	f7fb fd9b 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0XA0, 0X0100);
 8004f5e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004f62:	20a0      	movs	r0, #160	; 0xa0
 8004f64:	f7fb fd96 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0X07, 0X0001);
 8004f68:	2101      	movs	r1, #1
 8004f6a:	2007      	movs	r0, #7
 8004f6c:	f7fb fd92 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0X07, 0X0021);
 8004f70:	2121      	movs	r1, #33	; 0x21
 8004f72:	2007      	movs	r0, #7
 8004f74:	f7fb fd8e 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0X07, 0X0023);
 8004f78:	2123      	movs	r1, #35	; 0x23
 8004f7a:	2007      	movs	r0, #7
 8004f7c:	f7fb fd8a 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0X07, 0X0033);
 8004f80:	2133      	movs	r1, #51	; 0x33
 8004f82:	2007      	movs	r0, #7
 8004f84:	f7fb fd86 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0X07, 0X0133);
 8004f88:	f240 1133 	movw	r1, #307	; 0x133
 8004f8c:	2007      	movs	r0, #7
 8004f8e:	f7fb fd81 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0XA0, 0X0000);
 8004f92:	2100      	movs	r1, #0
 8004f94:	20a0      	movs	r0, #160	; 0xa0
 8004f96:	f7fb fd7d 	bl	8000a94 <LCD_WriteReg>
 8004f9a:	f000 bc6b 	b.w	8005874 <LCD_Init+0x3e34>
 8004f9e:	bf00      	nop
 8004fa0:	20000028 	.word	0x20000028
	} else if (lcddev.id == 0x4535) {
 8004fa4:	4b5b      	ldr	r3, [pc, #364]	; (8005114 <LCD_Init+0x36d4>)
 8004fa6:	889b      	ldrh	r3, [r3, #4]
 8004fa8:	f244 5235 	movw	r2, #17717	; 0x4535
 8004fac:	4293      	cmp	r3, r2
 8004fae:	f040 80b3 	bne.w	8005118 <LCD_Init+0x36d8>
		LCD_WriteReg(0X15, 0X0030);
 8004fb2:	2130      	movs	r1, #48	; 0x30
 8004fb4:	2015      	movs	r0, #21
 8004fb6:	f7fb fd6d 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0X9A, 0X0010);
 8004fba:	2110      	movs	r1, #16
 8004fbc:	209a      	movs	r0, #154	; 0x9a
 8004fbe:	f7fb fd69 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0X11, 0X0020);
 8004fc2:	2120      	movs	r1, #32
 8004fc4:	2011      	movs	r0, #17
 8004fc6:	f7fb fd65 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0X10, 0X3428);
 8004fca:	f243 4128 	movw	r1, #13352	; 0x3428
 8004fce:	2010      	movs	r0, #16
 8004fd0:	f7fb fd60 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0X12, 0X0002);        //16
 8004fd4:	2102      	movs	r1, #2
 8004fd6:	2012      	movs	r0, #18
 8004fd8:	f7fb fd5c 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0X13, 0X1038);
 8004fdc:	f241 0138 	movw	r1, #4152	; 0x1038
 8004fe0:	2013      	movs	r0, #19
 8004fe2:	f7fb fd57 	bl	8000a94 <LCD_WriteReg>
		HAL_Delay(40);
 8004fe6:	2028      	movs	r0, #40	; 0x28
 8004fe8:	f000 ff08 	bl	8005dfc <HAL_Delay>
		LCD_WriteReg(0X12, 0X0012);        //16
 8004fec:	2112      	movs	r1, #18
 8004fee:	2012      	movs	r0, #18
 8004ff0:	f7fb fd50 	bl	8000a94 <LCD_WriteReg>
		HAL_Delay(40);
 8004ff4:	2028      	movs	r0, #40	; 0x28
 8004ff6:	f000 ff01 	bl	8005dfc <HAL_Delay>
		LCD_WriteReg(0X10, 0X3420);
 8004ffa:	f243 4120 	movw	r1, #13344	; 0x3420
 8004ffe:	2010      	movs	r0, #16
 8005000:	f7fb fd48 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0X13, 0X3038);
 8005004:	f243 0138 	movw	r1, #12344	; 0x3038
 8005008:	2013      	movs	r0, #19
 800500a:	f7fb fd43 	bl	8000a94 <LCD_WriteReg>
		HAL_Delay(70);
 800500e:	2046      	movs	r0, #70	; 0x46
 8005010:	f000 fef4 	bl	8005dfc <HAL_Delay>
		LCD_WriteReg(0X30, 0X0000);
 8005014:	2100      	movs	r1, #0
 8005016:	2030      	movs	r0, #48	; 0x30
 8005018:	f7fb fd3c 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0X31, 0X0402);
 800501c:	f240 4102 	movw	r1, #1026	; 0x402
 8005020:	2031      	movs	r0, #49	; 0x31
 8005022:	f7fb fd37 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0X32, 0X0307);
 8005026:	f240 3107 	movw	r1, #775	; 0x307
 800502a:	2032      	movs	r0, #50	; 0x32
 800502c:	f7fb fd32 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0X33, 0X0304);
 8005030:	f44f 7141 	mov.w	r1, #772	; 0x304
 8005034:	2033      	movs	r0, #51	; 0x33
 8005036:	f7fb fd2d 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0X34, 0X0004);
 800503a:	2104      	movs	r1, #4
 800503c:	2034      	movs	r0, #52	; 0x34
 800503e:	f7fb fd29 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0X35, 0X0401);
 8005042:	f240 4101 	movw	r1, #1025	; 0x401
 8005046:	2035      	movs	r0, #53	; 0x35
 8005048:	f7fb fd24 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0X36, 0X0707);
 800504c:	f240 7107 	movw	r1, #1799	; 0x707
 8005050:	2036      	movs	r0, #54	; 0x36
 8005052:	f7fb fd1f 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0X37, 0X0305);
 8005056:	f240 3105 	movw	r1, #773	; 0x305
 800505a:	2037      	movs	r0, #55	; 0x37
 800505c:	f7fb fd1a 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0X38, 0X0610);
 8005060:	f44f 61c2 	mov.w	r1, #1552	; 0x610
 8005064:	2038      	movs	r0, #56	; 0x38
 8005066:	f7fb fd15 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0X39, 0X0610);
 800506a:	f44f 61c2 	mov.w	r1, #1552	; 0x610
 800506e:	2039      	movs	r0, #57	; 0x39
 8005070:	f7fb fd10 	bl	8000a94 <LCD_WriteReg>

		LCD_WriteReg(0X01, 0X0100);
 8005074:	f44f 7180 	mov.w	r1, #256	; 0x100
 8005078:	2001      	movs	r0, #1
 800507a:	f7fb fd0b 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0X02, 0X0300);
 800507e:	f44f 7140 	mov.w	r1, #768	; 0x300
 8005082:	2002      	movs	r0, #2
 8005084:	f7fb fd06 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0X03, 0X1030);        //改变方向的
 8005088:	f241 0130 	movw	r1, #4144	; 0x1030
 800508c:	2003      	movs	r0, #3
 800508e:	f7fb fd01 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0X08, 0X0808);
 8005092:	f640 0108 	movw	r1, #2056	; 0x808
 8005096:	2008      	movs	r0, #8
 8005098:	f7fb fcfc 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0X0A, 0X0008);
 800509c:	2108      	movs	r1, #8
 800509e:	200a      	movs	r0, #10
 80050a0:	f7fb fcf8 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0X60, 0X2700);
 80050a4:	f44f 511c 	mov.w	r1, #9984	; 0x2700
 80050a8:	2060      	movs	r0, #96	; 0x60
 80050aa:	f7fb fcf3 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0X61, 0X0001);
 80050ae:	2101      	movs	r1, #1
 80050b0:	2061      	movs	r0, #97	; 0x61
 80050b2:	f7fb fcef 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0X90, 0X013E);
 80050b6:	f44f 719f 	mov.w	r1, #318	; 0x13e
 80050ba:	2090      	movs	r0, #144	; 0x90
 80050bc:	f7fb fcea 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0X92, 0X0100);
 80050c0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80050c4:	2092      	movs	r0, #146	; 0x92
 80050c6:	f7fb fce5 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0X93, 0X0100);
 80050ca:	f44f 7180 	mov.w	r1, #256	; 0x100
 80050ce:	2093      	movs	r0, #147	; 0x93
 80050d0:	f7fb fce0 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0XA0, 0X3000);
 80050d4:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 80050d8:	20a0      	movs	r0, #160	; 0xa0
 80050da:	f7fb fcdb 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0XA3, 0X0010);
 80050de:	2110      	movs	r1, #16
 80050e0:	20a3      	movs	r0, #163	; 0xa3
 80050e2:	f7fb fcd7 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0X07, 0X0001);
 80050e6:	2101      	movs	r1, #1
 80050e8:	2007      	movs	r0, #7
 80050ea:	f7fb fcd3 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0X07, 0X0021);
 80050ee:	2121      	movs	r1, #33	; 0x21
 80050f0:	2007      	movs	r0, #7
 80050f2:	f7fb fccf 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0X07, 0X0023);
 80050f6:	2123      	movs	r1, #35	; 0x23
 80050f8:	2007      	movs	r0, #7
 80050fa:	f7fb fccb 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0X07, 0X0033);
 80050fe:	2133      	movs	r1, #51	; 0x33
 8005100:	2007      	movs	r0, #7
 8005102:	f7fb fcc7 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0X07, 0X0133);
 8005106:	f240 1133 	movw	r1, #307	; 0x133
 800510a:	2007      	movs	r0, #7
 800510c:	f7fb fcc2 	bl	8000a94 <LCD_WriteReg>
 8005110:	e3b0      	b.n	8005874 <LCD_Init+0x3e34>
 8005112:	bf00      	nop
 8005114:	20000028 	.word	0x20000028
	} else if (lcddev.id == 0X1963) {
 8005118:	4ba8      	ldr	r3, [pc, #672]	; (80053bc <LCD_Init+0x397c>)
 800511a:	889b      	ldrh	r3, [r3, #4]
 800511c:	f641 1263 	movw	r2, #6499	; 0x1963
 8005120:	4293      	cmp	r3, r2
 8005122:	f040 83a7 	bne.w	8005874 <LCD_Init+0x3e34>
		LCD_WR_REG(0xE2);	//Set PLL with OSC = 10MHz (hardware),	Multiplier N = 35, 250MHz < VCO < 800MHz = OSC*(N+1), VCO = 300MHz
 8005126:	20e2      	movs	r0, #226	; 0xe2
 8005128:	f7fb fc28 	bl	800097c <LCD_WR_REG>
		LCD_WR_DATA(0x1D);		//参数1 
 800512c:	4ba4      	ldr	r3, [pc, #656]	; (80053c0 <LCD_Init+0x3980>)
 800512e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005132:	611a      	str	r2, [r3, #16]
 8005134:	4ba2      	ldr	r3, [pc, #648]	; (80053c0 <LCD_Init+0x3980>)
 8005136:	f44f 7200 	mov.w	r2, #512	; 0x200
 800513a:	615a      	str	r2, [r3, #20]
 800513c:	4ba1      	ldr	r3, [pc, #644]	; (80053c4 <LCD_Init+0x3984>)
 800513e:	221d      	movs	r2, #29
 8005140:	60da      	str	r2, [r3, #12]
 8005142:	4b9f      	ldr	r3, [pc, #636]	; (80053c0 <LCD_Init+0x3980>)
 8005144:	2280      	movs	r2, #128	; 0x80
 8005146:	615a      	str	r2, [r3, #20]
 8005148:	4b9d      	ldr	r3, [pc, #628]	; (80053c0 <LCD_Init+0x3980>)
 800514a:	2280      	movs	r2, #128	; 0x80
 800514c:	611a      	str	r2, [r3, #16]
 800514e:	4b9c      	ldr	r3, [pc, #624]	; (80053c0 <LCD_Init+0x3980>)
 8005150:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005154:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(0x02);		//参数2 Divider M = 2, PLL = 300/(M+1) = 100MHz
 8005156:	4b9a      	ldr	r3, [pc, #616]	; (80053c0 <LCD_Init+0x3980>)
 8005158:	f44f 7280 	mov.w	r2, #256	; 0x100
 800515c:	611a      	str	r2, [r3, #16]
 800515e:	4b98      	ldr	r3, [pc, #608]	; (80053c0 <LCD_Init+0x3980>)
 8005160:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005164:	615a      	str	r2, [r3, #20]
 8005166:	4b97      	ldr	r3, [pc, #604]	; (80053c4 <LCD_Init+0x3984>)
 8005168:	2202      	movs	r2, #2
 800516a:	60da      	str	r2, [r3, #12]
 800516c:	4b94      	ldr	r3, [pc, #592]	; (80053c0 <LCD_Init+0x3980>)
 800516e:	2280      	movs	r2, #128	; 0x80
 8005170:	615a      	str	r2, [r3, #20]
 8005172:	4b93      	ldr	r3, [pc, #588]	; (80053c0 <LCD_Init+0x3980>)
 8005174:	2280      	movs	r2, #128	; 0x80
 8005176:	611a      	str	r2, [r3, #16]
 8005178:	4b91      	ldr	r3, [pc, #580]	; (80053c0 <LCD_Init+0x3980>)
 800517a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800517e:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(0x04);		//参数3 Validate M and N values   
 8005180:	4b8f      	ldr	r3, [pc, #572]	; (80053c0 <LCD_Init+0x3980>)
 8005182:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005186:	611a      	str	r2, [r3, #16]
 8005188:	4b8d      	ldr	r3, [pc, #564]	; (80053c0 <LCD_Init+0x3980>)
 800518a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800518e:	615a      	str	r2, [r3, #20]
 8005190:	4b8c      	ldr	r3, [pc, #560]	; (80053c4 <LCD_Init+0x3984>)
 8005192:	2204      	movs	r2, #4
 8005194:	60da      	str	r2, [r3, #12]
 8005196:	4b8a      	ldr	r3, [pc, #552]	; (80053c0 <LCD_Init+0x3980>)
 8005198:	2280      	movs	r2, #128	; 0x80
 800519a:	615a      	str	r2, [r3, #20]
 800519c:	4b88      	ldr	r3, [pc, #544]	; (80053c0 <LCD_Init+0x3980>)
 800519e:	2280      	movs	r2, #128	; 0x80
 80051a0:	611a      	str	r2, [r3, #16]
 80051a2:	4b87      	ldr	r3, [pc, #540]	; (80053c0 <LCD_Init+0x3980>)
 80051a4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80051a8:	611a      	str	r2, [r3, #16]
//		delay_us(100);
		HAL_Delay(1);
 80051aa:	2001      	movs	r0, #1
 80051ac:	f000 fe26 	bl	8005dfc <HAL_Delay>
		LCD_WR_REG(0xE0);		// Start PLL command
 80051b0:	20e0      	movs	r0, #224	; 0xe0
 80051b2:	f7fb fbe3 	bl	800097c <LCD_WR_REG>
		LCD_WR_DATA(0x01);		// enable PLL
 80051b6:	4b82      	ldr	r3, [pc, #520]	; (80053c0 <LCD_Init+0x3980>)
 80051b8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80051bc:	611a      	str	r2, [r3, #16]
 80051be:	4b80      	ldr	r3, [pc, #512]	; (80053c0 <LCD_Init+0x3980>)
 80051c0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80051c4:	615a      	str	r2, [r3, #20]
 80051c6:	4b7f      	ldr	r3, [pc, #508]	; (80053c4 <LCD_Init+0x3984>)
 80051c8:	2201      	movs	r2, #1
 80051ca:	60da      	str	r2, [r3, #12]
 80051cc:	4b7c      	ldr	r3, [pc, #496]	; (80053c0 <LCD_Init+0x3980>)
 80051ce:	2280      	movs	r2, #128	; 0x80
 80051d0:	615a      	str	r2, [r3, #20]
 80051d2:	4b7b      	ldr	r3, [pc, #492]	; (80053c0 <LCD_Init+0x3980>)
 80051d4:	2280      	movs	r2, #128	; 0x80
 80051d6:	611a      	str	r2, [r3, #16]
 80051d8:	4b79      	ldr	r3, [pc, #484]	; (80053c0 <LCD_Init+0x3980>)
 80051da:	f44f 7200 	mov.w	r2, #512	; 0x200
 80051de:	611a      	str	r2, [r3, #16]
		HAL_Delay(10);
 80051e0:	200a      	movs	r0, #10
 80051e2:	f000 fe0b 	bl	8005dfc <HAL_Delay>
		LCD_WR_REG(0xE0);		// Start PLL command again
 80051e6:	20e0      	movs	r0, #224	; 0xe0
 80051e8:	f7fb fbc8 	bl	800097c <LCD_WR_REG>
		LCD_WR_DATA(0x03);		// now, use PLL output as system clock	
 80051ec:	4b74      	ldr	r3, [pc, #464]	; (80053c0 <LCD_Init+0x3980>)
 80051ee:	f44f 7280 	mov.w	r2, #256	; 0x100
 80051f2:	611a      	str	r2, [r3, #16]
 80051f4:	4b72      	ldr	r3, [pc, #456]	; (80053c0 <LCD_Init+0x3980>)
 80051f6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80051fa:	615a      	str	r2, [r3, #20]
 80051fc:	4b71      	ldr	r3, [pc, #452]	; (80053c4 <LCD_Init+0x3984>)
 80051fe:	2203      	movs	r2, #3
 8005200:	60da      	str	r2, [r3, #12]
 8005202:	4b6f      	ldr	r3, [pc, #444]	; (80053c0 <LCD_Init+0x3980>)
 8005204:	2280      	movs	r2, #128	; 0x80
 8005206:	615a      	str	r2, [r3, #20]
 8005208:	4b6d      	ldr	r3, [pc, #436]	; (80053c0 <LCD_Init+0x3980>)
 800520a:	2280      	movs	r2, #128	; 0x80
 800520c:	611a      	str	r2, [r3, #16]
 800520e:	4b6c      	ldr	r3, [pc, #432]	; (80053c0 <LCD_Init+0x3980>)
 8005210:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005214:	611a      	str	r2, [r3, #16]
		HAL_Delay(12);
 8005216:	200c      	movs	r0, #12
 8005218:	f000 fdf0 	bl	8005dfc <HAL_Delay>
		LCD_WR_REG(0x01);		//软复位
 800521c:	2001      	movs	r0, #1
 800521e:	f7fb fbad 	bl	800097c <LCD_WR_REG>
		HAL_Delay(10);
 8005222:	200a      	movs	r0, #10
 8005224:	f000 fdea 	bl	8005dfc <HAL_Delay>

		LCD_WR_REG(0xE6);		//设置像素频率,33Mhz
 8005228:	20e6      	movs	r0, #230	; 0xe6
 800522a:	f7fb fba7 	bl	800097c <LCD_WR_REG>
		LCD_WR_DATA(0x2F);
 800522e:	4b64      	ldr	r3, [pc, #400]	; (80053c0 <LCD_Init+0x3980>)
 8005230:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005234:	611a      	str	r2, [r3, #16]
 8005236:	4b62      	ldr	r3, [pc, #392]	; (80053c0 <LCD_Init+0x3980>)
 8005238:	f44f 7200 	mov.w	r2, #512	; 0x200
 800523c:	615a      	str	r2, [r3, #20]
 800523e:	4b61      	ldr	r3, [pc, #388]	; (80053c4 <LCD_Init+0x3984>)
 8005240:	222f      	movs	r2, #47	; 0x2f
 8005242:	60da      	str	r2, [r3, #12]
 8005244:	4b5e      	ldr	r3, [pc, #376]	; (80053c0 <LCD_Init+0x3980>)
 8005246:	2280      	movs	r2, #128	; 0x80
 8005248:	615a      	str	r2, [r3, #20]
 800524a:	4b5d      	ldr	r3, [pc, #372]	; (80053c0 <LCD_Init+0x3980>)
 800524c:	2280      	movs	r2, #128	; 0x80
 800524e:	611a      	str	r2, [r3, #16]
 8005250:	4b5b      	ldr	r3, [pc, #364]	; (80053c0 <LCD_Init+0x3980>)
 8005252:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005256:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(0xFF);
 8005258:	4b59      	ldr	r3, [pc, #356]	; (80053c0 <LCD_Init+0x3980>)
 800525a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800525e:	611a      	str	r2, [r3, #16]
 8005260:	4b57      	ldr	r3, [pc, #348]	; (80053c0 <LCD_Init+0x3980>)
 8005262:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005266:	615a      	str	r2, [r3, #20]
 8005268:	4b56      	ldr	r3, [pc, #344]	; (80053c4 <LCD_Init+0x3984>)
 800526a:	22ff      	movs	r2, #255	; 0xff
 800526c:	60da      	str	r2, [r3, #12]
 800526e:	4b54      	ldr	r3, [pc, #336]	; (80053c0 <LCD_Init+0x3980>)
 8005270:	2280      	movs	r2, #128	; 0x80
 8005272:	615a      	str	r2, [r3, #20]
 8005274:	4b52      	ldr	r3, [pc, #328]	; (80053c0 <LCD_Init+0x3980>)
 8005276:	2280      	movs	r2, #128	; 0x80
 8005278:	611a      	str	r2, [r3, #16]
 800527a:	4b51      	ldr	r3, [pc, #324]	; (80053c0 <LCD_Init+0x3980>)
 800527c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005280:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(0xFF);
 8005282:	4b4f      	ldr	r3, [pc, #316]	; (80053c0 <LCD_Init+0x3980>)
 8005284:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005288:	611a      	str	r2, [r3, #16]
 800528a:	4b4d      	ldr	r3, [pc, #308]	; (80053c0 <LCD_Init+0x3980>)
 800528c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005290:	615a      	str	r2, [r3, #20]
 8005292:	4b4c      	ldr	r3, [pc, #304]	; (80053c4 <LCD_Init+0x3984>)
 8005294:	22ff      	movs	r2, #255	; 0xff
 8005296:	60da      	str	r2, [r3, #12]
 8005298:	4b49      	ldr	r3, [pc, #292]	; (80053c0 <LCD_Init+0x3980>)
 800529a:	2280      	movs	r2, #128	; 0x80
 800529c:	615a      	str	r2, [r3, #20]
 800529e:	4b48      	ldr	r3, [pc, #288]	; (80053c0 <LCD_Init+0x3980>)
 80052a0:	2280      	movs	r2, #128	; 0x80
 80052a2:	611a      	str	r2, [r3, #16]
 80052a4:	4b46      	ldr	r3, [pc, #280]	; (80053c0 <LCD_Init+0x3980>)
 80052a6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80052aa:	611a      	str	r2, [r3, #16]

		LCD_WR_REG(0xB0);		//设置LCD模式
 80052ac:	20b0      	movs	r0, #176	; 0xb0
 80052ae:	f7fb fb65 	bl	800097c <LCD_WR_REG>
		LCD_WR_DATA(0x20);		//24位模式
 80052b2:	4b43      	ldr	r3, [pc, #268]	; (80053c0 <LCD_Init+0x3980>)
 80052b4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80052b8:	611a      	str	r2, [r3, #16]
 80052ba:	4b41      	ldr	r3, [pc, #260]	; (80053c0 <LCD_Init+0x3980>)
 80052bc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80052c0:	615a      	str	r2, [r3, #20]
 80052c2:	4b40      	ldr	r3, [pc, #256]	; (80053c4 <LCD_Init+0x3984>)
 80052c4:	2220      	movs	r2, #32
 80052c6:	60da      	str	r2, [r3, #12]
 80052c8:	4b3d      	ldr	r3, [pc, #244]	; (80053c0 <LCD_Init+0x3980>)
 80052ca:	2280      	movs	r2, #128	; 0x80
 80052cc:	615a      	str	r2, [r3, #20]
 80052ce:	4b3c      	ldr	r3, [pc, #240]	; (80053c0 <LCD_Init+0x3980>)
 80052d0:	2280      	movs	r2, #128	; 0x80
 80052d2:	611a      	str	r2, [r3, #16]
 80052d4:	4b3a      	ldr	r3, [pc, #232]	; (80053c0 <LCD_Init+0x3980>)
 80052d6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80052da:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(0x00);		//TFT 模式 
 80052dc:	4b38      	ldr	r3, [pc, #224]	; (80053c0 <LCD_Init+0x3980>)
 80052de:	f44f 7280 	mov.w	r2, #256	; 0x100
 80052e2:	611a      	str	r2, [r3, #16]
 80052e4:	4b36      	ldr	r3, [pc, #216]	; (80053c0 <LCD_Init+0x3980>)
 80052e6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80052ea:	615a      	str	r2, [r3, #20]
 80052ec:	4b35      	ldr	r3, [pc, #212]	; (80053c4 <LCD_Init+0x3984>)
 80052ee:	2200      	movs	r2, #0
 80052f0:	60da      	str	r2, [r3, #12]
 80052f2:	4b33      	ldr	r3, [pc, #204]	; (80053c0 <LCD_Init+0x3980>)
 80052f4:	2280      	movs	r2, #128	; 0x80
 80052f6:	615a      	str	r2, [r3, #20]
 80052f8:	4b31      	ldr	r3, [pc, #196]	; (80053c0 <LCD_Init+0x3980>)
 80052fa:	2280      	movs	r2, #128	; 0x80
 80052fc:	611a      	str	r2, [r3, #16]
 80052fe:	4b30      	ldr	r3, [pc, #192]	; (80053c0 <LCD_Init+0x3980>)
 8005300:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005304:	611a      	str	r2, [r3, #16]

		LCD_WR_DATA((SSD_HOR_RESOLUTION-1)>>8);		//设置LCD水平像素
 8005306:	4b2e      	ldr	r3, [pc, #184]	; (80053c0 <LCD_Init+0x3980>)
 8005308:	f44f 7280 	mov.w	r2, #256	; 0x100
 800530c:	611a      	str	r2, [r3, #16]
 800530e:	4b2c      	ldr	r3, [pc, #176]	; (80053c0 <LCD_Init+0x3980>)
 8005310:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005314:	615a      	str	r2, [r3, #20]
 8005316:	4b2b      	ldr	r3, [pc, #172]	; (80053c4 <LCD_Init+0x3984>)
 8005318:	2203      	movs	r2, #3
 800531a:	60da      	str	r2, [r3, #12]
 800531c:	4b28      	ldr	r3, [pc, #160]	; (80053c0 <LCD_Init+0x3980>)
 800531e:	2280      	movs	r2, #128	; 0x80
 8005320:	615a      	str	r2, [r3, #20]
 8005322:	4b27      	ldr	r3, [pc, #156]	; (80053c0 <LCD_Init+0x3980>)
 8005324:	2280      	movs	r2, #128	; 0x80
 8005326:	611a      	str	r2, [r3, #16]
 8005328:	4b25      	ldr	r3, [pc, #148]	; (80053c0 <LCD_Init+0x3980>)
 800532a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800532e:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(SSD_HOR_RESOLUTION-1);
 8005330:	4b23      	ldr	r3, [pc, #140]	; (80053c0 <LCD_Init+0x3980>)
 8005332:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005336:	611a      	str	r2, [r3, #16]
 8005338:	4b21      	ldr	r3, [pc, #132]	; (80053c0 <LCD_Init+0x3980>)
 800533a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800533e:	615a      	str	r2, [r3, #20]
 8005340:	4b20      	ldr	r3, [pc, #128]	; (80053c4 <LCD_Init+0x3984>)
 8005342:	f240 321f 	movw	r2, #799	; 0x31f
 8005346:	60da      	str	r2, [r3, #12]
 8005348:	4b1d      	ldr	r3, [pc, #116]	; (80053c0 <LCD_Init+0x3980>)
 800534a:	2280      	movs	r2, #128	; 0x80
 800534c:	615a      	str	r2, [r3, #20]
 800534e:	4b1c      	ldr	r3, [pc, #112]	; (80053c0 <LCD_Init+0x3980>)
 8005350:	2280      	movs	r2, #128	; 0x80
 8005352:	611a      	str	r2, [r3, #16]
 8005354:	4b1a      	ldr	r3, [pc, #104]	; (80053c0 <LCD_Init+0x3980>)
 8005356:	f44f 7200 	mov.w	r2, #512	; 0x200
 800535a:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA((SSD_VER_RESOLUTION-1)>>8);		//设置LCD垂直像素
 800535c:	4b18      	ldr	r3, [pc, #96]	; (80053c0 <LCD_Init+0x3980>)
 800535e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005362:	611a      	str	r2, [r3, #16]
 8005364:	4b16      	ldr	r3, [pc, #88]	; (80053c0 <LCD_Init+0x3980>)
 8005366:	f44f 7200 	mov.w	r2, #512	; 0x200
 800536a:	615a      	str	r2, [r3, #20]
 800536c:	4b15      	ldr	r3, [pc, #84]	; (80053c4 <LCD_Init+0x3984>)
 800536e:	2201      	movs	r2, #1
 8005370:	60da      	str	r2, [r3, #12]
 8005372:	4b13      	ldr	r3, [pc, #76]	; (80053c0 <LCD_Init+0x3980>)
 8005374:	2280      	movs	r2, #128	; 0x80
 8005376:	615a      	str	r2, [r3, #20]
 8005378:	4b11      	ldr	r3, [pc, #68]	; (80053c0 <LCD_Init+0x3980>)
 800537a:	2280      	movs	r2, #128	; 0x80
 800537c:	611a      	str	r2, [r3, #16]
 800537e:	4b10      	ldr	r3, [pc, #64]	; (80053c0 <LCD_Init+0x3980>)
 8005380:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005384:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(SSD_VER_RESOLUTION-1);
 8005386:	4b0e      	ldr	r3, [pc, #56]	; (80053c0 <LCD_Init+0x3980>)
 8005388:	f44f 7280 	mov.w	r2, #256	; 0x100
 800538c:	611a      	str	r2, [r3, #16]
 800538e:	4b0c      	ldr	r3, [pc, #48]	; (80053c0 <LCD_Init+0x3980>)
 8005390:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005394:	615a      	str	r2, [r3, #20]
 8005396:	4b0b      	ldr	r3, [pc, #44]	; (80053c4 <LCD_Init+0x3984>)
 8005398:	f240 12df 	movw	r2, #479	; 0x1df
 800539c:	60da      	str	r2, [r3, #12]
 800539e:	4b08      	ldr	r3, [pc, #32]	; (80053c0 <LCD_Init+0x3980>)
 80053a0:	2280      	movs	r2, #128	; 0x80
 80053a2:	615a      	str	r2, [r3, #20]
 80053a4:	4b06      	ldr	r3, [pc, #24]	; (80053c0 <LCD_Init+0x3980>)
 80053a6:	2280      	movs	r2, #128	; 0x80
 80053a8:	611a      	str	r2, [r3, #16]
 80053aa:	4b05      	ldr	r3, [pc, #20]	; (80053c0 <LCD_Init+0x3980>)
 80053ac:	f44f 7200 	mov.w	r2, #512	; 0x200
 80053b0:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(0x00);		//RGB序列 
 80053b2:	4b03      	ldr	r3, [pc, #12]	; (80053c0 <LCD_Init+0x3980>)
 80053b4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80053b8:	e006      	b.n	80053c8 <LCD_Init+0x3988>
 80053ba:	bf00      	nop
 80053bc:	20000028 	.word	0x20000028
 80053c0:	40011000 	.word	0x40011000
 80053c4:	40010c00 	.word	0x40010c00
 80053c8:	611a      	str	r2, [r3, #16]
 80053ca:	4ba3      	ldr	r3, [pc, #652]	; (8005658 <LCD_Init+0x3c18>)
 80053cc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80053d0:	615a      	str	r2, [r3, #20]
 80053d2:	4ba2      	ldr	r3, [pc, #648]	; (800565c <LCD_Init+0x3c1c>)
 80053d4:	2200      	movs	r2, #0
 80053d6:	60da      	str	r2, [r3, #12]
 80053d8:	4b9f      	ldr	r3, [pc, #636]	; (8005658 <LCD_Init+0x3c18>)
 80053da:	2280      	movs	r2, #128	; 0x80
 80053dc:	615a      	str	r2, [r3, #20]
 80053de:	4b9e      	ldr	r3, [pc, #632]	; (8005658 <LCD_Init+0x3c18>)
 80053e0:	2280      	movs	r2, #128	; 0x80
 80053e2:	611a      	str	r2, [r3, #16]
 80053e4:	4b9c      	ldr	r3, [pc, #624]	; (8005658 <LCD_Init+0x3c18>)
 80053e6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80053ea:	611a      	str	r2, [r3, #16]

		LCD_WR_REG(0xB4);		//Set horizontal period
 80053ec:	20b4      	movs	r0, #180	; 0xb4
 80053ee:	f7fb fac5 	bl	800097c <LCD_WR_REG>
		LCD_WR_DATA((SSD_HT-1)>>8);
 80053f2:	4b99      	ldr	r3, [pc, #612]	; (8005658 <LCD_Init+0x3c18>)
 80053f4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80053f8:	611a      	str	r2, [r3, #16]
 80053fa:	4b97      	ldr	r3, [pc, #604]	; (8005658 <LCD_Init+0x3c18>)
 80053fc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005400:	615a      	str	r2, [r3, #20]
 8005402:	4b96      	ldr	r3, [pc, #600]	; (800565c <LCD_Init+0x3c1c>)
 8005404:	2204      	movs	r2, #4
 8005406:	60da      	str	r2, [r3, #12]
 8005408:	4b93      	ldr	r3, [pc, #588]	; (8005658 <LCD_Init+0x3c18>)
 800540a:	2280      	movs	r2, #128	; 0x80
 800540c:	615a      	str	r2, [r3, #20]
 800540e:	4b92      	ldr	r3, [pc, #584]	; (8005658 <LCD_Init+0x3c18>)
 8005410:	2280      	movs	r2, #128	; 0x80
 8005412:	611a      	str	r2, [r3, #16]
 8005414:	4b90      	ldr	r3, [pc, #576]	; (8005658 <LCD_Init+0x3c18>)
 8005416:	f44f 7200 	mov.w	r2, #512	; 0x200
 800541a:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(SSD_HT-1);
 800541c:	4b8e      	ldr	r3, [pc, #568]	; (8005658 <LCD_Init+0x3c18>)
 800541e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005422:	611a      	str	r2, [r3, #16]
 8005424:	4b8c      	ldr	r3, [pc, #560]	; (8005658 <LCD_Init+0x3c18>)
 8005426:	f44f 7200 	mov.w	r2, #512	; 0x200
 800542a:	615a      	str	r2, [r3, #20]
 800542c:	4b8b      	ldr	r3, [pc, #556]	; (800565c <LCD_Init+0x3c1c>)
 800542e:	f240 421f 	movw	r2, #1055	; 0x41f
 8005432:	60da      	str	r2, [r3, #12]
 8005434:	4b88      	ldr	r3, [pc, #544]	; (8005658 <LCD_Init+0x3c18>)
 8005436:	2280      	movs	r2, #128	; 0x80
 8005438:	615a      	str	r2, [r3, #20]
 800543a:	4b87      	ldr	r3, [pc, #540]	; (8005658 <LCD_Init+0x3c18>)
 800543c:	2280      	movs	r2, #128	; 0x80
 800543e:	611a      	str	r2, [r3, #16]
 8005440:	4b85      	ldr	r3, [pc, #532]	; (8005658 <LCD_Init+0x3c18>)
 8005442:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005446:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(SSD_HPS>>8);
 8005448:	4b83      	ldr	r3, [pc, #524]	; (8005658 <LCD_Init+0x3c18>)
 800544a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800544e:	611a      	str	r2, [r3, #16]
 8005450:	4b81      	ldr	r3, [pc, #516]	; (8005658 <LCD_Init+0x3c18>)
 8005452:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005456:	615a      	str	r2, [r3, #20]
 8005458:	4b80      	ldr	r3, [pc, #512]	; (800565c <LCD_Init+0x3c1c>)
 800545a:	2200      	movs	r2, #0
 800545c:	60da      	str	r2, [r3, #12]
 800545e:	4b7e      	ldr	r3, [pc, #504]	; (8005658 <LCD_Init+0x3c18>)
 8005460:	2280      	movs	r2, #128	; 0x80
 8005462:	615a      	str	r2, [r3, #20]
 8005464:	4b7c      	ldr	r3, [pc, #496]	; (8005658 <LCD_Init+0x3c18>)
 8005466:	2280      	movs	r2, #128	; 0x80
 8005468:	611a      	str	r2, [r3, #16]
 800546a:	4b7b      	ldr	r3, [pc, #492]	; (8005658 <LCD_Init+0x3c18>)
 800546c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005470:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(SSD_HPS);
 8005472:	4b79      	ldr	r3, [pc, #484]	; (8005658 <LCD_Init+0x3c18>)
 8005474:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005478:	611a      	str	r2, [r3, #16]
 800547a:	4b77      	ldr	r3, [pc, #476]	; (8005658 <LCD_Init+0x3c18>)
 800547c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005480:	615a      	str	r2, [r3, #20]
 8005482:	4b76      	ldr	r3, [pc, #472]	; (800565c <LCD_Init+0x3c1c>)
 8005484:	222e      	movs	r2, #46	; 0x2e
 8005486:	60da      	str	r2, [r3, #12]
 8005488:	4b73      	ldr	r3, [pc, #460]	; (8005658 <LCD_Init+0x3c18>)
 800548a:	2280      	movs	r2, #128	; 0x80
 800548c:	615a      	str	r2, [r3, #20]
 800548e:	4b72      	ldr	r3, [pc, #456]	; (8005658 <LCD_Init+0x3c18>)
 8005490:	2280      	movs	r2, #128	; 0x80
 8005492:	611a      	str	r2, [r3, #16]
 8005494:	4b70      	ldr	r3, [pc, #448]	; (8005658 <LCD_Init+0x3c18>)
 8005496:	f44f 7200 	mov.w	r2, #512	; 0x200
 800549a:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(SSD_HOR_PULSE_WIDTH-1);
 800549c:	4b6e      	ldr	r3, [pc, #440]	; (8005658 <LCD_Init+0x3c18>)
 800549e:	f44f 7280 	mov.w	r2, #256	; 0x100
 80054a2:	611a      	str	r2, [r3, #16]
 80054a4:	4b6c      	ldr	r3, [pc, #432]	; (8005658 <LCD_Init+0x3c18>)
 80054a6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80054aa:	615a      	str	r2, [r3, #20]
 80054ac:	4b6b      	ldr	r3, [pc, #428]	; (800565c <LCD_Init+0x3c1c>)
 80054ae:	2200      	movs	r2, #0
 80054b0:	60da      	str	r2, [r3, #12]
 80054b2:	4b69      	ldr	r3, [pc, #420]	; (8005658 <LCD_Init+0x3c18>)
 80054b4:	2280      	movs	r2, #128	; 0x80
 80054b6:	615a      	str	r2, [r3, #20]
 80054b8:	4b67      	ldr	r3, [pc, #412]	; (8005658 <LCD_Init+0x3c18>)
 80054ba:	2280      	movs	r2, #128	; 0x80
 80054bc:	611a      	str	r2, [r3, #16]
 80054be:	4b66      	ldr	r3, [pc, #408]	; (8005658 <LCD_Init+0x3c18>)
 80054c0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80054c4:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(0x00);
 80054c6:	4b64      	ldr	r3, [pc, #400]	; (8005658 <LCD_Init+0x3c18>)
 80054c8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80054cc:	611a      	str	r2, [r3, #16]
 80054ce:	4b62      	ldr	r3, [pc, #392]	; (8005658 <LCD_Init+0x3c18>)
 80054d0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80054d4:	615a      	str	r2, [r3, #20]
 80054d6:	4b61      	ldr	r3, [pc, #388]	; (800565c <LCD_Init+0x3c1c>)
 80054d8:	2200      	movs	r2, #0
 80054da:	60da      	str	r2, [r3, #12]
 80054dc:	4b5e      	ldr	r3, [pc, #376]	; (8005658 <LCD_Init+0x3c18>)
 80054de:	2280      	movs	r2, #128	; 0x80
 80054e0:	615a      	str	r2, [r3, #20]
 80054e2:	4b5d      	ldr	r3, [pc, #372]	; (8005658 <LCD_Init+0x3c18>)
 80054e4:	2280      	movs	r2, #128	; 0x80
 80054e6:	611a      	str	r2, [r3, #16]
 80054e8:	4b5b      	ldr	r3, [pc, #364]	; (8005658 <LCD_Init+0x3c18>)
 80054ea:	f44f 7200 	mov.w	r2, #512	; 0x200
 80054ee:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(0x00);
 80054f0:	4b59      	ldr	r3, [pc, #356]	; (8005658 <LCD_Init+0x3c18>)
 80054f2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80054f6:	611a      	str	r2, [r3, #16]
 80054f8:	4b57      	ldr	r3, [pc, #348]	; (8005658 <LCD_Init+0x3c18>)
 80054fa:	f44f 7200 	mov.w	r2, #512	; 0x200
 80054fe:	615a      	str	r2, [r3, #20]
 8005500:	4b56      	ldr	r3, [pc, #344]	; (800565c <LCD_Init+0x3c1c>)
 8005502:	2200      	movs	r2, #0
 8005504:	60da      	str	r2, [r3, #12]
 8005506:	4b54      	ldr	r3, [pc, #336]	; (8005658 <LCD_Init+0x3c18>)
 8005508:	2280      	movs	r2, #128	; 0x80
 800550a:	615a      	str	r2, [r3, #20]
 800550c:	4b52      	ldr	r3, [pc, #328]	; (8005658 <LCD_Init+0x3c18>)
 800550e:	2280      	movs	r2, #128	; 0x80
 8005510:	611a      	str	r2, [r3, #16]
 8005512:	4b51      	ldr	r3, [pc, #324]	; (8005658 <LCD_Init+0x3c18>)
 8005514:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005518:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(0x00);
 800551a:	4b4f      	ldr	r3, [pc, #316]	; (8005658 <LCD_Init+0x3c18>)
 800551c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005520:	611a      	str	r2, [r3, #16]
 8005522:	4b4d      	ldr	r3, [pc, #308]	; (8005658 <LCD_Init+0x3c18>)
 8005524:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005528:	615a      	str	r2, [r3, #20]
 800552a:	4b4c      	ldr	r3, [pc, #304]	; (800565c <LCD_Init+0x3c1c>)
 800552c:	2200      	movs	r2, #0
 800552e:	60da      	str	r2, [r3, #12]
 8005530:	4b49      	ldr	r3, [pc, #292]	; (8005658 <LCD_Init+0x3c18>)
 8005532:	2280      	movs	r2, #128	; 0x80
 8005534:	615a      	str	r2, [r3, #20]
 8005536:	4b48      	ldr	r3, [pc, #288]	; (8005658 <LCD_Init+0x3c18>)
 8005538:	2280      	movs	r2, #128	; 0x80
 800553a:	611a      	str	r2, [r3, #16]
 800553c:	4b46      	ldr	r3, [pc, #280]	; (8005658 <LCD_Init+0x3c18>)
 800553e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005542:	611a      	str	r2, [r3, #16]
		LCD_WR_REG(0xB6);		//Set vertical period
 8005544:	20b6      	movs	r0, #182	; 0xb6
 8005546:	f7fb fa19 	bl	800097c <LCD_WR_REG>
		LCD_WR_DATA((SSD_VT-1)>>8);
 800554a:	4b43      	ldr	r3, [pc, #268]	; (8005658 <LCD_Init+0x3c18>)
 800554c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005550:	611a      	str	r2, [r3, #16]
 8005552:	4b41      	ldr	r3, [pc, #260]	; (8005658 <LCD_Init+0x3c18>)
 8005554:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005558:	615a      	str	r2, [r3, #20]
 800555a:	4b40      	ldr	r3, [pc, #256]	; (800565c <LCD_Init+0x3c1c>)
 800555c:	2202      	movs	r2, #2
 800555e:	60da      	str	r2, [r3, #12]
 8005560:	4b3d      	ldr	r3, [pc, #244]	; (8005658 <LCD_Init+0x3c18>)
 8005562:	2280      	movs	r2, #128	; 0x80
 8005564:	615a      	str	r2, [r3, #20]
 8005566:	4b3c      	ldr	r3, [pc, #240]	; (8005658 <LCD_Init+0x3c18>)
 8005568:	2280      	movs	r2, #128	; 0x80
 800556a:	611a      	str	r2, [r3, #16]
 800556c:	4b3a      	ldr	r3, [pc, #232]	; (8005658 <LCD_Init+0x3c18>)
 800556e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005572:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(SSD_VT-1);
 8005574:	4b38      	ldr	r3, [pc, #224]	; (8005658 <LCD_Init+0x3c18>)
 8005576:	f44f 7280 	mov.w	r2, #256	; 0x100
 800557a:	611a      	str	r2, [r3, #16]
 800557c:	4b36      	ldr	r3, [pc, #216]	; (8005658 <LCD_Init+0x3c18>)
 800557e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005582:	615a      	str	r2, [r3, #20]
 8005584:	4b35      	ldr	r3, [pc, #212]	; (800565c <LCD_Init+0x3c1c>)
 8005586:	f44f 7203 	mov.w	r2, #524	; 0x20c
 800558a:	60da      	str	r2, [r3, #12]
 800558c:	4b32      	ldr	r3, [pc, #200]	; (8005658 <LCD_Init+0x3c18>)
 800558e:	2280      	movs	r2, #128	; 0x80
 8005590:	615a      	str	r2, [r3, #20]
 8005592:	4b31      	ldr	r3, [pc, #196]	; (8005658 <LCD_Init+0x3c18>)
 8005594:	2280      	movs	r2, #128	; 0x80
 8005596:	611a      	str	r2, [r3, #16]
 8005598:	4b2f      	ldr	r3, [pc, #188]	; (8005658 <LCD_Init+0x3c18>)
 800559a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800559e:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(SSD_VPS>>8);
 80055a0:	4b2d      	ldr	r3, [pc, #180]	; (8005658 <LCD_Init+0x3c18>)
 80055a2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80055a6:	611a      	str	r2, [r3, #16]
 80055a8:	4b2b      	ldr	r3, [pc, #172]	; (8005658 <LCD_Init+0x3c18>)
 80055aa:	f44f 7200 	mov.w	r2, #512	; 0x200
 80055ae:	615a      	str	r2, [r3, #20]
 80055b0:	4b2a      	ldr	r3, [pc, #168]	; (800565c <LCD_Init+0x3c1c>)
 80055b2:	2200      	movs	r2, #0
 80055b4:	60da      	str	r2, [r3, #12]
 80055b6:	4b28      	ldr	r3, [pc, #160]	; (8005658 <LCD_Init+0x3c18>)
 80055b8:	2280      	movs	r2, #128	; 0x80
 80055ba:	615a      	str	r2, [r3, #20]
 80055bc:	4b26      	ldr	r3, [pc, #152]	; (8005658 <LCD_Init+0x3c18>)
 80055be:	2280      	movs	r2, #128	; 0x80
 80055c0:	611a      	str	r2, [r3, #16]
 80055c2:	4b25      	ldr	r3, [pc, #148]	; (8005658 <LCD_Init+0x3c18>)
 80055c4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80055c8:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(SSD_VPS);
 80055ca:	4b23      	ldr	r3, [pc, #140]	; (8005658 <LCD_Init+0x3c18>)
 80055cc:	f44f 7280 	mov.w	r2, #256	; 0x100
 80055d0:	611a      	str	r2, [r3, #16]
 80055d2:	4b21      	ldr	r3, [pc, #132]	; (8005658 <LCD_Init+0x3c18>)
 80055d4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80055d8:	615a      	str	r2, [r3, #20]
 80055da:	4b20      	ldr	r3, [pc, #128]	; (800565c <LCD_Init+0x3c1c>)
 80055dc:	2217      	movs	r2, #23
 80055de:	60da      	str	r2, [r3, #12]
 80055e0:	4b1d      	ldr	r3, [pc, #116]	; (8005658 <LCD_Init+0x3c18>)
 80055e2:	2280      	movs	r2, #128	; 0x80
 80055e4:	615a      	str	r2, [r3, #20]
 80055e6:	4b1c      	ldr	r3, [pc, #112]	; (8005658 <LCD_Init+0x3c18>)
 80055e8:	2280      	movs	r2, #128	; 0x80
 80055ea:	611a      	str	r2, [r3, #16]
 80055ec:	4b1a      	ldr	r3, [pc, #104]	; (8005658 <LCD_Init+0x3c18>)
 80055ee:	f44f 7200 	mov.w	r2, #512	; 0x200
 80055f2:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(SSD_VER_FRONT_PORCH-1);
 80055f4:	4b18      	ldr	r3, [pc, #96]	; (8005658 <LCD_Init+0x3c18>)
 80055f6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80055fa:	611a      	str	r2, [r3, #16]
 80055fc:	4b16      	ldr	r3, [pc, #88]	; (8005658 <LCD_Init+0x3c18>)
 80055fe:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005602:	615a      	str	r2, [r3, #20]
 8005604:	4b15      	ldr	r3, [pc, #84]	; (800565c <LCD_Init+0x3c1c>)
 8005606:	2215      	movs	r2, #21
 8005608:	60da      	str	r2, [r3, #12]
 800560a:	4b13      	ldr	r3, [pc, #76]	; (8005658 <LCD_Init+0x3c18>)
 800560c:	2280      	movs	r2, #128	; 0x80
 800560e:	615a      	str	r2, [r3, #20]
 8005610:	4b11      	ldr	r3, [pc, #68]	; (8005658 <LCD_Init+0x3c18>)
 8005612:	2280      	movs	r2, #128	; 0x80
 8005614:	611a      	str	r2, [r3, #16]
 8005616:	4b10      	ldr	r3, [pc, #64]	; (8005658 <LCD_Init+0x3c18>)
 8005618:	f44f 7200 	mov.w	r2, #512	; 0x200
 800561c:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(0x00);
 800561e:	4b0e      	ldr	r3, [pc, #56]	; (8005658 <LCD_Init+0x3c18>)
 8005620:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005624:	611a      	str	r2, [r3, #16]
 8005626:	4b0c      	ldr	r3, [pc, #48]	; (8005658 <LCD_Init+0x3c18>)
 8005628:	f44f 7200 	mov.w	r2, #512	; 0x200
 800562c:	615a      	str	r2, [r3, #20]
 800562e:	4b0b      	ldr	r3, [pc, #44]	; (800565c <LCD_Init+0x3c1c>)
 8005630:	2200      	movs	r2, #0
 8005632:	60da      	str	r2, [r3, #12]
 8005634:	4b08      	ldr	r3, [pc, #32]	; (8005658 <LCD_Init+0x3c18>)
 8005636:	2280      	movs	r2, #128	; 0x80
 8005638:	615a      	str	r2, [r3, #20]
 800563a:	4b07      	ldr	r3, [pc, #28]	; (8005658 <LCD_Init+0x3c18>)
 800563c:	2280      	movs	r2, #128	; 0x80
 800563e:	611a      	str	r2, [r3, #16]
 8005640:	4b05      	ldr	r3, [pc, #20]	; (8005658 <LCD_Init+0x3c18>)
 8005642:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005646:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(0x00);
 8005648:	4b03      	ldr	r3, [pc, #12]	; (8005658 <LCD_Init+0x3c18>)
 800564a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800564e:	611a      	str	r2, [r3, #16]
 8005650:	4b01      	ldr	r3, [pc, #4]	; (8005658 <LCD_Init+0x3c18>)
 8005652:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005656:	e003      	b.n	8005660 <LCD_Init+0x3c20>
 8005658:	40011000 	.word	0x40011000
 800565c:	40010c00 	.word	0x40010c00
 8005660:	615a      	str	r2, [r3, #20]
 8005662:	4b8b      	ldr	r3, [pc, #556]	; (8005890 <LCD_Init+0x3e50>)
 8005664:	2200      	movs	r2, #0
 8005666:	60da      	str	r2, [r3, #12]
 8005668:	4b8a      	ldr	r3, [pc, #552]	; (8005894 <LCD_Init+0x3e54>)
 800566a:	2280      	movs	r2, #128	; 0x80
 800566c:	615a      	str	r2, [r3, #20]
 800566e:	4b89      	ldr	r3, [pc, #548]	; (8005894 <LCD_Init+0x3e54>)
 8005670:	2280      	movs	r2, #128	; 0x80
 8005672:	611a      	str	r2, [r3, #16]
 8005674:	4b87      	ldr	r3, [pc, #540]	; (8005894 <LCD_Init+0x3e54>)
 8005676:	f44f 7200 	mov.w	r2, #512	; 0x200
 800567a:	611a      	str	r2, [r3, #16]

		LCD_WR_REG(0xF0);	//设置SSD1963与CPU接口为16bit  
 800567c:	20f0      	movs	r0, #240	; 0xf0
 800567e:	f7fb f97d 	bl	800097c <LCD_WR_REG>
		LCD_WR_DATA(0x03);	//16-bit(565 format) data for 16bpp 
 8005682:	4b84      	ldr	r3, [pc, #528]	; (8005894 <LCD_Init+0x3e54>)
 8005684:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005688:	611a      	str	r2, [r3, #16]
 800568a:	4b82      	ldr	r3, [pc, #520]	; (8005894 <LCD_Init+0x3e54>)
 800568c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005690:	615a      	str	r2, [r3, #20]
 8005692:	4b7f      	ldr	r3, [pc, #508]	; (8005890 <LCD_Init+0x3e50>)
 8005694:	2203      	movs	r2, #3
 8005696:	60da      	str	r2, [r3, #12]
 8005698:	4b7e      	ldr	r3, [pc, #504]	; (8005894 <LCD_Init+0x3e54>)
 800569a:	2280      	movs	r2, #128	; 0x80
 800569c:	615a      	str	r2, [r3, #20]
 800569e:	4b7d      	ldr	r3, [pc, #500]	; (8005894 <LCD_Init+0x3e54>)
 80056a0:	2280      	movs	r2, #128	; 0x80
 80056a2:	611a      	str	r2, [r3, #16]
 80056a4:	4b7b      	ldr	r3, [pc, #492]	; (8005894 <LCD_Init+0x3e54>)
 80056a6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80056aa:	611a      	str	r2, [r3, #16]

		LCD_WR_REG(0x29);	//开启显示
 80056ac:	2029      	movs	r0, #41	; 0x29
 80056ae:	f7fb f965 	bl	800097c <LCD_WR_REG>
		//设置PWM输出  背光通过占空比可调 
		LCD_WR_REG(0xD0);	//设置自动白平衡DBC
 80056b2:	20d0      	movs	r0, #208	; 0xd0
 80056b4:	f7fb f962 	bl	800097c <LCD_WR_REG>
		LCD_WR_DATA(0x00);	//disable
 80056b8:	4b76      	ldr	r3, [pc, #472]	; (8005894 <LCD_Init+0x3e54>)
 80056ba:	f44f 7280 	mov.w	r2, #256	; 0x100
 80056be:	611a      	str	r2, [r3, #16]
 80056c0:	4b74      	ldr	r3, [pc, #464]	; (8005894 <LCD_Init+0x3e54>)
 80056c2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80056c6:	615a      	str	r2, [r3, #20]
 80056c8:	4b71      	ldr	r3, [pc, #452]	; (8005890 <LCD_Init+0x3e50>)
 80056ca:	2200      	movs	r2, #0
 80056cc:	60da      	str	r2, [r3, #12]
 80056ce:	4b71      	ldr	r3, [pc, #452]	; (8005894 <LCD_Init+0x3e54>)
 80056d0:	2280      	movs	r2, #128	; 0x80
 80056d2:	615a      	str	r2, [r3, #20]
 80056d4:	4b6f      	ldr	r3, [pc, #444]	; (8005894 <LCD_Init+0x3e54>)
 80056d6:	2280      	movs	r2, #128	; 0x80
 80056d8:	611a      	str	r2, [r3, #16]
 80056da:	4b6e      	ldr	r3, [pc, #440]	; (8005894 <LCD_Init+0x3e54>)
 80056dc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80056e0:	611a      	str	r2, [r3, #16]

		LCD_WR_REG(0xBE);	//配置PWM输出
 80056e2:	20be      	movs	r0, #190	; 0xbe
 80056e4:	f7fb f94a 	bl	800097c <LCD_WR_REG>
		LCD_WR_DATA(0x05);	//1设置PWM频率
 80056e8:	4b6a      	ldr	r3, [pc, #424]	; (8005894 <LCD_Init+0x3e54>)
 80056ea:	f44f 7280 	mov.w	r2, #256	; 0x100
 80056ee:	611a      	str	r2, [r3, #16]
 80056f0:	4b68      	ldr	r3, [pc, #416]	; (8005894 <LCD_Init+0x3e54>)
 80056f2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80056f6:	615a      	str	r2, [r3, #20]
 80056f8:	4b65      	ldr	r3, [pc, #404]	; (8005890 <LCD_Init+0x3e50>)
 80056fa:	2205      	movs	r2, #5
 80056fc:	60da      	str	r2, [r3, #12]
 80056fe:	4b65      	ldr	r3, [pc, #404]	; (8005894 <LCD_Init+0x3e54>)
 8005700:	2280      	movs	r2, #128	; 0x80
 8005702:	615a      	str	r2, [r3, #20]
 8005704:	4b63      	ldr	r3, [pc, #396]	; (8005894 <LCD_Init+0x3e54>)
 8005706:	2280      	movs	r2, #128	; 0x80
 8005708:	611a      	str	r2, [r3, #16]
 800570a:	4b62      	ldr	r3, [pc, #392]	; (8005894 <LCD_Init+0x3e54>)
 800570c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005710:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(0xFE);	//2设置PWM占空比
 8005712:	4b60      	ldr	r3, [pc, #384]	; (8005894 <LCD_Init+0x3e54>)
 8005714:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005718:	611a      	str	r2, [r3, #16]
 800571a:	4b5e      	ldr	r3, [pc, #376]	; (8005894 <LCD_Init+0x3e54>)
 800571c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005720:	615a      	str	r2, [r3, #20]
 8005722:	4b5b      	ldr	r3, [pc, #364]	; (8005890 <LCD_Init+0x3e50>)
 8005724:	22fe      	movs	r2, #254	; 0xfe
 8005726:	60da      	str	r2, [r3, #12]
 8005728:	4b5a      	ldr	r3, [pc, #360]	; (8005894 <LCD_Init+0x3e54>)
 800572a:	2280      	movs	r2, #128	; 0x80
 800572c:	615a      	str	r2, [r3, #20]
 800572e:	4b59      	ldr	r3, [pc, #356]	; (8005894 <LCD_Init+0x3e54>)
 8005730:	2280      	movs	r2, #128	; 0x80
 8005732:	611a      	str	r2, [r3, #16]
 8005734:	4b57      	ldr	r3, [pc, #348]	; (8005894 <LCD_Init+0x3e54>)
 8005736:	f44f 7200 	mov.w	r2, #512	; 0x200
 800573a:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(0x01);	//3设置C
 800573c:	4b55      	ldr	r3, [pc, #340]	; (8005894 <LCD_Init+0x3e54>)
 800573e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005742:	611a      	str	r2, [r3, #16]
 8005744:	4b53      	ldr	r3, [pc, #332]	; (8005894 <LCD_Init+0x3e54>)
 8005746:	f44f 7200 	mov.w	r2, #512	; 0x200
 800574a:	615a      	str	r2, [r3, #20]
 800574c:	4b50      	ldr	r3, [pc, #320]	; (8005890 <LCD_Init+0x3e50>)
 800574e:	2201      	movs	r2, #1
 8005750:	60da      	str	r2, [r3, #12]
 8005752:	4b50      	ldr	r3, [pc, #320]	; (8005894 <LCD_Init+0x3e54>)
 8005754:	2280      	movs	r2, #128	; 0x80
 8005756:	615a      	str	r2, [r3, #20]
 8005758:	4b4e      	ldr	r3, [pc, #312]	; (8005894 <LCD_Init+0x3e54>)
 800575a:	2280      	movs	r2, #128	; 0x80
 800575c:	611a      	str	r2, [r3, #16]
 800575e:	4b4d      	ldr	r3, [pc, #308]	; (8005894 <LCD_Init+0x3e54>)
 8005760:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005764:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(0x00);	//4设置D
 8005766:	4b4b      	ldr	r3, [pc, #300]	; (8005894 <LCD_Init+0x3e54>)
 8005768:	f44f 7280 	mov.w	r2, #256	; 0x100
 800576c:	611a      	str	r2, [r3, #16]
 800576e:	4b49      	ldr	r3, [pc, #292]	; (8005894 <LCD_Init+0x3e54>)
 8005770:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005774:	615a      	str	r2, [r3, #20]
 8005776:	4b46      	ldr	r3, [pc, #280]	; (8005890 <LCD_Init+0x3e50>)
 8005778:	2200      	movs	r2, #0
 800577a:	60da      	str	r2, [r3, #12]
 800577c:	4b45      	ldr	r3, [pc, #276]	; (8005894 <LCD_Init+0x3e54>)
 800577e:	2280      	movs	r2, #128	; 0x80
 8005780:	615a      	str	r2, [r3, #20]
 8005782:	4b44      	ldr	r3, [pc, #272]	; (8005894 <LCD_Init+0x3e54>)
 8005784:	2280      	movs	r2, #128	; 0x80
 8005786:	611a      	str	r2, [r3, #16]
 8005788:	4b42      	ldr	r3, [pc, #264]	; (8005894 <LCD_Init+0x3e54>)
 800578a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800578e:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(0x00);	//5设置E 
 8005790:	4b40      	ldr	r3, [pc, #256]	; (8005894 <LCD_Init+0x3e54>)
 8005792:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005796:	611a      	str	r2, [r3, #16]
 8005798:	4b3e      	ldr	r3, [pc, #248]	; (8005894 <LCD_Init+0x3e54>)
 800579a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800579e:	615a      	str	r2, [r3, #20]
 80057a0:	4b3b      	ldr	r3, [pc, #236]	; (8005890 <LCD_Init+0x3e50>)
 80057a2:	2200      	movs	r2, #0
 80057a4:	60da      	str	r2, [r3, #12]
 80057a6:	4b3b      	ldr	r3, [pc, #236]	; (8005894 <LCD_Init+0x3e54>)
 80057a8:	2280      	movs	r2, #128	; 0x80
 80057aa:	615a      	str	r2, [r3, #20]
 80057ac:	4b39      	ldr	r3, [pc, #228]	; (8005894 <LCD_Init+0x3e54>)
 80057ae:	2280      	movs	r2, #128	; 0x80
 80057b0:	611a      	str	r2, [r3, #16]
 80057b2:	4b38      	ldr	r3, [pc, #224]	; (8005894 <LCD_Init+0x3e54>)
 80057b4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80057b8:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(0x00);	//6设置F 
 80057ba:	4b36      	ldr	r3, [pc, #216]	; (8005894 <LCD_Init+0x3e54>)
 80057bc:	f44f 7280 	mov.w	r2, #256	; 0x100
 80057c0:	611a      	str	r2, [r3, #16]
 80057c2:	4b34      	ldr	r3, [pc, #208]	; (8005894 <LCD_Init+0x3e54>)
 80057c4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80057c8:	615a      	str	r2, [r3, #20]
 80057ca:	4b31      	ldr	r3, [pc, #196]	; (8005890 <LCD_Init+0x3e50>)
 80057cc:	2200      	movs	r2, #0
 80057ce:	60da      	str	r2, [r3, #12]
 80057d0:	4b30      	ldr	r3, [pc, #192]	; (8005894 <LCD_Init+0x3e54>)
 80057d2:	2280      	movs	r2, #128	; 0x80
 80057d4:	615a      	str	r2, [r3, #20]
 80057d6:	4b2f      	ldr	r3, [pc, #188]	; (8005894 <LCD_Init+0x3e54>)
 80057d8:	2280      	movs	r2, #128	; 0x80
 80057da:	611a      	str	r2, [r3, #16]
 80057dc:	4b2d      	ldr	r3, [pc, #180]	; (8005894 <LCD_Init+0x3e54>)
 80057de:	f44f 7200 	mov.w	r2, #512	; 0x200
 80057e2:	611a      	str	r2, [r3, #16]

		LCD_WR_REG(0xB8);	//设置GPIO配置
 80057e4:	20b8      	movs	r0, #184	; 0xb8
 80057e6:	f7fb f8c9 	bl	800097c <LCD_WR_REG>
		LCD_WR_DATA(0x03);	//2个IO口设置成输出
 80057ea:	4b2a      	ldr	r3, [pc, #168]	; (8005894 <LCD_Init+0x3e54>)
 80057ec:	f44f 7280 	mov.w	r2, #256	; 0x100
 80057f0:	611a      	str	r2, [r3, #16]
 80057f2:	4b28      	ldr	r3, [pc, #160]	; (8005894 <LCD_Init+0x3e54>)
 80057f4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80057f8:	615a      	str	r2, [r3, #20]
 80057fa:	4b25      	ldr	r3, [pc, #148]	; (8005890 <LCD_Init+0x3e50>)
 80057fc:	2203      	movs	r2, #3
 80057fe:	60da      	str	r2, [r3, #12]
 8005800:	4b24      	ldr	r3, [pc, #144]	; (8005894 <LCD_Init+0x3e54>)
 8005802:	2280      	movs	r2, #128	; 0x80
 8005804:	615a      	str	r2, [r3, #20]
 8005806:	4b23      	ldr	r3, [pc, #140]	; (8005894 <LCD_Init+0x3e54>)
 8005808:	2280      	movs	r2, #128	; 0x80
 800580a:	611a      	str	r2, [r3, #16]
 800580c:	4b21      	ldr	r3, [pc, #132]	; (8005894 <LCD_Init+0x3e54>)
 800580e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005812:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(0x01);	//GPIO使用正常的IO功能 
 8005814:	4b1f      	ldr	r3, [pc, #124]	; (8005894 <LCD_Init+0x3e54>)
 8005816:	f44f 7280 	mov.w	r2, #256	; 0x100
 800581a:	611a      	str	r2, [r3, #16]
 800581c:	4b1d      	ldr	r3, [pc, #116]	; (8005894 <LCD_Init+0x3e54>)
 800581e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005822:	615a      	str	r2, [r3, #20]
 8005824:	4b1a      	ldr	r3, [pc, #104]	; (8005890 <LCD_Init+0x3e50>)
 8005826:	2201      	movs	r2, #1
 8005828:	60da      	str	r2, [r3, #12]
 800582a:	4b1a      	ldr	r3, [pc, #104]	; (8005894 <LCD_Init+0x3e54>)
 800582c:	2280      	movs	r2, #128	; 0x80
 800582e:	615a      	str	r2, [r3, #20]
 8005830:	4b18      	ldr	r3, [pc, #96]	; (8005894 <LCD_Init+0x3e54>)
 8005832:	2280      	movs	r2, #128	; 0x80
 8005834:	611a      	str	r2, [r3, #16]
 8005836:	4b17      	ldr	r3, [pc, #92]	; (8005894 <LCD_Init+0x3e54>)
 8005838:	f44f 7200 	mov.w	r2, #512	; 0x200
 800583c:	611a      	str	r2, [r3, #16]
		LCD_WR_REG(0xBA);
 800583e:	20ba      	movs	r0, #186	; 0xba
 8005840:	f7fb f89c 	bl	800097c <LCD_WR_REG>
		LCD_WR_DATA(0X01);	//GPIO[1:0]=01,控制LCD方向
 8005844:	4b13      	ldr	r3, [pc, #76]	; (8005894 <LCD_Init+0x3e54>)
 8005846:	f44f 7280 	mov.w	r2, #256	; 0x100
 800584a:	611a      	str	r2, [r3, #16]
 800584c:	4b11      	ldr	r3, [pc, #68]	; (8005894 <LCD_Init+0x3e54>)
 800584e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005852:	615a      	str	r2, [r3, #20]
 8005854:	4b0e      	ldr	r3, [pc, #56]	; (8005890 <LCD_Init+0x3e50>)
 8005856:	2201      	movs	r2, #1
 8005858:	60da      	str	r2, [r3, #12]
 800585a:	4b0e      	ldr	r3, [pc, #56]	; (8005894 <LCD_Init+0x3e54>)
 800585c:	2280      	movs	r2, #128	; 0x80
 800585e:	615a      	str	r2, [r3, #20]
 8005860:	4b0c      	ldr	r3, [pc, #48]	; (8005894 <LCD_Init+0x3e54>)
 8005862:	2280      	movs	r2, #128	; 0x80
 8005864:	611a      	str	r2, [r3, #16]
 8005866:	4b0b      	ldr	r3, [pc, #44]	; (8005894 <LCD_Init+0x3e54>)
 8005868:	f44f 7200 	mov.w	r2, #512	; 0x200
 800586c:	611a      	str	r2, [r3, #16]

		LCD_SSD_BackLightSet(100);	//背光设置为最亮
 800586e:	2064      	movs	r0, #100	; 0x64
 8005870:	f7fb ff36 	bl	80016e0 <LCD_SSD_BackLightSet>
	}
	LCD_Display_Dir(0);		 	//默认为竖屏
 8005874:	2000      	movs	r0, #0
 8005876:	f7fb ffd7 	bl	8001828 <LCD_Display_Dir>
	LCD_LED = 1;					//点亮背光
 800587a:	4b07      	ldr	r3, [pc, #28]	; (8005898 <LCD_Init+0x3e58>)
 800587c:	2201      	movs	r2, #1
 800587e:	601a      	str	r2, [r3, #0]
	LCD_Clear(WHITE);
 8005880:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8005884:	f000 f80a 	bl	800589c <LCD_Clear>
}
 8005888:	bf00      	nop
 800588a:	3718      	adds	r7, #24
 800588c:	46bd      	mov	sp, r7
 800588e:	bd80      	pop	{r7, pc}
 8005890:	40010c00 	.word	0x40010c00
 8005894:	40011000 	.word	0x40011000
 8005898:	422201a8 	.word	0x422201a8

0800589c <LCD_Clear>:

// Clear the screen with specific color
void LCD_Clear(uint16_t color) {
 800589c:	b580      	push	{r7, lr}
 800589e:	b084      	sub	sp, #16
 80058a0:	af00      	add	r7, sp, #0
 80058a2:	4603      	mov	r3, r0
 80058a4:	80fb      	strh	r3, [r7, #6]
	uint32_t index = 0;
 80058a6:	2300      	movs	r3, #0
 80058a8:	60fb      	str	r3, [r7, #12]
	uint32_t totalpoint = lcddev.width;
 80058aa:	4b2a      	ldr	r3, [pc, #168]	; (8005954 <LCD_Clear+0xb8>)
 80058ac:	881b      	ldrh	r3, [r3, #0]
 80058ae:	60bb      	str	r3, [r7, #8]
	totalpoint *= lcddev.height; 			//得到总点数
 80058b0:	4b28      	ldr	r3, [pc, #160]	; (8005954 <LCD_Clear+0xb8>)
 80058b2:	885b      	ldrh	r3, [r3, #2]
 80058b4:	461a      	mov	r2, r3
 80058b6:	68bb      	ldr	r3, [r7, #8]
 80058b8:	fb02 f303 	mul.w	r3, r2, r3
 80058bc:	60bb      	str	r3, [r7, #8]
	if ((lcddev.id == 0X6804) && (lcddev.dir == 1)) 			//6804横屏的时候特殊处理
 80058be:	4b25      	ldr	r3, [pc, #148]	; (8005954 <LCD_Clear+0xb8>)
 80058c0:	889b      	ldrh	r3, [r3, #4]
 80058c2:	f646 0204 	movw	r2, #26628	; 0x6804
 80058c6:	4293      	cmp	r3, r2
 80058c8:	d11a      	bne.n	8005900 <LCD_Clear+0x64>
 80058ca:	4b22      	ldr	r3, [pc, #136]	; (8005954 <LCD_Clear+0xb8>)
 80058cc:	799b      	ldrb	r3, [r3, #6]
 80058ce:	2b01      	cmp	r3, #1
 80058d0:	d116      	bne.n	8005900 <LCD_Clear+0x64>
			{
		lcddev.dir = 0;
 80058d2:	4b20      	ldr	r3, [pc, #128]	; (8005954 <LCD_Clear+0xb8>)
 80058d4:	2200      	movs	r2, #0
 80058d6:	719a      	strb	r2, [r3, #6]
		lcddev.setxcmd = 0X2A;
 80058d8:	4b1e      	ldr	r3, [pc, #120]	; (8005954 <LCD_Clear+0xb8>)
 80058da:	222a      	movs	r2, #42	; 0x2a
 80058dc:	815a      	strh	r2, [r3, #10]
		lcddev.setycmd = 0X2B;
 80058de:	4b1d      	ldr	r3, [pc, #116]	; (8005954 <LCD_Clear+0xb8>)
 80058e0:	222b      	movs	r2, #43	; 0x2b
 80058e2:	819a      	strh	r2, [r3, #12]
		LCD_SetCursor(0x00, 0x0000);		//设置光标位置
 80058e4:	2100      	movs	r1, #0
 80058e6:	2000      	movs	r0, #0
 80058e8:	f7fb f91a 	bl	8000b20 <LCD_SetCursor>
		lcddev.dir = 1;
 80058ec:	4b19      	ldr	r3, [pc, #100]	; (8005954 <LCD_Clear+0xb8>)
 80058ee:	2201      	movs	r2, #1
 80058f0:	719a      	strb	r2, [r3, #6]
		lcddev.setxcmd = 0X2B;
 80058f2:	4b18      	ldr	r3, [pc, #96]	; (8005954 <LCD_Clear+0xb8>)
 80058f4:	222b      	movs	r2, #43	; 0x2b
 80058f6:	815a      	strh	r2, [r3, #10]
		lcddev.setycmd = 0X2A;
 80058f8:	4b16      	ldr	r3, [pc, #88]	; (8005954 <LCD_Clear+0xb8>)
 80058fa:	222a      	movs	r2, #42	; 0x2a
 80058fc:	819a      	strh	r2, [r3, #12]
 80058fe:	e003      	b.n	8005908 <LCD_Clear+0x6c>
	} else
		LCD_SetCursor(0x00, 0x0000);	//设置光标位置
 8005900:	2100      	movs	r1, #0
 8005902:	2000      	movs	r0, #0
 8005904:	f7fb f90c 	bl	8000b20 <LCD_SetCursor>
	LCD_WriteRAM_Prepare();     		//开始写入GRAM	  	  
 8005908:	f7fb f8fe 	bl	8000b08 <LCD_WriteRAM_Prepare>
	for (index = 0; index < totalpoint; index++)
 800590c:	2300      	movs	r3, #0
 800590e:	60fb      	str	r3, [r7, #12]
 8005910:	e017      	b.n	8005942 <LCD_Clear+0xa6>
		LCD_WR_DATA(color);
 8005912:	4b11      	ldr	r3, [pc, #68]	; (8005958 <LCD_Clear+0xbc>)
 8005914:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005918:	611a      	str	r2, [r3, #16]
 800591a:	4b0f      	ldr	r3, [pc, #60]	; (8005958 <LCD_Clear+0xbc>)
 800591c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005920:	615a      	str	r2, [r3, #20]
 8005922:	4a0e      	ldr	r2, [pc, #56]	; (800595c <LCD_Clear+0xc0>)
 8005924:	88fb      	ldrh	r3, [r7, #6]
 8005926:	60d3      	str	r3, [r2, #12]
 8005928:	4b0b      	ldr	r3, [pc, #44]	; (8005958 <LCD_Clear+0xbc>)
 800592a:	2280      	movs	r2, #128	; 0x80
 800592c:	615a      	str	r2, [r3, #20]
 800592e:	4b0a      	ldr	r3, [pc, #40]	; (8005958 <LCD_Clear+0xbc>)
 8005930:	2280      	movs	r2, #128	; 0x80
 8005932:	611a      	str	r2, [r3, #16]
 8005934:	4b08      	ldr	r3, [pc, #32]	; (8005958 <LCD_Clear+0xbc>)
 8005936:	f44f 7200 	mov.w	r2, #512	; 0x200
 800593a:	611a      	str	r2, [r3, #16]
	for (index = 0; index < totalpoint; index++)
 800593c:	68fb      	ldr	r3, [r7, #12]
 800593e:	3301      	adds	r3, #1
 8005940:	60fb      	str	r3, [r7, #12]
 8005942:	68fa      	ldr	r2, [r7, #12]
 8005944:	68bb      	ldr	r3, [r7, #8]
 8005946:	429a      	cmp	r2, r3
 8005948:	d3e3      	bcc.n	8005912 <LCD_Clear+0x76>
}
 800594a:	bf00      	nop
 800594c:	bf00      	nop
 800594e:	3710      	adds	r7, #16
 8005950:	46bd      	mov	sp, r7
 8005952:	bd80      	pop	{r7, pc}
 8005954:	20000028 	.word	0x20000028
 8005958:	40011000 	.word	0x40011000
 800595c:	40010c00 	.word	0x40010c00

08005960 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8005960:	b580      	push	{r7, lr}
 8005962:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8005964:	f000 f9e8 	bl	8005d38 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8005968:	f000 f810 	bl	800598c <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  LCD_Init();
 800596c:	f7fc f868 	bl	8001a40 <LCD_Init>
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8005970:	f7fa ff60 	bl	8000834 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8005974:	f000 f93c 	bl	8005bf0 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_UART_Receive_IT(&huart1, (uint8_t *)rxBuffer, 1);
 8005978:	2201      	movs	r2, #1
 800597a:	4902      	ldr	r1, [pc, #8]	; (8005984 <main+0x24>)
 800597c:	4802      	ldr	r0, [pc, #8]	; (8005988 <main+0x28>)
 800597e:	f001 fb70 	bl	8007062 <HAL_UART_Receive_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8005982:	e7fe      	b.n	8005982 <main+0x22>
 8005984:	20000038 	.word	0x20000038
 8005988:	20000c0c 	.word	0x20000c0c

0800598c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800598c:	b580      	push	{r7, lr}
 800598e:	b090      	sub	sp, #64	; 0x40
 8005990:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8005992:	f107 0318 	add.w	r3, r7, #24
 8005996:	2228      	movs	r2, #40	; 0x28
 8005998:	2100      	movs	r1, #0
 800599a:	4618      	mov	r0, r3
 800599c:	f002 f906 	bl	8007bac <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80059a0:	1d3b      	adds	r3, r7, #4
 80059a2:	2200      	movs	r2, #0
 80059a4:	601a      	str	r2, [r3, #0]
 80059a6:	605a      	str	r2, [r3, #4]
 80059a8:	609a      	str	r2, [r3, #8]
 80059aa:	60da      	str	r2, [r3, #12]
 80059ac:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80059ae:	2301      	movs	r3, #1
 80059b0:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80059b2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80059b6:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80059b8:	2300      	movs	r3, #0
 80059ba:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80059bc:	2301      	movs	r3, #1
 80059be:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80059c0:	2302      	movs	r3, #2
 80059c2:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80059c4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80059c8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80059ca:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80059ce:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80059d0:	f107 0318 	add.w	r3, r7, #24
 80059d4:	4618      	mov	r0, r3
 80059d6:	f000 fe61 	bl	800669c <HAL_RCC_OscConfig>
 80059da:	4603      	mov	r3, r0
 80059dc:	2b00      	cmp	r3, #0
 80059de:	d001      	beq.n	80059e4 <SystemClock_Config+0x58>
  {
    Error_Handler();
 80059e0:	f000 f819 	bl	8005a16 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80059e4:	230f      	movs	r3, #15
 80059e6:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80059e8:	2302      	movs	r3, #2
 80059ea:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80059ec:	2300      	movs	r3, #0
 80059ee:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80059f0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80059f4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80059f6:	2300      	movs	r3, #0
 80059f8:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80059fa:	1d3b      	adds	r3, r7, #4
 80059fc:	2102      	movs	r1, #2
 80059fe:	4618      	mov	r0, r3
 8005a00:	f001 f8ce 	bl	8006ba0 <HAL_RCC_ClockConfig>
 8005a04:	4603      	mov	r3, r0
 8005a06:	2b00      	cmp	r3, #0
 8005a08:	d001      	beq.n	8005a0e <SystemClock_Config+0x82>
  {
    Error_Handler();
 8005a0a:	f000 f804 	bl	8005a16 <Error_Handler>
  }
}
 8005a0e:	bf00      	nop
 8005a10:	3740      	adds	r7, #64	; 0x40
 8005a12:	46bd      	mov	sp, r7
 8005a14:	bd80      	pop	{r7, pc}

08005a16 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8005a16:	b480      	push	{r7}
 8005a18:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8005a1a:	b672      	cpsid	i
}
 8005a1c:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8005a1e:	e7fe      	b.n	8005a1e <Error_Handler+0x8>

08005a20 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8005a20:	b580      	push	{r7, lr}
 8005a22:	b084      	sub	sp, #16
 8005a24:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8005a26:	4b16      	ldr	r3, [pc, #88]	; (8005a80 <HAL_MspInit+0x60>)
 8005a28:	699b      	ldr	r3, [r3, #24]
 8005a2a:	4a15      	ldr	r2, [pc, #84]	; (8005a80 <HAL_MspInit+0x60>)
 8005a2c:	f043 0301 	orr.w	r3, r3, #1
 8005a30:	6193      	str	r3, [r2, #24]
 8005a32:	4b13      	ldr	r3, [pc, #76]	; (8005a80 <HAL_MspInit+0x60>)
 8005a34:	699b      	ldr	r3, [r3, #24]
 8005a36:	f003 0301 	and.w	r3, r3, #1
 8005a3a:	60bb      	str	r3, [r7, #8]
 8005a3c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8005a3e:	4b10      	ldr	r3, [pc, #64]	; (8005a80 <HAL_MspInit+0x60>)
 8005a40:	69db      	ldr	r3, [r3, #28]
 8005a42:	4a0f      	ldr	r2, [pc, #60]	; (8005a80 <HAL_MspInit+0x60>)
 8005a44:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005a48:	61d3      	str	r3, [r2, #28]
 8005a4a:	4b0d      	ldr	r3, [pc, #52]	; (8005a80 <HAL_MspInit+0x60>)
 8005a4c:	69db      	ldr	r3, [r3, #28]
 8005a4e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005a52:	607b      	str	r3, [r7, #4]
 8005a54:	687b      	ldr	r3, [r7, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_2);
 8005a56:	2005      	movs	r0, #5
 8005a58:	f000 fac0 	bl	8005fdc <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8005a5c:	4b09      	ldr	r3, [pc, #36]	; (8005a84 <HAL_MspInit+0x64>)
 8005a5e:	685b      	ldr	r3, [r3, #4]
 8005a60:	60fb      	str	r3, [r7, #12]
 8005a62:	68fb      	ldr	r3, [r7, #12]
 8005a64:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8005a68:	60fb      	str	r3, [r7, #12]
 8005a6a:	68fb      	ldr	r3, [r7, #12]
 8005a6c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8005a70:	60fb      	str	r3, [r7, #12]
 8005a72:	4a04      	ldr	r2, [pc, #16]	; (8005a84 <HAL_MspInit+0x64>)
 8005a74:	68fb      	ldr	r3, [r7, #12]
 8005a76:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8005a78:	bf00      	nop
 8005a7a:	3710      	adds	r7, #16
 8005a7c:	46bd      	mov	sp, r7
 8005a7e:	bd80      	pop	{r7, pc}
 8005a80:	40021000 	.word	0x40021000
 8005a84:	40010000 	.word	0x40010000

08005a88 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8005a88:	b480      	push	{r7}
 8005a8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8005a8c:	e7fe      	b.n	8005a8c <NMI_Handler+0x4>

08005a8e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8005a8e:	b480      	push	{r7}
 8005a90:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8005a92:	e7fe      	b.n	8005a92 <HardFault_Handler+0x4>

08005a94 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8005a94:	b480      	push	{r7}
 8005a96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8005a98:	e7fe      	b.n	8005a98 <MemManage_Handler+0x4>

08005a9a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8005a9a:	b480      	push	{r7}
 8005a9c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8005a9e:	e7fe      	b.n	8005a9e <BusFault_Handler+0x4>

08005aa0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8005aa0:	b480      	push	{r7}
 8005aa2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8005aa4:	e7fe      	b.n	8005aa4 <UsageFault_Handler+0x4>

08005aa6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8005aa6:	b480      	push	{r7}
 8005aa8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8005aaa:	bf00      	nop
 8005aac:	46bd      	mov	sp, r7
 8005aae:	bc80      	pop	{r7}
 8005ab0:	4770      	bx	lr

08005ab2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8005ab2:	b480      	push	{r7}
 8005ab4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8005ab6:	bf00      	nop
 8005ab8:	46bd      	mov	sp, r7
 8005aba:	bc80      	pop	{r7}
 8005abc:	4770      	bx	lr

08005abe <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8005abe:	b480      	push	{r7}
 8005ac0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8005ac2:	bf00      	nop
 8005ac4:	46bd      	mov	sp, r7
 8005ac6:	bc80      	pop	{r7}
 8005ac8:	4770      	bx	lr

08005aca <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8005aca:	b580      	push	{r7, lr}
 8005acc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8005ace:	f000 f979 	bl	8005dc4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8005ad2:	bf00      	nop
 8005ad4:	bd80      	pop	{r7, pc}

08005ad6 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8005ad6:	b580      	push	{r7, lr}
 8005ad8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(KEY_WK_Pin);
 8005ada:	2001      	movs	r0, #1
 8005adc:	f000 fdc6 	bl	800666c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8005ae0:	bf00      	nop
 8005ae2:	bd80      	pop	{r7, pc}

08005ae4 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8005ae4:	b580      	push	{r7, lr}
 8005ae6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(KEY0_Pin);
 8005ae8:	2020      	movs	r0, #32
 8005aea:	f000 fdbf 	bl	800666c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8005aee:	bf00      	nop
 8005af0:	bd80      	pop	{r7, pc}
	...

08005af4 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8005af4:	b580      	push	{r7, lr}
 8005af6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8005af8:	4804      	ldr	r0, [pc, #16]	; (8005b0c <USART1_IRQHandler+0x18>)
 8005afa:	f001 fad7 	bl	80070ac <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */
  HAL_UART_Receive_IT(&huart1,(uint8_t*)rxBuffer,1);
 8005afe:	2201      	movs	r2, #1
 8005b00:	4903      	ldr	r1, [pc, #12]	; (8005b10 <USART1_IRQHandler+0x1c>)
 8005b02:	4802      	ldr	r0, [pc, #8]	; (8005b0c <USART1_IRQHandler+0x18>)
 8005b04:	f001 faad 	bl	8007062 <HAL_UART_Receive_IT>
  /* USER CODE END USART1_IRQn 1 */
}
 8005b08:	bf00      	nop
 8005b0a:	bd80      	pop	{r7, pc}
 8005b0c:	20000c0c 	.word	0x20000c0c
 8005b10:	20000038 	.word	0x20000038

08005b14 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8005b14:	b580      	push	{r7, lr}
 8005b16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(KEY1_Pin);
 8005b18:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8005b1c:	f000 fda6 	bl	800666c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8005b20:	bf00      	nop
 8005b22:	bd80      	pop	{r7, pc}

08005b24 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 1 */

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8005b24:	b580      	push	{r7, lr}
 8005b26:	b082      	sub	sp, #8
 8005b28:	af00      	add	r7, sp, #0
 8005b2a:	6078      	str	r0, [r7, #4]
	if(huart->Instance==USART1){
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	4a11      	ldr	r2, [pc, #68]	; (8005b78 <HAL_UART_RxCpltCallback+0x54>)
 8005b32:	4293      	cmp	r3, r2
 8005b34:	d11b      	bne.n	8005b6e <HAL_UART_RxCpltCallback+0x4a>
		static unsigned char uRx_Data[1024] = {0};
		static unsigned char uLength = 0;
		if(rxBuffer[0] == '\n'){
 8005b36:	4b11      	ldr	r3, [pc, #68]	; (8005b7c <HAL_UART_RxCpltCallback+0x58>)
 8005b38:	781b      	ldrb	r3, [r3, #0]
 8005b3a:	2b0a      	cmp	r3, #10
 8005b3c:	d10c      	bne.n	8005b58 <HAL_UART_RxCpltCallback+0x34>
			HAL_UART_Transmit(&huart1, uRx_Data, uLength, 0xffff);
 8005b3e:	4b10      	ldr	r3, [pc, #64]	; (8005b80 <HAL_UART_RxCpltCallback+0x5c>)
 8005b40:	781b      	ldrb	r3, [r3, #0]
 8005b42:	b29a      	uxth	r2, r3
 8005b44:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8005b48:	490e      	ldr	r1, [pc, #56]	; (8005b84 <HAL_UART_RxCpltCallback+0x60>)
 8005b4a:	480f      	ldr	r0, [pc, #60]	; (8005b88 <HAL_UART_RxCpltCallback+0x64>)
 8005b4c:	f001 fa06 	bl	8006f5c <HAL_UART_Transmit>
			//LCD_ShowString(30, 40, 200, 24, 24, (uint8_t*) uRx_Data);
			uLength = 0;
 8005b50:	4b0b      	ldr	r3, [pc, #44]	; (8005b80 <HAL_UART_RxCpltCallback+0x5c>)
 8005b52:	2200      	movs	r2, #0
 8005b54:	701a      	strb	r2, [r3, #0]
		}
		else{
			uRx_Data[uLength++] = rxBuffer[0];
		}
	}
}
 8005b56:	e00a      	b.n	8005b6e <HAL_UART_RxCpltCallback+0x4a>
			uRx_Data[uLength++] = rxBuffer[0];
 8005b58:	4b09      	ldr	r3, [pc, #36]	; (8005b80 <HAL_UART_RxCpltCallback+0x5c>)
 8005b5a:	781b      	ldrb	r3, [r3, #0]
 8005b5c:	1c5a      	adds	r2, r3, #1
 8005b5e:	b2d1      	uxtb	r1, r2
 8005b60:	4a07      	ldr	r2, [pc, #28]	; (8005b80 <HAL_UART_RxCpltCallback+0x5c>)
 8005b62:	7011      	strb	r1, [r2, #0]
 8005b64:	461a      	mov	r2, r3
 8005b66:	4b05      	ldr	r3, [pc, #20]	; (8005b7c <HAL_UART_RxCpltCallback+0x58>)
 8005b68:	7819      	ldrb	r1, [r3, #0]
 8005b6a:	4b06      	ldr	r3, [pc, #24]	; (8005b84 <HAL_UART_RxCpltCallback+0x60>)
 8005b6c:	5499      	strb	r1, [r3, r2]
}
 8005b6e:	bf00      	nop
 8005b70:	3708      	adds	r7, #8
 8005b72:	46bd      	mov	sp, r7
 8005b74:	bd80      	pop	{r7, pc}
 8005b76:	bf00      	nop
 8005b78:	40013800 	.word	0x40013800
 8005b7c:	20000038 	.word	0x20000038
 8005b80:	20000808 	.word	0x20000808
 8005b84:	2000080c 	.word	0x2000080c
 8005b88:	20000c0c 	.word	0x20000c0c

08005b8c <HAL_GPIO_EXTI_Callback>:

int text_cnt = 0;
char str[100];

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8005b8c:	b580      	push	{r7, lr}
 8005b8e:	b082      	sub	sp, #8
 8005b90:	af00      	add	r7, sp, #0
 8005b92:	4603      	mov	r3, r0
 8005b94:	80fb      	strh	r3, [r7, #6]
	HAL_Delay(100);
 8005b96:	2064      	movs	r0, #100	; 0x64
 8005b98:	f000 f930 	bl	8005dfc <HAL_Delay>
	switch(GPIO_Pin){
 8005b9c:	88fb      	ldrh	r3, [r7, #6]
 8005b9e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005ba2:	d00b      	beq.n	8005bbc <HAL_GPIO_EXTI_Callback+0x30>
 8005ba4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005ba8:	dc13      	bgt.n	8005bd2 <HAL_GPIO_EXTI_Callback+0x46>
 8005baa:	2b01      	cmp	r3, #1
 8005bac:	d00c      	beq.n	8005bc8 <HAL_GPIO_EXTI_Callback+0x3c>
 8005bae:	2b20      	cmp	r3, #32
 8005bb0:	d10f      	bne.n	8005bd2 <HAL_GPIO_EXTI_Callback+0x46>
		case KEY0_Pin:
			if (HAL_GPIO_ReadPin(KEY0_GPIO_Port, KEY0_Pin) == GPIO_PIN_RESET){
 8005bb2:	2120      	movs	r1, #32
 8005bb4:	4809      	ldr	r0, [pc, #36]	; (8005bdc <HAL_GPIO_EXTI_Callback+0x50>)
 8005bb6:	f000 fd29 	bl	800660c <HAL_GPIO_ReadPin>
			}
			break;
 8005bba:	e00b      	b.n	8005bd4 <HAL_GPIO_EXTI_Callback+0x48>
		case KEY1_Pin:
			if (HAL_GPIO_ReadPin(KEY1_GPIO_Port, KEY1_Pin) == GPIO_PIN_RESET){
 8005bbc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005bc0:	4807      	ldr	r0, [pc, #28]	; (8005be0 <HAL_GPIO_EXTI_Callback+0x54>)
 8005bc2:	f000 fd23 	bl	800660c <HAL_GPIO_ReadPin>
			}
			break;
 8005bc6:	e005      	b.n	8005bd4 <HAL_GPIO_EXTI_Callback+0x48>
		case KEY_WK_Pin:
			if (HAL_GPIO_ReadPin(KEY_WK_GPIO_Port, KEY_WK_Pin) == GPIO_PIN_RESET){
 8005bc8:	2101      	movs	r1, #1
 8005bca:	4805      	ldr	r0, [pc, #20]	; (8005be0 <HAL_GPIO_EXTI_Callback+0x54>)
 8005bcc:	f000 fd1e 	bl	800660c <HAL_GPIO_ReadPin>
			}
			break;
 8005bd0:	e000      	b.n	8005bd4 <HAL_GPIO_EXTI_Callback+0x48>
		default:
			break;
 8005bd2:	bf00      	nop
	}

}
 8005bd4:	bf00      	nop
 8005bd6:	3708      	adds	r7, #8
 8005bd8:	46bd      	mov	sp, r7
 8005bda:	bd80      	pop	{r7, pc}
 8005bdc:	40011000 	.word	0x40011000
 8005be0:	40010800 	.word	0x40010800

08005be4 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8005be4:	b480      	push	{r7}
 8005be6:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8005be8:	bf00      	nop
 8005bea:	46bd      	mov	sp, r7
 8005bec:	bc80      	pop	{r7}
 8005bee:	4770      	bx	lr

08005bf0 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8005bf0:	b580      	push	{r7, lr}
 8005bf2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8005bf4:	4b11      	ldr	r3, [pc, #68]	; (8005c3c <MX_USART1_UART_Init+0x4c>)
 8005bf6:	4a12      	ldr	r2, [pc, #72]	; (8005c40 <MX_USART1_UART_Init+0x50>)
 8005bf8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8005bfa:	4b10      	ldr	r3, [pc, #64]	; (8005c3c <MX_USART1_UART_Init+0x4c>)
 8005bfc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8005c00:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8005c02:	4b0e      	ldr	r3, [pc, #56]	; (8005c3c <MX_USART1_UART_Init+0x4c>)
 8005c04:	2200      	movs	r2, #0
 8005c06:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8005c08:	4b0c      	ldr	r3, [pc, #48]	; (8005c3c <MX_USART1_UART_Init+0x4c>)
 8005c0a:	2200      	movs	r2, #0
 8005c0c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8005c0e:	4b0b      	ldr	r3, [pc, #44]	; (8005c3c <MX_USART1_UART_Init+0x4c>)
 8005c10:	2200      	movs	r2, #0
 8005c12:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8005c14:	4b09      	ldr	r3, [pc, #36]	; (8005c3c <MX_USART1_UART_Init+0x4c>)
 8005c16:	220c      	movs	r2, #12
 8005c18:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8005c1a:	4b08      	ldr	r3, [pc, #32]	; (8005c3c <MX_USART1_UART_Init+0x4c>)
 8005c1c:	2200      	movs	r2, #0
 8005c1e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8005c20:	4b06      	ldr	r3, [pc, #24]	; (8005c3c <MX_USART1_UART_Init+0x4c>)
 8005c22:	2200      	movs	r2, #0
 8005c24:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8005c26:	4805      	ldr	r0, [pc, #20]	; (8005c3c <MX_USART1_UART_Init+0x4c>)
 8005c28:	f001 f948 	bl	8006ebc <HAL_UART_Init>
 8005c2c:	4603      	mov	r3, r0
 8005c2e:	2b00      	cmp	r3, #0
 8005c30:	d001      	beq.n	8005c36 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8005c32:	f7ff fef0 	bl	8005a16 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8005c36:	bf00      	nop
 8005c38:	bd80      	pop	{r7, pc}
 8005c3a:	bf00      	nop
 8005c3c:	20000c0c 	.word	0x20000c0c
 8005c40:	40013800 	.word	0x40013800

08005c44 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8005c44:	b580      	push	{r7, lr}
 8005c46:	b088      	sub	sp, #32
 8005c48:	af00      	add	r7, sp, #0
 8005c4a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005c4c:	f107 0310 	add.w	r3, r7, #16
 8005c50:	2200      	movs	r2, #0
 8005c52:	601a      	str	r2, [r3, #0]
 8005c54:	605a      	str	r2, [r3, #4]
 8005c56:	609a      	str	r2, [r3, #8]
 8005c58:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	4a20      	ldr	r2, [pc, #128]	; (8005ce0 <HAL_UART_MspInit+0x9c>)
 8005c60:	4293      	cmp	r3, r2
 8005c62:	d139      	bne.n	8005cd8 <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8005c64:	4b1f      	ldr	r3, [pc, #124]	; (8005ce4 <HAL_UART_MspInit+0xa0>)
 8005c66:	699b      	ldr	r3, [r3, #24]
 8005c68:	4a1e      	ldr	r2, [pc, #120]	; (8005ce4 <HAL_UART_MspInit+0xa0>)
 8005c6a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005c6e:	6193      	str	r3, [r2, #24]
 8005c70:	4b1c      	ldr	r3, [pc, #112]	; (8005ce4 <HAL_UART_MspInit+0xa0>)
 8005c72:	699b      	ldr	r3, [r3, #24]
 8005c74:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005c78:	60fb      	str	r3, [r7, #12]
 8005c7a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005c7c:	4b19      	ldr	r3, [pc, #100]	; (8005ce4 <HAL_UART_MspInit+0xa0>)
 8005c7e:	699b      	ldr	r3, [r3, #24]
 8005c80:	4a18      	ldr	r2, [pc, #96]	; (8005ce4 <HAL_UART_MspInit+0xa0>)
 8005c82:	f043 0304 	orr.w	r3, r3, #4
 8005c86:	6193      	str	r3, [r2, #24]
 8005c88:	4b16      	ldr	r3, [pc, #88]	; (8005ce4 <HAL_UART_MspInit+0xa0>)
 8005c8a:	699b      	ldr	r3, [r3, #24]
 8005c8c:	f003 0304 	and.w	r3, r3, #4
 8005c90:	60bb      	str	r3, [r7, #8]
 8005c92:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8005c94:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005c98:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005c9a:	2302      	movs	r3, #2
 8005c9c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8005c9e:	2303      	movs	r3, #3
 8005ca0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005ca2:	f107 0310 	add.w	r3, r7, #16
 8005ca6:	4619      	mov	r1, r3
 8005ca8:	480f      	ldr	r0, [pc, #60]	; (8005ce8 <HAL_UART_MspInit+0xa4>)
 8005caa:	f000 fb1b 	bl	80062e4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8005cae:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005cb2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8005cb4:	2300      	movs	r3, #0
 8005cb6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005cb8:	2300      	movs	r3, #0
 8005cba:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005cbc:	f107 0310 	add.w	r3, r7, #16
 8005cc0:	4619      	mov	r1, r3
 8005cc2:	4809      	ldr	r0, [pc, #36]	; (8005ce8 <HAL_UART_MspInit+0xa4>)
 8005cc4:	f000 fb0e 	bl	80062e4 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 1, 0);
 8005cc8:	2200      	movs	r2, #0
 8005cca:	2101      	movs	r1, #1
 8005ccc:	2025      	movs	r0, #37	; 0x25
 8005cce:	f000 f990 	bl	8005ff2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8005cd2:	2025      	movs	r0, #37	; 0x25
 8005cd4:	f000 f9a9 	bl	800602a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8005cd8:	bf00      	nop
 8005cda:	3720      	adds	r7, #32
 8005cdc:	46bd      	mov	sp, r7
 8005cde:	bd80      	pop	{r7, pc}
 8005ce0:	40013800 	.word	0x40013800
 8005ce4:	40021000 	.word	0x40021000
 8005ce8:	40010800 	.word	0x40010800

08005cec <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8005cec:	f7ff ff7a 	bl	8005be4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8005cf0:	480b      	ldr	r0, [pc, #44]	; (8005d20 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8005cf2:	490c      	ldr	r1, [pc, #48]	; (8005d24 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8005cf4:	4a0c      	ldr	r2, [pc, #48]	; (8005d28 <LoopFillZerobss+0x16>)
  movs r3, #0
 8005cf6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8005cf8:	e002      	b.n	8005d00 <LoopCopyDataInit>

08005cfa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8005cfa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8005cfc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8005cfe:	3304      	adds	r3, #4

08005d00 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8005d00:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8005d02:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8005d04:	d3f9      	bcc.n	8005cfa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8005d06:	4a09      	ldr	r2, [pc, #36]	; (8005d2c <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8005d08:	4c09      	ldr	r4, [pc, #36]	; (8005d30 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8005d0a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8005d0c:	e001      	b.n	8005d12 <LoopFillZerobss>

08005d0e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8005d0e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8005d10:	3204      	adds	r2, #4

08005d12 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8005d12:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8005d14:	d3fb      	bcc.n	8005d0e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8005d16:	f001 ff51 	bl	8007bbc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8005d1a:	f7ff fe21 	bl	8005960 <main>
  bx lr
 8005d1e:	4770      	bx	lr
  ldr r0, =_sdata
 8005d20:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8005d24:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8005d28:	08007c50 	.word	0x08007c50
  ldr r2, =_sbss
 8005d2c:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8005d30:	20000c58 	.word	0x20000c58

08005d34 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8005d34:	e7fe      	b.n	8005d34 <ADC1_2_IRQHandler>
	...

08005d38 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8005d38:	b580      	push	{r7, lr}
 8005d3a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8005d3c:	4b08      	ldr	r3, [pc, #32]	; (8005d60 <HAL_Init+0x28>)
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	4a07      	ldr	r2, [pc, #28]	; (8005d60 <HAL_Init+0x28>)
 8005d42:	f043 0310 	orr.w	r3, r3, #16
 8005d46:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8005d48:	2003      	movs	r0, #3
 8005d4a:	f000 f947 	bl	8005fdc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8005d4e:	2000      	movs	r0, #0
 8005d50:	f000 f808 	bl	8005d64 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8005d54:	f7ff fe64 	bl	8005a20 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8005d58:	2300      	movs	r3, #0
}
 8005d5a:	4618      	mov	r0, r3
 8005d5c:	bd80      	pop	{r7, pc}
 8005d5e:	bf00      	nop
 8005d60:	40022000 	.word	0x40022000

08005d64 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8005d64:	b580      	push	{r7, lr}
 8005d66:	b082      	sub	sp, #8
 8005d68:	af00      	add	r7, sp, #0
 8005d6a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8005d6c:	4b12      	ldr	r3, [pc, #72]	; (8005db8 <HAL_InitTick+0x54>)
 8005d6e:	681a      	ldr	r2, [r3, #0]
 8005d70:	4b12      	ldr	r3, [pc, #72]	; (8005dbc <HAL_InitTick+0x58>)
 8005d72:	781b      	ldrb	r3, [r3, #0]
 8005d74:	4619      	mov	r1, r3
 8005d76:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8005d7a:	fbb3 f3f1 	udiv	r3, r3, r1
 8005d7e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005d82:	4618      	mov	r0, r3
 8005d84:	f000 f95f 	bl	8006046 <HAL_SYSTICK_Config>
 8005d88:	4603      	mov	r3, r0
 8005d8a:	2b00      	cmp	r3, #0
 8005d8c:	d001      	beq.n	8005d92 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8005d8e:	2301      	movs	r3, #1
 8005d90:	e00e      	b.n	8005db0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	2b0f      	cmp	r3, #15
 8005d96:	d80a      	bhi.n	8005dae <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8005d98:	2200      	movs	r2, #0
 8005d9a:	6879      	ldr	r1, [r7, #4]
 8005d9c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005da0:	f000 f927 	bl	8005ff2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8005da4:	4a06      	ldr	r2, [pc, #24]	; (8005dc0 <HAL_InitTick+0x5c>)
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8005daa:	2300      	movs	r3, #0
 8005dac:	e000      	b.n	8005db0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8005dae:	2301      	movs	r3, #1
}
 8005db0:	4618      	mov	r0, r3
 8005db2:	3708      	adds	r7, #8
 8005db4:	46bd      	mov	sp, r7
 8005db6:	bd80      	pop	{r7, pc}
 8005db8:	20000000 	.word	0x20000000
 8005dbc:	20000008 	.word	0x20000008
 8005dc0:	20000004 	.word	0x20000004

08005dc4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8005dc4:	b480      	push	{r7}
 8005dc6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8005dc8:	4b05      	ldr	r3, [pc, #20]	; (8005de0 <HAL_IncTick+0x1c>)
 8005dca:	781b      	ldrb	r3, [r3, #0]
 8005dcc:	461a      	mov	r2, r3
 8005dce:	4b05      	ldr	r3, [pc, #20]	; (8005de4 <HAL_IncTick+0x20>)
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	4413      	add	r3, r2
 8005dd4:	4a03      	ldr	r2, [pc, #12]	; (8005de4 <HAL_IncTick+0x20>)
 8005dd6:	6013      	str	r3, [r2, #0]
}
 8005dd8:	bf00      	nop
 8005dda:	46bd      	mov	sp, r7
 8005ddc:	bc80      	pop	{r7}
 8005dde:	4770      	bx	lr
 8005de0:	20000008 	.word	0x20000008
 8005de4:	20000c54 	.word	0x20000c54

08005de8 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8005de8:	b480      	push	{r7}
 8005dea:	af00      	add	r7, sp, #0
  return uwTick;
 8005dec:	4b02      	ldr	r3, [pc, #8]	; (8005df8 <HAL_GetTick+0x10>)
 8005dee:	681b      	ldr	r3, [r3, #0]
}
 8005df0:	4618      	mov	r0, r3
 8005df2:	46bd      	mov	sp, r7
 8005df4:	bc80      	pop	{r7}
 8005df6:	4770      	bx	lr
 8005df8:	20000c54 	.word	0x20000c54

08005dfc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8005dfc:	b580      	push	{r7, lr}
 8005dfe:	b084      	sub	sp, #16
 8005e00:	af00      	add	r7, sp, #0
 8005e02:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8005e04:	f7ff fff0 	bl	8005de8 <HAL_GetTick>
 8005e08:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8005e0e:	68fb      	ldr	r3, [r7, #12]
 8005e10:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005e14:	d005      	beq.n	8005e22 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8005e16:	4b0a      	ldr	r3, [pc, #40]	; (8005e40 <HAL_Delay+0x44>)
 8005e18:	781b      	ldrb	r3, [r3, #0]
 8005e1a:	461a      	mov	r2, r3
 8005e1c:	68fb      	ldr	r3, [r7, #12]
 8005e1e:	4413      	add	r3, r2
 8005e20:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8005e22:	bf00      	nop
 8005e24:	f7ff ffe0 	bl	8005de8 <HAL_GetTick>
 8005e28:	4602      	mov	r2, r0
 8005e2a:	68bb      	ldr	r3, [r7, #8]
 8005e2c:	1ad3      	subs	r3, r2, r3
 8005e2e:	68fa      	ldr	r2, [r7, #12]
 8005e30:	429a      	cmp	r2, r3
 8005e32:	d8f7      	bhi.n	8005e24 <HAL_Delay+0x28>
  {
  }
}
 8005e34:	bf00      	nop
 8005e36:	bf00      	nop
 8005e38:	3710      	adds	r7, #16
 8005e3a:	46bd      	mov	sp, r7
 8005e3c:	bd80      	pop	{r7, pc}
 8005e3e:	bf00      	nop
 8005e40:	20000008 	.word	0x20000008

08005e44 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005e44:	b480      	push	{r7}
 8005e46:	b085      	sub	sp, #20
 8005e48:	af00      	add	r7, sp, #0
 8005e4a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	f003 0307 	and.w	r3, r3, #7
 8005e52:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005e54:	4b0c      	ldr	r3, [pc, #48]	; (8005e88 <__NVIC_SetPriorityGrouping+0x44>)
 8005e56:	68db      	ldr	r3, [r3, #12]
 8005e58:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005e5a:	68ba      	ldr	r2, [r7, #8]
 8005e5c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8005e60:	4013      	ands	r3, r2
 8005e62:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8005e64:	68fb      	ldr	r3, [r7, #12]
 8005e66:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005e68:	68bb      	ldr	r3, [r7, #8]
 8005e6a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8005e6c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8005e70:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005e74:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005e76:	4a04      	ldr	r2, [pc, #16]	; (8005e88 <__NVIC_SetPriorityGrouping+0x44>)
 8005e78:	68bb      	ldr	r3, [r7, #8]
 8005e7a:	60d3      	str	r3, [r2, #12]
}
 8005e7c:	bf00      	nop
 8005e7e:	3714      	adds	r7, #20
 8005e80:	46bd      	mov	sp, r7
 8005e82:	bc80      	pop	{r7}
 8005e84:	4770      	bx	lr
 8005e86:	bf00      	nop
 8005e88:	e000ed00 	.word	0xe000ed00

08005e8c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005e8c:	b480      	push	{r7}
 8005e8e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005e90:	4b04      	ldr	r3, [pc, #16]	; (8005ea4 <__NVIC_GetPriorityGrouping+0x18>)
 8005e92:	68db      	ldr	r3, [r3, #12]
 8005e94:	0a1b      	lsrs	r3, r3, #8
 8005e96:	f003 0307 	and.w	r3, r3, #7
}
 8005e9a:	4618      	mov	r0, r3
 8005e9c:	46bd      	mov	sp, r7
 8005e9e:	bc80      	pop	{r7}
 8005ea0:	4770      	bx	lr
 8005ea2:	bf00      	nop
 8005ea4:	e000ed00 	.word	0xe000ed00

08005ea8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005ea8:	b480      	push	{r7}
 8005eaa:	b083      	sub	sp, #12
 8005eac:	af00      	add	r7, sp, #0
 8005eae:	4603      	mov	r3, r0
 8005eb0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005eb2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005eb6:	2b00      	cmp	r3, #0
 8005eb8:	db0b      	blt.n	8005ed2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005eba:	79fb      	ldrb	r3, [r7, #7]
 8005ebc:	f003 021f 	and.w	r2, r3, #31
 8005ec0:	4906      	ldr	r1, [pc, #24]	; (8005edc <__NVIC_EnableIRQ+0x34>)
 8005ec2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005ec6:	095b      	lsrs	r3, r3, #5
 8005ec8:	2001      	movs	r0, #1
 8005eca:	fa00 f202 	lsl.w	r2, r0, r2
 8005ece:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8005ed2:	bf00      	nop
 8005ed4:	370c      	adds	r7, #12
 8005ed6:	46bd      	mov	sp, r7
 8005ed8:	bc80      	pop	{r7}
 8005eda:	4770      	bx	lr
 8005edc:	e000e100 	.word	0xe000e100

08005ee0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005ee0:	b480      	push	{r7}
 8005ee2:	b083      	sub	sp, #12
 8005ee4:	af00      	add	r7, sp, #0
 8005ee6:	4603      	mov	r3, r0
 8005ee8:	6039      	str	r1, [r7, #0]
 8005eea:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005eec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005ef0:	2b00      	cmp	r3, #0
 8005ef2:	db0a      	blt.n	8005f0a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005ef4:	683b      	ldr	r3, [r7, #0]
 8005ef6:	b2da      	uxtb	r2, r3
 8005ef8:	490c      	ldr	r1, [pc, #48]	; (8005f2c <__NVIC_SetPriority+0x4c>)
 8005efa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005efe:	0112      	lsls	r2, r2, #4
 8005f00:	b2d2      	uxtb	r2, r2
 8005f02:	440b      	add	r3, r1
 8005f04:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005f08:	e00a      	b.n	8005f20 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005f0a:	683b      	ldr	r3, [r7, #0]
 8005f0c:	b2da      	uxtb	r2, r3
 8005f0e:	4908      	ldr	r1, [pc, #32]	; (8005f30 <__NVIC_SetPriority+0x50>)
 8005f10:	79fb      	ldrb	r3, [r7, #7]
 8005f12:	f003 030f 	and.w	r3, r3, #15
 8005f16:	3b04      	subs	r3, #4
 8005f18:	0112      	lsls	r2, r2, #4
 8005f1a:	b2d2      	uxtb	r2, r2
 8005f1c:	440b      	add	r3, r1
 8005f1e:	761a      	strb	r2, [r3, #24]
}
 8005f20:	bf00      	nop
 8005f22:	370c      	adds	r7, #12
 8005f24:	46bd      	mov	sp, r7
 8005f26:	bc80      	pop	{r7}
 8005f28:	4770      	bx	lr
 8005f2a:	bf00      	nop
 8005f2c:	e000e100 	.word	0xe000e100
 8005f30:	e000ed00 	.word	0xe000ed00

08005f34 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005f34:	b480      	push	{r7}
 8005f36:	b089      	sub	sp, #36	; 0x24
 8005f38:	af00      	add	r7, sp, #0
 8005f3a:	60f8      	str	r0, [r7, #12]
 8005f3c:	60b9      	str	r1, [r7, #8]
 8005f3e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005f40:	68fb      	ldr	r3, [r7, #12]
 8005f42:	f003 0307 	and.w	r3, r3, #7
 8005f46:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005f48:	69fb      	ldr	r3, [r7, #28]
 8005f4a:	f1c3 0307 	rsb	r3, r3, #7
 8005f4e:	2b04      	cmp	r3, #4
 8005f50:	bf28      	it	cs
 8005f52:	2304      	movcs	r3, #4
 8005f54:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005f56:	69fb      	ldr	r3, [r7, #28]
 8005f58:	3304      	adds	r3, #4
 8005f5a:	2b06      	cmp	r3, #6
 8005f5c:	d902      	bls.n	8005f64 <NVIC_EncodePriority+0x30>
 8005f5e:	69fb      	ldr	r3, [r7, #28]
 8005f60:	3b03      	subs	r3, #3
 8005f62:	e000      	b.n	8005f66 <NVIC_EncodePriority+0x32>
 8005f64:	2300      	movs	r3, #0
 8005f66:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005f68:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005f6c:	69bb      	ldr	r3, [r7, #24]
 8005f6e:	fa02 f303 	lsl.w	r3, r2, r3
 8005f72:	43da      	mvns	r2, r3
 8005f74:	68bb      	ldr	r3, [r7, #8]
 8005f76:	401a      	ands	r2, r3
 8005f78:	697b      	ldr	r3, [r7, #20]
 8005f7a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005f7c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8005f80:	697b      	ldr	r3, [r7, #20]
 8005f82:	fa01 f303 	lsl.w	r3, r1, r3
 8005f86:	43d9      	mvns	r1, r3
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005f8c:	4313      	orrs	r3, r2
         );
}
 8005f8e:	4618      	mov	r0, r3
 8005f90:	3724      	adds	r7, #36	; 0x24
 8005f92:	46bd      	mov	sp, r7
 8005f94:	bc80      	pop	{r7}
 8005f96:	4770      	bx	lr

08005f98 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8005f98:	b580      	push	{r7, lr}
 8005f9a:	b082      	sub	sp, #8
 8005f9c:	af00      	add	r7, sp, #0
 8005f9e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	3b01      	subs	r3, #1
 8005fa4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005fa8:	d301      	bcc.n	8005fae <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8005faa:	2301      	movs	r3, #1
 8005fac:	e00f      	b.n	8005fce <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8005fae:	4a0a      	ldr	r2, [pc, #40]	; (8005fd8 <SysTick_Config+0x40>)
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	3b01      	subs	r3, #1
 8005fb4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8005fb6:	210f      	movs	r1, #15
 8005fb8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005fbc:	f7ff ff90 	bl	8005ee0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005fc0:	4b05      	ldr	r3, [pc, #20]	; (8005fd8 <SysTick_Config+0x40>)
 8005fc2:	2200      	movs	r2, #0
 8005fc4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8005fc6:	4b04      	ldr	r3, [pc, #16]	; (8005fd8 <SysTick_Config+0x40>)
 8005fc8:	2207      	movs	r2, #7
 8005fca:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8005fcc:	2300      	movs	r3, #0
}
 8005fce:	4618      	mov	r0, r3
 8005fd0:	3708      	adds	r7, #8
 8005fd2:	46bd      	mov	sp, r7
 8005fd4:	bd80      	pop	{r7, pc}
 8005fd6:	bf00      	nop
 8005fd8:	e000e010 	.word	0xe000e010

08005fdc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005fdc:	b580      	push	{r7, lr}
 8005fde:	b082      	sub	sp, #8
 8005fe0:	af00      	add	r7, sp, #0
 8005fe2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005fe4:	6878      	ldr	r0, [r7, #4]
 8005fe6:	f7ff ff2d 	bl	8005e44 <__NVIC_SetPriorityGrouping>
}
 8005fea:	bf00      	nop
 8005fec:	3708      	adds	r7, #8
 8005fee:	46bd      	mov	sp, r7
 8005ff0:	bd80      	pop	{r7, pc}

08005ff2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8005ff2:	b580      	push	{r7, lr}
 8005ff4:	b086      	sub	sp, #24
 8005ff6:	af00      	add	r7, sp, #0
 8005ff8:	4603      	mov	r3, r0
 8005ffa:	60b9      	str	r1, [r7, #8]
 8005ffc:	607a      	str	r2, [r7, #4]
 8005ffe:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8006000:	2300      	movs	r3, #0
 8006002:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8006004:	f7ff ff42 	bl	8005e8c <__NVIC_GetPriorityGrouping>
 8006008:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800600a:	687a      	ldr	r2, [r7, #4]
 800600c:	68b9      	ldr	r1, [r7, #8]
 800600e:	6978      	ldr	r0, [r7, #20]
 8006010:	f7ff ff90 	bl	8005f34 <NVIC_EncodePriority>
 8006014:	4602      	mov	r2, r0
 8006016:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800601a:	4611      	mov	r1, r2
 800601c:	4618      	mov	r0, r3
 800601e:	f7ff ff5f 	bl	8005ee0 <__NVIC_SetPriority>
}
 8006022:	bf00      	nop
 8006024:	3718      	adds	r7, #24
 8006026:	46bd      	mov	sp, r7
 8006028:	bd80      	pop	{r7, pc}

0800602a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800602a:	b580      	push	{r7, lr}
 800602c:	b082      	sub	sp, #8
 800602e:	af00      	add	r7, sp, #0
 8006030:	4603      	mov	r3, r0
 8006032:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8006034:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006038:	4618      	mov	r0, r3
 800603a:	f7ff ff35 	bl	8005ea8 <__NVIC_EnableIRQ>
}
 800603e:	bf00      	nop
 8006040:	3708      	adds	r7, #8
 8006042:	46bd      	mov	sp, r7
 8006044:	bd80      	pop	{r7, pc}

08006046 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8006046:	b580      	push	{r7, lr}
 8006048:	b082      	sub	sp, #8
 800604a:	af00      	add	r7, sp, #0
 800604c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800604e:	6878      	ldr	r0, [r7, #4]
 8006050:	f7ff ffa2 	bl	8005f98 <SysTick_Config>
 8006054:	4603      	mov	r3, r0
}
 8006056:	4618      	mov	r0, r3
 8006058:	3708      	adds	r7, #8
 800605a:	46bd      	mov	sp, r7
 800605c:	bd80      	pop	{r7, pc}

0800605e <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800605e:	b480      	push	{r7}
 8006060:	b085      	sub	sp, #20
 8006062:	af00      	add	r7, sp, #0
 8006064:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006066:	2300      	movs	r3, #0
 8006068:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8006070:	b2db      	uxtb	r3, r3
 8006072:	2b02      	cmp	r3, #2
 8006074:	d008      	beq.n	8006088 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	2204      	movs	r2, #4
 800607a:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	2200      	movs	r2, #0
 8006080:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8006084:	2301      	movs	r3, #1
 8006086:	e020      	b.n	80060ca <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	681a      	ldr	r2, [r3, #0]
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	f022 020e 	bic.w	r2, r2, #14
 8006096:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	681a      	ldr	r2, [r3, #0]
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	f022 0201 	bic.w	r2, r2, #1
 80060a6:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80060b0:	2101      	movs	r1, #1
 80060b2:	fa01 f202 	lsl.w	r2, r1, r2
 80060b6:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	2201      	movs	r2, #1
 80060bc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	2200      	movs	r2, #0
 80060c4:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 80060c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80060ca:	4618      	mov	r0, r3
 80060cc:	3714      	adds	r7, #20
 80060ce:	46bd      	mov	sp, r7
 80060d0:	bc80      	pop	{r7}
 80060d2:	4770      	bx	lr

080060d4 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80060d4:	b580      	push	{r7, lr}
 80060d6:	b084      	sub	sp, #16
 80060d8:	af00      	add	r7, sp, #0
 80060da:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80060dc:	2300      	movs	r3, #0
 80060de:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80060e6:	b2db      	uxtb	r3, r3
 80060e8:	2b02      	cmp	r3, #2
 80060ea:	d005      	beq.n	80060f8 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	2204      	movs	r2, #4
 80060f0:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 80060f2:	2301      	movs	r3, #1
 80060f4:	73fb      	strb	r3, [r7, #15]
 80060f6:	e0d6      	b.n	80062a6 <HAL_DMA_Abort_IT+0x1d2>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	681a      	ldr	r2, [r3, #0]
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	f022 020e 	bic.w	r2, r2, #14
 8006106:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	681a      	ldr	r2, [r3, #0]
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	f022 0201 	bic.w	r2, r2, #1
 8006116:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	461a      	mov	r2, r3
 800611e:	4b64      	ldr	r3, [pc, #400]	; (80062b0 <HAL_DMA_Abort_IT+0x1dc>)
 8006120:	429a      	cmp	r2, r3
 8006122:	d958      	bls.n	80061d6 <HAL_DMA_Abort_IT+0x102>
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	4a62      	ldr	r2, [pc, #392]	; (80062b4 <HAL_DMA_Abort_IT+0x1e0>)
 800612a:	4293      	cmp	r3, r2
 800612c:	d04f      	beq.n	80061ce <HAL_DMA_Abort_IT+0xfa>
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	4a61      	ldr	r2, [pc, #388]	; (80062b8 <HAL_DMA_Abort_IT+0x1e4>)
 8006134:	4293      	cmp	r3, r2
 8006136:	d048      	beq.n	80061ca <HAL_DMA_Abort_IT+0xf6>
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	4a5f      	ldr	r2, [pc, #380]	; (80062bc <HAL_DMA_Abort_IT+0x1e8>)
 800613e:	4293      	cmp	r3, r2
 8006140:	d040      	beq.n	80061c4 <HAL_DMA_Abort_IT+0xf0>
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	4a5e      	ldr	r2, [pc, #376]	; (80062c0 <HAL_DMA_Abort_IT+0x1ec>)
 8006148:	4293      	cmp	r3, r2
 800614a:	d038      	beq.n	80061be <HAL_DMA_Abort_IT+0xea>
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	4a5c      	ldr	r2, [pc, #368]	; (80062c4 <HAL_DMA_Abort_IT+0x1f0>)
 8006152:	4293      	cmp	r3, r2
 8006154:	d030      	beq.n	80061b8 <HAL_DMA_Abort_IT+0xe4>
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	4a5b      	ldr	r2, [pc, #364]	; (80062c8 <HAL_DMA_Abort_IT+0x1f4>)
 800615c:	4293      	cmp	r3, r2
 800615e:	d028      	beq.n	80061b2 <HAL_DMA_Abort_IT+0xde>
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	4a52      	ldr	r2, [pc, #328]	; (80062b0 <HAL_DMA_Abort_IT+0x1dc>)
 8006166:	4293      	cmp	r3, r2
 8006168:	d020      	beq.n	80061ac <HAL_DMA_Abort_IT+0xd8>
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	4a57      	ldr	r2, [pc, #348]	; (80062cc <HAL_DMA_Abort_IT+0x1f8>)
 8006170:	4293      	cmp	r3, r2
 8006172:	d019      	beq.n	80061a8 <HAL_DMA_Abort_IT+0xd4>
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	4a55      	ldr	r2, [pc, #340]	; (80062d0 <HAL_DMA_Abort_IT+0x1fc>)
 800617a:	4293      	cmp	r3, r2
 800617c:	d012      	beq.n	80061a4 <HAL_DMA_Abort_IT+0xd0>
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	4a54      	ldr	r2, [pc, #336]	; (80062d4 <HAL_DMA_Abort_IT+0x200>)
 8006184:	4293      	cmp	r3, r2
 8006186:	d00a      	beq.n	800619e <HAL_DMA_Abort_IT+0xca>
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	4a52      	ldr	r2, [pc, #328]	; (80062d8 <HAL_DMA_Abort_IT+0x204>)
 800618e:	4293      	cmp	r3, r2
 8006190:	d102      	bne.n	8006198 <HAL_DMA_Abort_IT+0xc4>
 8006192:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006196:	e01b      	b.n	80061d0 <HAL_DMA_Abort_IT+0xfc>
 8006198:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800619c:	e018      	b.n	80061d0 <HAL_DMA_Abort_IT+0xfc>
 800619e:	f44f 7380 	mov.w	r3, #256	; 0x100
 80061a2:	e015      	b.n	80061d0 <HAL_DMA_Abort_IT+0xfc>
 80061a4:	2310      	movs	r3, #16
 80061a6:	e013      	b.n	80061d0 <HAL_DMA_Abort_IT+0xfc>
 80061a8:	2301      	movs	r3, #1
 80061aa:	e011      	b.n	80061d0 <HAL_DMA_Abort_IT+0xfc>
 80061ac:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80061b0:	e00e      	b.n	80061d0 <HAL_DMA_Abort_IT+0xfc>
 80061b2:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80061b6:	e00b      	b.n	80061d0 <HAL_DMA_Abort_IT+0xfc>
 80061b8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80061bc:	e008      	b.n	80061d0 <HAL_DMA_Abort_IT+0xfc>
 80061be:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80061c2:	e005      	b.n	80061d0 <HAL_DMA_Abort_IT+0xfc>
 80061c4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80061c8:	e002      	b.n	80061d0 <HAL_DMA_Abort_IT+0xfc>
 80061ca:	2310      	movs	r3, #16
 80061cc:	e000      	b.n	80061d0 <HAL_DMA_Abort_IT+0xfc>
 80061ce:	2301      	movs	r3, #1
 80061d0:	4a42      	ldr	r2, [pc, #264]	; (80062dc <HAL_DMA_Abort_IT+0x208>)
 80061d2:	6053      	str	r3, [r2, #4]
 80061d4:	e057      	b.n	8006286 <HAL_DMA_Abort_IT+0x1b2>
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	4a36      	ldr	r2, [pc, #216]	; (80062b4 <HAL_DMA_Abort_IT+0x1e0>)
 80061dc:	4293      	cmp	r3, r2
 80061de:	d04f      	beq.n	8006280 <HAL_DMA_Abort_IT+0x1ac>
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	4a34      	ldr	r2, [pc, #208]	; (80062b8 <HAL_DMA_Abort_IT+0x1e4>)
 80061e6:	4293      	cmp	r3, r2
 80061e8:	d048      	beq.n	800627c <HAL_DMA_Abort_IT+0x1a8>
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	4a33      	ldr	r2, [pc, #204]	; (80062bc <HAL_DMA_Abort_IT+0x1e8>)
 80061f0:	4293      	cmp	r3, r2
 80061f2:	d040      	beq.n	8006276 <HAL_DMA_Abort_IT+0x1a2>
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	4a31      	ldr	r2, [pc, #196]	; (80062c0 <HAL_DMA_Abort_IT+0x1ec>)
 80061fa:	4293      	cmp	r3, r2
 80061fc:	d038      	beq.n	8006270 <HAL_DMA_Abort_IT+0x19c>
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	4a30      	ldr	r2, [pc, #192]	; (80062c4 <HAL_DMA_Abort_IT+0x1f0>)
 8006204:	4293      	cmp	r3, r2
 8006206:	d030      	beq.n	800626a <HAL_DMA_Abort_IT+0x196>
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	4a2e      	ldr	r2, [pc, #184]	; (80062c8 <HAL_DMA_Abort_IT+0x1f4>)
 800620e:	4293      	cmp	r3, r2
 8006210:	d028      	beq.n	8006264 <HAL_DMA_Abort_IT+0x190>
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	4a26      	ldr	r2, [pc, #152]	; (80062b0 <HAL_DMA_Abort_IT+0x1dc>)
 8006218:	4293      	cmp	r3, r2
 800621a:	d020      	beq.n	800625e <HAL_DMA_Abort_IT+0x18a>
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	4a2a      	ldr	r2, [pc, #168]	; (80062cc <HAL_DMA_Abort_IT+0x1f8>)
 8006222:	4293      	cmp	r3, r2
 8006224:	d019      	beq.n	800625a <HAL_DMA_Abort_IT+0x186>
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	4a29      	ldr	r2, [pc, #164]	; (80062d0 <HAL_DMA_Abort_IT+0x1fc>)
 800622c:	4293      	cmp	r3, r2
 800622e:	d012      	beq.n	8006256 <HAL_DMA_Abort_IT+0x182>
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	4a27      	ldr	r2, [pc, #156]	; (80062d4 <HAL_DMA_Abort_IT+0x200>)
 8006236:	4293      	cmp	r3, r2
 8006238:	d00a      	beq.n	8006250 <HAL_DMA_Abort_IT+0x17c>
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	4a26      	ldr	r2, [pc, #152]	; (80062d8 <HAL_DMA_Abort_IT+0x204>)
 8006240:	4293      	cmp	r3, r2
 8006242:	d102      	bne.n	800624a <HAL_DMA_Abort_IT+0x176>
 8006244:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006248:	e01b      	b.n	8006282 <HAL_DMA_Abort_IT+0x1ae>
 800624a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800624e:	e018      	b.n	8006282 <HAL_DMA_Abort_IT+0x1ae>
 8006250:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006254:	e015      	b.n	8006282 <HAL_DMA_Abort_IT+0x1ae>
 8006256:	2310      	movs	r3, #16
 8006258:	e013      	b.n	8006282 <HAL_DMA_Abort_IT+0x1ae>
 800625a:	2301      	movs	r3, #1
 800625c:	e011      	b.n	8006282 <HAL_DMA_Abort_IT+0x1ae>
 800625e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006262:	e00e      	b.n	8006282 <HAL_DMA_Abort_IT+0x1ae>
 8006264:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8006268:	e00b      	b.n	8006282 <HAL_DMA_Abort_IT+0x1ae>
 800626a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800626e:	e008      	b.n	8006282 <HAL_DMA_Abort_IT+0x1ae>
 8006270:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006274:	e005      	b.n	8006282 <HAL_DMA_Abort_IT+0x1ae>
 8006276:	f44f 7380 	mov.w	r3, #256	; 0x100
 800627a:	e002      	b.n	8006282 <HAL_DMA_Abort_IT+0x1ae>
 800627c:	2310      	movs	r3, #16
 800627e:	e000      	b.n	8006282 <HAL_DMA_Abort_IT+0x1ae>
 8006280:	2301      	movs	r3, #1
 8006282:	4a17      	ldr	r2, [pc, #92]	; (80062e0 <HAL_DMA_Abort_IT+0x20c>)
 8006284:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	2201      	movs	r2, #1
 800628a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	2200      	movs	r2, #0
 8006292:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800629a:	2b00      	cmp	r3, #0
 800629c:	d003      	beq.n	80062a6 <HAL_DMA_Abort_IT+0x1d2>
    {
      hdma->XferAbortCallback(hdma);
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80062a2:	6878      	ldr	r0, [r7, #4]
 80062a4:	4798      	blx	r3
    } 
  }
  return status;
 80062a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80062a8:	4618      	mov	r0, r3
 80062aa:	3710      	adds	r7, #16
 80062ac:	46bd      	mov	sp, r7
 80062ae:	bd80      	pop	{r7, pc}
 80062b0:	40020080 	.word	0x40020080
 80062b4:	40020008 	.word	0x40020008
 80062b8:	4002001c 	.word	0x4002001c
 80062bc:	40020030 	.word	0x40020030
 80062c0:	40020044 	.word	0x40020044
 80062c4:	40020058 	.word	0x40020058
 80062c8:	4002006c 	.word	0x4002006c
 80062cc:	40020408 	.word	0x40020408
 80062d0:	4002041c 	.word	0x4002041c
 80062d4:	40020430 	.word	0x40020430
 80062d8:	40020444 	.word	0x40020444
 80062dc:	40020400 	.word	0x40020400
 80062e0:	40020000 	.word	0x40020000

080062e4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80062e4:	b480      	push	{r7}
 80062e6:	b08b      	sub	sp, #44	; 0x2c
 80062e8:	af00      	add	r7, sp, #0
 80062ea:	6078      	str	r0, [r7, #4]
 80062ec:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80062ee:	2300      	movs	r3, #0
 80062f0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80062f2:	2300      	movs	r3, #0
 80062f4:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80062f6:	e179      	b.n	80065ec <HAL_GPIO_Init+0x308>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80062f8:	2201      	movs	r2, #1
 80062fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062fc:	fa02 f303 	lsl.w	r3, r2, r3
 8006300:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8006302:	683b      	ldr	r3, [r7, #0]
 8006304:	681b      	ldr	r3, [r3, #0]
 8006306:	69fa      	ldr	r2, [r7, #28]
 8006308:	4013      	ands	r3, r2
 800630a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 800630c:	69ba      	ldr	r2, [r7, #24]
 800630e:	69fb      	ldr	r3, [r7, #28]
 8006310:	429a      	cmp	r2, r3
 8006312:	f040 8168 	bne.w	80065e6 <HAL_GPIO_Init+0x302>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8006316:	683b      	ldr	r3, [r7, #0]
 8006318:	685b      	ldr	r3, [r3, #4]
 800631a:	4a96      	ldr	r2, [pc, #600]	; (8006574 <HAL_GPIO_Init+0x290>)
 800631c:	4293      	cmp	r3, r2
 800631e:	d05e      	beq.n	80063de <HAL_GPIO_Init+0xfa>
 8006320:	4a94      	ldr	r2, [pc, #592]	; (8006574 <HAL_GPIO_Init+0x290>)
 8006322:	4293      	cmp	r3, r2
 8006324:	d875      	bhi.n	8006412 <HAL_GPIO_Init+0x12e>
 8006326:	4a94      	ldr	r2, [pc, #592]	; (8006578 <HAL_GPIO_Init+0x294>)
 8006328:	4293      	cmp	r3, r2
 800632a:	d058      	beq.n	80063de <HAL_GPIO_Init+0xfa>
 800632c:	4a92      	ldr	r2, [pc, #584]	; (8006578 <HAL_GPIO_Init+0x294>)
 800632e:	4293      	cmp	r3, r2
 8006330:	d86f      	bhi.n	8006412 <HAL_GPIO_Init+0x12e>
 8006332:	4a92      	ldr	r2, [pc, #584]	; (800657c <HAL_GPIO_Init+0x298>)
 8006334:	4293      	cmp	r3, r2
 8006336:	d052      	beq.n	80063de <HAL_GPIO_Init+0xfa>
 8006338:	4a90      	ldr	r2, [pc, #576]	; (800657c <HAL_GPIO_Init+0x298>)
 800633a:	4293      	cmp	r3, r2
 800633c:	d869      	bhi.n	8006412 <HAL_GPIO_Init+0x12e>
 800633e:	4a90      	ldr	r2, [pc, #576]	; (8006580 <HAL_GPIO_Init+0x29c>)
 8006340:	4293      	cmp	r3, r2
 8006342:	d04c      	beq.n	80063de <HAL_GPIO_Init+0xfa>
 8006344:	4a8e      	ldr	r2, [pc, #568]	; (8006580 <HAL_GPIO_Init+0x29c>)
 8006346:	4293      	cmp	r3, r2
 8006348:	d863      	bhi.n	8006412 <HAL_GPIO_Init+0x12e>
 800634a:	4a8e      	ldr	r2, [pc, #568]	; (8006584 <HAL_GPIO_Init+0x2a0>)
 800634c:	4293      	cmp	r3, r2
 800634e:	d046      	beq.n	80063de <HAL_GPIO_Init+0xfa>
 8006350:	4a8c      	ldr	r2, [pc, #560]	; (8006584 <HAL_GPIO_Init+0x2a0>)
 8006352:	4293      	cmp	r3, r2
 8006354:	d85d      	bhi.n	8006412 <HAL_GPIO_Init+0x12e>
 8006356:	2b12      	cmp	r3, #18
 8006358:	d82a      	bhi.n	80063b0 <HAL_GPIO_Init+0xcc>
 800635a:	2b12      	cmp	r3, #18
 800635c:	d859      	bhi.n	8006412 <HAL_GPIO_Init+0x12e>
 800635e:	a201      	add	r2, pc, #4	; (adr r2, 8006364 <HAL_GPIO_Init+0x80>)
 8006360:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006364:	080063df 	.word	0x080063df
 8006368:	080063b9 	.word	0x080063b9
 800636c:	080063cb 	.word	0x080063cb
 8006370:	0800640d 	.word	0x0800640d
 8006374:	08006413 	.word	0x08006413
 8006378:	08006413 	.word	0x08006413
 800637c:	08006413 	.word	0x08006413
 8006380:	08006413 	.word	0x08006413
 8006384:	08006413 	.word	0x08006413
 8006388:	08006413 	.word	0x08006413
 800638c:	08006413 	.word	0x08006413
 8006390:	08006413 	.word	0x08006413
 8006394:	08006413 	.word	0x08006413
 8006398:	08006413 	.word	0x08006413
 800639c:	08006413 	.word	0x08006413
 80063a0:	08006413 	.word	0x08006413
 80063a4:	08006413 	.word	0x08006413
 80063a8:	080063c1 	.word	0x080063c1
 80063ac:	080063d5 	.word	0x080063d5
 80063b0:	4a75      	ldr	r2, [pc, #468]	; (8006588 <HAL_GPIO_Init+0x2a4>)
 80063b2:	4293      	cmp	r3, r2
 80063b4:	d013      	beq.n	80063de <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80063b6:	e02c      	b.n	8006412 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80063b8:	683b      	ldr	r3, [r7, #0]
 80063ba:	68db      	ldr	r3, [r3, #12]
 80063bc:	623b      	str	r3, [r7, #32]
          break;
 80063be:	e029      	b.n	8006414 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80063c0:	683b      	ldr	r3, [r7, #0]
 80063c2:	68db      	ldr	r3, [r3, #12]
 80063c4:	3304      	adds	r3, #4
 80063c6:	623b      	str	r3, [r7, #32]
          break;
 80063c8:	e024      	b.n	8006414 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80063ca:	683b      	ldr	r3, [r7, #0]
 80063cc:	68db      	ldr	r3, [r3, #12]
 80063ce:	3308      	adds	r3, #8
 80063d0:	623b      	str	r3, [r7, #32]
          break;
 80063d2:	e01f      	b.n	8006414 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80063d4:	683b      	ldr	r3, [r7, #0]
 80063d6:	68db      	ldr	r3, [r3, #12]
 80063d8:	330c      	adds	r3, #12
 80063da:	623b      	str	r3, [r7, #32]
          break;
 80063dc:	e01a      	b.n	8006414 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80063de:	683b      	ldr	r3, [r7, #0]
 80063e0:	689b      	ldr	r3, [r3, #8]
 80063e2:	2b00      	cmp	r3, #0
 80063e4:	d102      	bne.n	80063ec <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80063e6:	2304      	movs	r3, #4
 80063e8:	623b      	str	r3, [r7, #32]
          break;
 80063ea:	e013      	b.n	8006414 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80063ec:	683b      	ldr	r3, [r7, #0]
 80063ee:	689b      	ldr	r3, [r3, #8]
 80063f0:	2b01      	cmp	r3, #1
 80063f2:	d105      	bne.n	8006400 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80063f4:	2308      	movs	r3, #8
 80063f6:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	69fa      	ldr	r2, [r7, #28]
 80063fc:	611a      	str	r2, [r3, #16]
          break;
 80063fe:	e009      	b.n	8006414 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8006400:	2308      	movs	r3, #8
 8006402:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	69fa      	ldr	r2, [r7, #28]
 8006408:	615a      	str	r2, [r3, #20]
          break;
 800640a:	e003      	b.n	8006414 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800640c:	2300      	movs	r3, #0
 800640e:	623b      	str	r3, [r7, #32]
          break;
 8006410:	e000      	b.n	8006414 <HAL_GPIO_Init+0x130>
          break;
 8006412:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8006414:	69bb      	ldr	r3, [r7, #24]
 8006416:	2bff      	cmp	r3, #255	; 0xff
 8006418:	d801      	bhi.n	800641e <HAL_GPIO_Init+0x13a>
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	e001      	b.n	8006422 <HAL_GPIO_Init+0x13e>
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	3304      	adds	r3, #4
 8006422:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8006424:	69bb      	ldr	r3, [r7, #24]
 8006426:	2bff      	cmp	r3, #255	; 0xff
 8006428:	d802      	bhi.n	8006430 <HAL_GPIO_Init+0x14c>
 800642a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800642c:	009b      	lsls	r3, r3, #2
 800642e:	e002      	b.n	8006436 <HAL_GPIO_Init+0x152>
 8006430:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006432:	3b08      	subs	r3, #8
 8006434:	009b      	lsls	r3, r3, #2
 8006436:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8006438:	697b      	ldr	r3, [r7, #20]
 800643a:	681a      	ldr	r2, [r3, #0]
 800643c:	210f      	movs	r1, #15
 800643e:	693b      	ldr	r3, [r7, #16]
 8006440:	fa01 f303 	lsl.w	r3, r1, r3
 8006444:	43db      	mvns	r3, r3
 8006446:	401a      	ands	r2, r3
 8006448:	6a39      	ldr	r1, [r7, #32]
 800644a:	693b      	ldr	r3, [r7, #16]
 800644c:	fa01 f303 	lsl.w	r3, r1, r3
 8006450:	431a      	orrs	r2, r3
 8006452:	697b      	ldr	r3, [r7, #20]
 8006454:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8006456:	683b      	ldr	r3, [r7, #0]
 8006458:	685b      	ldr	r3, [r3, #4]
 800645a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800645e:	2b00      	cmp	r3, #0
 8006460:	f000 80c1 	beq.w	80065e6 <HAL_GPIO_Init+0x302>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8006464:	4b49      	ldr	r3, [pc, #292]	; (800658c <HAL_GPIO_Init+0x2a8>)
 8006466:	699b      	ldr	r3, [r3, #24]
 8006468:	4a48      	ldr	r2, [pc, #288]	; (800658c <HAL_GPIO_Init+0x2a8>)
 800646a:	f043 0301 	orr.w	r3, r3, #1
 800646e:	6193      	str	r3, [r2, #24]
 8006470:	4b46      	ldr	r3, [pc, #280]	; (800658c <HAL_GPIO_Init+0x2a8>)
 8006472:	699b      	ldr	r3, [r3, #24]
 8006474:	f003 0301 	and.w	r3, r3, #1
 8006478:	60bb      	str	r3, [r7, #8]
 800647a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800647c:	4a44      	ldr	r2, [pc, #272]	; (8006590 <HAL_GPIO_Init+0x2ac>)
 800647e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006480:	089b      	lsrs	r3, r3, #2
 8006482:	3302      	adds	r3, #2
 8006484:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006488:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800648a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800648c:	f003 0303 	and.w	r3, r3, #3
 8006490:	009b      	lsls	r3, r3, #2
 8006492:	220f      	movs	r2, #15
 8006494:	fa02 f303 	lsl.w	r3, r2, r3
 8006498:	43db      	mvns	r3, r3
 800649a:	68fa      	ldr	r2, [r7, #12]
 800649c:	4013      	ands	r3, r2
 800649e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	4a3c      	ldr	r2, [pc, #240]	; (8006594 <HAL_GPIO_Init+0x2b0>)
 80064a4:	4293      	cmp	r3, r2
 80064a6:	d01f      	beq.n	80064e8 <HAL_GPIO_Init+0x204>
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	4a3b      	ldr	r2, [pc, #236]	; (8006598 <HAL_GPIO_Init+0x2b4>)
 80064ac:	4293      	cmp	r3, r2
 80064ae:	d019      	beq.n	80064e4 <HAL_GPIO_Init+0x200>
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	4a3a      	ldr	r2, [pc, #232]	; (800659c <HAL_GPIO_Init+0x2b8>)
 80064b4:	4293      	cmp	r3, r2
 80064b6:	d013      	beq.n	80064e0 <HAL_GPIO_Init+0x1fc>
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	4a39      	ldr	r2, [pc, #228]	; (80065a0 <HAL_GPIO_Init+0x2bc>)
 80064bc:	4293      	cmp	r3, r2
 80064be:	d00d      	beq.n	80064dc <HAL_GPIO_Init+0x1f8>
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	4a38      	ldr	r2, [pc, #224]	; (80065a4 <HAL_GPIO_Init+0x2c0>)
 80064c4:	4293      	cmp	r3, r2
 80064c6:	d007      	beq.n	80064d8 <HAL_GPIO_Init+0x1f4>
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	4a37      	ldr	r2, [pc, #220]	; (80065a8 <HAL_GPIO_Init+0x2c4>)
 80064cc:	4293      	cmp	r3, r2
 80064ce:	d101      	bne.n	80064d4 <HAL_GPIO_Init+0x1f0>
 80064d0:	2305      	movs	r3, #5
 80064d2:	e00a      	b.n	80064ea <HAL_GPIO_Init+0x206>
 80064d4:	2306      	movs	r3, #6
 80064d6:	e008      	b.n	80064ea <HAL_GPIO_Init+0x206>
 80064d8:	2304      	movs	r3, #4
 80064da:	e006      	b.n	80064ea <HAL_GPIO_Init+0x206>
 80064dc:	2303      	movs	r3, #3
 80064de:	e004      	b.n	80064ea <HAL_GPIO_Init+0x206>
 80064e0:	2302      	movs	r3, #2
 80064e2:	e002      	b.n	80064ea <HAL_GPIO_Init+0x206>
 80064e4:	2301      	movs	r3, #1
 80064e6:	e000      	b.n	80064ea <HAL_GPIO_Init+0x206>
 80064e8:	2300      	movs	r3, #0
 80064ea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80064ec:	f002 0203 	and.w	r2, r2, #3
 80064f0:	0092      	lsls	r2, r2, #2
 80064f2:	4093      	lsls	r3, r2
 80064f4:	68fa      	ldr	r2, [r7, #12]
 80064f6:	4313      	orrs	r3, r2
 80064f8:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80064fa:	4925      	ldr	r1, [pc, #148]	; (8006590 <HAL_GPIO_Init+0x2ac>)
 80064fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064fe:	089b      	lsrs	r3, r3, #2
 8006500:	3302      	adds	r3, #2
 8006502:	68fa      	ldr	r2, [r7, #12]
 8006504:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8006508:	683b      	ldr	r3, [r7, #0]
 800650a:	685b      	ldr	r3, [r3, #4]
 800650c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006510:	2b00      	cmp	r3, #0
 8006512:	d006      	beq.n	8006522 <HAL_GPIO_Init+0x23e>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8006514:	4b25      	ldr	r3, [pc, #148]	; (80065ac <HAL_GPIO_Init+0x2c8>)
 8006516:	689a      	ldr	r2, [r3, #8]
 8006518:	4924      	ldr	r1, [pc, #144]	; (80065ac <HAL_GPIO_Init+0x2c8>)
 800651a:	69bb      	ldr	r3, [r7, #24]
 800651c:	4313      	orrs	r3, r2
 800651e:	608b      	str	r3, [r1, #8]
 8006520:	e006      	b.n	8006530 <HAL_GPIO_Init+0x24c>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8006522:	4b22      	ldr	r3, [pc, #136]	; (80065ac <HAL_GPIO_Init+0x2c8>)
 8006524:	689a      	ldr	r2, [r3, #8]
 8006526:	69bb      	ldr	r3, [r7, #24]
 8006528:	43db      	mvns	r3, r3
 800652a:	4920      	ldr	r1, [pc, #128]	; (80065ac <HAL_GPIO_Init+0x2c8>)
 800652c:	4013      	ands	r3, r2
 800652e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8006530:	683b      	ldr	r3, [r7, #0]
 8006532:	685b      	ldr	r3, [r3, #4]
 8006534:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006538:	2b00      	cmp	r3, #0
 800653a:	d006      	beq.n	800654a <HAL_GPIO_Init+0x266>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800653c:	4b1b      	ldr	r3, [pc, #108]	; (80065ac <HAL_GPIO_Init+0x2c8>)
 800653e:	68da      	ldr	r2, [r3, #12]
 8006540:	491a      	ldr	r1, [pc, #104]	; (80065ac <HAL_GPIO_Init+0x2c8>)
 8006542:	69bb      	ldr	r3, [r7, #24]
 8006544:	4313      	orrs	r3, r2
 8006546:	60cb      	str	r3, [r1, #12]
 8006548:	e006      	b.n	8006558 <HAL_GPIO_Init+0x274>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800654a:	4b18      	ldr	r3, [pc, #96]	; (80065ac <HAL_GPIO_Init+0x2c8>)
 800654c:	68da      	ldr	r2, [r3, #12]
 800654e:	69bb      	ldr	r3, [r7, #24]
 8006550:	43db      	mvns	r3, r3
 8006552:	4916      	ldr	r1, [pc, #88]	; (80065ac <HAL_GPIO_Init+0x2c8>)
 8006554:	4013      	ands	r3, r2
 8006556:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8006558:	683b      	ldr	r3, [r7, #0]
 800655a:	685b      	ldr	r3, [r3, #4]
 800655c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006560:	2b00      	cmp	r3, #0
 8006562:	d025      	beq.n	80065b0 <HAL_GPIO_Init+0x2cc>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8006564:	4b11      	ldr	r3, [pc, #68]	; (80065ac <HAL_GPIO_Init+0x2c8>)
 8006566:	685a      	ldr	r2, [r3, #4]
 8006568:	4910      	ldr	r1, [pc, #64]	; (80065ac <HAL_GPIO_Init+0x2c8>)
 800656a:	69bb      	ldr	r3, [r7, #24]
 800656c:	4313      	orrs	r3, r2
 800656e:	604b      	str	r3, [r1, #4]
 8006570:	e025      	b.n	80065be <HAL_GPIO_Init+0x2da>
 8006572:	bf00      	nop
 8006574:	10320000 	.word	0x10320000
 8006578:	10310000 	.word	0x10310000
 800657c:	10220000 	.word	0x10220000
 8006580:	10210000 	.word	0x10210000
 8006584:	10120000 	.word	0x10120000
 8006588:	10110000 	.word	0x10110000
 800658c:	40021000 	.word	0x40021000
 8006590:	40010000 	.word	0x40010000
 8006594:	40010800 	.word	0x40010800
 8006598:	40010c00 	.word	0x40010c00
 800659c:	40011000 	.word	0x40011000
 80065a0:	40011400 	.word	0x40011400
 80065a4:	40011800 	.word	0x40011800
 80065a8:	40011c00 	.word	0x40011c00
 80065ac:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80065b0:	4b15      	ldr	r3, [pc, #84]	; (8006608 <HAL_GPIO_Init+0x324>)
 80065b2:	685a      	ldr	r2, [r3, #4]
 80065b4:	69bb      	ldr	r3, [r7, #24]
 80065b6:	43db      	mvns	r3, r3
 80065b8:	4913      	ldr	r1, [pc, #76]	; (8006608 <HAL_GPIO_Init+0x324>)
 80065ba:	4013      	ands	r3, r2
 80065bc:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80065be:	683b      	ldr	r3, [r7, #0]
 80065c0:	685b      	ldr	r3, [r3, #4]
 80065c2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80065c6:	2b00      	cmp	r3, #0
 80065c8:	d006      	beq.n	80065d8 <HAL_GPIO_Init+0x2f4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80065ca:	4b0f      	ldr	r3, [pc, #60]	; (8006608 <HAL_GPIO_Init+0x324>)
 80065cc:	681a      	ldr	r2, [r3, #0]
 80065ce:	490e      	ldr	r1, [pc, #56]	; (8006608 <HAL_GPIO_Init+0x324>)
 80065d0:	69bb      	ldr	r3, [r7, #24]
 80065d2:	4313      	orrs	r3, r2
 80065d4:	600b      	str	r3, [r1, #0]
 80065d6:	e006      	b.n	80065e6 <HAL_GPIO_Init+0x302>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80065d8:	4b0b      	ldr	r3, [pc, #44]	; (8006608 <HAL_GPIO_Init+0x324>)
 80065da:	681a      	ldr	r2, [r3, #0]
 80065dc:	69bb      	ldr	r3, [r7, #24]
 80065de:	43db      	mvns	r3, r3
 80065e0:	4909      	ldr	r1, [pc, #36]	; (8006608 <HAL_GPIO_Init+0x324>)
 80065e2:	4013      	ands	r3, r2
 80065e4:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80065e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065e8:	3301      	adds	r3, #1
 80065ea:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80065ec:	683b      	ldr	r3, [r7, #0]
 80065ee:	681a      	ldr	r2, [r3, #0]
 80065f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065f2:	fa22 f303 	lsr.w	r3, r2, r3
 80065f6:	2b00      	cmp	r3, #0
 80065f8:	f47f ae7e 	bne.w	80062f8 <HAL_GPIO_Init+0x14>
  }
}
 80065fc:	bf00      	nop
 80065fe:	bf00      	nop
 8006600:	372c      	adds	r7, #44	; 0x2c
 8006602:	46bd      	mov	sp, r7
 8006604:	bc80      	pop	{r7}
 8006606:	4770      	bx	lr
 8006608:	40010400 	.word	0x40010400

0800660c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800660c:	b480      	push	{r7}
 800660e:	b085      	sub	sp, #20
 8006610:	af00      	add	r7, sp, #0
 8006612:	6078      	str	r0, [r7, #4]
 8006614:	460b      	mov	r3, r1
 8006616:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	689a      	ldr	r2, [r3, #8]
 800661c:	887b      	ldrh	r3, [r7, #2]
 800661e:	4013      	ands	r3, r2
 8006620:	2b00      	cmp	r3, #0
 8006622:	d002      	beq.n	800662a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8006624:	2301      	movs	r3, #1
 8006626:	73fb      	strb	r3, [r7, #15]
 8006628:	e001      	b.n	800662e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800662a:	2300      	movs	r3, #0
 800662c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800662e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006630:	4618      	mov	r0, r3
 8006632:	3714      	adds	r7, #20
 8006634:	46bd      	mov	sp, r7
 8006636:	bc80      	pop	{r7}
 8006638:	4770      	bx	lr

0800663a <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800663a:	b480      	push	{r7}
 800663c:	b083      	sub	sp, #12
 800663e:	af00      	add	r7, sp, #0
 8006640:	6078      	str	r0, [r7, #4]
 8006642:	460b      	mov	r3, r1
 8006644:	807b      	strh	r3, [r7, #2]
 8006646:	4613      	mov	r3, r2
 8006648:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800664a:	787b      	ldrb	r3, [r7, #1]
 800664c:	2b00      	cmp	r3, #0
 800664e:	d003      	beq.n	8006658 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8006650:	887a      	ldrh	r2, [r7, #2]
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8006656:	e003      	b.n	8006660 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8006658:	887b      	ldrh	r3, [r7, #2]
 800665a:	041a      	lsls	r2, r3, #16
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	611a      	str	r2, [r3, #16]
}
 8006660:	bf00      	nop
 8006662:	370c      	adds	r7, #12
 8006664:	46bd      	mov	sp, r7
 8006666:	bc80      	pop	{r7}
 8006668:	4770      	bx	lr
	...

0800666c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800666c:	b580      	push	{r7, lr}
 800666e:	b082      	sub	sp, #8
 8006670:	af00      	add	r7, sp, #0
 8006672:	4603      	mov	r3, r0
 8006674:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8006676:	4b08      	ldr	r3, [pc, #32]	; (8006698 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8006678:	695a      	ldr	r2, [r3, #20]
 800667a:	88fb      	ldrh	r3, [r7, #6]
 800667c:	4013      	ands	r3, r2
 800667e:	2b00      	cmp	r3, #0
 8006680:	d006      	beq.n	8006690 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8006682:	4a05      	ldr	r2, [pc, #20]	; (8006698 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8006684:	88fb      	ldrh	r3, [r7, #6]
 8006686:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8006688:	88fb      	ldrh	r3, [r7, #6]
 800668a:	4618      	mov	r0, r3
 800668c:	f7ff fa7e 	bl	8005b8c <HAL_GPIO_EXTI_Callback>
  }
}
 8006690:	bf00      	nop
 8006692:	3708      	adds	r7, #8
 8006694:	46bd      	mov	sp, r7
 8006696:	bd80      	pop	{r7, pc}
 8006698:	40010400 	.word	0x40010400

0800669c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800669c:	b580      	push	{r7, lr}
 800669e:	b086      	sub	sp, #24
 80066a0:	af00      	add	r7, sp, #0
 80066a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	2b00      	cmp	r3, #0
 80066a8:	d101      	bne.n	80066ae <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80066aa:	2301      	movs	r3, #1
 80066ac:	e272      	b.n	8006b94 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	f003 0301 	and.w	r3, r3, #1
 80066b6:	2b00      	cmp	r3, #0
 80066b8:	f000 8087 	beq.w	80067ca <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80066bc:	4b92      	ldr	r3, [pc, #584]	; (8006908 <HAL_RCC_OscConfig+0x26c>)
 80066be:	685b      	ldr	r3, [r3, #4]
 80066c0:	f003 030c 	and.w	r3, r3, #12
 80066c4:	2b04      	cmp	r3, #4
 80066c6:	d00c      	beq.n	80066e2 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80066c8:	4b8f      	ldr	r3, [pc, #572]	; (8006908 <HAL_RCC_OscConfig+0x26c>)
 80066ca:	685b      	ldr	r3, [r3, #4]
 80066cc:	f003 030c 	and.w	r3, r3, #12
 80066d0:	2b08      	cmp	r3, #8
 80066d2:	d112      	bne.n	80066fa <HAL_RCC_OscConfig+0x5e>
 80066d4:	4b8c      	ldr	r3, [pc, #560]	; (8006908 <HAL_RCC_OscConfig+0x26c>)
 80066d6:	685b      	ldr	r3, [r3, #4]
 80066d8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80066dc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80066e0:	d10b      	bne.n	80066fa <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80066e2:	4b89      	ldr	r3, [pc, #548]	; (8006908 <HAL_RCC_OscConfig+0x26c>)
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80066ea:	2b00      	cmp	r3, #0
 80066ec:	d06c      	beq.n	80067c8 <HAL_RCC_OscConfig+0x12c>
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	685b      	ldr	r3, [r3, #4]
 80066f2:	2b00      	cmp	r3, #0
 80066f4:	d168      	bne.n	80067c8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80066f6:	2301      	movs	r3, #1
 80066f8:	e24c      	b.n	8006b94 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	685b      	ldr	r3, [r3, #4]
 80066fe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006702:	d106      	bne.n	8006712 <HAL_RCC_OscConfig+0x76>
 8006704:	4b80      	ldr	r3, [pc, #512]	; (8006908 <HAL_RCC_OscConfig+0x26c>)
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	4a7f      	ldr	r2, [pc, #508]	; (8006908 <HAL_RCC_OscConfig+0x26c>)
 800670a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800670e:	6013      	str	r3, [r2, #0]
 8006710:	e02e      	b.n	8006770 <HAL_RCC_OscConfig+0xd4>
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	685b      	ldr	r3, [r3, #4]
 8006716:	2b00      	cmp	r3, #0
 8006718:	d10c      	bne.n	8006734 <HAL_RCC_OscConfig+0x98>
 800671a:	4b7b      	ldr	r3, [pc, #492]	; (8006908 <HAL_RCC_OscConfig+0x26c>)
 800671c:	681b      	ldr	r3, [r3, #0]
 800671e:	4a7a      	ldr	r2, [pc, #488]	; (8006908 <HAL_RCC_OscConfig+0x26c>)
 8006720:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006724:	6013      	str	r3, [r2, #0]
 8006726:	4b78      	ldr	r3, [pc, #480]	; (8006908 <HAL_RCC_OscConfig+0x26c>)
 8006728:	681b      	ldr	r3, [r3, #0]
 800672a:	4a77      	ldr	r2, [pc, #476]	; (8006908 <HAL_RCC_OscConfig+0x26c>)
 800672c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006730:	6013      	str	r3, [r2, #0]
 8006732:	e01d      	b.n	8006770 <HAL_RCC_OscConfig+0xd4>
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	685b      	ldr	r3, [r3, #4]
 8006738:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800673c:	d10c      	bne.n	8006758 <HAL_RCC_OscConfig+0xbc>
 800673e:	4b72      	ldr	r3, [pc, #456]	; (8006908 <HAL_RCC_OscConfig+0x26c>)
 8006740:	681b      	ldr	r3, [r3, #0]
 8006742:	4a71      	ldr	r2, [pc, #452]	; (8006908 <HAL_RCC_OscConfig+0x26c>)
 8006744:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006748:	6013      	str	r3, [r2, #0]
 800674a:	4b6f      	ldr	r3, [pc, #444]	; (8006908 <HAL_RCC_OscConfig+0x26c>)
 800674c:	681b      	ldr	r3, [r3, #0]
 800674e:	4a6e      	ldr	r2, [pc, #440]	; (8006908 <HAL_RCC_OscConfig+0x26c>)
 8006750:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006754:	6013      	str	r3, [r2, #0]
 8006756:	e00b      	b.n	8006770 <HAL_RCC_OscConfig+0xd4>
 8006758:	4b6b      	ldr	r3, [pc, #428]	; (8006908 <HAL_RCC_OscConfig+0x26c>)
 800675a:	681b      	ldr	r3, [r3, #0]
 800675c:	4a6a      	ldr	r2, [pc, #424]	; (8006908 <HAL_RCC_OscConfig+0x26c>)
 800675e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006762:	6013      	str	r3, [r2, #0]
 8006764:	4b68      	ldr	r3, [pc, #416]	; (8006908 <HAL_RCC_OscConfig+0x26c>)
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	4a67      	ldr	r2, [pc, #412]	; (8006908 <HAL_RCC_OscConfig+0x26c>)
 800676a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800676e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	685b      	ldr	r3, [r3, #4]
 8006774:	2b00      	cmp	r3, #0
 8006776:	d013      	beq.n	80067a0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006778:	f7ff fb36 	bl	8005de8 <HAL_GetTick>
 800677c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800677e:	e008      	b.n	8006792 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006780:	f7ff fb32 	bl	8005de8 <HAL_GetTick>
 8006784:	4602      	mov	r2, r0
 8006786:	693b      	ldr	r3, [r7, #16]
 8006788:	1ad3      	subs	r3, r2, r3
 800678a:	2b64      	cmp	r3, #100	; 0x64
 800678c:	d901      	bls.n	8006792 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800678e:	2303      	movs	r3, #3
 8006790:	e200      	b.n	8006b94 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006792:	4b5d      	ldr	r3, [pc, #372]	; (8006908 <HAL_RCC_OscConfig+0x26c>)
 8006794:	681b      	ldr	r3, [r3, #0]
 8006796:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800679a:	2b00      	cmp	r3, #0
 800679c:	d0f0      	beq.n	8006780 <HAL_RCC_OscConfig+0xe4>
 800679e:	e014      	b.n	80067ca <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80067a0:	f7ff fb22 	bl	8005de8 <HAL_GetTick>
 80067a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80067a6:	e008      	b.n	80067ba <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80067a8:	f7ff fb1e 	bl	8005de8 <HAL_GetTick>
 80067ac:	4602      	mov	r2, r0
 80067ae:	693b      	ldr	r3, [r7, #16]
 80067b0:	1ad3      	subs	r3, r2, r3
 80067b2:	2b64      	cmp	r3, #100	; 0x64
 80067b4:	d901      	bls.n	80067ba <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80067b6:	2303      	movs	r3, #3
 80067b8:	e1ec      	b.n	8006b94 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80067ba:	4b53      	ldr	r3, [pc, #332]	; (8006908 <HAL_RCC_OscConfig+0x26c>)
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80067c2:	2b00      	cmp	r3, #0
 80067c4:	d1f0      	bne.n	80067a8 <HAL_RCC_OscConfig+0x10c>
 80067c6:	e000      	b.n	80067ca <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80067c8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	681b      	ldr	r3, [r3, #0]
 80067ce:	f003 0302 	and.w	r3, r3, #2
 80067d2:	2b00      	cmp	r3, #0
 80067d4:	d063      	beq.n	800689e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80067d6:	4b4c      	ldr	r3, [pc, #304]	; (8006908 <HAL_RCC_OscConfig+0x26c>)
 80067d8:	685b      	ldr	r3, [r3, #4]
 80067da:	f003 030c 	and.w	r3, r3, #12
 80067de:	2b00      	cmp	r3, #0
 80067e0:	d00b      	beq.n	80067fa <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80067e2:	4b49      	ldr	r3, [pc, #292]	; (8006908 <HAL_RCC_OscConfig+0x26c>)
 80067e4:	685b      	ldr	r3, [r3, #4]
 80067e6:	f003 030c 	and.w	r3, r3, #12
 80067ea:	2b08      	cmp	r3, #8
 80067ec:	d11c      	bne.n	8006828 <HAL_RCC_OscConfig+0x18c>
 80067ee:	4b46      	ldr	r3, [pc, #280]	; (8006908 <HAL_RCC_OscConfig+0x26c>)
 80067f0:	685b      	ldr	r3, [r3, #4]
 80067f2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80067f6:	2b00      	cmp	r3, #0
 80067f8:	d116      	bne.n	8006828 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80067fa:	4b43      	ldr	r3, [pc, #268]	; (8006908 <HAL_RCC_OscConfig+0x26c>)
 80067fc:	681b      	ldr	r3, [r3, #0]
 80067fe:	f003 0302 	and.w	r3, r3, #2
 8006802:	2b00      	cmp	r3, #0
 8006804:	d005      	beq.n	8006812 <HAL_RCC_OscConfig+0x176>
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	691b      	ldr	r3, [r3, #16]
 800680a:	2b01      	cmp	r3, #1
 800680c:	d001      	beq.n	8006812 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800680e:	2301      	movs	r3, #1
 8006810:	e1c0      	b.n	8006b94 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006812:	4b3d      	ldr	r3, [pc, #244]	; (8006908 <HAL_RCC_OscConfig+0x26c>)
 8006814:	681b      	ldr	r3, [r3, #0]
 8006816:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	695b      	ldr	r3, [r3, #20]
 800681e:	00db      	lsls	r3, r3, #3
 8006820:	4939      	ldr	r1, [pc, #228]	; (8006908 <HAL_RCC_OscConfig+0x26c>)
 8006822:	4313      	orrs	r3, r2
 8006824:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006826:	e03a      	b.n	800689e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	691b      	ldr	r3, [r3, #16]
 800682c:	2b00      	cmp	r3, #0
 800682e:	d020      	beq.n	8006872 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006830:	4b36      	ldr	r3, [pc, #216]	; (800690c <HAL_RCC_OscConfig+0x270>)
 8006832:	2201      	movs	r2, #1
 8006834:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006836:	f7ff fad7 	bl	8005de8 <HAL_GetTick>
 800683a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800683c:	e008      	b.n	8006850 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800683e:	f7ff fad3 	bl	8005de8 <HAL_GetTick>
 8006842:	4602      	mov	r2, r0
 8006844:	693b      	ldr	r3, [r7, #16]
 8006846:	1ad3      	subs	r3, r2, r3
 8006848:	2b02      	cmp	r3, #2
 800684a:	d901      	bls.n	8006850 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800684c:	2303      	movs	r3, #3
 800684e:	e1a1      	b.n	8006b94 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006850:	4b2d      	ldr	r3, [pc, #180]	; (8006908 <HAL_RCC_OscConfig+0x26c>)
 8006852:	681b      	ldr	r3, [r3, #0]
 8006854:	f003 0302 	and.w	r3, r3, #2
 8006858:	2b00      	cmp	r3, #0
 800685a:	d0f0      	beq.n	800683e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800685c:	4b2a      	ldr	r3, [pc, #168]	; (8006908 <HAL_RCC_OscConfig+0x26c>)
 800685e:	681b      	ldr	r3, [r3, #0]
 8006860:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	695b      	ldr	r3, [r3, #20]
 8006868:	00db      	lsls	r3, r3, #3
 800686a:	4927      	ldr	r1, [pc, #156]	; (8006908 <HAL_RCC_OscConfig+0x26c>)
 800686c:	4313      	orrs	r3, r2
 800686e:	600b      	str	r3, [r1, #0]
 8006870:	e015      	b.n	800689e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006872:	4b26      	ldr	r3, [pc, #152]	; (800690c <HAL_RCC_OscConfig+0x270>)
 8006874:	2200      	movs	r2, #0
 8006876:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006878:	f7ff fab6 	bl	8005de8 <HAL_GetTick>
 800687c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800687e:	e008      	b.n	8006892 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006880:	f7ff fab2 	bl	8005de8 <HAL_GetTick>
 8006884:	4602      	mov	r2, r0
 8006886:	693b      	ldr	r3, [r7, #16]
 8006888:	1ad3      	subs	r3, r2, r3
 800688a:	2b02      	cmp	r3, #2
 800688c:	d901      	bls.n	8006892 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800688e:	2303      	movs	r3, #3
 8006890:	e180      	b.n	8006b94 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006892:	4b1d      	ldr	r3, [pc, #116]	; (8006908 <HAL_RCC_OscConfig+0x26c>)
 8006894:	681b      	ldr	r3, [r3, #0]
 8006896:	f003 0302 	and.w	r3, r3, #2
 800689a:	2b00      	cmp	r3, #0
 800689c:	d1f0      	bne.n	8006880 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	f003 0308 	and.w	r3, r3, #8
 80068a6:	2b00      	cmp	r3, #0
 80068a8:	d03a      	beq.n	8006920 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	699b      	ldr	r3, [r3, #24]
 80068ae:	2b00      	cmp	r3, #0
 80068b0:	d019      	beq.n	80068e6 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80068b2:	4b17      	ldr	r3, [pc, #92]	; (8006910 <HAL_RCC_OscConfig+0x274>)
 80068b4:	2201      	movs	r2, #1
 80068b6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80068b8:	f7ff fa96 	bl	8005de8 <HAL_GetTick>
 80068bc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80068be:	e008      	b.n	80068d2 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80068c0:	f7ff fa92 	bl	8005de8 <HAL_GetTick>
 80068c4:	4602      	mov	r2, r0
 80068c6:	693b      	ldr	r3, [r7, #16]
 80068c8:	1ad3      	subs	r3, r2, r3
 80068ca:	2b02      	cmp	r3, #2
 80068cc:	d901      	bls.n	80068d2 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80068ce:	2303      	movs	r3, #3
 80068d0:	e160      	b.n	8006b94 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80068d2:	4b0d      	ldr	r3, [pc, #52]	; (8006908 <HAL_RCC_OscConfig+0x26c>)
 80068d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068d6:	f003 0302 	and.w	r3, r3, #2
 80068da:	2b00      	cmp	r3, #0
 80068dc:	d0f0      	beq.n	80068c0 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80068de:	2001      	movs	r0, #1
 80068e0:	f000 face 	bl	8006e80 <RCC_Delay>
 80068e4:	e01c      	b.n	8006920 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80068e6:	4b0a      	ldr	r3, [pc, #40]	; (8006910 <HAL_RCC_OscConfig+0x274>)
 80068e8:	2200      	movs	r2, #0
 80068ea:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80068ec:	f7ff fa7c 	bl	8005de8 <HAL_GetTick>
 80068f0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80068f2:	e00f      	b.n	8006914 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80068f4:	f7ff fa78 	bl	8005de8 <HAL_GetTick>
 80068f8:	4602      	mov	r2, r0
 80068fa:	693b      	ldr	r3, [r7, #16]
 80068fc:	1ad3      	subs	r3, r2, r3
 80068fe:	2b02      	cmp	r3, #2
 8006900:	d908      	bls.n	8006914 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8006902:	2303      	movs	r3, #3
 8006904:	e146      	b.n	8006b94 <HAL_RCC_OscConfig+0x4f8>
 8006906:	bf00      	nop
 8006908:	40021000 	.word	0x40021000
 800690c:	42420000 	.word	0x42420000
 8006910:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006914:	4b92      	ldr	r3, [pc, #584]	; (8006b60 <HAL_RCC_OscConfig+0x4c4>)
 8006916:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006918:	f003 0302 	and.w	r3, r3, #2
 800691c:	2b00      	cmp	r3, #0
 800691e:	d1e9      	bne.n	80068f4 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	681b      	ldr	r3, [r3, #0]
 8006924:	f003 0304 	and.w	r3, r3, #4
 8006928:	2b00      	cmp	r3, #0
 800692a:	f000 80a6 	beq.w	8006a7a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800692e:	2300      	movs	r3, #0
 8006930:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006932:	4b8b      	ldr	r3, [pc, #556]	; (8006b60 <HAL_RCC_OscConfig+0x4c4>)
 8006934:	69db      	ldr	r3, [r3, #28]
 8006936:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800693a:	2b00      	cmp	r3, #0
 800693c:	d10d      	bne.n	800695a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800693e:	4b88      	ldr	r3, [pc, #544]	; (8006b60 <HAL_RCC_OscConfig+0x4c4>)
 8006940:	69db      	ldr	r3, [r3, #28]
 8006942:	4a87      	ldr	r2, [pc, #540]	; (8006b60 <HAL_RCC_OscConfig+0x4c4>)
 8006944:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006948:	61d3      	str	r3, [r2, #28]
 800694a:	4b85      	ldr	r3, [pc, #532]	; (8006b60 <HAL_RCC_OscConfig+0x4c4>)
 800694c:	69db      	ldr	r3, [r3, #28]
 800694e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006952:	60bb      	str	r3, [r7, #8]
 8006954:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006956:	2301      	movs	r3, #1
 8006958:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800695a:	4b82      	ldr	r3, [pc, #520]	; (8006b64 <HAL_RCC_OscConfig+0x4c8>)
 800695c:	681b      	ldr	r3, [r3, #0]
 800695e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006962:	2b00      	cmp	r3, #0
 8006964:	d118      	bne.n	8006998 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006966:	4b7f      	ldr	r3, [pc, #508]	; (8006b64 <HAL_RCC_OscConfig+0x4c8>)
 8006968:	681b      	ldr	r3, [r3, #0]
 800696a:	4a7e      	ldr	r2, [pc, #504]	; (8006b64 <HAL_RCC_OscConfig+0x4c8>)
 800696c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006970:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006972:	f7ff fa39 	bl	8005de8 <HAL_GetTick>
 8006976:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006978:	e008      	b.n	800698c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800697a:	f7ff fa35 	bl	8005de8 <HAL_GetTick>
 800697e:	4602      	mov	r2, r0
 8006980:	693b      	ldr	r3, [r7, #16]
 8006982:	1ad3      	subs	r3, r2, r3
 8006984:	2b64      	cmp	r3, #100	; 0x64
 8006986:	d901      	bls.n	800698c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8006988:	2303      	movs	r3, #3
 800698a:	e103      	b.n	8006b94 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800698c:	4b75      	ldr	r3, [pc, #468]	; (8006b64 <HAL_RCC_OscConfig+0x4c8>)
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006994:	2b00      	cmp	r3, #0
 8006996:	d0f0      	beq.n	800697a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	68db      	ldr	r3, [r3, #12]
 800699c:	2b01      	cmp	r3, #1
 800699e:	d106      	bne.n	80069ae <HAL_RCC_OscConfig+0x312>
 80069a0:	4b6f      	ldr	r3, [pc, #444]	; (8006b60 <HAL_RCC_OscConfig+0x4c4>)
 80069a2:	6a1b      	ldr	r3, [r3, #32]
 80069a4:	4a6e      	ldr	r2, [pc, #440]	; (8006b60 <HAL_RCC_OscConfig+0x4c4>)
 80069a6:	f043 0301 	orr.w	r3, r3, #1
 80069aa:	6213      	str	r3, [r2, #32]
 80069ac:	e02d      	b.n	8006a0a <HAL_RCC_OscConfig+0x36e>
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	68db      	ldr	r3, [r3, #12]
 80069b2:	2b00      	cmp	r3, #0
 80069b4:	d10c      	bne.n	80069d0 <HAL_RCC_OscConfig+0x334>
 80069b6:	4b6a      	ldr	r3, [pc, #424]	; (8006b60 <HAL_RCC_OscConfig+0x4c4>)
 80069b8:	6a1b      	ldr	r3, [r3, #32]
 80069ba:	4a69      	ldr	r2, [pc, #420]	; (8006b60 <HAL_RCC_OscConfig+0x4c4>)
 80069bc:	f023 0301 	bic.w	r3, r3, #1
 80069c0:	6213      	str	r3, [r2, #32]
 80069c2:	4b67      	ldr	r3, [pc, #412]	; (8006b60 <HAL_RCC_OscConfig+0x4c4>)
 80069c4:	6a1b      	ldr	r3, [r3, #32]
 80069c6:	4a66      	ldr	r2, [pc, #408]	; (8006b60 <HAL_RCC_OscConfig+0x4c4>)
 80069c8:	f023 0304 	bic.w	r3, r3, #4
 80069cc:	6213      	str	r3, [r2, #32]
 80069ce:	e01c      	b.n	8006a0a <HAL_RCC_OscConfig+0x36e>
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	68db      	ldr	r3, [r3, #12]
 80069d4:	2b05      	cmp	r3, #5
 80069d6:	d10c      	bne.n	80069f2 <HAL_RCC_OscConfig+0x356>
 80069d8:	4b61      	ldr	r3, [pc, #388]	; (8006b60 <HAL_RCC_OscConfig+0x4c4>)
 80069da:	6a1b      	ldr	r3, [r3, #32]
 80069dc:	4a60      	ldr	r2, [pc, #384]	; (8006b60 <HAL_RCC_OscConfig+0x4c4>)
 80069de:	f043 0304 	orr.w	r3, r3, #4
 80069e2:	6213      	str	r3, [r2, #32]
 80069e4:	4b5e      	ldr	r3, [pc, #376]	; (8006b60 <HAL_RCC_OscConfig+0x4c4>)
 80069e6:	6a1b      	ldr	r3, [r3, #32]
 80069e8:	4a5d      	ldr	r2, [pc, #372]	; (8006b60 <HAL_RCC_OscConfig+0x4c4>)
 80069ea:	f043 0301 	orr.w	r3, r3, #1
 80069ee:	6213      	str	r3, [r2, #32]
 80069f0:	e00b      	b.n	8006a0a <HAL_RCC_OscConfig+0x36e>
 80069f2:	4b5b      	ldr	r3, [pc, #364]	; (8006b60 <HAL_RCC_OscConfig+0x4c4>)
 80069f4:	6a1b      	ldr	r3, [r3, #32]
 80069f6:	4a5a      	ldr	r2, [pc, #360]	; (8006b60 <HAL_RCC_OscConfig+0x4c4>)
 80069f8:	f023 0301 	bic.w	r3, r3, #1
 80069fc:	6213      	str	r3, [r2, #32]
 80069fe:	4b58      	ldr	r3, [pc, #352]	; (8006b60 <HAL_RCC_OscConfig+0x4c4>)
 8006a00:	6a1b      	ldr	r3, [r3, #32]
 8006a02:	4a57      	ldr	r2, [pc, #348]	; (8006b60 <HAL_RCC_OscConfig+0x4c4>)
 8006a04:	f023 0304 	bic.w	r3, r3, #4
 8006a08:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	68db      	ldr	r3, [r3, #12]
 8006a0e:	2b00      	cmp	r3, #0
 8006a10:	d015      	beq.n	8006a3e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006a12:	f7ff f9e9 	bl	8005de8 <HAL_GetTick>
 8006a16:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006a18:	e00a      	b.n	8006a30 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006a1a:	f7ff f9e5 	bl	8005de8 <HAL_GetTick>
 8006a1e:	4602      	mov	r2, r0
 8006a20:	693b      	ldr	r3, [r7, #16]
 8006a22:	1ad3      	subs	r3, r2, r3
 8006a24:	f241 3288 	movw	r2, #5000	; 0x1388
 8006a28:	4293      	cmp	r3, r2
 8006a2a:	d901      	bls.n	8006a30 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8006a2c:	2303      	movs	r3, #3
 8006a2e:	e0b1      	b.n	8006b94 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006a30:	4b4b      	ldr	r3, [pc, #300]	; (8006b60 <HAL_RCC_OscConfig+0x4c4>)
 8006a32:	6a1b      	ldr	r3, [r3, #32]
 8006a34:	f003 0302 	and.w	r3, r3, #2
 8006a38:	2b00      	cmp	r3, #0
 8006a3a:	d0ee      	beq.n	8006a1a <HAL_RCC_OscConfig+0x37e>
 8006a3c:	e014      	b.n	8006a68 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006a3e:	f7ff f9d3 	bl	8005de8 <HAL_GetTick>
 8006a42:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006a44:	e00a      	b.n	8006a5c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006a46:	f7ff f9cf 	bl	8005de8 <HAL_GetTick>
 8006a4a:	4602      	mov	r2, r0
 8006a4c:	693b      	ldr	r3, [r7, #16]
 8006a4e:	1ad3      	subs	r3, r2, r3
 8006a50:	f241 3288 	movw	r2, #5000	; 0x1388
 8006a54:	4293      	cmp	r3, r2
 8006a56:	d901      	bls.n	8006a5c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8006a58:	2303      	movs	r3, #3
 8006a5a:	e09b      	b.n	8006b94 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006a5c:	4b40      	ldr	r3, [pc, #256]	; (8006b60 <HAL_RCC_OscConfig+0x4c4>)
 8006a5e:	6a1b      	ldr	r3, [r3, #32]
 8006a60:	f003 0302 	and.w	r3, r3, #2
 8006a64:	2b00      	cmp	r3, #0
 8006a66:	d1ee      	bne.n	8006a46 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8006a68:	7dfb      	ldrb	r3, [r7, #23]
 8006a6a:	2b01      	cmp	r3, #1
 8006a6c:	d105      	bne.n	8006a7a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006a6e:	4b3c      	ldr	r3, [pc, #240]	; (8006b60 <HAL_RCC_OscConfig+0x4c4>)
 8006a70:	69db      	ldr	r3, [r3, #28]
 8006a72:	4a3b      	ldr	r2, [pc, #236]	; (8006b60 <HAL_RCC_OscConfig+0x4c4>)
 8006a74:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006a78:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	69db      	ldr	r3, [r3, #28]
 8006a7e:	2b00      	cmp	r3, #0
 8006a80:	f000 8087 	beq.w	8006b92 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006a84:	4b36      	ldr	r3, [pc, #216]	; (8006b60 <HAL_RCC_OscConfig+0x4c4>)
 8006a86:	685b      	ldr	r3, [r3, #4]
 8006a88:	f003 030c 	and.w	r3, r3, #12
 8006a8c:	2b08      	cmp	r3, #8
 8006a8e:	d061      	beq.n	8006b54 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	69db      	ldr	r3, [r3, #28]
 8006a94:	2b02      	cmp	r3, #2
 8006a96:	d146      	bne.n	8006b26 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006a98:	4b33      	ldr	r3, [pc, #204]	; (8006b68 <HAL_RCC_OscConfig+0x4cc>)
 8006a9a:	2200      	movs	r2, #0
 8006a9c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006a9e:	f7ff f9a3 	bl	8005de8 <HAL_GetTick>
 8006aa2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006aa4:	e008      	b.n	8006ab8 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006aa6:	f7ff f99f 	bl	8005de8 <HAL_GetTick>
 8006aaa:	4602      	mov	r2, r0
 8006aac:	693b      	ldr	r3, [r7, #16]
 8006aae:	1ad3      	subs	r3, r2, r3
 8006ab0:	2b02      	cmp	r3, #2
 8006ab2:	d901      	bls.n	8006ab8 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8006ab4:	2303      	movs	r3, #3
 8006ab6:	e06d      	b.n	8006b94 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006ab8:	4b29      	ldr	r3, [pc, #164]	; (8006b60 <HAL_RCC_OscConfig+0x4c4>)
 8006aba:	681b      	ldr	r3, [r3, #0]
 8006abc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006ac0:	2b00      	cmp	r3, #0
 8006ac2:	d1f0      	bne.n	8006aa6 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	6a1b      	ldr	r3, [r3, #32]
 8006ac8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006acc:	d108      	bne.n	8006ae0 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8006ace:	4b24      	ldr	r3, [pc, #144]	; (8006b60 <HAL_RCC_OscConfig+0x4c4>)
 8006ad0:	685b      	ldr	r3, [r3, #4]
 8006ad2:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	689b      	ldr	r3, [r3, #8]
 8006ada:	4921      	ldr	r1, [pc, #132]	; (8006b60 <HAL_RCC_OscConfig+0x4c4>)
 8006adc:	4313      	orrs	r3, r2
 8006ade:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006ae0:	4b1f      	ldr	r3, [pc, #124]	; (8006b60 <HAL_RCC_OscConfig+0x4c4>)
 8006ae2:	685b      	ldr	r3, [r3, #4]
 8006ae4:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	6a19      	ldr	r1, [r3, #32]
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006af0:	430b      	orrs	r3, r1
 8006af2:	491b      	ldr	r1, [pc, #108]	; (8006b60 <HAL_RCC_OscConfig+0x4c4>)
 8006af4:	4313      	orrs	r3, r2
 8006af6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006af8:	4b1b      	ldr	r3, [pc, #108]	; (8006b68 <HAL_RCC_OscConfig+0x4cc>)
 8006afa:	2201      	movs	r2, #1
 8006afc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006afe:	f7ff f973 	bl	8005de8 <HAL_GetTick>
 8006b02:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8006b04:	e008      	b.n	8006b18 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006b06:	f7ff f96f 	bl	8005de8 <HAL_GetTick>
 8006b0a:	4602      	mov	r2, r0
 8006b0c:	693b      	ldr	r3, [r7, #16]
 8006b0e:	1ad3      	subs	r3, r2, r3
 8006b10:	2b02      	cmp	r3, #2
 8006b12:	d901      	bls.n	8006b18 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8006b14:	2303      	movs	r3, #3
 8006b16:	e03d      	b.n	8006b94 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8006b18:	4b11      	ldr	r3, [pc, #68]	; (8006b60 <HAL_RCC_OscConfig+0x4c4>)
 8006b1a:	681b      	ldr	r3, [r3, #0]
 8006b1c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006b20:	2b00      	cmp	r3, #0
 8006b22:	d0f0      	beq.n	8006b06 <HAL_RCC_OscConfig+0x46a>
 8006b24:	e035      	b.n	8006b92 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006b26:	4b10      	ldr	r3, [pc, #64]	; (8006b68 <HAL_RCC_OscConfig+0x4cc>)
 8006b28:	2200      	movs	r2, #0
 8006b2a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006b2c:	f7ff f95c 	bl	8005de8 <HAL_GetTick>
 8006b30:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006b32:	e008      	b.n	8006b46 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006b34:	f7ff f958 	bl	8005de8 <HAL_GetTick>
 8006b38:	4602      	mov	r2, r0
 8006b3a:	693b      	ldr	r3, [r7, #16]
 8006b3c:	1ad3      	subs	r3, r2, r3
 8006b3e:	2b02      	cmp	r3, #2
 8006b40:	d901      	bls.n	8006b46 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8006b42:	2303      	movs	r3, #3
 8006b44:	e026      	b.n	8006b94 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006b46:	4b06      	ldr	r3, [pc, #24]	; (8006b60 <HAL_RCC_OscConfig+0x4c4>)
 8006b48:	681b      	ldr	r3, [r3, #0]
 8006b4a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006b4e:	2b00      	cmp	r3, #0
 8006b50:	d1f0      	bne.n	8006b34 <HAL_RCC_OscConfig+0x498>
 8006b52:	e01e      	b.n	8006b92 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	69db      	ldr	r3, [r3, #28]
 8006b58:	2b01      	cmp	r3, #1
 8006b5a:	d107      	bne.n	8006b6c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8006b5c:	2301      	movs	r3, #1
 8006b5e:	e019      	b.n	8006b94 <HAL_RCC_OscConfig+0x4f8>
 8006b60:	40021000 	.word	0x40021000
 8006b64:	40007000 	.word	0x40007000
 8006b68:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8006b6c:	4b0b      	ldr	r3, [pc, #44]	; (8006b9c <HAL_RCC_OscConfig+0x500>)
 8006b6e:	685b      	ldr	r3, [r3, #4]
 8006b70:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006b72:	68fb      	ldr	r3, [r7, #12]
 8006b74:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	6a1b      	ldr	r3, [r3, #32]
 8006b7c:	429a      	cmp	r2, r3
 8006b7e:	d106      	bne.n	8006b8e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8006b80:	68fb      	ldr	r3, [r7, #12]
 8006b82:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006b8a:	429a      	cmp	r2, r3
 8006b8c:	d001      	beq.n	8006b92 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8006b8e:	2301      	movs	r3, #1
 8006b90:	e000      	b.n	8006b94 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8006b92:	2300      	movs	r3, #0
}
 8006b94:	4618      	mov	r0, r3
 8006b96:	3718      	adds	r7, #24
 8006b98:	46bd      	mov	sp, r7
 8006b9a:	bd80      	pop	{r7, pc}
 8006b9c:	40021000 	.word	0x40021000

08006ba0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006ba0:	b580      	push	{r7, lr}
 8006ba2:	b084      	sub	sp, #16
 8006ba4:	af00      	add	r7, sp, #0
 8006ba6:	6078      	str	r0, [r7, #4]
 8006ba8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	2b00      	cmp	r3, #0
 8006bae:	d101      	bne.n	8006bb4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006bb0:	2301      	movs	r3, #1
 8006bb2:	e0d0      	b.n	8006d56 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006bb4:	4b6a      	ldr	r3, [pc, #424]	; (8006d60 <HAL_RCC_ClockConfig+0x1c0>)
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	f003 0307 	and.w	r3, r3, #7
 8006bbc:	683a      	ldr	r2, [r7, #0]
 8006bbe:	429a      	cmp	r2, r3
 8006bc0:	d910      	bls.n	8006be4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006bc2:	4b67      	ldr	r3, [pc, #412]	; (8006d60 <HAL_RCC_ClockConfig+0x1c0>)
 8006bc4:	681b      	ldr	r3, [r3, #0]
 8006bc6:	f023 0207 	bic.w	r2, r3, #7
 8006bca:	4965      	ldr	r1, [pc, #404]	; (8006d60 <HAL_RCC_ClockConfig+0x1c0>)
 8006bcc:	683b      	ldr	r3, [r7, #0]
 8006bce:	4313      	orrs	r3, r2
 8006bd0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006bd2:	4b63      	ldr	r3, [pc, #396]	; (8006d60 <HAL_RCC_ClockConfig+0x1c0>)
 8006bd4:	681b      	ldr	r3, [r3, #0]
 8006bd6:	f003 0307 	and.w	r3, r3, #7
 8006bda:	683a      	ldr	r2, [r7, #0]
 8006bdc:	429a      	cmp	r2, r3
 8006bde:	d001      	beq.n	8006be4 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8006be0:	2301      	movs	r3, #1
 8006be2:	e0b8      	b.n	8006d56 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	681b      	ldr	r3, [r3, #0]
 8006be8:	f003 0302 	and.w	r3, r3, #2
 8006bec:	2b00      	cmp	r3, #0
 8006bee:	d020      	beq.n	8006c32 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	681b      	ldr	r3, [r3, #0]
 8006bf4:	f003 0304 	and.w	r3, r3, #4
 8006bf8:	2b00      	cmp	r3, #0
 8006bfa:	d005      	beq.n	8006c08 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006bfc:	4b59      	ldr	r3, [pc, #356]	; (8006d64 <HAL_RCC_ClockConfig+0x1c4>)
 8006bfe:	685b      	ldr	r3, [r3, #4]
 8006c00:	4a58      	ldr	r2, [pc, #352]	; (8006d64 <HAL_RCC_ClockConfig+0x1c4>)
 8006c02:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8006c06:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	681b      	ldr	r3, [r3, #0]
 8006c0c:	f003 0308 	and.w	r3, r3, #8
 8006c10:	2b00      	cmp	r3, #0
 8006c12:	d005      	beq.n	8006c20 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006c14:	4b53      	ldr	r3, [pc, #332]	; (8006d64 <HAL_RCC_ClockConfig+0x1c4>)
 8006c16:	685b      	ldr	r3, [r3, #4]
 8006c18:	4a52      	ldr	r2, [pc, #328]	; (8006d64 <HAL_RCC_ClockConfig+0x1c4>)
 8006c1a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8006c1e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006c20:	4b50      	ldr	r3, [pc, #320]	; (8006d64 <HAL_RCC_ClockConfig+0x1c4>)
 8006c22:	685b      	ldr	r3, [r3, #4]
 8006c24:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	689b      	ldr	r3, [r3, #8]
 8006c2c:	494d      	ldr	r1, [pc, #308]	; (8006d64 <HAL_RCC_ClockConfig+0x1c4>)
 8006c2e:	4313      	orrs	r3, r2
 8006c30:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	681b      	ldr	r3, [r3, #0]
 8006c36:	f003 0301 	and.w	r3, r3, #1
 8006c3a:	2b00      	cmp	r3, #0
 8006c3c:	d040      	beq.n	8006cc0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	685b      	ldr	r3, [r3, #4]
 8006c42:	2b01      	cmp	r3, #1
 8006c44:	d107      	bne.n	8006c56 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006c46:	4b47      	ldr	r3, [pc, #284]	; (8006d64 <HAL_RCC_ClockConfig+0x1c4>)
 8006c48:	681b      	ldr	r3, [r3, #0]
 8006c4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006c4e:	2b00      	cmp	r3, #0
 8006c50:	d115      	bne.n	8006c7e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006c52:	2301      	movs	r3, #1
 8006c54:	e07f      	b.n	8006d56 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	685b      	ldr	r3, [r3, #4]
 8006c5a:	2b02      	cmp	r3, #2
 8006c5c:	d107      	bne.n	8006c6e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006c5e:	4b41      	ldr	r3, [pc, #260]	; (8006d64 <HAL_RCC_ClockConfig+0x1c4>)
 8006c60:	681b      	ldr	r3, [r3, #0]
 8006c62:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006c66:	2b00      	cmp	r3, #0
 8006c68:	d109      	bne.n	8006c7e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006c6a:	2301      	movs	r3, #1
 8006c6c:	e073      	b.n	8006d56 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006c6e:	4b3d      	ldr	r3, [pc, #244]	; (8006d64 <HAL_RCC_ClockConfig+0x1c4>)
 8006c70:	681b      	ldr	r3, [r3, #0]
 8006c72:	f003 0302 	and.w	r3, r3, #2
 8006c76:	2b00      	cmp	r3, #0
 8006c78:	d101      	bne.n	8006c7e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006c7a:	2301      	movs	r3, #1
 8006c7c:	e06b      	b.n	8006d56 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006c7e:	4b39      	ldr	r3, [pc, #228]	; (8006d64 <HAL_RCC_ClockConfig+0x1c4>)
 8006c80:	685b      	ldr	r3, [r3, #4]
 8006c82:	f023 0203 	bic.w	r2, r3, #3
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	685b      	ldr	r3, [r3, #4]
 8006c8a:	4936      	ldr	r1, [pc, #216]	; (8006d64 <HAL_RCC_ClockConfig+0x1c4>)
 8006c8c:	4313      	orrs	r3, r2
 8006c8e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006c90:	f7ff f8aa 	bl	8005de8 <HAL_GetTick>
 8006c94:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006c96:	e00a      	b.n	8006cae <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006c98:	f7ff f8a6 	bl	8005de8 <HAL_GetTick>
 8006c9c:	4602      	mov	r2, r0
 8006c9e:	68fb      	ldr	r3, [r7, #12]
 8006ca0:	1ad3      	subs	r3, r2, r3
 8006ca2:	f241 3288 	movw	r2, #5000	; 0x1388
 8006ca6:	4293      	cmp	r3, r2
 8006ca8:	d901      	bls.n	8006cae <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8006caa:	2303      	movs	r3, #3
 8006cac:	e053      	b.n	8006d56 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006cae:	4b2d      	ldr	r3, [pc, #180]	; (8006d64 <HAL_RCC_ClockConfig+0x1c4>)
 8006cb0:	685b      	ldr	r3, [r3, #4]
 8006cb2:	f003 020c 	and.w	r2, r3, #12
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	685b      	ldr	r3, [r3, #4]
 8006cba:	009b      	lsls	r3, r3, #2
 8006cbc:	429a      	cmp	r2, r3
 8006cbe:	d1eb      	bne.n	8006c98 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006cc0:	4b27      	ldr	r3, [pc, #156]	; (8006d60 <HAL_RCC_ClockConfig+0x1c0>)
 8006cc2:	681b      	ldr	r3, [r3, #0]
 8006cc4:	f003 0307 	and.w	r3, r3, #7
 8006cc8:	683a      	ldr	r2, [r7, #0]
 8006cca:	429a      	cmp	r2, r3
 8006ccc:	d210      	bcs.n	8006cf0 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006cce:	4b24      	ldr	r3, [pc, #144]	; (8006d60 <HAL_RCC_ClockConfig+0x1c0>)
 8006cd0:	681b      	ldr	r3, [r3, #0]
 8006cd2:	f023 0207 	bic.w	r2, r3, #7
 8006cd6:	4922      	ldr	r1, [pc, #136]	; (8006d60 <HAL_RCC_ClockConfig+0x1c0>)
 8006cd8:	683b      	ldr	r3, [r7, #0]
 8006cda:	4313      	orrs	r3, r2
 8006cdc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006cde:	4b20      	ldr	r3, [pc, #128]	; (8006d60 <HAL_RCC_ClockConfig+0x1c0>)
 8006ce0:	681b      	ldr	r3, [r3, #0]
 8006ce2:	f003 0307 	and.w	r3, r3, #7
 8006ce6:	683a      	ldr	r2, [r7, #0]
 8006ce8:	429a      	cmp	r2, r3
 8006cea:	d001      	beq.n	8006cf0 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8006cec:	2301      	movs	r3, #1
 8006cee:	e032      	b.n	8006d56 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	681b      	ldr	r3, [r3, #0]
 8006cf4:	f003 0304 	and.w	r3, r3, #4
 8006cf8:	2b00      	cmp	r3, #0
 8006cfa:	d008      	beq.n	8006d0e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006cfc:	4b19      	ldr	r3, [pc, #100]	; (8006d64 <HAL_RCC_ClockConfig+0x1c4>)
 8006cfe:	685b      	ldr	r3, [r3, #4]
 8006d00:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	68db      	ldr	r3, [r3, #12]
 8006d08:	4916      	ldr	r1, [pc, #88]	; (8006d64 <HAL_RCC_ClockConfig+0x1c4>)
 8006d0a:	4313      	orrs	r3, r2
 8006d0c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	681b      	ldr	r3, [r3, #0]
 8006d12:	f003 0308 	and.w	r3, r3, #8
 8006d16:	2b00      	cmp	r3, #0
 8006d18:	d009      	beq.n	8006d2e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8006d1a:	4b12      	ldr	r3, [pc, #72]	; (8006d64 <HAL_RCC_ClockConfig+0x1c4>)
 8006d1c:	685b      	ldr	r3, [r3, #4]
 8006d1e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	691b      	ldr	r3, [r3, #16]
 8006d26:	00db      	lsls	r3, r3, #3
 8006d28:	490e      	ldr	r1, [pc, #56]	; (8006d64 <HAL_RCC_ClockConfig+0x1c4>)
 8006d2a:	4313      	orrs	r3, r2
 8006d2c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8006d2e:	f000 f821 	bl	8006d74 <HAL_RCC_GetSysClockFreq>
 8006d32:	4602      	mov	r2, r0
 8006d34:	4b0b      	ldr	r3, [pc, #44]	; (8006d64 <HAL_RCC_ClockConfig+0x1c4>)
 8006d36:	685b      	ldr	r3, [r3, #4]
 8006d38:	091b      	lsrs	r3, r3, #4
 8006d3a:	f003 030f 	and.w	r3, r3, #15
 8006d3e:	490a      	ldr	r1, [pc, #40]	; (8006d68 <HAL_RCC_ClockConfig+0x1c8>)
 8006d40:	5ccb      	ldrb	r3, [r1, r3]
 8006d42:	fa22 f303 	lsr.w	r3, r2, r3
 8006d46:	4a09      	ldr	r2, [pc, #36]	; (8006d6c <HAL_RCC_ClockConfig+0x1cc>)
 8006d48:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8006d4a:	4b09      	ldr	r3, [pc, #36]	; (8006d70 <HAL_RCC_ClockConfig+0x1d0>)
 8006d4c:	681b      	ldr	r3, [r3, #0]
 8006d4e:	4618      	mov	r0, r3
 8006d50:	f7ff f808 	bl	8005d64 <HAL_InitTick>

  return HAL_OK;
 8006d54:	2300      	movs	r3, #0
}
 8006d56:	4618      	mov	r0, r3
 8006d58:	3710      	adds	r7, #16
 8006d5a:	46bd      	mov	sp, r7
 8006d5c:	bd80      	pop	{r7, pc}
 8006d5e:	bf00      	nop
 8006d60:	40022000 	.word	0x40022000
 8006d64:	40021000 	.word	0x40021000
 8006d68:	08007c1c 	.word	0x08007c1c
 8006d6c:	20000000 	.word	0x20000000
 8006d70:	20000004 	.word	0x20000004

08006d74 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006d74:	b480      	push	{r7}
 8006d76:	b087      	sub	sp, #28
 8006d78:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8006d7a:	2300      	movs	r3, #0
 8006d7c:	60fb      	str	r3, [r7, #12]
 8006d7e:	2300      	movs	r3, #0
 8006d80:	60bb      	str	r3, [r7, #8]
 8006d82:	2300      	movs	r3, #0
 8006d84:	617b      	str	r3, [r7, #20]
 8006d86:	2300      	movs	r3, #0
 8006d88:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8006d8a:	2300      	movs	r3, #0
 8006d8c:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8006d8e:	4b1e      	ldr	r3, [pc, #120]	; (8006e08 <HAL_RCC_GetSysClockFreq+0x94>)
 8006d90:	685b      	ldr	r3, [r3, #4]
 8006d92:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8006d94:	68fb      	ldr	r3, [r7, #12]
 8006d96:	f003 030c 	and.w	r3, r3, #12
 8006d9a:	2b04      	cmp	r3, #4
 8006d9c:	d002      	beq.n	8006da4 <HAL_RCC_GetSysClockFreq+0x30>
 8006d9e:	2b08      	cmp	r3, #8
 8006da0:	d003      	beq.n	8006daa <HAL_RCC_GetSysClockFreq+0x36>
 8006da2:	e027      	b.n	8006df4 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8006da4:	4b19      	ldr	r3, [pc, #100]	; (8006e0c <HAL_RCC_GetSysClockFreq+0x98>)
 8006da6:	613b      	str	r3, [r7, #16]
      break;
 8006da8:	e027      	b.n	8006dfa <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8006daa:	68fb      	ldr	r3, [r7, #12]
 8006dac:	0c9b      	lsrs	r3, r3, #18
 8006dae:	f003 030f 	and.w	r3, r3, #15
 8006db2:	4a17      	ldr	r2, [pc, #92]	; (8006e10 <HAL_RCC_GetSysClockFreq+0x9c>)
 8006db4:	5cd3      	ldrb	r3, [r2, r3]
 8006db6:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8006db8:	68fb      	ldr	r3, [r7, #12]
 8006dba:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006dbe:	2b00      	cmp	r3, #0
 8006dc0:	d010      	beq.n	8006de4 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8006dc2:	4b11      	ldr	r3, [pc, #68]	; (8006e08 <HAL_RCC_GetSysClockFreq+0x94>)
 8006dc4:	685b      	ldr	r3, [r3, #4]
 8006dc6:	0c5b      	lsrs	r3, r3, #17
 8006dc8:	f003 0301 	and.w	r3, r3, #1
 8006dcc:	4a11      	ldr	r2, [pc, #68]	; (8006e14 <HAL_RCC_GetSysClockFreq+0xa0>)
 8006dce:	5cd3      	ldrb	r3, [r2, r3]
 8006dd0:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	4a0d      	ldr	r2, [pc, #52]	; (8006e0c <HAL_RCC_GetSysClockFreq+0x98>)
 8006dd6:	fb03 f202 	mul.w	r2, r3, r2
 8006dda:	68bb      	ldr	r3, [r7, #8]
 8006ddc:	fbb2 f3f3 	udiv	r3, r2, r3
 8006de0:	617b      	str	r3, [r7, #20]
 8006de2:	e004      	b.n	8006dee <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	4a0c      	ldr	r2, [pc, #48]	; (8006e18 <HAL_RCC_GetSysClockFreq+0xa4>)
 8006de8:	fb02 f303 	mul.w	r3, r2, r3
 8006dec:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8006dee:	697b      	ldr	r3, [r7, #20]
 8006df0:	613b      	str	r3, [r7, #16]
      break;
 8006df2:	e002      	b.n	8006dfa <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8006df4:	4b05      	ldr	r3, [pc, #20]	; (8006e0c <HAL_RCC_GetSysClockFreq+0x98>)
 8006df6:	613b      	str	r3, [r7, #16]
      break;
 8006df8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006dfa:	693b      	ldr	r3, [r7, #16]
}
 8006dfc:	4618      	mov	r0, r3
 8006dfe:	371c      	adds	r7, #28
 8006e00:	46bd      	mov	sp, r7
 8006e02:	bc80      	pop	{r7}
 8006e04:	4770      	bx	lr
 8006e06:	bf00      	nop
 8006e08:	40021000 	.word	0x40021000
 8006e0c:	007a1200 	.word	0x007a1200
 8006e10:	08007c34 	.word	0x08007c34
 8006e14:	08007c44 	.word	0x08007c44
 8006e18:	003d0900 	.word	0x003d0900

08006e1c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006e1c:	b480      	push	{r7}
 8006e1e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006e20:	4b02      	ldr	r3, [pc, #8]	; (8006e2c <HAL_RCC_GetHCLKFreq+0x10>)
 8006e22:	681b      	ldr	r3, [r3, #0]
}
 8006e24:	4618      	mov	r0, r3
 8006e26:	46bd      	mov	sp, r7
 8006e28:	bc80      	pop	{r7}
 8006e2a:	4770      	bx	lr
 8006e2c:	20000000 	.word	0x20000000

08006e30 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006e30:	b580      	push	{r7, lr}
 8006e32:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8006e34:	f7ff fff2 	bl	8006e1c <HAL_RCC_GetHCLKFreq>
 8006e38:	4602      	mov	r2, r0
 8006e3a:	4b05      	ldr	r3, [pc, #20]	; (8006e50 <HAL_RCC_GetPCLK1Freq+0x20>)
 8006e3c:	685b      	ldr	r3, [r3, #4]
 8006e3e:	0a1b      	lsrs	r3, r3, #8
 8006e40:	f003 0307 	and.w	r3, r3, #7
 8006e44:	4903      	ldr	r1, [pc, #12]	; (8006e54 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006e46:	5ccb      	ldrb	r3, [r1, r3]
 8006e48:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006e4c:	4618      	mov	r0, r3
 8006e4e:	bd80      	pop	{r7, pc}
 8006e50:	40021000 	.word	0x40021000
 8006e54:	08007c2c 	.word	0x08007c2c

08006e58 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006e58:	b580      	push	{r7, lr}
 8006e5a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8006e5c:	f7ff ffde 	bl	8006e1c <HAL_RCC_GetHCLKFreq>
 8006e60:	4602      	mov	r2, r0
 8006e62:	4b05      	ldr	r3, [pc, #20]	; (8006e78 <HAL_RCC_GetPCLK2Freq+0x20>)
 8006e64:	685b      	ldr	r3, [r3, #4]
 8006e66:	0adb      	lsrs	r3, r3, #11
 8006e68:	f003 0307 	and.w	r3, r3, #7
 8006e6c:	4903      	ldr	r1, [pc, #12]	; (8006e7c <HAL_RCC_GetPCLK2Freq+0x24>)
 8006e6e:	5ccb      	ldrb	r3, [r1, r3]
 8006e70:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006e74:	4618      	mov	r0, r3
 8006e76:	bd80      	pop	{r7, pc}
 8006e78:	40021000 	.word	0x40021000
 8006e7c:	08007c2c 	.word	0x08007c2c

08006e80 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8006e80:	b480      	push	{r7}
 8006e82:	b085      	sub	sp, #20
 8006e84:	af00      	add	r7, sp, #0
 8006e86:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8006e88:	4b0a      	ldr	r3, [pc, #40]	; (8006eb4 <RCC_Delay+0x34>)
 8006e8a:	681b      	ldr	r3, [r3, #0]
 8006e8c:	4a0a      	ldr	r2, [pc, #40]	; (8006eb8 <RCC_Delay+0x38>)
 8006e8e:	fba2 2303 	umull	r2, r3, r2, r3
 8006e92:	0a5b      	lsrs	r3, r3, #9
 8006e94:	687a      	ldr	r2, [r7, #4]
 8006e96:	fb02 f303 	mul.w	r3, r2, r3
 8006e9a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8006e9c:	bf00      	nop
  }
  while (Delay --);
 8006e9e:	68fb      	ldr	r3, [r7, #12]
 8006ea0:	1e5a      	subs	r2, r3, #1
 8006ea2:	60fa      	str	r2, [r7, #12]
 8006ea4:	2b00      	cmp	r3, #0
 8006ea6:	d1f9      	bne.n	8006e9c <RCC_Delay+0x1c>
}
 8006ea8:	bf00      	nop
 8006eaa:	bf00      	nop
 8006eac:	3714      	adds	r7, #20
 8006eae:	46bd      	mov	sp, r7
 8006eb0:	bc80      	pop	{r7}
 8006eb2:	4770      	bx	lr
 8006eb4:	20000000 	.word	0x20000000
 8006eb8:	10624dd3 	.word	0x10624dd3

08006ebc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006ebc:	b580      	push	{r7, lr}
 8006ebe:	b082      	sub	sp, #8
 8006ec0:	af00      	add	r7, sp, #0
 8006ec2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	2b00      	cmp	r3, #0
 8006ec8:	d101      	bne.n	8006ece <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006eca:	2301      	movs	r3, #1
 8006ecc:	e042      	b.n	8006f54 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006ed4:	b2db      	uxtb	r3, r3
 8006ed6:	2b00      	cmp	r3, #0
 8006ed8:	d106      	bne.n	8006ee8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	2200      	movs	r2, #0
 8006ede:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006ee2:	6878      	ldr	r0, [r7, #4]
 8006ee4:	f7fe feae 	bl	8005c44 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	2224      	movs	r2, #36	; 0x24
 8006eec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	681b      	ldr	r3, [r3, #0]
 8006ef4:	68da      	ldr	r2, [r3, #12]
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	681b      	ldr	r3, [r3, #0]
 8006efa:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006efe:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006f00:	6878      	ldr	r0, [r7, #4]
 8006f02:	f000 fdc5 	bl	8007a90 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	681b      	ldr	r3, [r3, #0]
 8006f0a:	691a      	ldr	r2, [r3, #16]
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	681b      	ldr	r3, [r3, #0]
 8006f10:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006f14:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	681b      	ldr	r3, [r3, #0]
 8006f1a:	695a      	ldr	r2, [r3, #20]
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	681b      	ldr	r3, [r3, #0]
 8006f20:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006f24:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	681b      	ldr	r3, [r3, #0]
 8006f2a:	68da      	ldr	r2, [r3, #12]
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	681b      	ldr	r3, [r3, #0]
 8006f30:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006f34:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	2200      	movs	r2, #0
 8006f3a:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	2220      	movs	r2, #32
 8006f40:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	2220      	movs	r2, #32
 8006f48:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	2200      	movs	r2, #0
 8006f50:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8006f52:	2300      	movs	r3, #0
}
 8006f54:	4618      	mov	r0, r3
 8006f56:	3708      	adds	r7, #8
 8006f58:	46bd      	mov	sp, r7
 8006f5a:	bd80      	pop	{r7, pc}

08006f5c <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006f5c:	b580      	push	{r7, lr}
 8006f5e:	b08a      	sub	sp, #40	; 0x28
 8006f60:	af02      	add	r7, sp, #8
 8006f62:	60f8      	str	r0, [r7, #12]
 8006f64:	60b9      	str	r1, [r7, #8]
 8006f66:	603b      	str	r3, [r7, #0]
 8006f68:	4613      	mov	r3, r2
 8006f6a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8006f6c:	2300      	movs	r3, #0
 8006f6e:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006f70:	68fb      	ldr	r3, [r7, #12]
 8006f72:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006f76:	b2db      	uxtb	r3, r3
 8006f78:	2b20      	cmp	r3, #32
 8006f7a:	d16d      	bne.n	8007058 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8006f7c:	68bb      	ldr	r3, [r7, #8]
 8006f7e:	2b00      	cmp	r3, #0
 8006f80:	d002      	beq.n	8006f88 <HAL_UART_Transmit+0x2c>
 8006f82:	88fb      	ldrh	r3, [r7, #6]
 8006f84:	2b00      	cmp	r3, #0
 8006f86:	d101      	bne.n	8006f8c <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8006f88:	2301      	movs	r3, #1
 8006f8a:	e066      	b.n	800705a <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006f8c:	68fb      	ldr	r3, [r7, #12]
 8006f8e:	2200      	movs	r2, #0
 8006f90:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006f92:	68fb      	ldr	r3, [r7, #12]
 8006f94:	2221      	movs	r2, #33	; 0x21
 8006f96:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006f9a:	f7fe ff25 	bl	8005de8 <HAL_GetTick>
 8006f9e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8006fa0:	68fb      	ldr	r3, [r7, #12]
 8006fa2:	88fa      	ldrh	r2, [r7, #6]
 8006fa4:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8006fa6:	68fb      	ldr	r3, [r7, #12]
 8006fa8:	88fa      	ldrh	r2, [r7, #6]
 8006faa:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006fac:	68fb      	ldr	r3, [r7, #12]
 8006fae:	689b      	ldr	r3, [r3, #8]
 8006fb0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006fb4:	d108      	bne.n	8006fc8 <HAL_UART_Transmit+0x6c>
 8006fb6:	68fb      	ldr	r3, [r7, #12]
 8006fb8:	691b      	ldr	r3, [r3, #16]
 8006fba:	2b00      	cmp	r3, #0
 8006fbc:	d104      	bne.n	8006fc8 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8006fbe:	2300      	movs	r3, #0
 8006fc0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006fc2:	68bb      	ldr	r3, [r7, #8]
 8006fc4:	61bb      	str	r3, [r7, #24]
 8006fc6:	e003      	b.n	8006fd0 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8006fc8:	68bb      	ldr	r3, [r7, #8]
 8006fca:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006fcc:	2300      	movs	r3, #0
 8006fce:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8006fd0:	e02a      	b.n	8007028 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006fd2:	683b      	ldr	r3, [r7, #0]
 8006fd4:	9300      	str	r3, [sp, #0]
 8006fd6:	697b      	ldr	r3, [r7, #20]
 8006fd8:	2200      	movs	r2, #0
 8006fda:	2180      	movs	r1, #128	; 0x80
 8006fdc:	68f8      	ldr	r0, [r7, #12]
 8006fde:	f000 fb14 	bl	800760a <UART_WaitOnFlagUntilTimeout>
 8006fe2:	4603      	mov	r3, r0
 8006fe4:	2b00      	cmp	r3, #0
 8006fe6:	d001      	beq.n	8006fec <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 8006fe8:	2303      	movs	r3, #3
 8006fea:	e036      	b.n	800705a <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8006fec:	69fb      	ldr	r3, [r7, #28]
 8006fee:	2b00      	cmp	r3, #0
 8006ff0:	d10b      	bne.n	800700a <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006ff2:	69bb      	ldr	r3, [r7, #24]
 8006ff4:	881b      	ldrh	r3, [r3, #0]
 8006ff6:	461a      	mov	r2, r3
 8006ff8:	68fb      	ldr	r3, [r7, #12]
 8006ffa:	681b      	ldr	r3, [r3, #0]
 8006ffc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007000:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8007002:	69bb      	ldr	r3, [r7, #24]
 8007004:	3302      	adds	r3, #2
 8007006:	61bb      	str	r3, [r7, #24]
 8007008:	e007      	b.n	800701a <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800700a:	69fb      	ldr	r3, [r7, #28]
 800700c:	781a      	ldrb	r2, [r3, #0]
 800700e:	68fb      	ldr	r3, [r7, #12]
 8007010:	681b      	ldr	r3, [r3, #0]
 8007012:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8007014:	69fb      	ldr	r3, [r7, #28]
 8007016:	3301      	adds	r3, #1
 8007018:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800701a:	68fb      	ldr	r3, [r7, #12]
 800701c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800701e:	b29b      	uxth	r3, r3
 8007020:	3b01      	subs	r3, #1
 8007022:	b29a      	uxth	r2, r3
 8007024:	68fb      	ldr	r3, [r7, #12]
 8007026:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8007028:	68fb      	ldr	r3, [r7, #12]
 800702a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800702c:	b29b      	uxth	r3, r3
 800702e:	2b00      	cmp	r3, #0
 8007030:	d1cf      	bne.n	8006fd2 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007032:	683b      	ldr	r3, [r7, #0]
 8007034:	9300      	str	r3, [sp, #0]
 8007036:	697b      	ldr	r3, [r7, #20]
 8007038:	2200      	movs	r2, #0
 800703a:	2140      	movs	r1, #64	; 0x40
 800703c:	68f8      	ldr	r0, [r7, #12]
 800703e:	f000 fae4 	bl	800760a <UART_WaitOnFlagUntilTimeout>
 8007042:	4603      	mov	r3, r0
 8007044:	2b00      	cmp	r3, #0
 8007046:	d001      	beq.n	800704c <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 8007048:	2303      	movs	r3, #3
 800704a:	e006      	b.n	800705a <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800704c:	68fb      	ldr	r3, [r7, #12]
 800704e:	2220      	movs	r2, #32
 8007050:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8007054:	2300      	movs	r3, #0
 8007056:	e000      	b.n	800705a <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8007058:	2302      	movs	r3, #2
  }
}
 800705a:	4618      	mov	r0, r3
 800705c:	3720      	adds	r7, #32
 800705e:	46bd      	mov	sp, r7
 8007060:	bd80      	pop	{r7, pc}

08007062 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007062:	b580      	push	{r7, lr}
 8007064:	b084      	sub	sp, #16
 8007066:	af00      	add	r7, sp, #0
 8007068:	60f8      	str	r0, [r7, #12]
 800706a:	60b9      	str	r1, [r7, #8]
 800706c:	4613      	mov	r3, r2
 800706e:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8007070:	68fb      	ldr	r3, [r7, #12]
 8007072:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8007076:	b2db      	uxtb	r3, r3
 8007078:	2b20      	cmp	r3, #32
 800707a:	d112      	bne.n	80070a2 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 800707c:	68bb      	ldr	r3, [r7, #8]
 800707e:	2b00      	cmp	r3, #0
 8007080:	d002      	beq.n	8007088 <HAL_UART_Receive_IT+0x26>
 8007082:	88fb      	ldrh	r3, [r7, #6]
 8007084:	2b00      	cmp	r3, #0
 8007086:	d101      	bne.n	800708c <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8007088:	2301      	movs	r3, #1
 800708a:	e00b      	b.n	80070a4 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800708c:	68fb      	ldr	r3, [r7, #12]
 800708e:	2200      	movs	r2, #0
 8007090:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8007092:	88fb      	ldrh	r3, [r7, #6]
 8007094:	461a      	mov	r2, r3
 8007096:	68b9      	ldr	r1, [r7, #8]
 8007098:	68f8      	ldr	r0, [r7, #12]
 800709a:	f000 fb24 	bl	80076e6 <UART_Start_Receive_IT>
 800709e:	4603      	mov	r3, r0
 80070a0:	e000      	b.n	80070a4 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 80070a2:	2302      	movs	r3, #2
  }
}
 80070a4:	4618      	mov	r0, r3
 80070a6:	3710      	adds	r7, #16
 80070a8:	46bd      	mov	sp, r7
 80070aa:	bd80      	pop	{r7, pc}

080070ac <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80070ac:	b580      	push	{r7, lr}
 80070ae:	b0ba      	sub	sp, #232	; 0xe8
 80070b0:	af00      	add	r7, sp, #0
 80070b2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	681b      	ldr	r3, [r3, #0]
 80070b8:	681b      	ldr	r3, [r3, #0]
 80070ba:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	681b      	ldr	r3, [r3, #0]
 80070c2:	68db      	ldr	r3, [r3, #12]
 80070c4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	681b      	ldr	r3, [r3, #0]
 80070cc:	695b      	ldr	r3, [r3, #20]
 80070ce:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80070d2:	2300      	movs	r3, #0
 80070d4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80070d8:	2300      	movs	r3, #0
 80070da:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80070de:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80070e2:	f003 030f 	and.w	r3, r3, #15
 80070e6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 80070ea:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80070ee:	2b00      	cmp	r3, #0
 80070f0:	d10f      	bne.n	8007112 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80070f2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80070f6:	f003 0320 	and.w	r3, r3, #32
 80070fa:	2b00      	cmp	r3, #0
 80070fc:	d009      	beq.n	8007112 <HAL_UART_IRQHandler+0x66>
 80070fe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007102:	f003 0320 	and.w	r3, r3, #32
 8007106:	2b00      	cmp	r3, #0
 8007108:	d003      	beq.n	8007112 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800710a:	6878      	ldr	r0, [r7, #4]
 800710c:	f000 fc01 	bl	8007912 <UART_Receive_IT>
      return;
 8007110:	e25b      	b.n	80075ca <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8007112:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007116:	2b00      	cmp	r3, #0
 8007118:	f000 80de 	beq.w	80072d8 <HAL_UART_IRQHandler+0x22c>
 800711c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007120:	f003 0301 	and.w	r3, r3, #1
 8007124:	2b00      	cmp	r3, #0
 8007126:	d106      	bne.n	8007136 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8007128:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800712c:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8007130:	2b00      	cmp	r3, #0
 8007132:	f000 80d1 	beq.w	80072d8 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8007136:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800713a:	f003 0301 	and.w	r3, r3, #1
 800713e:	2b00      	cmp	r3, #0
 8007140:	d00b      	beq.n	800715a <HAL_UART_IRQHandler+0xae>
 8007142:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007146:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800714a:	2b00      	cmp	r3, #0
 800714c:	d005      	beq.n	800715a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007152:	f043 0201 	orr.w	r2, r3, #1
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800715a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800715e:	f003 0304 	and.w	r3, r3, #4
 8007162:	2b00      	cmp	r3, #0
 8007164:	d00b      	beq.n	800717e <HAL_UART_IRQHandler+0xd2>
 8007166:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800716a:	f003 0301 	and.w	r3, r3, #1
 800716e:	2b00      	cmp	r3, #0
 8007170:	d005      	beq.n	800717e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007176:	f043 0202 	orr.w	r2, r3, #2
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800717e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007182:	f003 0302 	and.w	r3, r3, #2
 8007186:	2b00      	cmp	r3, #0
 8007188:	d00b      	beq.n	80071a2 <HAL_UART_IRQHandler+0xf6>
 800718a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800718e:	f003 0301 	and.w	r3, r3, #1
 8007192:	2b00      	cmp	r3, #0
 8007194:	d005      	beq.n	80071a2 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800719a:	f043 0204 	orr.w	r2, r3, #4
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80071a2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80071a6:	f003 0308 	and.w	r3, r3, #8
 80071aa:	2b00      	cmp	r3, #0
 80071ac:	d011      	beq.n	80071d2 <HAL_UART_IRQHandler+0x126>
 80071ae:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80071b2:	f003 0320 	and.w	r3, r3, #32
 80071b6:	2b00      	cmp	r3, #0
 80071b8:	d105      	bne.n	80071c6 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80071ba:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80071be:	f003 0301 	and.w	r3, r3, #1
 80071c2:	2b00      	cmp	r3, #0
 80071c4:	d005      	beq.n	80071d2 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80071ca:	f043 0208 	orr.w	r2, r3, #8
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80071d6:	2b00      	cmp	r3, #0
 80071d8:	f000 81f2 	beq.w	80075c0 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80071dc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80071e0:	f003 0320 	and.w	r3, r3, #32
 80071e4:	2b00      	cmp	r3, #0
 80071e6:	d008      	beq.n	80071fa <HAL_UART_IRQHandler+0x14e>
 80071e8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80071ec:	f003 0320 	and.w	r3, r3, #32
 80071f0:	2b00      	cmp	r3, #0
 80071f2:	d002      	beq.n	80071fa <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80071f4:	6878      	ldr	r0, [r7, #4]
 80071f6:	f000 fb8c 	bl	8007912 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	681b      	ldr	r3, [r3, #0]
 80071fe:	695b      	ldr	r3, [r3, #20]
 8007200:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007204:	2b00      	cmp	r3, #0
 8007206:	bf14      	ite	ne
 8007208:	2301      	movne	r3, #1
 800720a:	2300      	moveq	r3, #0
 800720c:	b2db      	uxtb	r3, r3
 800720e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007216:	f003 0308 	and.w	r3, r3, #8
 800721a:	2b00      	cmp	r3, #0
 800721c:	d103      	bne.n	8007226 <HAL_UART_IRQHandler+0x17a>
 800721e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007222:	2b00      	cmp	r3, #0
 8007224:	d04f      	beq.n	80072c6 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8007226:	6878      	ldr	r0, [r7, #4]
 8007228:	f000 fa96 	bl	8007758 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	681b      	ldr	r3, [r3, #0]
 8007230:	695b      	ldr	r3, [r3, #20]
 8007232:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007236:	2b00      	cmp	r3, #0
 8007238:	d041      	beq.n	80072be <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	681b      	ldr	r3, [r3, #0]
 800723e:	3314      	adds	r3, #20
 8007240:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007244:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007248:	e853 3f00 	ldrex	r3, [r3]
 800724c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8007250:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007254:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007258:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	681b      	ldr	r3, [r3, #0]
 8007260:	3314      	adds	r3, #20
 8007262:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8007266:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800726a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800726e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8007272:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8007276:	e841 2300 	strex	r3, r2, [r1]
 800727a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800727e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8007282:	2b00      	cmp	r3, #0
 8007284:	d1d9      	bne.n	800723a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800728a:	2b00      	cmp	r3, #0
 800728c:	d013      	beq.n	80072b6 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007292:	4a7e      	ldr	r2, [pc, #504]	; (800748c <HAL_UART_IRQHandler+0x3e0>)
 8007294:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800729a:	4618      	mov	r0, r3
 800729c:	f7fe ff1a 	bl	80060d4 <HAL_DMA_Abort_IT>
 80072a0:	4603      	mov	r3, r0
 80072a2:	2b00      	cmp	r3, #0
 80072a4:	d016      	beq.n	80072d4 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80072aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80072ac:	687a      	ldr	r2, [r7, #4]
 80072ae:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80072b0:	4610      	mov	r0, r2
 80072b2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80072b4:	e00e      	b.n	80072d4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80072b6:	6878      	ldr	r0, [r7, #4]
 80072b8:	f000 f993 	bl	80075e2 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80072bc:	e00a      	b.n	80072d4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80072be:	6878      	ldr	r0, [r7, #4]
 80072c0:	f000 f98f 	bl	80075e2 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80072c4:	e006      	b.n	80072d4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80072c6:	6878      	ldr	r0, [r7, #4]
 80072c8:	f000 f98b 	bl	80075e2 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	2200      	movs	r2, #0
 80072d0:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 80072d2:	e175      	b.n	80075c0 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80072d4:	bf00      	nop
    return;
 80072d6:	e173      	b.n	80075c0 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80072dc:	2b01      	cmp	r3, #1
 80072de:	f040 814f 	bne.w	8007580 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80072e2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80072e6:	f003 0310 	and.w	r3, r3, #16
 80072ea:	2b00      	cmp	r3, #0
 80072ec:	f000 8148 	beq.w	8007580 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80072f0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80072f4:	f003 0310 	and.w	r3, r3, #16
 80072f8:	2b00      	cmp	r3, #0
 80072fa:	f000 8141 	beq.w	8007580 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80072fe:	2300      	movs	r3, #0
 8007300:	60bb      	str	r3, [r7, #8]
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	681b      	ldr	r3, [r3, #0]
 8007306:	681b      	ldr	r3, [r3, #0]
 8007308:	60bb      	str	r3, [r7, #8]
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	681b      	ldr	r3, [r3, #0]
 800730e:	685b      	ldr	r3, [r3, #4]
 8007310:	60bb      	str	r3, [r7, #8]
 8007312:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	681b      	ldr	r3, [r3, #0]
 8007318:	695b      	ldr	r3, [r3, #20]
 800731a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800731e:	2b00      	cmp	r3, #0
 8007320:	f000 80b6 	beq.w	8007490 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007328:	681b      	ldr	r3, [r3, #0]
 800732a:	685b      	ldr	r3, [r3, #4]
 800732c:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8007330:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8007334:	2b00      	cmp	r3, #0
 8007336:	f000 8145 	beq.w	80075c4 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800733e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8007342:	429a      	cmp	r2, r3
 8007344:	f080 813e 	bcs.w	80075c4 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800734e:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007354:	699b      	ldr	r3, [r3, #24]
 8007356:	2b20      	cmp	r3, #32
 8007358:	f000 8088 	beq.w	800746c <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	681b      	ldr	r3, [r3, #0]
 8007360:	330c      	adds	r3, #12
 8007362:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007366:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800736a:	e853 3f00 	ldrex	r3, [r3]
 800736e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8007372:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007376:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800737a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	681b      	ldr	r3, [r3, #0]
 8007382:	330c      	adds	r3, #12
 8007384:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8007388:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800738c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007390:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8007394:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8007398:	e841 2300 	strex	r3, r2, [r1]
 800739c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80073a0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80073a4:	2b00      	cmp	r3, #0
 80073a6:	d1d9      	bne.n	800735c <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	681b      	ldr	r3, [r3, #0]
 80073ac:	3314      	adds	r3, #20
 80073ae:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80073b0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80073b2:	e853 3f00 	ldrex	r3, [r3]
 80073b6:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80073b8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80073ba:	f023 0301 	bic.w	r3, r3, #1
 80073be:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	681b      	ldr	r3, [r3, #0]
 80073c6:	3314      	adds	r3, #20
 80073c8:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80073cc:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80073d0:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80073d2:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80073d4:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80073d8:	e841 2300 	strex	r3, r2, [r1]
 80073dc:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80073de:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80073e0:	2b00      	cmp	r3, #0
 80073e2:	d1e1      	bne.n	80073a8 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	681b      	ldr	r3, [r3, #0]
 80073e8:	3314      	adds	r3, #20
 80073ea:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80073ec:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80073ee:	e853 3f00 	ldrex	r3, [r3]
 80073f2:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80073f4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80073f6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80073fa:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	681b      	ldr	r3, [r3, #0]
 8007402:	3314      	adds	r3, #20
 8007404:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8007408:	66fa      	str	r2, [r7, #108]	; 0x6c
 800740a:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800740c:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800740e:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8007410:	e841 2300 	strex	r3, r2, [r1]
 8007414:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8007416:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007418:	2b00      	cmp	r3, #0
 800741a:	d1e3      	bne.n	80073e4 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	2220      	movs	r2, #32
 8007420:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	2200      	movs	r2, #0
 8007428:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	681b      	ldr	r3, [r3, #0]
 800742e:	330c      	adds	r3, #12
 8007430:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007432:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007434:	e853 3f00 	ldrex	r3, [r3]
 8007438:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800743a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800743c:	f023 0310 	bic.w	r3, r3, #16
 8007440:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	681b      	ldr	r3, [r3, #0]
 8007448:	330c      	adds	r3, #12
 800744a:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800744e:	65ba      	str	r2, [r7, #88]	; 0x58
 8007450:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007452:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8007454:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007456:	e841 2300 	strex	r3, r2, [r1]
 800745a:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800745c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800745e:	2b00      	cmp	r3, #0
 8007460:	d1e3      	bne.n	800742a <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007466:	4618      	mov	r0, r3
 8007468:	f7fe fdf9 	bl	800605e <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	2202      	movs	r2, #2
 8007470:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800747a:	b29b      	uxth	r3, r3
 800747c:	1ad3      	subs	r3, r2, r3
 800747e:	b29b      	uxth	r3, r3
 8007480:	4619      	mov	r1, r3
 8007482:	6878      	ldr	r0, [r7, #4]
 8007484:	f000 f8b6 	bl	80075f4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8007488:	e09c      	b.n	80075c4 <HAL_UART_IRQHandler+0x518>
 800748a:	bf00      	nop
 800748c:	0800781d 	.word	0x0800781d
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007498:	b29b      	uxth	r3, r3
 800749a:	1ad3      	subs	r3, r2, r3
 800749c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80074a4:	b29b      	uxth	r3, r3
 80074a6:	2b00      	cmp	r3, #0
 80074a8:	f000 808e 	beq.w	80075c8 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 80074ac:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80074b0:	2b00      	cmp	r3, #0
 80074b2:	f000 8089 	beq.w	80075c8 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	681b      	ldr	r3, [r3, #0]
 80074ba:	330c      	adds	r3, #12
 80074bc:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80074be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80074c0:	e853 3f00 	ldrex	r3, [r3]
 80074c4:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80074c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80074c8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80074cc:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	681b      	ldr	r3, [r3, #0]
 80074d4:	330c      	adds	r3, #12
 80074d6:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80074da:	647a      	str	r2, [r7, #68]	; 0x44
 80074dc:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80074de:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80074e0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80074e2:	e841 2300 	strex	r3, r2, [r1]
 80074e6:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80074e8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80074ea:	2b00      	cmp	r3, #0
 80074ec:	d1e3      	bne.n	80074b6 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	681b      	ldr	r3, [r3, #0]
 80074f2:	3314      	adds	r3, #20
 80074f4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80074f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074f8:	e853 3f00 	ldrex	r3, [r3]
 80074fc:	623b      	str	r3, [r7, #32]
   return(result);
 80074fe:	6a3b      	ldr	r3, [r7, #32]
 8007500:	f023 0301 	bic.w	r3, r3, #1
 8007504:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	681b      	ldr	r3, [r3, #0]
 800750c:	3314      	adds	r3, #20
 800750e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8007512:	633a      	str	r2, [r7, #48]	; 0x30
 8007514:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007516:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007518:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800751a:	e841 2300 	strex	r3, r2, [r1]
 800751e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007520:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007522:	2b00      	cmp	r3, #0
 8007524:	d1e3      	bne.n	80074ee <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	2220      	movs	r2, #32
 800752a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	2200      	movs	r2, #0
 8007532:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	681b      	ldr	r3, [r3, #0]
 8007538:	330c      	adds	r3, #12
 800753a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800753c:	693b      	ldr	r3, [r7, #16]
 800753e:	e853 3f00 	ldrex	r3, [r3]
 8007542:	60fb      	str	r3, [r7, #12]
   return(result);
 8007544:	68fb      	ldr	r3, [r7, #12]
 8007546:	f023 0310 	bic.w	r3, r3, #16
 800754a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	681b      	ldr	r3, [r3, #0]
 8007552:	330c      	adds	r3, #12
 8007554:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8007558:	61fa      	str	r2, [r7, #28]
 800755a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800755c:	69b9      	ldr	r1, [r7, #24]
 800755e:	69fa      	ldr	r2, [r7, #28]
 8007560:	e841 2300 	strex	r3, r2, [r1]
 8007564:	617b      	str	r3, [r7, #20]
   return(result);
 8007566:	697b      	ldr	r3, [r7, #20]
 8007568:	2b00      	cmp	r3, #0
 800756a:	d1e3      	bne.n	8007534 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	2202      	movs	r2, #2
 8007570:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007572:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007576:	4619      	mov	r1, r3
 8007578:	6878      	ldr	r0, [r7, #4]
 800757a:	f000 f83b 	bl	80075f4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800757e:	e023      	b.n	80075c8 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8007580:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007584:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007588:	2b00      	cmp	r3, #0
 800758a:	d009      	beq.n	80075a0 <HAL_UART_IRQHandler+0x4f4>
 800758c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007590:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007594:	2b00      	cmp	r3, #0
 8007596:	d003      	beq.n	80075a0 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8007598:	6878      	ldr	r0, [r7, #4]
 800759a:	f000 f953 	bl	8007844 <UART_Transmit_IT>
    return;
 800759e:	e014      	b.n	80075ca <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80075a0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80075a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80075a8:	2b00      	cmp	r3, #0
 80075aa:	d00e      	beq.n	80075ca <HAL_UART_IRQHandler+0x51e>
 80075ac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80075b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80075b4:	2b00      	cmp	r3, #0
 80075b6:	d008      	beq.n	80075ca <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 80075b8:	6878      	ldr	r0, [r7, #4]
 80075ba:	f000 f992 	bl	80078e2 <UART_EndTransmit_IT>
    return;
 80075be:	e004      	b.n	80075ca <HAL_UART_IRQHandler+0x51e>
    return;
 80075c0:	bf00      	nop
 80075c2:	e002      	b.n	80075ca <HAL_UART_IRQHandler+0x51e>
      return;
 80075c4:	bf00      	nop
 80075c6:	e000      	b.n	80075ca <HAL_UART_IRQHandler+0x51e>
      return;
 80075c8:	bf00      	nop
  }
}
 80075ca:	37e8      	adds	r7, #232	; 0xe8
 80075cc:	46bd      	mov	sp, r7
 80075ce:	bd80      	pop	{r7, pc}

080075d0 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80075d0:	b480      	push	{r7}
 80075d2:	b083      	sub	sp, #12
 80075d4:	af00      	add	r7, sp, #0
 80075d6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80075d8:	bf00      	nop
 80075da:	370c      	adds	r7, #12
 80075dc:	46bd      	mov	sp, r7
 80075de:	bc80      	pop	{r7}
 80075e0:	4770      	bx	lr

080075e2 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80075e2:	b480      	push	{r7}
 80075e4:	b083      	sub	sp, #12
 80075e6:	af00      	add	r7, sp, #0
 80075e8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80075ea:	bf00      	nop
 80075ec:	370c      	adds	r7, #12
 80075ee:	46bd      	mov	sp, r7
 80075f0:	bc80      	pop	{r7}
 80075f2:	4770      	bx	lr

080075f4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80075f4:	b480      	push	{r7}
 80075f6:	b083      	sub	sp, #12
 80075f8:	af00      	add	r7, sp, #0
 80075fa:	6078      	str	r0, [r7, #4]
 80075fc:	460b      	mov	r3, r1
 80075fe:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007600:	bf00      	nop
 8007602:	370c      	adds	r7, #12
 8007604:	46bd      	mov	sp, r7
 8007606:	bc80      	pop	{r7}
 8007608:	4770      	bx	lr

0800760a <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800760a:	b580      	push	{r7, lr}
 800760c:	b090      	sub	sp, #64	; 0x40
 800760e:	af00      	add	r7, sp, #0
 8007610:	60f8      	str	r0, [r7, #12]
 8007612:	60b9      	str	r1, [r7, #8]
 8007614:	603b      	str	r3, [r7, #0]
 8007616:	4613      	mov	r3, r2
 8007618:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800761a:	e050      	b.n	80076be <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800761c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800761e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007622:	d04c      	beq.n	80076be <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8007624:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007626:	2b00      	cmp	r3, #0
 8007628:	d007      	beq.n	800763a <UART_WaitOnFlagUntilTimeout+0x30>
 800762a:	f7fe fbdd 	bl	8005de8 <HAL_GetTick>
 800762e:	4602      	mov	r2, r0
 8007630:	683b      	ldr	r3, [r7, #0]
 8007632:	1ad3      	subs	r3, r2, r3
 8007634:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007636:	429a      	cmp	r2, r3
 8007638:	d241      	bcs.n	80076be <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800763a:	68fb      	ldr	r3, [r7, #12]
 800763c:	681b      	ldr	r3, [r3, #0]
 800763e:	330c      	adds	r3, #12
 8007640:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007642:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007644:	e853 3f00 	ldrex	r3, [r3]
 8007648:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800764a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800764c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8007650:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007652:	68fb      	ldr	r3, [r7, #12]
 8007654:	681b      	ldr	r3, [r3, #0]
 8007656:	330c      	adds	r3, #12
 8007658:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800765a:	637a      	str	r2, [r7, #52]	; 0x34
 800765c:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800765e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007660:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007662:	e841 2300 	strex	r3, r2, [r1]
 8007666:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8007668:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800766a:	2b00      	cmp	r3, #0
 800766c:	d1e5      	bne.n	800763a <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800766e:	68fb      	ldr	r3, [r7, #12]
 8007670:	681b      	ldr	r3, [r3, #0]
 8007672:	3314      	adds	r3, #20
 8007674:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007676:	697b      	ldr	r3, [r7, #20]
 8007678:	e853 3f00 	ldrex	r3, [r3]
 800767c:	613b      	str	r3, [r7, #16]
   return(result);
 800767e:	693b      	ldr	r3, [r7, #16]
 8007680:	f023 0301 	bic.w	r3, r3, #1
 8007684:	63bb      	str	r3, [r7, #56]	; 0x38
 8007686:	68fb      	ldr	r3, [r7, #12]
 8007688:	681b      	ldr	r3, [r3, #0]
 800768a:	3314      	adds	r3, #20
 800768c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800768e:	623a      	str	r2, [r7, #32]
 8007690:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007692:	69f9      	ldr	r1, [r7, #28]
 8007694:	6a3a      	ldr	r2, [r7, #32]
 8007696:	e841 2300 	strex	r3, r2, [r1]
 800769a:	61bb      	str	r3, [r7, #24]
   return(result);
 800769c:	69bb      	ldr	r3, [r7, #24]
 800769e:	2b00      	cmp	r3, #0
 80076a0:	d1e5      	bne.n	800766e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80076a2:	68fb      	ldr	r3, [r7, #12]
 80076a4:	2220      	movs	r2, #32
 80076a6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 80076aa:	68fb      	ldr	r3, [r7, #12]
 80076ac:	2220      	movs	r2, #32
 80076ae:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80076b2:	68fb      	ldr	r3, [r7, #12]
 80076b4:	2200      	movs	r2, #0
 80076b6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 80076ba:	2303      	movs	r3, #3
 80076bc:	e00f      	b.n	80076de <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80076be:	68fb      	ldr	r3, [r7, #12]
 80076c0:	681b      	ldr	r3, [r3, #0]
 80076c2:	681a      	ldr	r2, [r3, #0]
 80076c4:	68bb      	ldr	r3, [r7, #8]
 80076c6:	4013      	ands	r3, r2
 80076c8:	68ba      	ldr	r2, [r7, #8]
 80076ca:	429a      	cmp	r2, r3
 80076cc:	bf0c      	ite	eq
 80076ce:	2301      	moveq	r3, #1
 80076d0:	2300      	movne	r3, #0
 80076d2:	b2db      	uxtb	r3, r3
 80076d4:	461a      	mov	r2, r3
 80076d6:	79fb      	ldrb	r3, [r7, #7]
 80076d8:	429a      	cmp	r2, r3
 80076da:	d09f      	beq.n	800761c <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80076dc:	2300      	movs	r3, #0
}
 80076de:	4618      	mov	r0, r3
 80076e0:	3740      	adds	r7, #64	; 0x40
 80076e2:	46bd      	mov	sp, r7
 80076e4:	bd80      	pop	{r7, pc}

080076e6 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80076e6:	b480      	push	{r7}
 80076e8:	b085      	sub	sp, #20
 80076ea:	af00      	add	r7, sp, #0
 80076ec:	60f8      	str	r0, [r7, #12]
 80076ee:	60b9      	str	r1, [r7, #8]
 80076f0:	4613      	mov	r3, r2
 80076f2:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80076f4:	68fb      	ldr	r3, [r7, #12]
 80076f6:	68ba      	ldr	r2, [r7, #8]
 80076f8:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 80076fa:	68fb      	ldr	r3, [r7, #12]
 80076fc:	88fa      	ldrh	r2, [r7, #6]
 80076fe:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8007700:	68fb      	ldr	r3, [r7, #12]
 8007702:	88fa      	ldrh	r2, [r7, #6]
 8007704:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007706:	68fb      	ldr	r3, [r7, #12]
 8007708:	2200      	movs	r2, #0
 800770a:	645a      	str	r2, [r3, #68]	; 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800770c:	68fb      	ldr	r3, [r7, #12]
 800770e:	2222      	movs	r2, #34	; 0x22
 8007710:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8007714:	68fb      	ldr	r3, [r7, #12]
 8007716:	691b      	ldr	r3, [r3, #16]
 8007718:	2b00      	cmp	r3, #0
 800771a:	d007      	beq.n	800772c <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800771c:	68fb      	ldr	r3, [r7, #12]
 800771e:	681b      	ldr	r3, [r3, #0]
 8007720:	68da      	ldr	r2, [r3, #12]
 8007722:	68fb      	ldr	r3, [r7, #12]
 8007724:	681b      	ldr	r3, [r3, #0]
 8007726:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800772a:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800772c:	68fb      	ldr	r3, [r7, #12]
 800772e:	681b      	ldr	r3, [r3, #0]
 8007730:	695a      	ldr	r2, [r3, #20]
 8007732:	68fb      	ldr	r3, [r7, #12]
 8007734:	681b      	ldr	r3, [r3, #0]
 8007736:	f042 0201 	orr.w	r2, r2, #1
 800773a:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800773c:	68fb      	ldr	r3, [r7, #12]
 800773e:	681b      	ldr	r3, [r3, #0]
 8007740:	68da      	ldr	r2, [r3, #12]
 8007742:	68fb      	ldr	r3, [r7, #12]
 8007744:	681b      	ldr	r3, [r3, #0]
 8007746:	f042 0220 	orr.w	r2, r2, #32
 800774a:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800774c:	2300      	movs	r3, #0
}
 800774e:	4618      	mov	r0, r3
 8007750:	3714      	adds	r7, #20
 8007752:	46bd      	mov	sp, r7
 8007754:	bc80      	pop	{r7}
 8007756:	4770      	bx	lr

08007758 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007758:	b480      	push	{r7}
 800775a:	b095      	sub	sp, #84	; 0x54
 800775c:	af00      	add	r7, sp, #0
 800775e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	681b      	ldr	r3, [r3, #0]
 8007764:	330c      	adds	r3, #12
 8007766:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007768:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800776a:	e853 3f00 	ldrex	r3, [r3]
 800776e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007770:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007772:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007776:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	681b      	ldr	r3, [r3, #0]
 800777c:	330c      	adds	r3, #12
 800777e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007780:	643a      	str	r2, [r7, #64]	; 0x40
 8007782:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007784:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007786:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007788:	e841 2300 	strex	r3, r2, [r1]
 800778c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800778e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007790:	2b00      	cmp	r3, #0
 8007792:	d1e5      	bne.n	8007760 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	681b      	ldr	r3, [r3, #0]
 8007798:	3314      	adds	r3, #20
 800779a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800779c:	6a3b      	ldr	r3, [r7, #32]
 800779e:	e853 3f00 	ldrex	r3, [r3]
 80077a2:	61fb      	str	r3, [r7, #28]
   return(result);
 80077a4:	69fb      	ldr	r3, [r7, #28]
 80077a6:	f023 0301 	bic.w	r3, r3, #1
 80077aa:	64bb      	str	r3, [r7, #72]	; 0x48
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	681b      	ldr	r3, [r3, #0]
 80077b0:	3314      	adds	r3, #20
 80077b2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80077b4:	62fa      	str	r2, [r7, #44]	; 0x2c
 80077b6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80077b8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80077ba:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80077bc:	e841 2300 	strex	r3, r2, [r1]
 80077c0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80077c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077c4:	2b00      	cmp	r3, #0
 80077c6:	d1e5      	bne.n	8007794 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80077cc:	2b01      	cmp	r3, #1
 80077ce:	d119      	bne.n	8007804 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	681b      	ldr	r3, [r3, #0]
 80077d4:	330c      	adds	r3, #12
 80077d6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80077d8:	68fb      	ldr	r3, [r7, #12]
 80077da:	e853 3f00 	ldrex	r3, [r3]
 80077de:	60bb      	str	r3, [r7, #8]
   return(result);
 80077e0:	68bb      	ldr	r3, [r7, #8]
 80077e2:	f023 0310 	bic.w	r3, r3, #16
 80077e6:	647b      	str	r3, [r7, #68]	; 0x44
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	681b      	ldr	r3, [r3, #0]
 80077ec:	330c      	adds	r3, #12
 80077ee:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80077f0:	61ba      	str	r2, [r7, #24]
 80077f2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80077f4:	6979      	ldr	r1, [r7, #20]
 80077f6:	69ba      	ldr	r2, [r7, #24]
 80077f8:	e841 2300 	strex	r3, r2, [r1]
 80077fc:	613b      	str	r3, [r7, #16]
   return(result);
 80077fe:	693b      	ldr	r3, [r7, #16]
 8007800:	2b00      	cmp	r3, #0
 8007802:	d1e5      	bne.n	80077d0 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	2220      	movs	r2, #32
 8007808:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	2200      	movs	r2, #0
 8007810:	631a      	str	r2, [r3, #48]	; 0x30
}
 8007812:	bf00      	nop
 8007814:	3754      	adds	r7, #84	; 0x54
 8007816:	46bd      	mov	sp, r7
 8007818:	bc80      	pop	{r7}
 800781a:	4770      	bx	lr

0800781c <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800781c:	b580      	push	{r7, lr}
 800781e:	b084      	sub	sp, #16
 8007820:	af00      	add	r7, sp, #0
 8007822:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007828:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800782a:	68fb      	ldr	r3, [r7, #12]
 800782c:	2200      	movs	r2, #0
 800782e:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8007830:	68fb      	ldr	r3, [r7, #12]
 8007832:	2200      	movs	r2, #0
 8007834:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007836:	68f8      	ldr	r0, [r7, #12]
 8007838:	f7ff fed3 	bl	80075e2 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800783c:	bf00      	nop
 800783e:	3710      	adds	r7, #16
 8007840:	46bd      	mov	sp, r7
 8007842:	bd80      	pop	{r7, pc}

08007844 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8007844:	b480      	push	{r7}
 8007846:	b085      	sub	sp, #20
 8007848:	af00      	add	r7, sp, #0
 800784a:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007852:	b2db      	uxtb	r3, r3
 8007854:	2b21      	cmp	r3, #33	; 0x21
 8007856:	d13e      	bne.n	80078d6 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	689b      	ldr	r3, [r3, #8]
 800785c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007860:	d114      	bne.n	800788c <UART_Transmit_IT+0x48>
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	691b      	ldr	r3, [r3, #16]
 8007866:	2b00      	cmp	r3, #0
 8007868:	d110      	bne.n	800788c <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	6a1b      	ldr	r3, [r3, #32]
 800786e:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8007870:	68fb      	ldr	r3, [r7, #12]
 8007872:	881b      	ldrh	r3, [r3, #0]
 8007874:	461a      	mov	r2, r3
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	681b      	ldr	r3, [r3, #0]
 800787a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800787e:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	6a1b      	ldr	r3, [r3, #32]
 8007884:	1c9a      	adds	r2, r3, #2
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	621a      	str	r2, [r3, #32]
 800788a:	e008      	b.n	800789e <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	6a1b      	ldr	r3, [r3, #32]
 8007890:	1c59      	adds	r1, r3, #1
 8007892:	687a      	ldr	r2, [r7, #4]
 8007894:	6211      	str	r1, [r2, #32]
 8007896:	781a      	ldrb	r2, [r3, #0]
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	681b      	ldr	r3, [r3, #0]
 800789c:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80078a2:	b29b      	uxth	r3, r3
 80078a4:	3b01      	subs	r3, #1
 80078a6:	b29b      	uxth	r3, r3
 80078a8:	687a      	ldr	r2, [r7, #4]
 80078aa:	4619      	mov	r1, r3
 80078ac:	84d1      	strh	r1, [r2, #38]	; 0x26
 80078ae:	2b00      	cmp	r3, #0
 80078b0:	d10f      	bne.n	80078d2 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	681b      	ldr	r3, [r3, #0]
 80078b6:	68da      	ldr	r2, [r3, #12]
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	681b      	ldr	r3, [r3, #0]
 80078bc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80078c0:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	681b      	ldr	r3, [r3, #0]
 80078c6:	68da      	ldr	r2, [r3, #12]
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	681b      	ldr	r3, [r3, #0]
 80078cc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80078d0:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80078d2:	2300      	movs	r3, #0
 80078d4:	e000      	b.n	80078d8 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80078d6:	2302      	movs	r3, #2
  }
}
 80078d8:	4618      	mov	r0, r3
 80078da:	3714      	adds	r7, #20
 80078dc:	46bd      	mov	sp, r7
 80078de:	bc80      	pop	{r7}
 80078e0:	4770      	bx	lr

080078e2 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80078e2:	b580      	push	{r7, lr}
 80078e4:	b082      	sub	sp, #8
 80078e6:	af00      	add	r7, sp, #0
 80078e8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	681b      	ldr	r3, [r3, #0]
 80078ee:	68da      	ldr	r2, [r3, #12]
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	681b      	ldr	r3, [r3, #0]
 80078f4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80078f8:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	2220      	movs	r2, #32
 80078fe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007902:	6878      	ldr	r0, [r7, #4]
 8007904:	f7ff fe64 	bl	80075d0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8007908:	2300      	movs	r3, #0
}
 800790a:	4618      	mov	r0, r3
 800790c:	3708      	adds	r7, #8
 800790e:	46bd      	mov	sp, r7
 8007910:	bd80      	pop	{r7, pc}

08007912 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8007912:	b580      	push	{r7, lr}
 8007914:	b08c      	sub	sp, #48	; 0x30
 8007916:	af00      	add	r7, sp, #0
 8007918:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8007920:	b2db      	uxtb	r3, r3
 8007922:	2b22      	cmp	r3, #34	; 0x22
 8007924:	f040 80ae 	bne.w	8007a84 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	689b      	ldr	r3, [r3, #8]
 800792c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007930:	d117      	bne.n	8007962 <UART_Receive_IT+0x50>
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	691b      	ldr	r3, [r3, #16]
 8007936:	2b00      	cmp	r3, #0
 8007938:	d113      	bne.n	8007962 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800793a:	2300      	movs	r3, #0
 800793c:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007942:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	681b      	ldr	r3, [r3, #0]
 8007948:	685b      	ldr	r3, [r3, #4]
 800794a:	b29b      	uxth	r3, r3
 800794c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007950:	b29a      	uxth	r2, r3
 8007952:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007954:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800795a:	1c9a      	adds	r2, r3, #2
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	629a      	str	r2, [r3, #40]	; 0x28
 8007960:	e026      	b.n	80079b0 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007966:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8007968:	2300      	movs	r3, #0
 800796a:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	689b      	ldr	r3, [r3, #8]
 8007970:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007974:	d007      	beq.n	8007986 <UART_Receive_IT+0x74>
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	689b      	ldr	r3, [r3, #8]
 800797a:	2b00      	cmp	r3, #0
 800797c:	d10a      	bne.n	8007994 <UART_Receive_IT+0x82>
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	691b      	ldr	r3, [r3, #16]
 8007982:	2b00      	cmp	r3, #0
 8007984:	d106      	bne.n	8007994 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	681b      	ldr	r3, [r3, #0]
 800798a:	685b      	ldr	r3, [r3, #4]
 800798c:	b2da      	uxtb	r2, r3
 800798e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007990:	701a      	strb	r2, [r3, #0]
 8007992:	e008      	b.n	80079a6 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	681b      	ldr	r3, [r3, #0]
 8007998:	685b      	ldr	r3, [r3, #4]
 800799a:	b2db      	uxtb	r3, r3
 800799c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80079a0:	b2da      	uxtb	r2, r3
 80079a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80079a4:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80079aa:	1c5a      	adds	r2, r3, #1
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80079b4:	b29b      	uxth	r3, r3
 80079b6:	3b01      	subs	r3, #1
 80079b8:	b29b      	uxth	r3, r3
 80079ba:	687a      	ldr	r2, [r7, #4]
 80079bc:	4619      	mov	r1, r3
 80079be:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80079c0:	2b00      	cmp	r3, #0
 80079c2:	d15d      	bne.n	8007a80 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	681b      	ldr	r3, [r3, #0]
 80079c8:	68da      	ldr	r2, [r3, #12]
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	681b      	ldr	r3, [r3, #0]
 80079ce:	f022 0220 	bic.w	r2, r2, #32
 80079d2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	681b      	ldr	r3, [r3, #0]
 80079d8:	68da      	ldr	r2, [r3, #12]
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	681b      	ldr	r3, [r3, #0]
 80079de:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80079e2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	681b      	ldr	r3, [r3, #0]
 80079e8:	695a      	ldr	r2, [r3, #20]
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	681b      	ldr	r3, [r3, #0]
 80079ee:	f022 0201 	bic.w	r2, r2, #1
 80079f2:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	2220      	movs	r2, #32
 80079f8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	2200      	movs	r2, #0
 8007a00:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007a06:	2b01      	cmp	r3, #1
 8007a08:	d135      	bne.n	8007a76 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	2200      	movs	r2, #0
 8007a0e:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	681b      	ldr	r3, [r3, #0]
 8007a14:	330c      	adds	r3, #12
 8007a16:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a18:	697b      	ldr	r3, [r7, #20]
 8007a1a:	e853 3f00 	ldrex	r3, [r3]
 8007a1e:	613b      	str	r3, [r7, #16]
   return(result);
 8007a20:	693b      	ldr	r3, [r7, #16]
 8007a22:	f023 0310 	bic.w	r3, r3, #16
 8007a26:	627b      	str	r3, [r7, #36]	; 0x24
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	681b      	ldr	r3, [r3, #0]
 8007a2c:	330c      	adds	r3, #12
 8007a2e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007a30:	623a      	str	r2, [r7, #32]
 8007a32:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a34:	69f9      	ldr	r1, [r7, #28]
 8007a36:	6a3a      	ldr	r2, [r7, #32]
 8007a38:	e841 2300 	strex	r3, r2, [r1]
 8007a3c:	61bb      	str	r3, [r7, #24]
   return(result);
 8007a3e:	69bb      	ldr	r3, [r7, #24]
 8007a40:	2b00      	cmp	r3, #0
 8007a42:	d1e5      	bne.n	8007a10 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	681b      	ldr	r3, [r3, #0]
 8007a48:	681b      	ldr	r3, [r3, #0]
 8007a4a:	f003 0310 	and.w	r3, r3, #16
 8007a4e:	2b10      	cmp	r3, #16
 8007a50:	d10a      	bne.n	8007a68 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8007a52:	2300      	movs	r3, #0
 8007a54:	60fb      	str	r3, [r7, #12]
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	681b      	ldr	r3, [r3, #0]
 8007a5a:	681b      	ldr	r3, [r3, #0]
 8007a5c:	60fb      	str	r3, [r7, #12]
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	681b      	ldr	r3, [r3, #0]
 8007a62:	685b      	ldr	r3, [r3, #4]
 8007a64:	60fb      	str	r3, [r7, #12]
 8007a66:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8007a6c:	4619      	mov	r1, r3
 8007a6e:	6878      	ldr	r0, [r7, #4]
 8007a70:	f7ff fdc0 	bl	80075f4 <HAL_UARTEx_RxEventCallback>
 8007a74:	e002      	b.n	8007a7c <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8007a76:	6878      	ldr	r0, [r7, #4]
 8007a78:	f7fe f854 	bl	8005b24 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8007a7c:	2300      	movs	r3, #0
 8007a7e:	e002      	b.n	8007a86 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8007a80:	2300      	movs	r3, #0
 8007a82:	e000      	b.n	8007a86 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8007a84:	2302      	movs	r3, #2
  }
}
 8007a86:	4618      	mov	r0, r3
 8007a88:	3730      	adds	r7, #48	; 0x30
 8007a8a:	46bd      	mov	sp, r7
 8007a8c:	bd80      	pop	{r7, pc}
	...

08007a90 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007a90:	b580      	push	{r7, lr}
 8007a92:	b084      	sub	sp, #16
 8007a94:	af00      	add	r7, sp, #0
 8007a96:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	681b      	ldr	r3, [r3, #0]
 8007a9c:	691b      	ldr	r3, [r3, #16]
 8007a9e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	68da      	ldr	r2, [r3, #12]
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	681b      	ldr	r3, [r3, #0]
 8007aaa:	430a      	orrs	r2, r1
 8007aac:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	689a      	ldr	r2, [r3, #8]
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	691b      	ldr	r3, [r3, #16]
 8007ab6:	431a      	orrs	r2, r3
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	695b      	ldr	r3, [r3, #20]
 8007abc:	4313      	orrs	r3, r2
 8007abe:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	681b      	ldr	r3, [r3, #0]
 8007ac4:	68db      	ldr	r3, [r3, #12]
 8007ac6:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8007aca:	f023 030c 	bic.w	r3, r3, #12
 8007ace:	687a      	ldr	r2, [r7, #4]
 8007ad0:	6812      	ldr	r2, [r2, #0]
 8007ad2:	68b9      	ldr	r1, [r7, #8]
 8007ad4:	430b      	orrs	r3, r1
 8007ad6:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	681b      	ldr	r3, [r3, #0]
 8007adc:	695b      	ldr	r3, [r3, #20]
 8007ade:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	699a      	ldr	r2, [r3, #24]
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	681b      	ldr	r3, [r3, #0]
 8007aea:	430a      	orrs	r2, r1
 8007aec:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	681b      	ldr	r3, [r3, #0]
 8007af2:	4a2c      	ldr	r2, [pc, #176]	; (8007ba4 <UART_SetConfig+0x114>)
 8007af4:	4293      	cmp	r3, r2
 8007af6:	d103      	bne.n	8007b00 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8007af8:	f7ff f9ae 	bl	8006e58 <HAL_RCC_GetPCLK2Freq>
 8007afc:	60f8      	str	r0, [r7, #12]
 8007afe:	e002      	b.n	8007b06 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8007b00:	f7ff f996 	bl	8006e30 <HAL_RCC_GetPCLK1Freq>
 8007b04:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007b06:	68fa      	ldr	r2, [r7, #12]
 8007b08:	4613      	mov	r3, r2
 8007b0a:	009b      	lsls	r3, r3, #2
 8007b0c:	4413      	add	r3, r2
 8007b0e:	009a      	lsls	r2, r3, #2
 8007b10:	441a      	add	r2, r3
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	685b      	ldr	r3, [r3, #4]
 8007b16:	009b      	lsls	r3, r3, #2
 8007b18:	fbb2 f3f3 	udiv	r3, r2, r3
 8007b1c:	4a22      	ldr	r2, [pc, #136]	; (8007ba8 <UART_SetConfig+0x118>)
 8007b1e:	fba2 2303 	umull	r2, r3, r2, r3
 8007b22:	095b      	lsrs	r3, r3, #5
 8007b24:	0119      	lsls	r1, r3, #4
 8007b26:	68fa      	ldr	r2, [r7, #12]
 8007b28:	4613      	mov	r3, r2
 8007b2a:	009b      	lsls	r3, r3, #2
 8007b2c:	4413      	add	r3, r2
 8007b2e:	009a      	lsls	r2, r3, #2
 8007b30:	441a      	add	r2, r3
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	685b      	ldr	r3, [r3, #4]
 8007b36:	009b      	lsls	r3, r3, #2
 8007b38:	fbb2 f2f3 	udiv	r2, r2, r3
 8007b3c:	4b1a      	ldr	r3, [pc, #104]	; (8007ba8 <UART_SetConfig+0x118>)
 8007b3e:	fba3 0302 	umull	r0, r3, r3, r2
 8007b42:	095b      	lsrs	r3, r3, #5
 8007b44:	2064      	movs	r0, #100	; 0x64
 8007b46:	fb00 f303 	mul.w	r3, r0, r3
 8007b4a:	1ad3      	subs	r3, r2, r3
 8007b4c:	011b      	lsls	r3, r3, #4
 8007b4e:	3332      	adds	r3, #50	; 0x32
 8007b50:	4a15      	ldr	r2, [pc, #84]	; (8007ba8 <UART_SetConfig+0x118>)
 8007b52:	fba2 2303 	umull	r2, r3, r2, r3
 8007b56:	095b      	lsrs	r3, r3, #5
 8007b58:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007b5c:	4419      	add	r1, r3
 8007b5e:	68fa      	ldr	r2, [r7, #12]
 8007b60:	4613      	mov	r3, r2
 8007b62:	009b      	lsls	r3, r3, #2
 8007b64:	4413      	add	r3, r2
 8007b66:	009a      	lsls	r2, r3, #2
 8007b68:	441a      	add	r2, r3
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	685b      	ldr	r3, [r3, #4]
 8007b6e:	009b      	lsls	r3, r3, #2
 8007b70:	fbb2 f2f3 	udiv	r2, r2, r3
 8007b74:	4b0c      	ldr	r3, [pc, #48]	; (8007ba8 <UART_SetConfig+0x118>)
 8007b76:	fba3 0302 	umull	r0, r3, r3, r2
 8007b7a:	095b      	lsrs	r3, r3, #5
 8007b7c:	2064      	movs	r0, #100	; 0x64
 8007b7e:	fb00 f303 	mul.w	r3, r0, r3
 8007b82:	1ad3      	subs	r3, r2, r3
 8007b84:	011b      	lsls	r3, r3, #4
 8007b86:	3332      	adds	r3, #50	; 0x32
 8007b88:	4a07      	ldr	r2, [pc, #28]	; (8007ba8 <UART_SetConfig+0x118>)
 8007b8a:	fba2 2303 	umull	r2, r3, r2, r3
 8007b8e:	095b      	lsrs	r3, r3, #5
 8007b90:	f003 020f 	and.w	r2, r3, #15
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	681b      	ldr	r3, [r3, #0]
 8007b98:	440a      	add	r2, r1
 8007b9a:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8007b9c:	bf00      	nop
 8007b9e:	3710      	adds	r7, #16
 8007ba0:	46bd      	mov	sp, r7
 8007ba2:	bd80      	pop	{r7, pc}
 8007ba4:	40013800 	.word	0x40013800
 8007ba8:	51eb851f 	.word	0x51eb851f

08007bac <memset>:
 8007bac:	4603      	mov	r3, r0
 8007bae:	4402      	add	r2, r0
 8007bb0:	4293      	cmp	r3, r2
 8007bb2:	d100      	bne.n	8007bb6 <memset+0xa>
 8007bb4:	4770      	bx	lr
 8007bb6:	f803 1b01 	strb.w	r1, [r3], #1
 8007bba:	e7f9      	b.n	8007bb0 <memset+0x4>

08007bbc <__libc_init_array>:
 8007bbc:	b570      	push	{r4, r5, r6, lr}
 8007bbe:	2600      	movs	r6, #0
 8007bc0:	4d0c      	ldr	r5, [pc, #48]	; (8007bf4 <__libc_init_array+0x38>)
 8007bc2:	4c0d      	ldr	r4, [pc, #52]	; (8007bf8 <__libc_init_array+0x3c>)
 8007bc4:	1b64      	subs	r4, r4, r5
 8007bc6:	10a4      	asrs	r4, r4, #2
 8007bc8:	42a6      	cmp	r6, r4
 8007bca:	d109      	bne.n	8007be0 <__libc_init_array+0x24>
 8007bcc:	f000 f81a 	bl	8007c04 <_init>
 8007bd0:	2600      	movs	r6, #0
 8007bd2:	4d0a      	ldr	r5, [pc, #40]	; (8007bfc <__libc_init_array+0x40>)
 8007bd4:	4c0a      	ldr	r4, [pc, #40]	; (8007c00 <__libc_init_array+0x44>)
 8007bd6:	1b64      	subs	r4, r4, r5
 8007bd8:	10a4      	asrs	r4, r4, #2
 8007bda:	42a6      	cmp	r6, r4
 8007bdc:	d105      	bne.n	8007bea <__libc_init_array+0x2e>
 8007bde:	bd70      	pop	{r4, r5, r6, pc}
 8007be0:	f855 3b04 	ldr.w	r3, [r5], #4
 8007be4:	4798      	blx	r3
 8007be6:	3601      	adds	r6, #1
 8007be8:	e7ee      	b.n	8007bc8 <__libc_init_array+0xc>
 8007bea:	f855 3b04 	ldr.w	r3, [r5], #4
 8007bee:	4798      	blx	r3
 8007bf0:	3601      	adds	r6, #1
 8007bf2:	e7f2      	b.n	8007bda <__libc_init_array+0x1e>
 8007bf4:	08007c48 	.word	0x08007c48
 8007bf8:	08007c48 	.word	0x08007c48
 8007bfc:	08007c48 	.word	0x08007c48
 8007c00:	08007c4c 	.word	0x08007c4c

08007c04 <_init>:
 8007c04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007c06:	bf00      	nop
 8007c08:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007c0a:	bc08      	pop	{r3}
 8007c0c:	469e      	mov	lr, r3
 8007c0e:	4770      	bx	lr

08007c10 <_fini>:
 8007c10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007c12:	bf00      	nop
 8007c14:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007c16:	bc08      	pop	{r3}
 8007c18:	469e      	mov	lr, r3
 8007c1a:	4770      	bx	lr
