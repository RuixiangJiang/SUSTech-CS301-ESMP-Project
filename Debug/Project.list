
Project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007c04  080001e8  080001e8  000101e8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000002c  08007dec  08007dec  00017dec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007e18  08007e18  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08007e18  08007e18  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08007e18  08007e18  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007e18  08007e18  00017e18  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007e1c  08007e1c  00017e1c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08007e20  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000c4c  2000000c  08007e2c  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000c58  08007e2c  00020c58  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020035  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000861d  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001b57  00000000  00000000  00028695  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000007e8  00000000  00000000  0002a1f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000615  00000000  00000000  0002a9d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00017e7d  00000000  00000000  0002afed  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000afef  00000000  00000000  00042e6a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0009031b  00000000  00000000  0004de59  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00001fa8  00000000  00000000  000de174  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005f  00000000  00000000  000e011c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e8 <__do_global_dtors_aux>:
 80001e8:	b510      	push	{r4, lr}
 80001ea:	4c05      	ldr	r4, [pc, #20]	; (8000200 <__do_global_dtors_aux+0x18>)
 80001ec:	7823      	ldrb	r3, [r4, #0]
 80001ee:	b933      	cbnz	r3, 80001fe <__do_global_dtors_aux+0x16>
 80001f0:	4b04      	ldr	r3, [pc, #16]	; (8000204 <__do_global_dtors_aux+0x1c>)
 80001f2:	b113      	cbz	r3, 80001fa <__do_global_dtors_aux+0x12>
 80001f4:	4804      	ldr	r0, [pc, #16]	; (8000208 <__do_global_dtors_aux+0x20>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	2301      	movs	r3, #1
 80001fc:	7023      	strb	r3, [r4, #0]
 80001fe:	bd10      	pop	{r4, pc}
 8000200:	2000000c 	.word	0x2000000c
 8000204:	00000000 	.word	0x00000000
 8000208:	08007dd4 	.word	0x08007dd4

0800020c <frame_dummy>:
 800020c:	b508      	push	{r3, lr}
 800020e:	4b03      	ldr	r3, [pc, #12]	; (800021c <frame_dummy+0x10>)
 8000210:	b11b      	cbz	r3, 800021a <frame_dummy+0xe>
 8000212:	4903      	ldr	r1, [pc, #12]	; (8000220 <frame_dummy+0x14>)
 8000214:	4803      	ldr	r0, [pc, #12]	; (8000224 <frame_dummy+0x18>)
 8000216:	f3af 8000 	nop.w
 800021a:	bd08      	pop	{r3, pc}
 800021c:	00000000 	.word	0x00000000
 8000220:	20000010 	.word	0x20000010
 8000224:	08007dd4 	.word	0x08007dd4

08000228 <__aeabi_drsub>:
 8000228:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800022c:	e002      	b.n	8000234 <__adddf3>
 800022e:	bf00      	nop

08000230 <__aeabi_dsub>:
 8000230:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000234 <__adddf3>:
 8000234:	b530      	push	{r4, r5, lr}
 8000236:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800023a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800023e:	ea94 0f05 	teq	r4, r5
 8000242:	bf08      	it	eq
 8000244:	ea90 0f02 	teqeq	r0, r2
 8000248:	bf1f      	itttt	ne
 800024a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800024e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000252:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000256:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800025a:	f000 80e2 	beq.w	8000422 <__adddf3+0x1ee>
 800025e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000262:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000266:	bfb8      	it	lt
 8000268:	426d      	neglt	r5, r5
 800026a:	dd0c      	ble.n	8000286 <__adddf3+0x52>
 800026c:	442c      	add	r4, r5
 800026e:	ea80 0202 	eor.w	r2, r0, r2
 8000272:	ea81 0303 	eor.w	r3, r1, r3
 8000276:	ea82 0000 	eor.w	r0, r2, r0
 800027a:	ea83 0101 	eor.w	r1, r3, r1
 800027e:	ea80 0202 	eor.w	r2, r0, r2
 8000282:	ea81 0303 	eor.w	r3, r1, r3
 8000286:	2d36      	cmp	r5, #54	; 0x36
 8000288:	bf88      	it	hi
 800028a:	bd30      	pophi	{r4, r5, pc}
 800028c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000290:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000294:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000298:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800029c:	d002      	beq.n	80002a4 <__adddf3+0x70>
 800029e:	4240      	negs	r0, r0
 80002a0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002a4:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002a8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002ac:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002b0:	d002      	beq.n	80002b8 <__adddf3+0x84>
 80002b2:	4252      	negs	r2, r2
 80002b4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002b8:	ea94 0f05 	teq	r4, r5
 80002bc:	f000 80a7 	beq.w	800040e <__adddf3+0x1da>
 80002c0:	f1a4 0401 	sub.w	r4, r4, #1
 80002c4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002c8:	db0d      	blt.n	80002e6 <__adddf3+0xb2>
 80002ca:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002ce:	fa22 f205 	lsr.w	r2, r2, r5
 80002d2:	1880      	adds	r0, r0, r2
 80002d4:	f141 0100 	adc.w	r1, r1, #0
 80002d8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002dc:	1880      	adds	r0, r0, r2
 80002de:	fa43 f305 	asr.w	r3, r3, r5
 80002e2:	4159      	adcs	r1, r3
 80002e4:	e00e      	b.n	8000304 <__adddf3+0xd0>
 80002e6:	f1a5 0520 	sub.w	r5, r5, #32
 80002ea:	f10e 0e20 	add.w	lr, lr, #32
 80002ee:	2a01      	cmp	r2, #1
 80002f0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002f4:	bf28      	it	cs
 80002f6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002fa:	fa43 f305 	asr.w	r3, r3, r5
 80002fe:	18c0      	adds	r0, r0, r3
 8000300:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000304:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000308:	d507      	bpl.n	800031a <__adddf3+0xe6>
 800030a:	f04f 0e00 	mov.w	lr, #0
 800030e:	f1dc 0c00 	rsbs	ip, ip, #0
 8000312:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000316:	eb6e 0101 	sbc.w	r1, lr, r1
 800031a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800031e:	d31b      	bcc.n	8000358 <__adddf3+0x124>
 8000320:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000324:	d30c      	bcc.n	8000340 <__adddf3+0x10c>
 8000326:	0849      	lsrs	r1, r1, #1
 8000328:	ea5f 0030 	movs.w	r0, r0, rrx
 800032c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000330:	f104 0401 	add.w	r4, r4, #1
 8000334:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000338:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800033c:	f080 809a 	bcs.w	8000474 <__adddf3+0x240>
 8000340:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000344:	bf08      	it	eq
 8000346:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800034a:	f150 0000 	adcs.w	r0, r0, #0
 800034e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000352:	ea41 0105 	orr.w	r1, r1, r5
 8000356:	bd30      	pop	{r4, r5, pc}
 8000358:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800035c:	4140      	adcs	r0, r0
 800035e:	eb41 0101 	adc.w	r1, r1, r1
 8000362:	3c01      	subs	r4, #1
 8000364:	bf28      	it	cs
 8000366:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800036a:	d2e9      	bcs.n	8000340 <__adddf3+0x10c>
 800036c:	f091 0f00 	teq	r1, #0
 8000370:	bf04      	itt	eq
 8000372:	4601      	moveq	r1, r0
 8000374:	2000      	moveq	r0, #0
 8000376:	fab1 f381 	clz	r3, r1
 800037a:	bf08      	it	eq
 800037c:	3320      	addeq	r3, #32
 800037e:	f1a3 030b 	sub.w	r3, r3, #11
 8000382:	f1b3 0220 	subs.w	r2, r3, #32
 8000386:	da0c      	bge.n	80003a2 <__adddf3+0x16e>
 8000388:	320c      	adds	r2, #12
 800038a:	dd08      	ble.n	800039e <__adddf3+0x16a>
 800038c:	f102 0c14 	add.w	ip, r2, #20
 8000390:	f1c2 020c 	rsb	r2, r2, #12
 8000394:	fa01 f00c 	lsl.w	r0, r1, ip
 8000398:	fa21 f102 	lsr.w	r1, r1, r2
 800039c:	e00c      	b.n	80003b8 <__adddf3+0x184>
 800039e:	f102 0214 	add.w	r2, r2, #20
 80003a2:	bfd8      	it	le
 80003a4:	f1c2 0c20 	rsble	ip, r2, #32
 80003a8:	fa01 f102 	lsl.w	r1, r1, r2
 80003ac:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003b0:	bfdc      	itt	le
 80003b2:	ea41 010c 	orrle.w	r1, r1, ip
 80003b6:	4090      	lslle	r0, r2
 80003b8:	1ae4      	subs	r4, r4, r3
 80003ba:	bfa2      	ittt	ge
 80003bc:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003c0:	4329      	orrge	r1, r5
 80003c2:	bd30      	popge	{r4, r5, pc}
 80003c4:	ea6f 0404 	mvn.w	r4, r4
 80003c8:	3c1f      	subs	r4, #31
 80003ca:	da1c      	bge.n	8000406 <__adddf3+0x1d2>
 80003cc:	340c      	adds	r4, #12
 80003ce:	dc0e      	bgt.n	80003ee <__adddf3+0x1ba>
 80003d0:	f104 0414 	add.w	r4, r4, #20
 80003d4:	f1c4 0220 	rsb	r2, r4, #32
 80003d8:	fa20 f004 	lsr.w	r0, r0, r4
 80003dc:	fa01 f302 	lsl.w	r3, r1, r2
 80003e0:	ea40 0003 	orr.w	r0, r0, r3
 80003e4:	fa21 f304 	lsr.w	r3, r1, r4
 80003e8:	ea45 0103 	orr.w	r1, r5, r3
 80003ec:	bd30      	pop	{r4, r5, pc}
 80003ee:	f1c4 040c 	rsb	r4, r4, #12
 80003f2:	f1c4 0220 	rsb	r2, r4, #32
 80003f6:	fa20 f002 	lsr.w	r0, r0, r2
 80003fa:	fa01 f304 	lsl.w	r3, r1, r4
 80003fe:	ea40 0003 	orr.w	r0, r0, r3
 8000402:	4629      	mov	r1, r5
 8000404:	bd30      	pop	{r4, r5, pc}
 8000406:	fa21 f004 	lsr.w	r0, r1, r4
 800040a:	4629      	mov	r1, r5
 800040c:	bd30      	pop	{r4, r5, pc}
 800040e:	f094 0f00 	teq	r4, #0
 8000412:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000416:	bf06      	itte	eq
 8000418:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 800041c:	3401      	addeq	r4, #1
 800041e:	3d01      	subne	r5, #1
 8000420:	e74e      	b.n	80002c0 <__adddf3+0x8c>
 8000422:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000426:	bf18      	it	ne
 8000428:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800042c:	d029      	beq.n	8000482 <__adddf3+0x24e>
 800042e:	ea94 0f05 	teq	r4, r5
 8000432:	bf08      	it	eq
 8000434:	ea90 0f02 	teqeq	r0, r2
 8000438:	d005      	beq.n	8000446 <__adddf3+0x212>
 800043a:	ea54 0c00 	orrs.w	ip, r4, r0
 800043e:	bf04      	itt	eq
 8000440:	4619      	moveq	r1, r3
 8000442:	4610      	moveq	r0, r2
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	ea91 0f03 	teq	r1, r3
 800044a:	bf1e      	ittt	ne
 800044c:	2100      	movne	r1, #0
 800044e:	2000      	movne	r0, #0
 8000450:	bd30      	popne	{r4, r5, pc}
 8000452:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000456:	d105      	bne.n	8000464 <__adddf3+0x230>
 8000458:	0040      	lsls	r0, r0, #1
 800045a:	4149      	adcs	r1, r1
 800045c:	bf28      	it	cs
 800045e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000462:	bd30      	pop	{r4, r5, pc}
 8000464:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000468:	bf3c      	itt	cc
 800046a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800046e:	bd30      	popcc	{r4, r5, pc}
 8000470:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000474:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000478:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800047c:	f04f 0000 	mov.w	r0, #0
 8000480:	bd30      	pop	{r4, r5, pc}
 8000482:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000486:	bf1a      	itte	ne
 8000488:	4619      	movne	r1, r3
 800048a:	4610      	movne	r0, r2
 800048c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000490:	bf1c      	itt	ne
 8000492:	460b      	movne	r3, r1
 8000494:	4602      	movne	r2, r0
 8000496:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800049a:	bf06      	itte	eq
 800049c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004a0:	ea91 0f03 	teqeq	r1, r3
 80004a4:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004a8:	bd30      	pop	{r4, r5, pc}
 80004aa:	bf00      	nop

080004ac <__aeabi_ui2d>:
 80004ac:	f090 0f00 	teq	r0, #0
 80004b0:	bf04      	itt	eq
 80004b2:	2100      	moveq	r1, #0
 80004b4:	4770      	bxeq	lr
 80004b6:	b530      	push	{r4, r5, lr}
 80004b8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004bc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004c0:	f04f 0500 	mov.w	r5, #0
 80004c4:	f04f 0100 	mov.w	r1, #0
 80004c8:	e750      	b.n	800036c <__adddf3+0x138>
 80004ca:	bf00      	nop

080004cc <__aeabi_i2d>:
 80004cc:	f090 0f00 	teq	r0, #0
 80004d0:	bf04      	itt	eq
 80004d2:	2100      	moveq	r1, #0
 80004d4:	4770      	bxeq	lr
 80004d6:	b530      	push	{r4, r5, lr}
 80004d8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004dc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004e0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004e4:	bf48      	it	mi
 80004e6:	4240      	negmi	r0, r0
 80004e8:	f04f 0100 	mov.w	r1, #0
 80004ec:	e73e      	b.n	800036c <__adddf3+0x138>
 80004ee:	bf00      	nop

080004f0 <__aeabi_f2d>:
 80004f0:	0042      	lsls	r2, r0, #1
 80004f2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004f6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004fa:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004fe:	bf1f      	itttt	ne
 8000500:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000504:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000508:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 800050c:	4770      	bxne	lr
 800050e:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000512:	bf08      	it	eq
 8000514:	4770      	bxeq	lr
 8000516:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800051a:	bf04      	itt	eq
 800051c:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000520:	4770      	bxeq	lr
 8000522:	b530      	push	{r4, r5, lr}
 8000524:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000528:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800052c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000530:	e71c      	b.n	800036c <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_ul2d>:
 8000534:	ea50 0201 	orrs.w	r2, r0, r1
 8000538:	bf08      	it	eq
 800053a:	4770      	bxeq	lr
 800053c:	b530      	push	{r4, r5, lr}
 800053e:	f04f 0500 	mov.w	r5, #0
 8000542:	e00a      	b.n	800055a <__aeabi_l2d+0x16>

08000544 <__aeabi_l2d>:
 8000544:	ea50 0201 	orrs.w	r2, r0, r1
 8000548:	bf08      	it	eq
 800054a:	4770      	bxeq	lr
 800054c:	b530      	push	{r4, r5, lr}
 800054e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000552:	d502      	bpl.n	800055a <__aeabi_l2d+0x16>
 8000554:	4240      	negs	r0, r0
 8000556:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800055a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800055e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000562:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000566:	f43f aed8 	beq.w	800031a <__adddf3+0xe6>
 800056a:	f04f 0203 	mov.w	r2, #3
 800056e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000572:	bf18      	it	ne
 8000574:	3203      	addne	r2, #3
 8000576:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800057a:	bf18      	it	ne
 800057c:	3203      	addne	r2, #3
 800057e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000582:	f1c2 0320 	rsb	r3, r2, #32
 8000586:	fa00 fc03 	lsl.w	ip, r0, r3
 800058a:	fa20 f002 	lsr.w	r0, r0, r2
 800058e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000592:	ea40 000e 	orr.w	r0, r0, lr
 8000596:	fa21 f102 	lsr.w	r1, r1, r2
 800059a:	4414      	add	r4, r2
 800059c:	e6bd      	b.n	800031a <__adddf3+0xe6>
 800059e:	bf00      	nop

080005a0 <__aeabi_dmul>:
 80005a0:	b570      	push	{r4, r5, r6, lr}
 80005a2:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005a6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005aa:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005ae:	bf1d      	ittte	ne
 80005b0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005b4:	ea94 0f0c 	teqne	r4, ip
 80005b8:	ea95 0f0c 	teqne	r5, ip
 80005bc:	f000 f8de 	bleq	800077c <__aeabi_dmul+0x1dc>
 80005c0:	442c      	add	r4, r5
 80005c2:	ea81 0603 	eor.w	r6, r1, r3
 80005c6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005ca:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005ce:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005d2:	bf18      	it	ne
 80005d4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005dc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005e0:	d038      	beq.n	8000654 <__aeabi_dmul+0xb4>
 80005e2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005e6:	f04f 0500 	mov.w	r5, #0
 80005ea:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005ee:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005f2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005f6:	f04f 0600 	mov.w	r6, #0
 80005fa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005fe:	f09c 0f00 	teq	ip, #0
 8000602:	bf18      	it	ne
 8000604:	f04e 0e01 	orrne.w	lr, lr, #1
 8000608:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800060c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000610:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000614:	d204      	bcs.n	8000620 <__aeabi_dmul+0x80>
 8000616:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800061a:	416d      	adcs	r5, r5
 800061c:	eb46 0606 	adc.w	r6, r6, r6
 8000620:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000624:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000628:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800062c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000630:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000634:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000638:	bf88      	it	hi
 800063a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800063e:	d81e      	bhi.n	800067e <__aeabi_dmul+0xde>
 8000640:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000644:	bf08      	it	eq
 8000646:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800064a:	f150 0000 	adcs.w	r0, r0, #0
 800064e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000652:	bd70      	pop	{r4, r5, r6, pc}
 8000654:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000658:	ea46 0101 	orr.w	r1, r6, r1
 800065c:	ea40 0002 	orr.w	r0, r0, r2
 8000660:	ea81 0103 	eor.w	r1, r1, r3
 8000664:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000668:	bfc2      	ittt	gt
 800066a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800066e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000672:	bd70      	popgt	{r4, r5, r6, pc}
 8000674:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000678:	f04f 0e00 	mov.w	lr, #0
 800067c:	3c01      	subs	r4, #1
 800067e:	f300 80ab 	bgt.w	80007d8 <__aeabi_dmul+0x238>
 8000682:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000686:	bfde      	ittt	le
 8000688:	2000      	movle	r0, #0
 800068a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800068e:	bd70      	pople	{r4, r5, r6, pc}
 8000690:	f1c4 0400 	rsb	r4, r4, #0
 8000694:	3c20      	subs	r4, #32
 8000696:	da35      	bge.n	8000704 <__aeabi_dmul+0x164>
 8000698:	340c      	adds	r4, #12
 800069a:	dc1b      	bgt.n	80006d4 <__aeabi_dmul+0x134>
 800069c:	f104 0414 	add.w	r4, r4, #20
 80006a0:	f1c4 0520 	rsb	r5, r4, #32
 80006a4:	fa00 f305 	lsl.w	r3, r0, r5
 80006a8:	fa20 f004 	lsr.w	r0, r0, r4
 80006ac:	fa01 f205 	lsl.w	r2, r1, r5
 80006b0:	ea40 0002 	orr.w	r0, r0, r2
 80006b4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006b8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006bc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006c0:	fa21 f604 	lsr.w	r6, r1, r4
 80006c4:	eb42 0106 	adc.w	r1, r2, r6
 80006c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006cc:	bf08      	it	eq
 80006ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006d2:	bd70      	pop	{r4, r5, r6, pc}
 80006d4:	f1c4 040c 	rsb	r4, r4, #12
 80006d8:	f1c4 0520 	rsb	r5, r4, #32
 80006dc:	fa00 f304 	lsl.w	r3, r0, r4
 80006e0:	fa20 f005 	lsr.w	r0, r0, r5
 80006e4:	fa01 f204 	lsl.w	r2, r1, r4
 80006e8:	ea40 0002 	orr.w	r0, r0, r2
 80006ec:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006f0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006f4:	f141 0100 	adc.w	r1, r1, #0
 80006f8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006fc:	bf08      	it	eq
 80006fe:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000702:	bd70      	pop	{r4, r5, r6, pc}
 8000704:	f1c4 0520 	rsb	r5, r4, #32
 8000708:	fa00 f205 	lsl.w	r2, r0, r5
 800070c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000710:	fa20 f304 	lsr.w	r3, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea43 0302 	orr.w	r3, r3, r2
 800071c:	fa21 f004 	lsr.w	r0, r1, r4
 8000720:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000724:	fa21 f204 	lsr.w	r2, r1, r4
 8000728:	ea20 0002 	bic.w	r0, r0, r2
 800072c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f094 0f00 	teq	r4, #0
 8000740:	d10f      	bne.n	8000762 <__aeabi_dmul+0x1c2>
 8000742:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000746:	0040      	lsls	r0, r0, #1
 8000748:	eb41 0101 	adc.w	r1, r1, r1
 800074c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000750:	bf08      	it	eq
 8000752:	3c01      	subeq	r4, #1
 8000754:	d0f7      	beq.n	8000746 <__aeabi_dmul+0x1a6>
 8000756:	ea41 0106 	orr.w	r1, r1, r6
 800075a:	f095 0f00 	teq	r5, #0
 800075e:	bf18      	it	ne
 8000760:	4770      	bxne	lr
 8000762:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000766:	0052      	lsls	r2, r2, #1
 8000768:	eb43 0303 	adc.w	r3, r3, r3
 800076c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000770:	bf08      	it	eq
 8000772:	3d01      	subeq	r5, #1
 8000774:	d0f7      	beq.n	8000766 <__aeabi_dmul+0x1c6>
 8000776:	ea43 0306 	orr.w	r3, r3, r6
 800077a:	4770      	bx	lr
 800077c:	ea94 0f0c 	teq	r4, ip
 8000780:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000784:	bf18      	it	ne
 8000786:	ea95 0f0c 	teqne	r5, ip
 800078a:	d00c      	beq.n	80007a6 <__aeabi_dmul+0x206>
 800078c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000790:	bf18      	it	ne
 8000792:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000796:	d1d1      	bne.n	800073c <__aeabi_dmul+0x19c>
 8000798:	ea81 0103 	eor.w	r1, r1, r3
 800079c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007a0:	f04f 0000 	mov.w	r0, #0
 80007a4:	bd70      	pop	{r4, r5, r6, pc}
 80007a6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007aa:	bf06      	itte	eq
 80007ac:	4610      	moveq	r0, r2
 80007ae:	4619      	moveq	r1, r3
 80007b0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007b4:	d019      	beq.n	80007ea <__aeabi_dmul+0x24a>
 80007b6:	ea94 0f0c 	teq	r4, ip
 80007ba:	d102      	bne.n	80007c2 <__aeabi_dmul+0x222>
 80007bc:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007c0:	d113      	bne.n	80007ea <__aeabi_dmul+0x24a>
 80007c2:	ea95 0f0c 	teq	r5, ip
 80007c6:	d105      	bne.n	80007d4 <__aeabi_dmul+0x234>
 80007c8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007cc:	bf1c      	itt	ne
 80007ce:	4610      	movne	r0, r2
 80007d0:	4619      	movne	r1, r3
 80007d2:	d10a      	bne.n	80007ea <__aeabi_dmul+0x24a>
 80007d4:	ea81 0103 	eor.w	r1, r1, r3
 80007d8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007dc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007e4:	f04f 0000 	mov.w	r0, #0
 80007e8:	bd70      	pop	{r4, r5, r6, pc}
 80007ea:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007ee:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007f2:	bd70      	pop	{r4, r5, r6, pc}

080007f4 <__aeabi_ddiv>:
 80007f4:	b570      	push	{r4, r5, r6, lr}
 80007f6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007fa:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007fe:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000802:	bf1d      	ittte	ne
 8000804:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000808:	ea94 0f0c 	teqne	r4, ip
 800080c:	ea95 0f0c 	teqne	r5, ip
 8000810:	f000 f8a7 	bleq	8000962 <__aeabi_ddiv+0x16e>
 8000814:	eba4 0405 	sub.w	r4, r4, r5
 8000818:	ea81 0e03 	eor.w	lr, r1, r3
 800081c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000820:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000824:	f000 8088 	beq.w	8000938 <__aeabi_ddiv+0x144>
 8000828:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800082c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000830:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000834:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000838:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800083c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000840:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000844:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000848:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800084c:	429d      	cmp	r5, r3
 800084e:	bf08      	it	eq
 8000850:	4296      	cmpeq	r6, r2
 8000852:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000856:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800085a:	d202      	bcs.n	8000862 <__aeabi_ddiv+0x6e>
 800085c:	085b      	lsrs	r3, r3, #1
 800085e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000862:	1ab6      	subs	r6, r6, r2
 8000864:	eb65 0503 	sbc.w	r5, r5, r3
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000872:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000876:	ebb6 0e02 	subs.w	lr, r6, r2
 800087a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800087e:	bf22      	ittt	cs
 8000880:	1ab6      	subcs	r6, r6, r2
 8000882:	4675      	movcs	r5, lr
 8000884:	ea40 000c 	orrcs.w	r0, r0, ip
 8000888:	085b      	lsrs	r3, r3, #1
 800088a:	ea4f 0232 	mov.w	r2, r2, rrx
 800088e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000892:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000896:	bf22      	ittt	cs
 8000898:	1ab6      	subcs	r6, r6, r2
 800089a:	4675      	movcs	r5, lr
 800089c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008a0:	085b      	lsrs	r3, r3, #1
 80008a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008a6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008aa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ae:	bf22      	ittt	cs
 80008b0:	1ab6      	subcs	r6, r6, r2
 80008b2:	4675      	movcs	r5, lr
 80008b4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008b8:	085b      	lsrs	r3, r3, #1
 80008ba:	ea4f 0232 	mov.w	r2, r2, rrx
 80008be:	ebb6 0e02 	subs.w	lr, r6, r2
 80008c2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008c6:	bf22      	ittt	cs
 80008c8:	1ab6      	subcs	r6, r6, r2
 80008ca:	4675      	movcs	r5, lr
 80008cc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008d0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008d4:	d018      	beq.n	8000908 <__aeabi_ddiv+0x114>
 80008d6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008da:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008de:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008e2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008e6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008ea:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008ee:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008f2:	d1c0      	bne.n	8000876 <__aeabi_ddiv+0x82>
 80008f4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008f8:	d10b      	bne.n	8000912 <__aeabi_ddiv+0x11e>
 80008fa:	ea41 0100 	orr.w	r1, r1, r0
 80008fe:	f04f 0000 	mov.w	r0, #0
 8000902:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000906:	e7b6      	b.n	8000876 <__aeabi_ddiv+0x82>
 8000908:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800090c:	bf04      	itt	eq
 800090e:	4301      	orreq	r1, r0
 8000910:	2000      	moveq	r0, #0
 8000912:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000916:	bf88      	it	hi
 8000918:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800091c:	f63f aeaf 	bhi.w	800067e <__aeabi_dmul+0xde>
 8000920:	ebb5 0c03 	subs.w	ip, r5, r3
 8000924:	bf04      	itt	eq
 8000926:	ebb6 0c02 	subseq.w	ip, r6, r2
 800092a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800092e:	f150 0000 	adcs.w	r0, r0, #0
 8000932:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000936:	bd70      	pop	{r4, r5, r6, pc}
 8000938:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800093c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000940:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000944:	bfc2      	ittt	gt
 8000946:	ebd4 050c 	rsbsgt	r5, r4, ip
 800094a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800094e:	bd70      	popgt	{r4, r5, r6, pc}
 8000950:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000954:	f04f 0e00 	mov.w	lr, #0
 8000958:	3c01      	subs	r4, #1
 800095a:	e690      	b.n	800067e <__aeabi_dmul+0xde>
 800095c:	ea45 0e06 	orr.w	lr, r5, r6
 8000960:	e68d      	b.n	800067e <__aeabi_dmul+0xde>
 8000962:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000966:	ea94 0f0c 	teq	r4, ip
 800096a:	bf08      	it	eq
 800096c:	ea95 0f0c 	teqeq	r5, ip
 8000970:	f43f af3b 	beq.w	80007ea <__aeabi_dmul+0x24a>
 8000974:	ea94 0f0c 	teq	r4, ip
 8000978:	d10a      	bne.n	8000990 <__aeabi_ddiv+0x19c>
 800097a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800097e:	f47f af34 	bne.w	80007ea <__aeabi_dmul+0x24a>
 8000982:	ea95 0f0c 	teq	r5, ip
 8000986:	f47f af25 	bne.w	80007d4 <__aeabi_dmul+0x234>
 800098a:	4610      	mov	r0, r2
 800098c:	4619      	mov	r1, r3
 800098e:	e72c      	b.n	80007ea <__aeabi_dmul+0x24a>
 8000990:	ea95 0f0c 	teq	r5, ip
 8000994:	d106      	bne.n	80009a4 <__aeabi_ddiv+0x1b0>
 8000996:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800099a:	f43f aefd 	beq.w	8000798 <__aeabi_dmul+0x1f8>
 800099e:	4610      	mov	r0, r2
 80009a0:	4619      	mov	r1, r3
 80009a2:	e722      	b.n	80007ea <__aeabi_dmul+0x24a>
 80009a4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009a8:	bf18      	it	ne
 80009aa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009ae:	f47f aec5 	bne.w	800073c <__aeabi_dmul+0x19c>
 80009b2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009b6:	f47f af0d 	bne.w	80007d4 <__aeabi_dmul+0x234>
 80009ba:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009be:	f47f aeeb 	bne.w	8000798 <__aeabi_dmul+0x1f8>
 80009c2:	e712      	b.n	80007ea <__aeabi_dmul+0x24a>

080009c4 <__aeabi_d2uiz>:
 80009c4:	004a      	lsls	r2, r1, #1
 80009c6:	d211      	bcs.n	80009ec <__aeabi_d2uiz+0x28>
 80009c8:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80009cc:	d211      	bcs.n	80009f2 <__aeabi_d2uiz+0x2e>
 80009ce:	d50d      	bpl.n	80009ec <__aeabi_d2uiz+0x28>
 80009d0:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80009d4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80009d8:	d40e      	bmi.n	80009f8 <__aeabi_d2uiz+0x34>
 80009da:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80009de:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80009e2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80009e6:	fa23 f002 	lsr.w	r0, r3, r2
 80009ea:	4770      	bx	lr
 80009ec:	f04f 0000 	mov.w	r0, #0
 80009f0:	4770      	bx	lr
 80009f2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80009f6:	d102      	bne.n	80009fe <__aeabi_d2uiz+0x3a>
 80009f8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80009fc:	4770      	bx	lr
 80009fe:	f04f 0000 	mov.w	r0, #0
 8000a02:	4770      	bx	lr

08000a04 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000a04:	b580      	push	{r7, lr}
 8000a06:	b088      	sub	sp, #32
 8000a08:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a0a:	f107 0310 	add.w	r3, r7, #16
 8000a0e:	2200      	movs	r2, #0
 8000a10:	601a      	str	r2, [r3, #0]
 8000a12:	605a      	str	r2, [r3, #4]
 8000a14:	609a      	str	r2, [r3, #8]
 8000a16:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000a18:	4b46      	ldr	r3, [pc, #280]	; (8000b34 <MX_GPIO_Init+0x130>)
 8000a1a:	699b      	ldr	r3, [r3, #24]
 8000a1c:	4a45      	ldr	r2, [pc, #276]	; (8000b34 <MX_GPIO_Init+0x130>)
 8000a1e:	f043 0320 	orr.w	r3, r3, #32
 8000a22:	6193      	str	r3, [r2, #24]
 8000a24:	4b43      	ldr	r3, [pc, #268]	; (8000b34 <MX_GPIO_Init+0x130>)
 8000a26:	699b      	ldr	r3, [r3, #24]
 8000a28:	f003 0320 	and.w	r3, r3, #32
 8000a2c:	60fb      	str	r3, [r7, #12]
 8000a2e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a30:	4b40      	ldr	r3, [pc, #256]	; (8000b34 <MX_GPIO_Init+0x130>)
 8000a32:	699b      	ldr	r3, [r3, #24]
 8000a34:	4a3f      	ldr	r2, [pc, #252]	; (8000b34 <MX_GPIO_Init+0x130>)
 8000a36:	f043 0304 	orr.w	r3, r3, #4
 8000a3a:	6193      	str	r3, [r2, #24]
 8000a3c:	4b3d      	ldr	r3, [pc, #244]	; (8000b34 <MX_GPIO_Init+0x130>)
 8000a3e:	699b      	ldr	r3, [r3, #24]
 8000a40:	f003 0304 	and.w	r3, r3, #4
 8000a44:	60bb      	str	r3, [r7, #8]
 8000a46:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a48:	4b3a      	ldr	r3, [pc, #232]	; (8000b34 <MX_GPIO_Init+0x130>)
 8000a4a:	699b      	ldr	r3, [r3, #24]
 8000a4c:	4a39      	ldr	r2, [pc, #228]	; (8000b34 <MX_GPIO_Init+0x130>)
 8000a4e:	f043 0310 	orr.w	r3, r3, #16
 8000a52:	6193      	str	r3, [r2, #24]
 8000a54:	4b37      	ldr	r3, [pc, #220]	; (8000b34 <MX_GPIO_Init+0x130>)
 8000a56:	699b      	ldr	r3, [r3, #24]
 8000a58:	f003 0310 	and.w	r3, r3, #16
 8000a5c:	607b      	str	r3, [r7, #4]
 8000a5e:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED0_GPIO_Port, LED0_Pin, GPIO_PIN_RESET);
 8000a60:	2200      	movs	r2, #0
 8000a62:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000a66:	4834      	ldr	r0, [pc, #208]	; (8000b38 <MX_GPIO_Init+0x134>)
 8000a68:	f005 fecf 	bl	800680a <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET);
 8000a6c:	2200      	movs	r2, #0
 8000a6e:	2104      	movs	r1, #4
 8000a70:	4832      	ldr	r0, [pc, #200]	; (8000b3c <MX_GPIO_Init+0x138>)
 8000a72:	f005 feca 	bl	800680a <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = KEY_WK_Pin;
 8000a76:	2301      	movs	r3, #1
 8000a78:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000a7a:	4b31      	ldr	r3, [pc, #196]	; (8000b40 <MX_GPIO_Init+0x13c>)
 8000a7c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000a7e:	2302      	movs	r3, #2
 8000a80:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(KEY_WK_GPIO_Port, &GPIO_InitStruct);
 8000a82:	f107 0310 	add.w	r3, r7, #16
 8000a86:	4619      	mov	r1, r3
 8000a88:	482b      	ldr	r0, [pc, #172]	; (8000b38 <MX_GPIO_Init+0x134>)
 8000a8a:	f005 fd13 	bl	80064b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = KEY0_Pin;
 8000a8e:	2320      	movs	r3, #32
 8000a90:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000a92:	4b2c      	ldr	r3, [pc, #176]	; (8000b44 <MX_GPIO_Init+0x140>)
 8000a94:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000a96:	2301      	movs	r3, #1
 8000a98:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(KEY0_GPIO_Port, &GPIO_InitStruct);
 8000a9a:	f107 0310 	add.w	r3, r7, #16
 8000a9e:	4619      	mov	r1, r3
 8000aa0:	4829      	ldr	r0, [pc, #164]	; (8000b48 <MX_GPIO_Init+0x144>)
 8000aa2:	f005 fd07 	bl	80064b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED0_Pin;
 8000aa6:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000aaa:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000aac:	2301      	movs	r3, #1
 8000aae:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ab0:	2300      	movs	r3, #0
 8000ab2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ab4:	2302      	movs	r3, #2
 8000ab6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED0_GPIO_Port, &GPIO_InitStruct);
 8000ab8:	f107 0310 	add.w	r3, r7, #16
 8000abc:	4619      	mov	r1, r3
 8000abe:	481e      	ldr	r0, [pc, #120]	; (8000b38 <MX_GPIO_Init+0x134>)
 8000ac0:	f005 fcf8 	bl	80064b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = KEY1_Pin;
 8000ac4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000ac8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000aca:	4b1e      	ldr	r3, [pc, #120]	; (8000b44 <MX_GPIO_Init+0x140>)
 8000acc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000ace:	2301      	movs	r3, #1
 8000ad0:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(KEY1_GPIO_Port, &GPIO_InitStruct);
 8000ad2:	f107 0310 	add.w	r3, r7, #16
 8000ad6:	4619      	mov	r1, r3
 8000ad8:	4817      	ldr	r0, [pc, #92]	; (8000b38 <MX_GPIO_Init+0x134>)
 8000ada:	f005 fceb 	bl	80064b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED1_Pin;
 8000ade:	2304      	movs	r3, #4
 8000ae0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ae2:	2301      	movs	r3, #1
 8000ae4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ae6:	2300      	movs	r3, #0
 8000ae8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000aea:	2302      	movs	r3, #2
 8000aec:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED1_GPIO_Port, &GPIO_InitStruct);
 8000aee:	f107 0310 	add.w	r3, r7, #16
 8000af2:	4619      	mov	r1, r3
 8000af4:	4811      	ldr	r0, [pc, #68]	; (8000b3c <MX_GPIO_Init+0x138>)
 8000af6:	f005 fcdd 	bl	80064b4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 1, 0);
 8000afa:	2200      	movs	r2, #0
 8000afc:	2101      	movs	r1, #1
 8000afe:	2006      	movs	r0, #6
 8000b00:	f005 fb5f 	bl	80061c2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8000b04:	2006      	movs	r0, #6
 8000b06:	f005 fb78 	bl	80061fa <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 1, 1);
 8000b0a:	2201      	movs	r2, #1
 8000b0c:	2101      	movs	r1, #1
 8000b0e:	2017      	movs	r0, #23
 8000b10:	f005 fb57 	bl	80061c2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000b14:	2017      	movs	r0, #23
 8000b16:	f005 fb70 	bl	80061fa <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 1, 2);
 8000b1a:	2202      	movs	r2, #2
 8000b1c:	2101      	movs	r1, #1
 8000b1e:	2028      	movs	r0, #40	; 0x28
 8000b20:	f005 fb4f 	bl	80061c2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000b24:	2028      	movs	r0, #40	; 0x28
 8000b26:	f005 fb68 	bl	80061fa <HAL_NVIC_EnableIRQ>

}
 8000b2a:	bf00      	nop
 8000b2c:	3720      	adds	r7, #32
 8000b2e:	46bd      	mov	sp, r7
 8000b30:	bd80      	pop	{r7, pc}
 8000b32:	bf00      	nop
 8000b34:	40021000 	.word	0x40021000
 8000b38:	40010800 	.word	0x40010800
 8000b3c:	40011400 	.word	0x40011400
 8000b40:	10110000 	.word	0x10110000
 8000b44:	10210000 	.word	0x10210000
 8000b48:	40011000 	.word	0x40011000

08000b4c <LCD_WR_REG>:
//默认为竖屏
_lcd_dev lcddev;

//写寄存器函数
//data:寄存器值
void LCD_WR_REG(uint16_t data) {
 8000b4c:	b480      	push	{r7}
 8000b4e:	b083      	sub	sp, #12
 8000b50:	af00      	add	r7, sp, #0
 8000b52:	4603      	mov	r3, r0
 8000b54:	80fb      	strh	r3, [r7, #6]
	LCD_RS_CLR;  //写地址
 8000b56:	4b0d      	ldr	r3, [pc, #52]	; (8000b8c <LCD_WR_REG+0x40>)
 8000b58:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000b5c:	615a      	str	r2, [r3, #20]
	LCD_CS_CLR;
 8000b5e:	4b0b      	ldr	r3, [pc, #44]	; (8000b8c <LCD_WR_REG+0x40>)
 8000b60:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000b64:	615a      	str	r2, [r3, #20]
	DATAOUT(data);
 8000b66:	4a0a      	ldr	r2, [pc, #40]	; (8000b90 <LCD_WR_REG+0x44>)
 8000b68:	88fb      	ldrh	r3, [r7, #6]
 8000b6a:	60d3      	str	r3, [r2, #12]
	LCD_WR_CLR;
 8000b6c:	4b07      	ldr	r3, [pc, #28]	; (8000b8c <LCD_WR_REG+0x40>)
 8000b6e:	2280      	movs	r2, #128	; 0x80
 8000b70:	615a      	str	r2, [r3, #20]
	LCD_WR_SET;
 8000b72:	4b06      	ldr	r3, [pc, #24]	; (8000b8c <LCD_WR_REG+0x40>)
 8000b74:	2280      	movs	r2, #128	; 0x80
 8000b76:	611a      	str	r2, [r3, #16]
	LCD_CS_SET;
 8000b78:	4b04      	ldr	r3, [pc, #16]	; (8000b8c <LCD_WR_REG+0x40>)
 8000b7a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000b7e:	611a      	str	r2, [r3, #16]
}
 8000b80:	bf00      	nop
 8000b82:	370c      	adds	r7, #12
 8000b84:	46bd      	mov	sp, r7
 8000b86:	bc80      	pop	{r7}
 8000b88:	4770      	bx	lr
 8000b8a:	bf00      	nop
 8000b8c:	40011000 	.word	0x40011000
 8000b90:	40010c00 	.word	0x40010c00

08000b94 <LCD_WR_DATAX>:
//写数据函数
//可以替代LCD_WR_DATAX宏,拿时间换空间.
//data:寄存器值
void LCD_WR_DATAX(uint16_t data) {
 8000b94:	b480      	push	{r7}
 8000b96:	b083      	sub	sp, #12
 8000b98:	af00      	add	r7, sp, #0
 8000b9a:	4603      	mov	r3, r0
 8000b9c:	80fb      	strh	r3, [r7, #6]
	LCD_RS_SET;
 8000b9e:	4b0d      	ldr	r3, [pc, #52]	; (8000bd4 <LCD_WR_DATAX+0x40>)
 8000ba0:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000ba4:	611a      	str	r2, [r3, #16]
	LCD_CS_CLR;
 8000ba6:	4b0b      	ldr	r3, [pc, #44]	; (8000bd4 <LCD_WR_DATAX+0x40>)
 8000ba8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000bac:	615a      	str	r2, [r3, #20]
	DATAOUT(data);
 8000bae:	4a0a      	ldr	r2, [pc, #40]	; (8000bd8 <LCD_WR_DATAX+0x44>)
 8000bb0:	88fb      	ldrh	r3, [r7, #6]
 8000bb2:	60d3      	str	r3, [r2, #12]
	LCD_WR_CLR;
 8000bb4:	4b07      	ldr	r3, [pc, #28]	; (8000bd4 <LCD_WR_DATAX+0x40>)
 8000bb6:	2280      	movs	r2, #128	; 0x80
 8000bb8:	615a      	str	r2, [r3, #20]
	LCD_WR_SET;
 8000bba:	4b06      	ldr	r3, [pc, #24]	; (8000bd4 <LCD_WR_DATAX+0x40>)
 8000bbc:	2280      	movs	r2, #128	; 0x80
 8000bbe:	611a      	str	r2, [r3, #16]
	LCD_CS_SET;
 8000bc0:	4b04      	ldr	r3, [pc, #16]	; (8000bd4 <LCD_WR_DATAX+0x40>)
 8000bc2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000bc6:	611a      	str	r2, [r3, #16]
}
 8000bc8:	bf00      	nop
 8000bca:	370c      	adds	r7, #12
 8000bcc:	46bd      	mov	sp, r7
 8000bce:	bc80      	pop	{r7}
 8000bd0:	4770      	bx	lr
 8000bd2:	bf00      	nop
 8000bd4:	40011000 	.word	0x40011000
 8000bd8:	40010c00 	.word	0x40010c00

08000bdc <LCD_RD_DATA>:
//读LCD数据
//返回值:读到的值
uint16_t LCD_RD_DATA(void) {
 8000bdc:	b580      	push	{r7, lr}
 8000bde:	b082      	sub	sp, #8
 8000be0:	af00      	add	r7, sp, #0
	uint16_t t;
	GPIOB->CRL = 0X88888888; //PB0-7  上拉输入
 8000be2:	4b1d      	ldr	r3, [pc, #116]	; (8000c58 <LCD_RD_DATA+0x7c>)
 8000be4:	f04f 3288 	mov.w	r2, #2290649224	; 0x88888888
 8000be8:	601a      	str	r2, [r3, #0]
	GPIOB->CRH = 0X88888888; //PB8-15 上拉输入
 8000bea:	4b1b      	ldr	r3, [pc, #108]	; (8000c58 <LCD_RD_DATA+0x7c>)
 8000bec:	f04f 3288 	mov.w	r2, #2290649224	; 0x88888888
 8000bf0:	605a      	str	r2, [r3, #4]
	GPIOB->ODR = 0X0000;     //全部输出0
 8000bf2:	4b19      	ldr	r3, [pc, #100]	; (8000c58 <LCD_RD_DATA+0x7c>)
 8000bf4:	2200      	movs	r2, #0
 8000bf6:	60da      	str	r2, [r3, #12]

	LCD_RS_SET;
 8000bf8:	4b18      	ldr	r3, [pc, #96]	; (8000c5c <LCD_RD_DATA+0x80>)
 8000bfa:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000bfe:	611a      	str	r2, [r3, #16]
	LCD_CS_CLR;
 8000c00:	4b16      	ldr	r3, [pc, #88]	; (8000c5c <LCD_RD_DATA+0x80>)
 8000c02:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000c06:	615a      	str	r2, [r3, #20]
	//读取数据(读寄存器时,并不需要读2次)
	LCD_RD_CLR;
 8000c08:	4b14      	ldr	r3, [pc, #80]	; (8000c5c <LCD_RD_DATA+0x80>)
 8000c0a:	2240      	movs	r2, #64	; 0x40
 8000c0c:	615a      	str	r2, [r3, #20]
	if (lcddev.id == 0X8989)
 8000c0e:	4b14      	ldr	r3, [pc, #80]	; (8000c60 <LCD_RD_DATA+0x84>)
 8000c10:	889b      	ldrh	r3, [r3, #4]
 8000c12:	f648 1289 	movw	r2, #35209	; 0x8989
 8000c16:	4293      	cmp	r3, r2
 8000c18:	d102      	bne.n	8000c20 <LCD_RD_DATA+0x44>
		HAL_Delay(1); // delay_us(2);//FOR 8989,延时2us
 8000c1a:	2001      	movs	r0, #1
 8000c1c:	f005 f9d6 	bl	8005fcc <HAL_Delay>
	t = DATAIN
 8000c20:	4b0d      	ldr	r3, [pc, #52]	; (8000c58 <LCD_RD_DATA+0x7c>)
 8000c22:	689b      	ldr	r3, [r3, #8]
 8000c24:	80fb      	strh	r3, [r7, #6]
	;
	LCD_RD_SET;
 8000c26:	4b0d      	ldr	r3, [pc, #52]	; (8000c5c <LCD_RD_DATA+0x80>)
 8000c28:	2240      	movs	r2, #64	; 0x40
 8000c2a:	611a      	str	r2, [r3, #16]
	LCD_CS_SET;
 8000c2c:	4b0b      	ldr	r3, [pc, #44]	; (8000c5c <LCD_RD_DATA+0x80>)
 8000c2e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000c32:	611a      	str	r2, [r3, #16]

	GPIOB->CRL = 0X33333333; //PB0-7  上拉输出
 8000c34:	4b08      	ldr	r3, [pc, #32]	; (8000c58 <LCD_RD_DATA+0x7c>)
 8000c36:	f04f 3233 	mov.w	r2, #858993459	; 0x33333333
 8000c3a:	601a      	str	r2, [r3, #0]
	GPIOB->CRH = 0X33333333; //PB8-15 上拉输出
 8000c3c:	4b06      	ldr	r3, [pc, #24]	; (8000c58 <LCD_RD_DATA+0x7c>)
 8000c3e:	f04f 3233 	mov.w	r2, #858993459	; 0x33333333
 8000c42:	605a      	str	r2, [r3, #4]
	GPIOB->ODR = 0XFFFF;    //全部输出高
 8000c44:	4b04      	ldr	r3, [pc, #16]	; (8000c58 <LCD_RD_DATA+0x7c>)
 8000c46:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000c4a:	60da      	str	r2, [r3, #12]
	return t;
 8000c4c:	88fb      	ldrh	r3, [r7, #6]
}
 8000c4e:	4618      	mov	r0, r3
 8000c50:	3708      	adds	r7, #8
 8000c52:	46bd      	mov	sp, r7
 8000c54:	bd80      	pop	{r7, pc}
 8000c56:	bf00      	nop
 8000c58:	40010c00 	.word	0x40010c00
 8000c5c:	40011000 	.word	0x40011000
 8000c60:	20000028 	.word	0x20000028

08000c64 <LCD_WriteReg>:
//写寄存器
//LCD_Reg:寄存器编号
//LCD_RegValue:要写入的值
void LCD_WriteReg(uint16_t LCD_Reg, uint16_t LCD_RegValue) {
 8000c64:	b580      	push	{r7, lr}
 8000c66:	b082      	sub	sp, #8
 8000c68:	af00      	add	r7, sp, #0
 8000c6a:	4603      	mov	r3, r0
 8000c6c:	460a      	mov	r2, r1
 8000c6e:	80fb      	strh	r3, [r7, #6]
 8000c70:	4613      	mov	r3, r2
 8000c72:	80bb      	strh	r3, [r7, #4]
	LCD_WR_REG(LCD_Reg);
 8000c74:	88fb      	ldrh	r3, [r7, #6]
 8000c76:	4618      	mov	r0, r3
 8000c78:	f7ff ff68 	bl	8000b4c <LCD_WR_REG>
	LCD_WR_DATA(LCD_RegValue);
 8000c7c:	4b0c      	ldr	r3, [pc, #48]	; (8000cb0 <LCD_WriteReg+0x4c>)
 8000c7e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000c82:	611a      	str	r2, [r3, #16]
 8000c84:	4b0a      	ldr	r3, [pc, #40]	; (8000cb0 <LCD_WriteReg+0x4c>)
 8000c86:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000c8a:	615a      	str	r2, [r3, #20]
 8000c8c:	4a09      	ldr	r2, [pc, #36]	; (8000cb4 <LCD_WriteReg+0x50>)
 8000c8e:	88bb      	ldrh	r3, [r7, #4]
 8000c90:	60d3      	str	r3, [r2, #12]
 8000c92:	4b07      	ldr	r3, [pc, #28]	; (8000cb0 <LCD_WriteReg+0x4c>)
 8000c94:	2280      	movs	r2, #128	; 0x80
 8000c96:	615a      	str	r2, [r3, #20]
 8000c98:	4b05      	ldr	r3, [pc, #20]	; (8000cb0 <LCD_WriteReg+0x4c>)
 8000c9a:	2280      	movs	r2, #128	; 0x80
 8000c9c:	611a      	str	r2, [r3, #16]
 8000c9e:	4b04      	ldr	r3, [pc, #16]	; (8000cb0 <LCD_WriteReg+0x4c>)
 8000ca0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000ca4:	611a      	str	r2, [r3, #16]
}
 8000ca6:	bf00      	nop
 8000ca8:	3708      	adds	r7, #8
 8000caa:	46bd      	mov	sp, r7
 8000cac:	bd80      	pop	{r7, pc}
 8000cae:	bf00      	nop
 8000cb0:	40011000 	.word	0x40011000
 8000cb4:	40010c00 	.word	0x40010c00

08000cb8 <LCD_ReadReg>:
//读寄存器
//LCD_Reg:寄存器编号
//返回值:读到的值
uint16_t LCD_ReadReg(uint16_t LCD_Reg) {
 8000cb8:	b580      	push	{r7, lr}
 8000cba:	b082      	sub	sp, #8
 8000cbc:	af00      	add	r7, sp, #0
 8000cbe:	4603      	mov	r3, r0
 8000cc0:	80fb      	strh	r3, [r7, #6]
	LCD_WR_REG(LCD_Reg);  //写入要读的寄存器号
 8000cc2:	88fb      	ldrh	r3, [r7, #6]
 8000cc4:	4618      	mov	r0, r3
 8000cc6:	f7ff ff41 	bl	8000b4c <LCD_WR_REG>
	return LCD_RD_DATA();
 8000cca:	f7ff ff87 	bl	8000bdc <LCD_RD_DATA>
 8000cce:	4603      	mov	r3, r0
}
 8000cd0:	4618      	mov	r0, r3
 8000cd2:	3708      	adds	r7, #8
 8000cd4:	46bd      	mov	sp, r7
 8000cd6:	bd80      	pop	{r7, pc}

08000cd8 <LCD_WriteRAM_Prepare>:
//开始写GRAM
void LCD_WriteRAM_Prepare(void) {
 8000cd8:	b580      	push	{r7, lr}
 8000cda:	af00      	add	r7, sp, #0
	LCD_WR_REG(lcddev.wramcmd);
 8000cdc:	4b03      	ldr	r3, [pc, #12]	; (8000cec <LCD_WriteRAM_Prepare+0x14>)
 8000cde:	891b      	ldrh	r3, [r3, #8]
 8000ce0:	4618      	mov	r0, r3
 8000ce2:	f7ff ff33 	bl	8000b4c <LCD_WR_REG>
}
 8000ce6:	bf00      	nop
 8000ce8:	bd80      	pop	{r7, pc}
 8000cea:	bf00      	nop
 8000cec:	20000028 	.word	0x20000028

08000cf0 <LCD_SetCursor>:
		LCD_WriteReg(0X07, 0x0);	//关闭显示
}
//设置光标位置
//Xpos:横坐标
//Ypos:纵坐标
void LCD_SetCursor(uint16_t Xpos, uint16_t Ypos) {
 8000cf0:	b580      	push	{r7, lr}
 8000cf2:	b082      	sub	sp, #8
 8000cf4:	af00      	add	r7, sp, #0
 8000cf6:	4603      	mov	r3, r0
 8000cf8:	460a      	mov	r2, r1
 8000cfa:	80fb      	strh	r3, [r7, #6]
 8000cfc:	4613      	mov	r3, r2
 8000cfe:	80bb      	strh	r3, [r7, #4]
	if (lcddev.id == 0X9341 || lcddev.id == 0X5310) {
 8000d00:	4b73      	ldr	r3, [pc, #460]	; (8000ed0 <LCD_SetCursor+0x1e0>)
 8000d02:	889b      	ldrh	r3, [r3, #4]
 8000d04:	f249 3241 	movw	r2, #37697	; 0x9341
 8000d08:	4293      	cmp	r3, r2
 8000d0a:	d005      	beq.n	8000d18 <LCD_SetCursor+0x28>
 8000d0c:	4b70      	ldr	r3, [pc, #448]	; (8000ed0 <LCD_SetCursor+0x1e0>)
 8000d0e:	889b      	ldrh	r3, [r3, #4]
 8000d10:	f245 3210 	movw	r2, #21264	; 0x5310
 8000d14:	4293      	cmp	r3, r2
 8000d16:	d164      	bne.n	8000de2 <LCD_SetCursor+0xf2>
		LCD_WR_REG(lcddev.setxcmd);
 8000d18:	4b6d      	ldr	r3, [pc, #436]	; (8000ed0 <LCD_SetCursor+0x1e0>)
 8000d1a:	895b      	ldrh	r3, [r3, #10]
 8000d1c:	4618      	mov	r0, r3
 8000d1e:	f7ff ff15 	bl	8000b4c <LCD_WR_REG>
		LCD_WR_DATA(Xpos >> 8);
 8000d22:	4b6c      	ldr	r3, [pc, #432]	; (8000ed4 <LCD_SetCursor+0x1e4>)
 8000d24:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000d28:	611a      	str	r2, [r3, #16]
 8000d2a:	4b6a      	ldr	r3, [pc, #424]	; (8000ed4 <LCD_SetCursor+0x1e4>)
 8000d2c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000d30:	615a      	str	r2, [r3, #20]
 8000d32:	88fb      	ldrh	r3, [r7, #6]
 8000d34:	0a1b      	lsrs	r3, r3, #8
 8000d36:	b29a      	uxth	r2, r3
 8000d38:	4b67      	ldr	r3, [pc, #412]	; (8000ed8 <LCD_SetCursor+0x1e8>)
 8000d3a:	60da      	str	r2, [r3, #12]
 8000d3c:	4b65      	ldr	r3, [pc, #404]	; (8000ed4 <LCD_SetCursor+0x1e4>)
 8000d3e:	2280      	movs	r2, #128	; 0x80
 8000d40:	615a      	str	r2, [r3, #20]
 8000d42:	4b64      	ldr	r3, [pc, #400]	; (8000ed4 <LCD_SetCursor+0x1e4>)
 8000d44:	2280      	movs	r2, #128	; 0x80
 8000d46:	611a      	str	r2, [r3, #16]
 8000d48:	4b62      	ldr	r3, [pc, #392]	; (8000ed4 <LCD_SetCursor+0x1e4>)
 8000d4a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000d4e:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(Xpos & 0XFF);
 8000d50:	4b60      	ldr	r3, [pc, #384]	; (8000ed4 <LCD_SetCursor+0x1e4>)
 8000d52:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000d56:	611a      	str	r2, [r3, #16]
 8000d58:	4b5e      	ldr	r3, [pc, #376]	; (8000ed4 <LCD_SetCursor+0x1e4>)
 8000d5a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000d5e:	615a      	str	r2, [r3, #20]
 8000d60:	88fb      	ldrh	r3, [r7, #6]
 8000d62:	4a5d      	ldr	r2, [pc, #372]	; (8000ed8 <LCD_SetCursor+0x1e8>)
 8000d64:	b2db      	uxtb	r3, r3
 8000d66:	60d3      	str	r3, [r2, #12]
 8000d68:	4b5a      	ldr	r3, [pc, #360]	; (8000ed4 <LCD_SetCursor+0x1e4>)
 8000d6a:	2280      	movs	r2, #128	; 0x80
 8000d6c:	615a      	str	r2, [r3, #20]
 8000d6e:	4b59      	ldr	r3, [pc, #356]	; (8000ed4 <LCD_SetCursor+0x1e4>)
 8000d70:	2280      	movs	r2, #128	; 0x80
 8000d72:	611a      	str	r2, [r3, #16]
 8000d74:	4b57      	ldr	r3, [pc, #348]	; (8000ed4 <LCD_SetCursor+0x1e4>)
 8000d76:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000d7a:	611a      	str	r2, [r3, #16]
		LCD_WR_REG(lcddev.setycmd);
 8000d7c:	4b54      	ldr	r3, [pc, #336]	; (8000ed0 <LCD_SetCursor+0x1e0>)
 8000d7e:	899b      	ldrh	r3, [r3, #12]
 8000d80:	4618      	mov	r0, r3
 8000d82:	f7ff fee3 	bl	8000b4c <LCD_WR_REG>
		LCD_WR_DATA(Ypos >> 8);
 8000d86:	4b53      	ldr	r3, [pc, #332]	; (8000ed4 <LCD_SetCursor+0x1e4>)
 8000d88:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000d8c:	611a      	str	r2, [r3, #16]
 8000d8e:	4b51      	ldr	r3, [pc, #324]	; (8000ed4 <LCD_SetCursor+0x1e4>)
 8000d90:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000d94:	615a      	str	r2, [r3, #20]
 8000d96:	88bb      	ldrh	r3, [r7, #4]
 8000d98:	0a1b      	lsrs	r3, r3, #8
 8000d9a:	b29a      	uxth	r2, r3
 8000d9c:	4b4e      	ldr	r3, [pc, #312]	; (8000ed8 <LCD_SetCursor+0x1e8>)
 8000d9e:	60da      	str	r2, [r3, #12]
 8000da0:	4b4c      	ldr	r3, [pc, #304]	; (8000ed4 <LCD_SetCursor+0x1e4>)
 8000da2:	2280      	movs	r2, #128	; 0x80
 8000da4:	615a      	str	r2, [r3, #20]
 8000da6:	4b4b      	ldr	r3, [pc, #300]	; (8000ed4 <LCD_SetCursor+0x1e4>)
 8000da8:	2280      	movs	r2, #128	; 0x80
 8000daa:	611a      	str	r2, [r3, #16]
 8000dac:	4b49      	ldr	r3, [pc, #292]	; (8000ed4 <LCD_SetCursor+0x1e4>)
 8000dae:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000db2:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(Ypos & 0XFF);
 8000db4:	4b47      	ldr	r3, [pc, #284]	; (8000ed4 <LCD_SetCursor+0x1e4>)
 8000db6:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000dba:	611a      	str	r2, [r3, #16]
 8000dbc:	4b45      	ldr	r3, [pc, #276]	; (8000ed4 <LCD_SetCursor+0x1e4>)
 8000dbe:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000dc2:	615a      	str	r2, [r3, #20]
 8000dc4:	88bb      	ldrh	r3, [r7, #4]
 8000dc6:	4a44      	ldr	r2, [pc, #272]	; (8000ed8 <LCD_SetCursor+0x1e8>)
 8000dc8:	b2db      	uxtb	r3, r3
 8000dca:	60d3      	str	r3, [r2, #12]
 8000dcc:	4b41      	ldr	r3, [pc, #260]	; (8000ed4 <LCD_SetCursor+0x1e4>)
 8000dce:	2280      	movs	r2, #128	; 0x80
 8000dd0:	615a      	str	r2, [r3, #20]
 8000dd2:	4b40      	ldr	r3, [pc, #256]	; (8000ed4 <LCD_SetCursor+0x1e4>)
 8000dd4:	2280      	movs	r2, #128	; 0x80
 8000dd6:	611a      	str	r2, [r3, #16]
 8000dd8:	4b3e      	ldr	r3, [pc, #248]	; (8000ed4 <LCD_SetCursor+0x1e4>)
 8000dda:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000dde:	611a      	str	r2, [r3, #16]
		if (lcddev.dir == 1)
			Xpos = lcddev.width - 1 - Xpos;	//横屏其实就是调转x,y坐标
		LCD_WriteReg(lcddev.setxcmd, Xpos);
		LCD_WriteReg(lcddev.setycmd, Ypos);
	}
}
 8000de0:	e248      	b.n	8001274 <LCD_SetCursor+0x584>
	} else if (lcddev.id == 0X6804) {
 8000de2:	4b3b      	ldr	r3, [pc, #236]	; (8000ed0 <LCD_SetCursor+0x1e0>)
 8000de4:	889b      	ldrh	r3, [r3, #4]
 8000de6:	f646 0204 	movw	r2, #26628	; 0x6804
 8000dea:	4293      	cmp	r3, r2
 8000dec:	d176      	bne.n	8000edc <LCD_SetCursor+0x1ec>
		if (lcddev.dir == 1)
 8000dee:	4b38      	ldr	r3, [pc, #224]	; (8000ed0 <LCD_SetCursor+0x1e0>)
 8000df0:	799b      	ldrb	r3, [r3, #6]
 8000df2:	2b01      	cmp	r3, #1
 8000df4:	d106      	bne.n	8000e04 <LCD_SetCursor+0x114>
			Xpos = lcddev.width - 1 - Xpos;	//横屏时处理
 8000df6:	4b36      	ldr	r3, [pc, #216]	; (8000ed0 <LCD_SetCursor+0x1e0>)
 8000df8:	881a      	ldrh	r2, [r3, #0]
 8000dfa:	88fb      	ldrh	r3, [r7, #6]
 8000dfc:	1ad3      	subs	r3, r2, r3
 8000dfe:	b29b      	uxth	r3, r3
 8000e00:	3b01      	subs	r3, #1
 8000e02:	80fb      	strh	r3, [r7, #6]
		LCD_WR_REG(lcddev.setxcmd);
 8000e04:	4b32      	ldr	r3, [pc, #200]	; (8000ed0 <LCD_SetCursor+0x1e0>)
 8000e06:	895b      	ldrh	r3, [r3, #10]
 8000e08:	4618      	mov	r0, r3
 8000e0a:	f7ff fe9f 	bl	8000b4c <LCD_WR_REG>
		LCD_WR_DATA(Xpos >> 8);
 8000e0e:	4b31      	ldr	r3, [pc, #196]	; (8000ed4 <LCD_SetCursor+0x1e4>)
 8000e10:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000e14:	611a      	str	r2, [r3, #16]
 8000e16:	4b2f      	ldr	r3, [pc, #188]	; (8000ed4 <LCD_SetCursor+0x1e4>)
 8000e18:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000e1c:	615a      	str	r2, [r3, #20]
 8000e1e:	88fb      	ldrh	r3, [r7, #6]
 8000e20:	0a1b      	lsrs	r3, r3, #8
 8000e22:	b29a      	uxth	r2, r3
 8000e24:	4b2c      	ldr	r3, [pc, #176]	; (8000ed8 <LCD_SetCursor+0x1e8>)
 8000e26:	60da      	str	r2, [r3, #12]
 8000e28:	4b2a      	ldr	r3, [pc, #168]	; (8000ed4 <LCD_SetCursor+0x1e4>)
 8000e2a:	2280      	movs	r2, #128	; 0x80
 8000e2c:	615a      	str	r2, [r3, #20]
 8000e2e:	4b29      	ldr	r3, [pc, #164]	; (8000ed4 <LCD_SetCursor+0x1e4>)
 8000e30:	2280      	movs	r2, #128	; 0x80
 8000e32:	611a      	str	r2, [r3, #16]
 8000e34:	4b27      	ldr	r3, [pc, #156]	; (8000ed4 <LCD_SetCursor+0x1e4>)
 8000e36:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000e3a:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(Xpos & 0XFF);
 8000e3c:	4b25      	ldr	r3, [pc, #148]	; (8000ed4 <LCD_SetCursor+0x1e4>)
 8000e3e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000e42:	611a      	str	r2, [r3, #16]
 8000e44:	4b23      	ldr	r3, [pc, #140]	; (8000ed4 <LCD_SetCursor+0x1e4>)
 8000e46:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000e4a:	615a      	str	r2, [r3, #20]
 8000e4c:	88fb      	ldrh	r3, [r7, #6]
 8000e4e:	4a22      	ldr	r2, [pc, #136]	; (8000ed8 <LCD_SetCursor+0x1e8>)
 8000e50:	b2db      	uxtb	r3, r3
 8000e52:	60d3      	str	r3, [r2, #12]
 8000e54:	4b1f      	ldr	r3, [pc, #124]	; (8000ed4 <LCD_SetCursor+0x1e4>)
 8000e56:	2280      	movs	r2, #128	; 0x80
 8000e58:	615a      	str	r2, [r3, #20]
 8000e5a:	4b1e      	ldr	r3, [pc, #120]	; (8000ed4 <LCD_SetCursor+0x1e4>)
 8000e5c:	2280      	movs	r2, #128	; 0x80
 8000e5e:	611a      	str	r2, [r3, #16]
 8000e60:	4b1c      	ldr	r3, [pc, #112]	; (8000ed4 <LCD_SetCursor+0x1e4>)
 8000e62:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000e66:	611a      	str	r2, [r3, #16]
		LCD_WR_REG(lcddev.setycmd);
 8000e68:	4b19      	ldr	r3, [pc, #100]	; (8000ed0 <LCD_SetCursor+0x1e0>)
 8000e6a:	899b      	ldrh	r3, [r3, #12]
 8000e6c:	4618      	mov	r0, r3
 8000e6e:	f7ff fe6d 	bl	8000b4c <LCD_WR_REG>
		LCD_WR_DATA(Ypos >> 8);
 8000e72:	4b18      	ldr	r3, [pc, #96]	; (8000ed4 <LCD_SetCursor+0x1e4>)
 8000e74:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000e78:	611a      	str	r2, [r3, #16]
 8000e7a:	4b16      	ldr	r3, [pc, #88]	; (8000ed4 <LCD_SetCursor+0x1e4>)
 8000e7c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000e80:	615a      	str	r2, [r3, #20]
 8000e82:	88bb      	ldrh	r3, [r7, #4]
 8000e84:	0a1b      	lsrs	r3, r3, #8
 8000e86:	b29a      	uxth	r2, r3
 8000e88:	4b13      	ldr	r3, [pc, #76]	; (8000ed8 <LCD_SetCursor+0x1e8>)
 8000e8a:	60da      	str	r2, [r3, #12]
 8000e8c:	4b11      	ldr	r3, [pc, #68]	; (8000ed4 <LCD_SetCursor+0x1e4>)
 8000e8e:	2280      	movs	r2, #128	; 0x80
 8000e90:	615a      	str	r2, [r3, #20]
 8000e92:	4b10      	ldr	r3, [pc, #64]	; (8000ed4 <LCD_SetCursor+0x1e4>)
 8000e94:	2280      	movs	r2, #128	; 0x80
 8000e96:	611a      	str	r2, [r3, #16]
 8000e98:	4b0e      	ldr	r3, [pc, #56]	; (8000ed4 <LCD_SetCursor+0x1e4>)
 8000e9a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000e9e:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(Ypos & 0XFF);
 8000ea0:	4b0c      	ldr	r3, [pc, #48]	; (8000ed4 <LCD_SetCursor+0x1e4>)
 8000ea2:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000ea6:	611a      	str	r2, [r3, #16]
 8000ea8:	4b0a      	ldr	r3, [pc, #40]	; (8000ed4 <LCD_SetCursor+0x1e4>)
 8000eaa:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000eae:	615a      	str	r2, [r3, #20]
 8000eb0:	88bb      	ldrh	r3, [r7, #4]
 8000eb2:	4a09      	ldr	r2, [pc, #36]	; (8000ed8 <LCD_SetCursor+0x1e8>)
 8000eb4:	b2db      	uxtb	r3, r3
 8000eb6:	60d3      	str	r3, [r2, #12]
 8000eb8:	4b06      	ldr	r3, [pc, #24]	; (8000ed4 <LCD_SetCursor+0x1e4>)
 8000eba:	2280      	movs	r2, #128	; 0x80
 8000ebc:	615a      	str	r2, [r3, #20]
 8000ebe:	4b05      	ldr	r3, [pc, #20]	; (8000ed4 <LCD_SetCursor+0x1e4>)
 8000ec0:	2280      	movs	r2, #128	; 0x80
 8000ec2:	611a      	str	r2, [r3, #16]
 8000ec4:	4b03      	ldr	r3, [pc, #12]	; (8000ed4 <LCD_SetCursor+0x1e4>)
 8000ec6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000eca:	611a      	str	r2, [r3, #16]
}
 8000ecc:	e1d2      	b.n	8001274 <LCD_SetCursor+0x584>
 8000ece:	bf00      	nop
 8000ed0:	20000028 	.word	0x20000028
 8000ed4:	40011000 	.word	0x40011000
 8000ed8:	40010c00 	.word	0x40010c00
	} else if (lcddev.id == 0X1963) {
 8000edc:	4b99      	ldr	r3, [pc, #612]	; (8001144 <LCD_SetCursor+0x454>)
 8000ede:	889b      	ldrh	r3, [r3, #4]
 8000ee0:	f641 1263 	movw	r2, #6499	; 0x1963
 8000ee4:	4293      	cmp	r3, r2
 8000ee6:	f040 8133 	bne.w	8001150 <LCD_SetCursor+0x460>
		if (lcddev.dir == 0)	//x坐标需要变换
 8000eea:	4b96      	ldr	r3, [pc, #600]	; (8001144 <LCD_SetCursor+0x454>)
 8000eec:	799b      	ldrb	r3, [r3, #6]
 8000eee:	2b00      	cmp	r3, #0
 8000ef0:	d163      	bne.n	8000fba <LCD_SetCursor+0x2ca>
			Xpos = lcddev.width - 1 - Xpos;
 8000ef2:	4b94      	ldr	r3, [pc, #592]	; (8001144 <LCD_SetCursor+0x454>)
 8000ef4:	881a      	ldrh	r2, [r3, #0]
 8000ef6:	88fb      	ldrh	r3, [r7, #6]
 8000ef8:	1ad3      	subs	r3, r2, r3
 8000efa:	b29b      	uxth	r3, r3
 8000efc:	3b01      	subs	r3, #1
 8000efe:	80fb      	strh	r3, [r7, #6]
			LCD_WR_REG(lcddev.setxcmd);
 8000f00:	4b90      	ldr	r3, [pc, #576]	; (8001144 <LCD_SetCursor+0x454>)
 8000f02:	895b      	ldrh	r3, [r3, #10]
 8000f04:	4618      	mov	r0, r3
 8000f06:	f7ff fe21 	bl	8000b4c <LCD_WR_REG>
			LCD_WR_DATA(0);
 8000f0a:	4b8f      	ldr	r3, [pc, #572]	; (8001148 <LCD_SetCursor+0x458>)
 8000f0c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000f10:	611a      	str	r2, [r3, #16]
 8000f12:	4b8d      	ldr	r3, [pc, #564]	; (8001148 <LCD_SetCursor+0x458>)
 8000f14:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000f18:	615a      	str	r2, [r3, #20]
 8000f1a:	4b8c      	ldr	r3, [pc, #560]	; (800114c <LCD_SetCursor+0x45c>)
 8000f1c:	2200      	movs	r2, #0
 8000f1e:	60da      	str	r2, [r3, #12]
 8000f20:	4b89      	ldr	r3, [pc, #548]	; (8001148 <LCD_SetCursor+0x458>)
 8000f22:	2280      	movs	r2, #128	; 0x80
 8000f24:	615a      	str	r2, [r3, #20]
 8000f26:	4b88      	ldr	r3, [pc, #544]	; (8001148 <LCD_SetCursor+0x458>)
 8000f28:	2280      	movs	r2, #128	; 0x80
 8000f2a:	611a      	str	r2, [r3, #16]
 8000f2c:	4b86      	ldr	r3, [pc, #536]	; (8001148 <LCD_SetCursor+0x458>)
 8000f2e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000f32:	611a      	str	r2, [r3, #16]
			LCD_WR_DATA(0);
 8000f34:	4b84      	ldr	r3, [pc, #528]	; (8001148 <LCD_SetCursor+0x458>)
 8000f36:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000f3a:	611a      	str	r2, [r3, #16]
 8000f3c:	4b82      	ldr	r3, [pc, #520]	; (8001148 <LCD_SetCursor+0x458>)
 8000f3e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000f42:	615a      	str	r2, [r3, #20]
 8000f44:	4b81      	ldr	r3, [pc, #516]	; (800114c <LCD_SetCursor+0x45c>)
 8000f46:	2200      	movs	r2, #0
 8000f48:	60da      	str	r2, [r3, #12]
 8000f4a:	4b7f      	ldr	r3, [pc, #508]	; (8001148 <LCD_SetCursor+0x458>)
 8000f4c:	2280      	movs	r2, #128	; 0x80
 8000f4e:	615a      	str	r2, [r3, #20]
 8000f50:	4b7d      	ldr	r3, [pc, #500]	; (8001148 <LCD_SetCursor+0x458>)
 8000f52:	2280      	movs	r2, #128	; 0x80
 8000f54:	611a      	str	r2, [r3, #16]
 8000f56:	4b7c      	ldr	r3, [pc, #496]	; (8001148 <LCD_SetCursor+0x458>)
 8000f58:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000f5c:	611a      	str	r2, [r3, #16]
			LCD_WR_DATA(Xpos >> 8);
 8000f5e:	4b7a      	ldr	r3, [pc, #488]	; (8001148 <LCD_SetCursor+0x458>)
 8000f60:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000f64:	611a      	str	r2, [r3, #16]
 8000f66:	4b78      	ldr	r3, [pc, #480]	; (8001148 <LCD_SetCursor+0x458>)
 8000f68:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000f6c:	615a      	str	r2, [r3, #20]
 8000f6e:	88fb      	ldrh	r3, [r7, #6]
 8000f70:	0a1b      	lsrs	r3, r3, #8
 8000f72:	b29a      	uxth	r2, r3
 8000f74:	4b75      	ldr	r3, [pc, #468]	; (800114c <LCD_SetCursor+0x45c>)
 8000f76:	60da      	str	r2, [r3, #12]
 8000f78:	4b73      	ldr	r3, [pc, #460]	; (8001148 <LCD_SetCursor+0x458>)
 8000f7a:	2280      	movs	r2, #128	; 0x80
 8000f7c:	615a      	str	r2, [r3, #20]
 8000f7e:	4b72      	ldr	r3, [pc, #456]	; (8001148 <LCD_SetCursor+0x458>)
 8000f80:	2280      	movs	r2, #128	; 0x80
 8000f82:	611a      	str	r2, [r3, #16]
 8000f84:	4b70      	ldr	r3, [pc, #448]	; (8001148 <LCD_SetCursor+0x458>)
 8000f86:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000f8a:	611a      	str	r2, [r3, #16]
			LCD_WR_DATA(Xpos & 0XFF);
 8000f8c:	4b6e      	ldr	r3, [pc, #440]	; (8001148 <LCD_SetCursor+0x458>)
 8000f8e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000f92:	611a      	str	r2, [r3, #16]
 8000f94:	4b6c      	ldr	r3, [pc, #432]	; (8001148 <LCD_SetCursor+0x458>)
 8000f96:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000f9a:	615a      	str	r2, [r3, #20]
 8000f9c:	88fb      	ldrh	r3, [r7, #6]
 8000f9e:	4a6b      	ldr	r2, [pc, #428]	; (800114c <LCD_SetCursor+0x45c>)
 8000fa0:	b2db      	uxtb	r3, r3
 8000fa2:	60d3      	str	r3, [r2, #12]
 8000fa4:	4b68      	ldr	r3, [pc, #416]	; (8001148 <LCD_SetCursor+0x458>)
 8000fa6:	2280      	movs	r2, #128	; 0x80
 8000fa8:	615a      	str	r2, [r3, #20]
 8000faa:	4b67      	ldr	r3, [pc, #412]	; (8001148 <LCD_SetCursor+0x458>)
 8000fac:	2280      	movs	r2, #128	; 0x80
 8000fae:	611a      	str	r2, [r3, #16]
 8000fb0:	4b65      	ldr	r3, [pc, #404]	; (8001148 <LCD_SetCursor+0x458>)
 8000fb2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000fb6:	611a      	str	r2, [r3, #16]
 8000fb8:	e061      	b.n	800107e <LCD_SetCursor+0x38e>
			LCD_WR_REG(lcddev.setxcmd);
 8000fba:	4b62      	ldr	r3, [pc, #392]	; (8001144 <LCD_SetCursor+0x454>)
 8000fbc:	895b      	ldrh	r3, [r3, #10]
 8000fbe:	4618      	mov	r0, r3
 8000fc0:	f7ff fdc4 	bl	8000b4c <LCD_WR_REG>
			LCD_WR_DATA(Xpos >> 8);
 8000fc4:	4b60      	ldr	r3, [pc, #384]	; (8001148 <LCD_SetCursor+0x458>)
 8000fc6:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000fca:	611a      	str	r2, [r3, #16]
 8000fcc:	4b5e      	ldr	r3, [pc, #376]	; (8001148 <LCD_SetCursor+0x458>)
 8000fce:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000fd2:	615a      	str	r2, [r3, #20]
 8000fd4:	88fb      	ldrh	r3, [r7, #6]
 8000fd6:	0a1b      	lsrs	r3, r3, #8
 8000fd8:	b29a      	uxth	r2, r3
 8000fda:	4b5c      	ldr	r3, [pc, #368]	; (800114c <LCD_SetCursor+0x45c>)
 8000fdc:	60da      	str	r2, [r3, #12]
 8000fde:	4b5a      	ldr	r3, [pc, #360]	; (8001148 <LCD_SetCursor+0x458>)
 8000fe0:	2280      	movs	r2, #128	; 0x80
 8000fe2:	615a      	str	r2, [r3, #20]
 8000fe4:	4b58      	ldr	r3, [pc, #352]	; (8001148 <LCD_SetCursor+0x458>)
 8000fe6:	2280      	movs	r2, #128	; 0x80
 8000fe8:	611a      	str	r2, [r3, #16]
 8000fea:	4b57      	ldr	r3, [pc, #348]	; (8001148 <LCD_SetCursor+0x458>)
 8000fec:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000ff0:	611a      	str	r2, [r3, #16]
			LCD_WR_DATA(Xpos & 0XFF);
 8000ff2:	4b55      	ldr	r3, [pc, #340]	; (8001148 <LCD_SetCursor+0x458>)
 8000ff4:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000ff8:	611a      	str	r2, [r3, #16]
 8000ffa:	4b53      	ldr	r3, [pc, #332]	; (8001148 <LCD_SetCursor+0x458>)
 8000ffc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001000:	615a      	str	r2, [r3, #20]
 8001002:	88fb      	ldrh	r3, [r7, #6]
 8001004:	4a51      	ldr	r2, [pc, #324]	; (800114c <LCD_SetCursor+0x45c>)
 8001006:	b2db      	uxtb	r3, r3
 8001008:	60d3      	str	r3, [r2, #12]
 800100a:	4b4f      	ldr	r3, [pc, #316]	; (8001148 <LCD_SetCursor+0x458>)
 800100c:	2280      	movs	r2, #128	; 0x80
 800100e:	615a      	str	r2, [r3, #20]
 8001010:	4b4d      	ldr	r3, [pc, #308]	; (8001148 <LCD_SetCursor+0x458>)
 8001012:	2280      	movs	r2, #128	; 0x80
 8001014:	611a      	str	r2, [r3, #16]
 8001016:	4b4c      	ldr	r3, [pc, #304]	; (8001148 <LCD_SetCursor+0x458>)
 8001018:	f44f 7200 	mov.w	r2, #512	; 0x200
 800101c:	611a      	str	r2, [r3, #16]
			LCD_WR_DATA((lcddev.width - 1) >> 8);
 800101e:	4b4a      	ldr	r3, [pc, #296]	; (8001148 <LCD_SetCursor+0x458>)
 8001020:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001024:	611a      	str	r2, [r3, #16]
 8001026:	4b48      	ldr	r3, [pc, #288]	; (8001148 <LCD_SetCursor+0x458>)
 8001028:	f44f 7200 	mov.w	r2, #512	; 0x200
 800102c:	615a      	str	r2, [r3, #20]
 800102e:	4b45      	ldr	r3, [pc, #276]	; (8001144 <LCD_SetCursor+0x454>)
 8001030:	881b      	ldrh	r3, [r3, #0]
 8001032:	3b01      	subs	r3, #1
 8001034:	121a      	asrs	r2, r3, #8
 8001036:	4b45      	ldr	r3, [pc, #276]	; (800114c <LCD_SetCursor+0x45c>)
 8001038:	60da      	str	r2, [r3, #12]
 800103a:	4b43      	ldr	r3, [pc, #268]	; (8001148 <LCD_SetCursor+0x458>)
 800103c:	2280      	movs	r2, #128	; 0x80
 800103e:	615a      	str	r2, [r3, #20]
 8001040:	4b41      	ldr	r3, [pc, #260]	; (8001148 <LCD_SetCursor+0x458>)
 8001042:	2280      	movs	r2, #128	; 0x80
 8001044:	611a      	str	r2, [r3, #16]
 8001046:	4b40      	ldr	r3, [pc, #256]	; (8001148 <LCD_SetCursor+0x458>)
 8001048:	f44f 7200 	mov.w	r2, #512	; 0x200
 800104c:	611a      	str	r2, [r3, #16]
			LCD_WR_DATA((lcddev.width - 1) & 0XFF);
 800104e:	4b3e      	ldr	r3, [pc, #248]	; (8001148 <LCD_SetCursor+0x458>)
 8001050:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001054:	611a      	str	r2, [r3, #16]
 8001056:	4b3c      	ldr	r3, [pc, #240]	; (8001148 <LCD_SetCursor+0x458>)
 8001058:	f44f 7200 	mov.w	r2, #512	; 0x200
 800105c:	615a      	str	r2, [r3, #20]
 800105e:	4b39      	ldr	r3, [pc, #228]	; (8001144 <LCD_SetCursor+0x454>)
 8001060:	881b      	ldrh	r3, [r3, #0]
 8001062:	3b01      	subs	r3, #1
 8001064:	4a39      	ldr	r2, [pc, #228]	; (800114c <LCD_SetCursor+0x45c>)
 8001066:	b2db      	uxtb	r3, r3
 8001068:	60d3      	str	r3, [r2, #12]
 800106a:	4b37      	ldr	r3, [pc, #220]	; (8001148 <LCD_SetCursor+0x458>)
 800106c:	2280      	movs	r2, #128	; 0x80
 800106e:	615a      	str	r2, [r3, #20]
 8001070:	4b35      	ldr	r3, [pc, #212]	; (8001148 <LCD_SetCursor+0x458>)
 8001072:	2280      	movs	r2, #128	; 0x80
 8001074:	611a      	str	r2, [r3, #16]
 8001076:	4b34      	ldr	r3, [pc, #208]	; (8001148 <LCD_SetCursor+0x458>)
 8001078:	f44f 7200 	mov.w	r2, #512	; 0x200
 800107c:	611a      	str	r2, [r3, #16]
		LCD_WR_REG(lcddev.setycmd);
 800107e:	4b31      	ldr	r3, [pc, #196]	; (8001144 <LCD_SetCursor+0x454>)
 8001080:	899b      	ldrh	r3, [r3, #12]
 8001082:	4618      	mov	r0, r3
 8001084:	f7ff fd62 	bl	8000b4c <LCD_WR_REG>
		LCD_WR_DATA(Ypos >> 8);
 8001088:	4b2f      	ldr	r3, [pc, #188]	; (8001148 <LCD_SetCursor+0x458>)
 800108a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800108e:	611a      	str	r2, [r3, #16]
 8001090:	4b2d      	ldr	r3, [pc, #180]	; (8001148 <LCD_SetCursor+0x458>)
 8001092:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001096:	615a      	str	r2, [r3, #20]
 8001098:	88bb      	ldrh	r3, [r7, #4]
 800109a:	0a1b      	lsrs	r3, r3, #8
 800109c:	b29a      	uxth	r2, r3
 800109e:	4b2b      	ldr	r3, [pc, #172]	; (800114c <LCD_SetCursor+0x45c>)
 80010a0:	60da      	str	r2, [r3, #12]
 80010a2:	4b29      	ldr	r3, [pc, #164]	; (8001148 <LCD_SetCursor+0x458>)
 80010a4:	2280      	movs	r2, #128	; 0x80
 80010a6:	615a      	str	r2, [r3, #20]
 80010a8:	4b27      	ldr	r3, [pc, #156]	; (8001148 <LCD_SetCursor+0x458>)
 80010aa:	2280      	movs	r2, #128	; 0x80
 80010ac:	611a      	str	r2, [r3, #16]
 80010ae:	4b26      	ldr	r3, [pc, #152]	; (8001148 <LCD_SetCursor+0x458>)
 80010b0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80010b4:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(Ypos & 0XFF);
 80010b6:	4b24      	ldr	r3, [pc, #144]	; (8001148 <LCD_SetCursor+0x458>)
 80010b8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80010bc:	611a      	str	r2, [r3, #16]
 80010be:	4b22      	ldr	r3, [pc, #136]	; (8001148 <LCD_SetCursor+0x458>)
 80010c0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80010c4:	615a      	str	r2, [r3, #20]
 80010c6:	88bb      	ldrh	r3, [r7, #4]
 80010c8:	4a20      	ldr	r2, [pc, #128]	; (800114c <LCD_SetCursor+0x45c>)
 80010ca:	b2db      	uxtb	r3, r3
 80010cc:	60d3      	str	r3, [r2, #12]
 80010ce:	4b1e      	ldr	r3, [pc, #120]	; (8001148 <LCD_SetCursor+0x458>)
 80010d0:	2280      	movs	r2, #128	; 0x80
 80010d2:	615a      	str	r2, [r3, #20]
 80010d4:	4b1c      	ldr	r3, [pc, #112]	; (8001148 <LCD_SetCursor+0x458>)
 80010d6:	2280      	movs	r2, #128	; 0x80
 80010d8:	611a      	str	r2, [r3, #16]
 80010da:	4b1b      	ldr	r3, [pc, #108]	; (8001148 <LCD_SetCursor+0x458>)
 80010dc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80010e0:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA((lcddev.height - 1) >> 8);
 80010e2:	4b19      	ldr	r3, [pc, #100]	; (8001148 <LCD_SetCursor+0x458>)
 80010e4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80010e8:	611a      	str	r2, [r3, #16]
 80010ea:	4b17      	ldr	r3, [pc, #92]	; (8001148 <LCD_SetCursor+0x458>)
 80010ec:	f44f 7200 	mov.w	r2, #512	; 0x200
 80010f0:	615a      	str	r2, [r3, #20]
 80010f2:	4b14      	ldr	r3, [pc, #80]	; (8001144 <LCD_SetCursor+0x454>)
 80010f4:	885b      	ldrh	r3, [r3, #2]
 80010f6:	3b01      	subs	r3, #1
 80010f8:	121a      	asrs	r2, r3, #8
 80010fa:	4b14      	ldr	r3, [pc, #80]	; (800114c <LCD_SetCursor+0x45c>)
 80010fc:	60da      	str	r2, [r3, #12]
 80010fe:	4b12      	ldr	r3, [pc, #72]	; (8001148 <LCD_SetCursor+0x458>)
 8001100:	2280      	movs	r2, #128	; 0x80
 8001102:	615a      	str	r2, [r3, #20]
 8001104:	4b10      	ldr	r3, [pc, #64]	; (8001148 <LCD_SetCursor+0x458>)
 8001106:	2280      	movs	r2, #128	; 0x80
 8001108:	611a      	str	r2, [r3, #16]
 800110a:	4b0f      	ldr	r3, [pc, #60]	; (8001148 <LCD_SetCursor+0x458>)
 800110c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001110:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA((lcddev.height - 1) & 0XFF);
 8001112:	4b0d      	ldr	r3, [pc, #52]	; (8001148 <LCD_SetCursor+0x458>)
 8001114:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001118:	611a      	str	r2, [r3, #16]
 800111a:	4b0b      	ldr	r3, [pc, #44]	; (8001148 <LCD_SetCursor+0x458>)
 800111c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001120:	615a      	str	r2, [r3, #20]
 8001122:	4b08      	ldr	r3, [pc, #32]	; (8001144 <LCD_SetCursor+0x454>)
 8001124:	885b      	ldrh	r3, [r3, #2]
 8001126:	3b01      	subs	r3, #1
 8001128:	4a08      	ldr	r2, [pc, #32]	; (800114c <LCD_SetCursor+0x45c>)
 800112a:	b2db      	uxtb	r3, r3
 800112c:	60d3      	str	r3, [r2, #12]
 800112e:	4b06      	ldr	r3, [pc, #24]	; (8001148 <LCD_SetCursor+0x458>)
 8001130:	2280      	movs	r2, #128	; 0x80
 8001132:	615a      	str	r2, [r3, #20]
 8001134:	4b04      	ldr	r3, [pc, #16]	; (8001148 <LCD_SetCursor+0x458>)
 8001136:	2280      	movs	r2, #128	; 0x80
 8001138:	611a      	str	r2, [r3, #16]
 800113a:	4b03      	ldr	r3, [pc, #12]	; (8001148 <LCD_SetCursor+0x458>)
 800113c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001140:	611a      	str	r2, [r3, #16]
}
 8001142:	e097      	b.n	8001274 <LCD_SetCursor+0x584>
 8001144:	20000028 	.word	0x20000028
 8001148:	40011000 	.word	0x40011000
 800114c:	40010c00 	.word	0x40010c00
	} else if (lcddev.id == 0X5510) {
 8001150:	4b4a      	ldr	r3, [pc, #296]	; (800127c <LCD_SetCursor+0x58c>)
 8001152:	889b      	ldrh	r3, [r3, #4]
 8001154:	f245 5210 	movw	r2, #21776	; 0x5510
 8001158:	4293      	cmp	r3, r2
 800115a:	d172      	bne.n	8001242 <LCD_SetCursor+0x552>
		LCD_WR_REG(lcddev.setxcmd);
 800115c:	4b47      	ldr	r3, [pc, #284]	; (800127c <LCD_SetCursor+0x58c>)
 800115e:	895b      	ldrh	r3, [r3, #10]
 8001160:	4618      	mov	r0, r3
 8001162:	f7ff fcf3 	bl	8000b4c <LCD_WR_REG>
		LCD_WR_DATA(Xpos >> 8);
 8001166:	4b46      	ldr	r3, [pc, #280]	; (8001280 <LCD_SetCursor+0x590>)
 8001168:	f44f 7280 	mov.w	r2, #256	; 0x100
 800116c:	611a      	str	r2, [r3, #16]
 800116e:	4b44      	ldr	r3, [pc, #272]	; (8001280 <LCD_SetCursor+0x590>)
 8001170:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001174:	615a      	str	r2, [r3, #20]
 8001176:	88fb      	ldrh	r3, [r7, #6]
 8001178:	0a1b      	lsrs	r3, r3, #8
 800117a:	b29a      	uxth	r2, r3
 800117c:	4b41      	ldr	r3, [pc, #260]	; (8001284 <LCD_SetCursor+0x594>)
 800117e:	60da      	str	r2, [r3, #12]
 8001180:	4b3f      	ldr	r3, [pc, #252]	; (8001280 <LCD_SetCursor+0x590>)
 8001182:	2280      	movs	r2, #128	; 0x80
 8001184:	615a      	str	r2, [r3, #20]
 8001186:	4b3e      	ldr	r3, [pc, #248]	; (8001280 <LCD_SetCursor+0x590>)
 8001188:	2280      	movs	r2, #128	; 0x80
 800118a:	611a      	str	r2, [r3, #16]
 800118c:	4b3c      	ldr	r3, [pc, #240]	; (8001280 <LCD_SetCursor+0x590>)
 800118e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001192:	611a      	str	r2, [r3, #16]
		LCD_WR_REG(lcddev.setxcmd + 1);
 8001194:	4b39      	ldr	r3, [pc, #228]	; (800127c <LCD_SetCursor+0x58c>)
 8001196:	895b      	ldrh	r3, [r3, #10]
 8001198:	3301      	adds	r3, #1
 800119a:	b29b      	uxth	r3, r3
 800119c:	4618      	mov	r0, r3
 800119e:	f7ff fcd5 	bl	8000b4c <LCD_WR_REG>
		LCD_WR_DATA(Xpos & 0XFF);
 80011a2:	4b37      	ldr	r3, [pc, #220]	; (8001280 <LCD_SetCursor+0x590>)
 80011a4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80011a8:	611a      	str	r2, [r3, #16]
 80011aa:	4b35      	ldr	r3, [pc, #212]	; (8001280 <LCD_SetCursor+0x590>)
 80011ac:	f44f 7200 	mov.w	r2, #512	; 0x200
 80011b0:	615a      	str	r2, [r3, #20]
 80011b2:	88fb      	ldrh	r3, [r7, #6]
 80011b4:	4a33      	ldr	r2, [pc, #204]	; (8001284 <LCD_SetCursor+0x594>)
 80011b6:	b2db      	uxtb	r3, r3
 80011b8:	60d3      	str	r3, [r2, #12]
 80011ba:	4b31      	ldr	r3, [pc, #196]	; (8001280 <LCD_SetCursor+0x590>)
 80011bc:	2280      	movs	r2, #128	; 0x80
 80011be:	615a      	str	r2, [r3, #20]
 80011c0:	4b2f      	ldr	r3, [pc, #188]	; (8001280 <LCD_SetCursor+0x590>)
 80011c2:	2280      	movs	r2, #128	; 0x80
 80011c4:	611a      	str	r2, [r3, #16]
 80011c6:	4b2e      	ldr	r3, [pc, #184]	; (8001280 <LCD_SetCursor+0x590>)
 80011c8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80011cc:	611a      	str	r2, [r3, #16]
		LCD_WR_REG(lcddev.setycmd);
 80011ce:	4b2b      	ldr	r3, [pc, #172]	; (800127c <LCD_SetCursor+0x58c>)
 80011d0:	899b      	ldrh	r3, [r3, #12]
 80011d2:	4618      	mov	r0, r3
 80011d4:	f7ff fcba 	bl	8000b4c <LCD_WR_REG>
		LCD_WR_DATA(Ypos >> 8);
 80011d8:	4b29      	ldr	r3, [pc, #164]	; (8001280 <LCD_SetCursor+0x590>)
 80011da:	f44f 7280 	mov.w	r2, #256	; 0x100
 80011de:	611a      	str	r2, [r3, #16]
 80011e0:	4b27      	ldr	r3, [pc, #156]	; (8001280 <LCD_SetCursor+0x590>)
 80011e2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80011e6:	615a      	str	r2, [r3, #20]
 80011e8:	88bb      	ldrh	r3, [r7, #4]
 80011ea:	0a1b      	lsrs	r3, r3, #8
 80011ec:	b29a      	uxth	r2, r3
 80011ee:	4b25      	ldr	r3, [pc, #148]	; (8001284 <LCD_SetCursor+0x594>)
 80011f0:	60da      	str	r2, [r3, #12]
 80011f2:	4b23      	ldr	r3, [pc, #140]	; (8001280 <LCD_SetCursor+0x590>)
 80011f4:	2280      	movs	r2, #128	; 0x80
 80011f6:	615a      	str	r2, [r3, #20]
 80011f8:	4b21      	ldr	r3, [pc, #132]	; (8001280 <LCD_SetCursor+0x590>)
 80011fa:	2280      	movs	r2, #128	; 0x80
 80011fc:	611a      	str	r2, [r3, #16]
 80011fe:	4b20      	ldr	r3, [pc, #128]	; (8001280 <LCD_SetCursor+0x590>)
 8001200:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001204:	611a      	str	r2, [r3, #16]
		LCD_WR_REG(lcddev.setycmd + 1);
 8001206:	4b1d      	ldr	r3, [pc, #116]	; (800127c <LCD_SetCursor+0x58c>)
 8001208:	899b      	ldrh	r3, [r3, #12]
 800120a:	3301      	adds	r3, #1
 800120c:	b29b      	uxth	r3, r3
 800120e:	4618      	mov	r0, r3
 8001210:	f7ff fc9c 	bl	8000b4c <LCD_WR_REG>
		LCD_WR_DATA(Ypos & 0XFF);
 8001214:	4b1a      	ldr	r3, [pc, #104]	; (8001280 <LCD_SetCursor+0x590>)
 8001216:	f44f 7280 	mov.w	r2, #256	; 0x100
 800121a:	611a      	str	r2, [r3, #16]
 800121c:	4b18      	ldr	r3, [pc, #96]	; (8001280 <LCD_SetCursor+0x590>)
 800121e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001222:	615a      	str	r2, [r3, #20]
 8001224:	88bb      	ldrh	r3, [r7, #4]
 8001226:	4a17      	ldr	r2, [pc, #92]	; (8001284 <LCD_SetCursor+0x594>)
 8001228:	b2db      	uxtb	r3, r3
 800122a:	60d3      	str	r3, [r2, #12]
 800122c:	4b14      	ldr	r3, [pc, #80]	; (8001280 <LCD_SetCursor+0x590>)
 800122e:	2280      	movs	r2, #128	; 0x80
 8001230:	615a      	str	r2, [r3, #20]
 8001232:	4b13      	ldr	r3, [pc, #76]	; (8001280 <LCD_SetCursor+0x590>)
 8001234:	2280      	movs	r2, #128	; 0x80
 8001236:	611a      	str	r2, [r3, #16]
 8001238:	4b11      	ldr	r3, [pc, #68]	; (8001280 <LCD_SetCursor+0x590>)
 800123a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800123e:	611a      	str	r2, [r3, #16]
}
 8001240:	e018      	b.n	8001274 <LCD_SetCursor+0x584>
		if (lcddev.dir == 1)
 8001242:	4b0e      	ldr	r3, [pc, #56]	; (800127c <LCD_SetCursor+0x58c>)
 8001244:	799b      	ldrb	r3, [r3, #6]
 8001246:	2b01      	cmp	r3, #1
 8001248:	d106      	bne.n	8001258 <LCD_SetCursor+0x568>
			Xpos = lcddev.width - 1 - Xpos;	//横屏其实就是调转x,y坐标
 800124a:	4b0c      	ldr	r3, [pc, #48]	; (800127c <LCD_SetCursor+0x58c>)
 800124c:	881a      	ldrh	r2, [r3, #0]
 800124e:	88fb      	ldrh	r3, [r7, #6]
 8001250:	1ad3      	subs	r3, r2, r3
 8001252:	b29b      	uxth	r3, r3
 8001254:	3b01      	subs	r3, #1
 8001256:	80fb      	strh	r3, [r7, #6]
		LCD_WriteReg(lcddev.setxcmd, Xpos);
 8001258:	4b08      	ldr	r3, [pc, #32]	; (800127c <LCD_SetCursor+0x58c>)
 800125a:	895b      	ldrh	r3, [r3, #10]
 800125c:	88fa      	ldrh	r2, [r7, #6]
 800125e:	4611      	mov	r1, r2
 8001260:	4618      	mov	r0, r3
 8001262:	f7ff fcff 	bl	8000c64 <LCD_WriteReg>
		LCD_WriteReg(lcddev.setycmd, Ypos);
 8001266:	4b05      	ldr	r3, [pc, #20]	; (800127c <LCD_SetCursor+0x58c>)
 8001268:	899b      	ldrh	r3, [r3, #12]
 800126a:	88ba      	ldrh	r2, [r7, #4]
 800126c:	4611      	mov	r1, r2
 800126e:	4618      	mov	r0, r3
 8001270:	f7ff fcf8 	bl	8000c64 <LCD_WriteReg>
}
 8001274:	bf00      	nop
 8001276:	3708      	adds	r7, #8
 8001278:	46bd      	mov	sp, r7
 800127a:	bd80      	pop	{r7, pc}
 800127c:	20000028 	.word	0x20000028
 8001280:	40011000 	.word	0x40011000
 8001284:	40010c00 	.word	0x40010c00

08001288 <LCD_Scan_Dir>:
//设置LCD的自动扫描方向
//注意:其他函数可能会受到此函数设置的影响(尤其是9341/6804这两个奇葩),
//所以,一般设置为L2R_U2D即可,如果设置为其他扫描方式,可能导致显示不正常.
//dir:0~7,代表8个方向(具体定义见lcd.h)
//9320/9325/9328/4531/4535/1505/b505/5408/9341/5310/5510/1963等IC已经实际测试	   	   
void LCD_Scan_Dir(uint8_t dir) {
 8001288:	b580      	push	{r7, lr}
 800128a:	b084      	sub	sp, #16
 800128c:	af00      	add	r7, sp, #0
 800128e:	4603      	mov	r3, r0
 8001290:	71fb      	strb	r3, [r7, #7]
	uint16_t regval = 0;
 8001292:	2300      	movs	r3, #0
 8001294:	81fb      	strh	r3, [r7, #14]
	uint16_t dirreg = 0;
 8001296:	2300      	movs	r3, #0
 8001298:	81bb      	strh	r3, [r7, #12]
	uint16_t temp;
	if ((lcddev.dir == 1 && lcddev.id != 0X6804 && lcddev.id != 0X1963)
 800129a:	4b78      	ldr	r3, [pc, #480]	; (800147c <LCD_Scan_Dir+0x1f4>)
 800129c:	799b      	ldrb	r3, [r3, #6]
 800129e:	2b01      	cmp	r3, #1
 80012a0:	d10b      	bne.n	80012ba <LCD_Scan_Dir+0x32>
 80012a2:	4b76      	ldr	r3, [pc, #472]	; (800147c <LCD_Scan_Dir+0x1f4>)
 80012a4:	889b      	ldrh	r3, [r3, #4]
 80012a6:	f646 0204 	movw	r2, #26628	; 0x6804
 80012aa:	4293      	cmp	r3, r2
 80012ac:	d005      	beq.n	80012ba <LCD_Scan_Dir+0x32>
 80012ae:	4b73      	ldr	r3, [pc, #460]	; (800147c <LCD_Scan_Dir+0x1f4>)
 80012b0:	889b      	ldrh	r3, [r3, #4]
 80012b2:	f641 1263 	movw	r2, #6499	; 0x1963
 80012b6:	4293      	cmp	r3, r2
 80012b8:	d109      	bne.n	80012ce <LCD_Scan_Dir+0x46>
			|| (lcddev.dir == 0 && lcddev.id == 0X1963))//横屏时，对6804和1963不改变扫描方向！竖屏时1963改变方向
 80012ba:	4b70      	ldr	r3, [pc, #448]	; (800147c <LCD_Scan_Dir+0x1f4>)
 80012bc:	799b      	ldrb	r3, [r3, #6]
 80012be:	2b00      	cmp	r3, #0
 80012c0:	d134      	bne.n	800132c <LCD_Scan_Dir+0xa4>
 80012c2:	4b6e      	ldr	r3, [pc, #440]	; (800147c <LCD_Scan_Dir+0x1f4>)
 80012c4:	889b      	ldrh	r3, [r3, #4]
 80012c6:	f641 1263 	movw	r2, #6499	; 0x1963
 80012ca:	4293      	cmp	r3, r2
 80012cc:	d12e      	bne.n	800132c <LCD_Scan_Dir+0xa4>
			{
		switch (dir)	//方向转换
 80012ce:	79fb      	ldrb	r3, [r7, #7]
 80012d0:	2b07      	cmp	r3, #7
 80012d2:	d82b      	bhi.n	800132c <LCD_Scan_Dir+0xa4>
 80012d4:	a201      	add	r2, pc, #4	; (adr r2, 80012dc <LCD_Scan_Dir+0x54>)
 80012d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80012da:	bf00      	nop
 80012dc:	080012fd 	.word	0x080012fd
 80012e0:	08001303 	.word	0x08001303
 80012e4:	08001309 	.word	0x08001309
 80012e8:	0800130f 	.word	0x0800130f
 80012ec:	08001315 	.word	0x08001315
 80012f0:	0800131b 	.word	0x0800131b
 80012f4:	08001321 	.word	0x08001321
 80012f8:	08001327 	.word	0x08001327
		{
		case 0:
			dir = 6;
 80012fc:	2306      	movs	r3, #6
 80012fe:	71fb      	strb	r3, [r7, #7]
			break;
 8001300:	e014      	b.n	800132c <LCD_Scan_Dir+0xa4>
		case 1:
			dir = 7;
 8001302:	2307      	movs	r3, #7
 8001304:	71fb      	strb	r3, [r7, #7]
			break;
 8001306:	e011      	b.n	800132c <LCD_Scan_Dir+0xa4>
		case 2:
			dir = 4;
 8001308:	2304      	movs	r3, #4
 800130a:	71fb      	strb	r3, [r7, #7]
			break;
 800130c:	e00e      	b.n	800132c <LCD_Scan_Dir+0xa4>
		case 3:
			dir = 5;
 800130e:	2305      	movs	r3, #5
 8001310:	71fb      	strb	r3, [r7, #7]
			break;
 8001312:	e00b      	b.n	800132c <LCD_Scan_Dir+0xa4>
		case 4:
			dir = 1;
 8001314:	2301      	movs	r3, #1
 8001316:	71fb      	strb	r3, [r7, #7]
			break;
 8001318:	e008      	b.n	800132c <LCD_Scan_Dir+0xa4>
		case 5:
			dir = 0;
 800131a:	2300      	movs	r3, #0
 800131c:	71fb      	strb	r3, [r7, #7]
			break;
 800131e:	e005      	b.n	800132c <LCD_Scan_Dir+0xa4>
		case 6:
			dir = 3;
 8001320:	2303      	movs	r3, #3
 8001322:	71fb      	strb	r3, [r7, #7]
			break;
 8001324:	e002      	b.n	800132c <LCD_Scan_Dir+0xa4>
		case 7:
			dir = 2;
 8001326:	2302      	movs	r3, #2
 8001328:	71fb      	strb	r3, [r7, #7]
			break;
 800132a:	bf00      	nop
		}
	}
	if (lcddev.id == 0x9341 || lcddev.id == 0X6804 || lcddev.id == 0X5310
 800132c:	4b53      	ldr	r3, [pc, #332]	; (800147c <LCD_Scan_Dir+0x1f4>)
 800132e:	889b      	ldrh	r3, [r3, #4]
 8001330:	f249 3241 	movw	r2, #37697	; 0x9341
 8001334:	4293      	cmp	r3, r2
 8001336:	d018      	beq.n	800136a <LCD_Scan_Dir+0xe2>
 8001338:	4b50      	ldr	r3, [pc, #320]	; (800147c <LCD_Scan_Dir+0x1f4>)
 800133a:	889b      	ldrh	r3, [r3, #4]
 800133c:	f646 0204 	movw	r2, #26628	; 0x6804
 8001340:	4293      	cmp	r3, r2
 8001342:	d012      	beq.n	800136a <LCD_Scan_Dir+0xe2>
 8001344:	4b4d      	ldr	r3, [pc, #308]	; (800147c <LCD_Scan_Dir+0x1f4>)
 8001346:	889b      	ldrh	r3, [r3, #4]
 8001348:	f245 3210 	movw	r2, #21264	; 0x5310
 800134c:	4293      	cmp	r3, r2
 800134e:	d00c      	beq.n	800136a <LCD_Scan_Dir+0xe2>
			|| lcddev.id == 0X5510 || lcddev.id == 0X1963)//9341/6804/5310/5510/1963,特殊处理
 8001350:	4b4a      	ldr	r3, [pc, #296]	; (800147c <LCD_Scan_Dir+0x1f4>)
 8001352:	889b      	ldrh	r3, [r3, #4]
 8001354:	f245 5210 	movw	r2, #21776	; 0x5510
 8001358:	4293      	cmp	r3, r2
 800135a:	d006      	beq.n	800136a <LCD_Scan_Dir+0xe2>
 800135c:	4b47      	ldr	r3, [pc, #284]	; (800147c <LCD_Scan_Dir+0x1f4>)
 800135e:	889b      	ldrh	r3, [r3, #4]
 8001360:	f641 1263 	movw	r2, #6499	; 0x1963
 8001364:	4293      	cmp	r3, r2
 8001366:	f040 8250 	bne.w	800180a <LCD_Scan_Dir+0x582>
					{
		switch (dir) {
 800136a:	79fb      	ldrb	r3, [r7, #7]
 800136c:	2b07      	cmp	r3, #7
 800136e:	d836      	bhi.n	80013de <LCD_Scan_Dir+0x156>
 8001370:	a201      	add	r2, pc, #4	; (adr r2, 8001378 <LCD_Scan_Dir+0xf0>)
 8001372:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001376:	bf00      	nop
 8001378:	080013df 	.word	0x080013df
 800137c:	08001399 	.word	0x08001399
 8001380:	080013a3 	.word	0x080013a3
 8001384:	080013ad 	.word	0x080013ad
 8001388:	080013b7 	.word	0x080013b7
 800138c:	080013c1 	.word	0x080013c1
 8001390:	080013cb 	.word	0x080013cb
 8001394:	080013d5 	.word	0x080013d5
		case L2R_U2D:	//从左到右,从上到下
			regval |= (0 << 7) | (0 << 6) | (0 << 5);
			break;
		case L2R_D2U:	//从左到右,从下到上
			regval |= (1 << 7) | (0 << 6) | (0 << 5);
 8001398:	89fb      	ldrh	r3, [r7, #14]
 800139a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800139e:	81fb      	strh	r3, [r7, #14]
			break;
 80013a0:	e01d      	b.n	80013de <LCD_Scan_Dir+0x156>
		case R2L_U2D:	//从右到左,从上到下
			regval |= (0 << 7) | (1 << 6) | (0 << 5);
 80013a2:	89fb      	ldrh	r3, [r7, #14]
 80013a4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80013a8:	81fb      	strh	r3, [r7, #14]
			break;
 80013aa:	e018      	b.n	80013de <LCD_Scan_Dir+0x156>
		case R2L_D2U:	//从右到左,从下到上
			regval |= (1 << 7) | (1 << 6) | (0 << 5);
 80013ac:	89fb      	ldrh	r3, [r7, #14]
 80013ae:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80013b2:	81fb      	strh	r3, [r7, #14]
			break;
 80013b4:	e013      	b.n	80013de <LCD_Scan_Dir+0x156>
		case U2D_L2R:	//从上到下,从左到右
			regval |= (0 << 7) | (0 << 6) | (1 << 5);
 80013b6:	89fb      	ldrh	r3, [r7, #14]
 80013b8:	f043 0320 	orr.w	r3, r3, #32
 80013bc:	81fb      	strh	r3, [r7, #14]
			break;
 80013be:	e00e      	b.n	80013de <LCD_Scan_Dir+0x156>
		case U2D_R2L:	//从上到下,从右到左
			regval |= (0 << 7) | (1 << 6) | (1 << 5);
 80013c0:	89fb      	ldrh	r3, [r7, #14]
 80013c2:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80013c6:	81fb      	strh	r3, [r7, #14]
			break;
 80013c8:	e009      	b.n	80013de <LCD_Scan_Dir+0x156>
		case D2U_L2R:	//从下到上,从左到右
			regval |= (1 << 7) | (0 << 6) | (1 << 5);
 80013ca:	89fb      	ldrh	r3, [r7, #14]
 80013cc:	f043 03a0 	orr.w	r3, r3, #160	; 0xa0
 80013d0:	81fb      	strh	r3, [r7, #14]
			break;
 80013d2:	e004      	b.n	80013de <LCD_Scan_Dir+0x156>
		case D2U_R2L:	//从下到上,从右到左
			regval |= (1 << 7) | (1 << 6) | (1 << 5);
 80013d4:	89fb      	ldrh	r3, [r7, #14]
 80013d6:	f043 03e0 	orr.w	r3, r3, #224	; 0xe0
 80013da:	81fb      	strh	r3, [r7, #14]
			break;
 80013dc:	bf00      	nop
		}
		if (lcddev.id == 0X5510)
 80013de:	4b27      	ldr	r3, [pc, #156]	; (800147c <LCD_Scan_Dir+0x1f4>)
 80013e0:	889b      	ldrh	r3, [r3, #4]
 80013e2:	f245 5210 	movw	r2, #21776	; 0x5510
 80013e6:	4293      	cmp	r3, r2
 80013e8:	d103      	bne.n	80013f2 <LCD_Scan_Dir+0x16a>
			dirreg = 0X3600;
 80013ea:	f44f 5358 	mov.w	r3, #13824	; 0x3600
 80013ee:	81bb      	strh	r3, [r7, #12]
 80013f0:	e001      	b.n	80013f6 <LCD_Scan_Dir+0x16e>
		else
			dirreg = 0X36;
 80013f2:	2336      	movs	r3, #54	; 0x36
 80013f4:	81bb      	strh	r3, [r7, #12]
		if ((lcddev.id != 0X5310) && (lcddev.id != 0X5510) && (lcddev.id != 0X1963))
 80013f6:	4b21      	ldr	r3, [pc, #132]	; (800147c <LCD_Scan_Dir+0x1f4>)
 80013f8:	889b      	ldrh	r3, [r3, #4]
 80013fa:	f245 3210 	movw	r2, #21264	; 0x5310
 80013fe:	4293      	cmp	r3, r2
 8001400:	d00f      	beq.n	8001422 <LCD_Scan_Dir+0x19a>
 8001402:	4b1e      	ldr	r3, [pc, #120]	; (800147c <LCD_Scan_Dir+0x1f4>)
 8001404:	889b      	ldrh	r3, [r3, #4]
 8001406:	f245 5210 	movw	r2, #21776	; 0x5510
 800140a:	4293      	cmp	r3, r2
 800140c:	d009      	beq.n	8001422 <LCD_Scan_Dir+0x19a>
 800140e:	4b1b      	ldr	r3, [pc, #108]	; (800147c <LCD_Scan_Dir+0x1f4>)
 8001410:	889b      	ldrh	r3, [r3, #4]
 8001412:	f641 1263 	movw	r2, #6499	; 0x1963
 8001416:	4293      	cmp	r3, r2
 8001418:	d003      	beq.n	8001422 <LCD_Scan_Dir+0x19a>
			regval |= 0X08;	//5310/5510/1963不需要BGR
 800141a:	89fb      	ldrh	r3, [r7, #14]
 800141c:	f043 0308 	orr.w	r3, r3, #8
 8001420:	81fb      	strh	r3, [r7, #14]
		if (lcddev.id == 0X6804)
 8001422:	4b16      	ldr	r3, [pc, #88]	; (800147c <LCD_Scan_Dir+0x1f4>)
 8001424:	889b      	ldrh	r3, [r3, #4]
 8001426:	f646 0204 	movw	r2, #26628	; 0x6804
 800142a:	4293      	cmp	r3, r2
 800142c:	d103      	bne.n	8001436 <LCD_Scan_Dir+0x1ae>
			regval |= 0x02;	//6804的BIT6和9341的反了
 800142e:	89fb      	ldrh	r3, [r7, #14]
 8001430:	f043 0302 	orr.w	r3, r3, #2
 8001434:	81fb      	strh	r3, [r7, #14]
		LCD_WriteReg(dirreg, regval);
 8001436:	89fa      	ldrh	r2, [r7, #14]
 8001438:	89bb      	ldrh	r3, [r7, #12]
 800143a:	4611      	mov	r1, r2
 800143c:	4618      	mov	r0, r3
 800143e:	f7ff fc11 	bl	8000c64 <LCD_WriteReg>
		if (lcddev.id != 0X1963)	//1963不做坐标处理
 8001442:	4b0e      	ldr	r3, [pc, #56]	; (800147c <LCD_Scan_Dir+0x1f4>)
 8001444:	889b      	ldrh	r3, [r3, #4]
 8001446:	f641 1263 	movw	r2, #6499	; 0x1963
 800144a:	4293      	cmp	r3, r2
 800144c:	d028      	beq.n	80014a0 <LCD_Scan_Dir+0x218>
				{
			if (regval & 0X20) {
 800144e:	89fb      	ldrh	r3, [r7, #14]
 8001450:	f003 0320 	and.w	r3, r3, #32
 8001454:	2b00      	cmp	r3, #0
 8001456:	d013      	beq.n	8001480 <LCD_Scan_Dir+0x1f8>
				if (lcddev.width < lcddev.height)	//交换X,Y
 8001458:	4b08      	ldr	r3, [pc, #32]	; (800147c <LCD_Scan_Dir+0x1f4>)
 800145a:	881a      	ldrh	r2, [r3, #0]
 800145c:	4b07      	ldr	r3, [pc, #28]	; (800147c <LCD_Scan_Dir+0x1f4>)
 800145e:	885b      	ldrh	r3, [r3, #2]
 8001460:	429a      	cmp	r2, r3
 8001462:	d21d      	bcs.n	80014a0 <LCD_Scan_Dir+0x218>
						{
					temp = lcddev.width;
 8001464:	4b05      	ldr	r3, [pc, #20]	; (800147c <LCD_Scan_Dir+0x1f4>)
 8001466:	881b      	ldrh	r3, [r3, #0]
 8001468:	817b      	strh	r3, [r7, #10]
					lcddev.width = lcddev.height;
 800146a:	4b04      	ldr	r3, [pc, #16]	; (800147c <LCD_Scan_Dir+0x1f4>)
 800146c:	885a      	ldrh	r2, [r3, #2]
 800146e:	4b03      	ldr	r3, [pc, #12]	; (800147c <LCD_Scan_Dir+0x1f4>)
 8001470:	801a      	strh	r2, [r3, #0]
					lcddev.height = temp;
 8001472:	4a02      	ldr	r2, [pc, #8]	; (800147c <LCD_Scan_Dir+0x1f4>)
 8001474:	897b      	ldrh	r3, [r7, #10]
 8001476:	8053      	strh	r3, [r2, #2]
 8001478:	e012      	b.n	80014a0 <LCD_Scan_Dir+0x218>
 800147a:	bf00      	nop
 800147c:	20000028 	.word	0x20000028
				}
			} else {
				if (lcddev.width > lcddev.height)	//交换X,Y
 8001480:	4b7f      	ldr	r3, [pc, #508]	; (8001680 <LCD_Scan_Dir+0x3f8>)
 8001482:	881a      	ldrh	r2, [r3, #0]
 8001484:	4b7e      	ldr	r3, [pc, #504]	; (8001680 <LCD_Scan_Dir+0x3f8>)
 8001486:	885b      	ldrh	r3, [r3, #2]
 8001488:	429a      	cmp	r2, r3
 800148a:	d909      	bls.n	80014a0 <LCD_Scan_Dir+0x218>
						{
					temp = lcddev.width;
 800148c:	4b7c      	ldr	r3, [pc, #496]	; (8001680 <LCD_Scan_Dir+0x3f8>)
 800148e:	881b      	ldrh	r3, [r3, #0]
 8001490:	817b      	strh	r3, [r7, #10]
					lcddev.width = lcddev.height;
 8001492:	4b7b      	ldr	r3, [pc, #492]	; (8001680 <LCD_Scan_Dir+0x3f8>)
 8001494:	885a      	ldrh	r2, [r3, #2]
 8001496:	4b7a      	ldr	r3, [pc, #488]	; (8001680 <LCD_Scan_Dir+0x3f8>)
 8001498:	801a      	strh	r2, [r3, #0]
					lcddev.height = temp;
 800149a:	4a79      	ldr	r2, [pc, #484]	; (8001680 <LCD_Scan_Dir+0x3f8>)
 800149c:	897b      	ldrh	r3, [r7, #10]
 800149e:	8053      	strh	r3, [r2, #2]
				}
			}
		}
		if (lcddev.id == 0X5510) {
 80014a0:	4b77      	ldr	r3, [pc, #476]	; (8001680 <LCD_Scan_Dir+0x3f8>)
 80014a2:	889b      	ldrh	r3, [r3, #4]
 80014a4:	f245 5210 	movw	r2, #21776	; 0x5510
 80014a8:	4293      	cmp	r3, r2
 80014aa:	f040 80ef 	bne.w	800168c <LCD_Scan_Dir+0x404>
			LCD_WR_REG(lcddev.setxcmd);
 80014ae:	4b74      	ldr	r3, [pc, #464]	; (8001680 <LCD_Scan_Dir+0x3f8>)
 80014b0:	895b      	ldrh	r3, [r3, #10]
 80014b2:	4618      	mov	r0, r3
 80014b4:	f7ff fb4a 	bl	8000b4c <LCD_WR_REG>
			LCD_WR_DATA(0);
 80014b8:	4b72      	ldr	r3, [pc, #456]	; (8001684 <LCD_Scan_Dir+0x3fc>)
 80014ba:	f44f 7280 	mov.w	r2, #256	; 0x100
 80014be:	611a      	str	r2, [r3, #16]
 80014c0:	4b70      	ldr	r3, [pc, #448]	; (8001684 <LCD_Scan_Dir+0x3fc>)
 80014c2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80014c6:	615a      	str	r2, [r3, #20]
 80014c8:	4b6f      	ldr	r3, [pc, #444]	; (8001688 <LCD_Scan_Dir+0x400>)
 80014ca:	2200      	movs	r2, #0
 80014cc:	60da      	str	r2, [r3, #12]
 80014ce:	4b6d      	ldr	r3, [pc, #436]	; (8001684 <LCD_Scan_Dir+0x3fc>)
 80014d0:	2280      	movs	r2, #128	; 0x80
 80014d2:	615a      	str	r2, [r3, #20]
 80014d4:	4b6b      	ldr	r3, [pc, #428]	; (8001684 <LCD_Scan_Dir+0x3fc>)
 80014d6:	2280      	movs	r2, #128	; 0x80
 80014d8:	611a      	str	r2, [r3, #16]
 80014da:	4b6a      	ldr	r3, [pc, #424]	; (8001684 <LCD_Scan_Dir+0x3fc>)
 80014dc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80014e0:	611a      	str	r2, [r3, #16]
			LCD_WR_REG(lcddev.setxcmd + 1);
 80014e2:	4b67      	ldr	r3, [pc, #412]	; (8001680 <LCD_Scan_Dir+0x3f8>)
 80014e4:	895b      	ldrh	r3, [r3, #10]
 80014e6:	3301      	adds	r3, #1
 80014e8:	b29b      	uxth	r3, r3
 80014ea:	4618      	mov	r0, r3
 80014ec:	f7ff fb2e 	bl	8000b4c <LCD_WR_REG>
			LCD_WR_DATA(0);
 80014f0:	4b64      	ldr	r3, [pc, #400]	; (8001684 <LCD_Scan_Dir+0x3fc>)
 80014f2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80014f6:	611a      	str	r2, [r3, #16]
 80014f8:	4b62      	ldr	r3, [pc, #392]	; (8001684 <LCD_Scan_Dir+0x3fc>)
 80014fa:	f44f 7200 	mov.w	r2, #512	; 0x200
 80014fe:	615a      	str	r2, [r3, #20]
 8001500:	4b61      	ldr	r3, [pc, #388]	; (8001688 <LCD_Scan_Dir+0x400>)
 8001502:	2200      	movs	r2, #0
 8001504:	60da      	str	r2, [r3, #12]
 8001506:	4b5f      	ldr	r3, [pc, #380]	; (8001684 <LCD_Scan_Dir+0x3fc>)
 8001508:	2280      	movs	r2, #128	; 0x80
 800150a:	615a      	str	r2, [r3, #20]
 800150c:	4b5d      	ldr	r3, [pc, #372]	; (8001684 <LCD_Scan_Dir+0x3fc>)
 800150e:	2280      	movs	r2, #128	; 0x80
 8001510:	611a      	str	r2, [r3, #16]
 8001512:	4b5c      	ldr	r3, [pc, #368]	; (8001684 <LCD_Scan_Dir+0x3fc>)
 8001514:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001518:	611a      	str	r2, [r3, #16]
			LCD_WR_REG(lcddev.setxcmd + 2);
 800151a:	4b59      	ldr	r3, [pc, #356]	; (8001680 <LCD_Scan_Dir+0x3f8>)
 800151c:	895b      	ldrh	r3, [r3, #10]
 800151e:	3302      	adds	r3, #2
 8001520:	b29b      	uxth	r3, r3
 8001522:	4618      	mov	r0, r3
 8001524:	f7ff fb12 	bl	8000b4c <LCD_WR_REG>
			LCD_WR_DATA((lcddev.width - 1) >> 8);
 8001528:	4b56      	ldr	r3, [pc, #344]	; (8001684 <LCD_Scan_Dir+0x3fc>)
 800152a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800152e:	611a      	str	r2, [r3, #16]
 8001530:	4b54      	ldr	r3, [pc, #336]	; (8001684 <LCD_Scan_Dir+0x3fc>)
 8001532:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001536:	615a      	str	r2, [r3, #20]
 8001538:	4b51      	ldr	r3, [pc, #324]	; (8001680 <LCD_Scan_Dir+0x3f8>)
 800153a:	881b      	ldrh	r3, [r3, #0]
 800153c:	3b01      	subs	r3, #1
 800153e:	121a      	asrs	r2, r3, #8
 8001540:	4b51      	ldr	r3, [pc, #324]	; (8001688 <LCD_Scan_Dir+0x400>)
 8001542:	60da      	str	r2, [r3, #12]
 8001544:	4b4f      	ldr	r3, [pc, #316]	; (8001684 <LCD_Scan_Dir+0x3fc>)
 8001546:	2280      	movs	r2, #128	; 0x80
 8001548:	615a      	str	r2, [r3, #20]
 800154a:	4b4e      	ldr	r3, [pc, #312]	; (8001684 <LCD_Scan_Dir+0x3fc>)
 800154c:	2280      	movs	r2, #128	; 0x80
 800154e:	611a      	str	r2, [r3, #16]
 8001550:	4b4c      	ldr	r3, [pc, #304]	; (8001684 <LCD_Scan_Dir+0x3fc>)
 8001552:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001556:	611a      	str	r2, [r3, #16]
			LCD_WR_REG(lcddev.setxcmd + 3);
 8001558:	4b49      	ldr	r3, [pc, #292]	; (8001680 <LCD_Scan_Dir+0x3f8>)
 800155a:	895b      	ldrh	r3, [r3, #10]
 800155c:	3303      	adds	r3, #3
 800155e:	b29b      	uxth	r3, r3
 8001560:	4618      	mov	r0, r3
 8001562:	f7ff faf3 	bl	8000b4c <LCD_WR_REG>
			LCD_WR_DATA((lcddev.width - 1) & 0XFF);
 8001566:	4b47      	ldr	r3, [pc, #284]	; (8001684 <LCD_Scan_Dir+0x3fc>)
 8001568:	f44f 7280 	mov.w	r2, #256	; 0x100
 800156c:	611a      	str	r2, [r3, #16]
 800156e:	4b45      	ldr	r3, [pc, #276]	; (8001684 <LCD_Scan_Dir+0x3fc>)
 8001570:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001574:	615a      	str	r2, [r3, #20]
 8001576:	4b42      	ldr	r3, [pc, #264]	; (8001680 <LCD_Scan_Dir+0x3f8>)
 8001578:	881b      	ldrh	r3, [r3, #0]
 800157a:	3b01      	subs	r3, #1
 800157c:	4a42      	ldr	r2, [pc, #264]	; (8001688 <LCD_Scan_Dir+0x400>)
 800157e:	b2db      	uxtb	r3, r3
 8001580:	60d3      	str	r3, [r2, #12]
 8001582:	4b40      	ldr	r3, [pc, #256]	; (8001684 <LCD_Scan_Dir+0x3fc>)
 8001584:	2280      	movs	r2, #128	; 0x80
 8001586:	615a      	str	r2, [r3, #20]
 8001588:	4b3e      	ldr	r3, [pc, #248]	; (8001684 <LCD_Scan_Dir+0x3fc>)
 800158a:	2280      	movs	r2, #128	; 0x80
 800158c:	611a      	str	r2, [r3, #16]
 800158e:	4b3d      	ldr	r3, [pc, #244]	; (8001684 <LCD_Scan_Dir+0x3fc>)
 8001590:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001594:	611a      	str	r2, [r3, #16]
			LCD_WR_REG(lcddev.setycmd);
 8001596:	4b3a      	ldr	r3, [pc, #232]	; (8001680 <LCD_Scan_Dir+0x3f8>)
 8001598:	899b      	ldrh	r3, [r3, #12]
 800159a:	4618      	mov	r0, r3
 800159c:	f7ff fad6 	bl	8000b4c <LCD_WR_REG>
			LCD_WR_DATA(0);
 80015a0:	4b38      	ldr	r3, [pc, #224]	; (8001684 <LCD_Scan_Dir+0x3fc>)
 80015a2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80015a6:	611a      	str	r2, [r3, #16]
 80015a8:	4b36      	ldr	r3, [pc, #216]	; (8001684 <LCD_Scan_Dir+0x3fc>)
 80015aa:	f44f 7200 	mov.w	r2, #512	; 0x200
 80015ae:	615a      	str	r2, [r3, #20]
 80015b0:	4b35      	ldr	r3, [pc, #212]	; (8001688 <LCD_Scan_Dir+0x400>)
 80015b2:	2200      	movs	r2, #0
 80015b4:	60da      	str	r2, [r3, #12]
 80015b6:	4b33      	ldr	r3, [pc, #204]	; (8001684 <LCD_Scan_Dir+0x3fc>)
 80015b8:	2280      	movs	r2, #128	; 0x80
 80015ba:	615a      	str	r2, [r3, #20]
 80015bc:	4b31      	ldr	r3, [pc, #196]	; (8001684 <LCD_Scan_Dir+0x3fc>)
 80015be:	2280      	movs	r2, #128	; 0x80
 80015c0:	611a      	str	r2, [r3, #16]
 80015c2:	4b30      	ldr	r3, [pc, #192]	; (8001684 <LCD_Scan_Dir+0x3fc>)
 80015c4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80015c8:	611a      	str	r2, [r3, #16]
			LCD_WR_REG(lcddev.setycmd + 1);
 80015ca:	4b2d      	ldr	r3, [pc, #180]	; (8001680 <LCD_Scan_Dir+0x3f8>)
 80015cc:	899b      	ldrh	r3, [r3, #12]
 80015ce:	3301      	adds	r3, #1
 80015d0:	b29b      	uxth	r3, r3
 80015d2:	4618      	mov	r0, r3
 80015d4:	f7ff faba 	bl	8000b4c <LCD_WR_REG>
			LCD_WR_DATA(0);
 80015d8:	4b2a      	ldr	r3, [pc, #168]	; (8001684 <LCD_Scan_Dir+0x3fc>)
 80015da:	f44f 7280 	mov.w	r2, #256	; 0x100
 80015de:	611a      	str	r2, [r3, #16]
 80015e0:	4b28      	ldr	r3, [pc, #160]	; (8001684 <LCD_Scan_Dir+0x3fc>)
 80015e2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80015e6:	615a      	str	r2, [r3, #20]
 80015e8:	4b27      	ldr	r3, [pc, #156]	; (8001688 <LCD_Scan_Dir+0x400>)
 80015ea:	2200      	movs	r2, #0
 80015ec:	60da      	str	r2, [r3, #12]
 80015ee:	4b25      	ldr	r3, [pc, #148]	; (8001684 <LCD_Scan_Dir+0x3fc>)
 80015f0:	2280      	movs	r2, #128	; 0x80
 80015f2:	615a      	str	r2, [r3, #20]
 80015f4:	4b23      	ldr	r3, [pc, #140]	; (8001684 <LCD_Scan_Dir+0x3fc>)
 80015f6:	2280      	movs	r2, #128	; 0x80
 80015f8:	611a      	str	r2, [r3, #16]
 80015fa:	4b22      	ldr	r3, [pc, #136]	; (8001684 <LCD_Scan_Dir+0x3fc>)
 80015fc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001600:	611a      	str	r2, [r3, #16]
			LCD_WR_REG(lcddev.setycmd + 2);
 8001602:	4b1f      	ldr	r3, [pc, #124]	; (8001680 <LCD_Scan_Dir+0x3f8>)
 8001604:	899b      	ldrh	r3, [r3, #12]
 8001606:	3302      	adds	r3, #2
 8001608:	b29b      	uxth	r3, r3
 800160a:	4618      	mov	r0, r3
 800160c:	f7ff fa9e 	bl	8000b4c <LCD_WR_REG>
			LCD_WR_DATA((lcddev.height - 1) >> 8);
 8001610:	4b1c      	ldr	r3, [pc, #112]	; (8001684 <LCD_Scan_Dir+0x3fc>)
 8001612:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001616:	611a      	str	r2, [r3, #16]
 8001618:	4b1a      	ldr	r3, [pc, #104]	; (8001684 <LCD_Scan_Dir+0x3fc>)
 800161a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800161e:	615a      	str	r2, [r3, #20]
 8001620:	4b17      	ldr	r3, [pc, #92]	; (8001680 <LCD_Scan_Dir+0x3f8>)
 8001622:	885b      	ldrh	r3, [r3, #2]
 8001624:	3b01      	subs	r3, #1
 8001626:	121a      	asrs	r2, r3, #8
 8001628:	4b17      	ldr	r3, [pc, #92]	; (8001688 <LCD_Scan_Dir+0x400>)
 800162a:	60da      	str	r2, [r3, #12]
 800162c:	4b15      	ldr	r3, [pc, #84]	; (8001684 <LCD_Scan_Dir+0x3fc>)
 800162e:	2280      	movs	r2, #128	; 0x80
 8001630:	615a      	str	r2, [r3, #20]
 8001632:	4b14      	ldr	r3, [pc, #80]	; (8001684 <LCD_Scan_Dir+0x3fc>)
 8001634:	2280      	movs	r2, #128	; 0x80
 8001636:	611a      	str	r2, [r3, #16]
 8001638:	4b12      	ldr	r3, [pc, #72]	; (8001684 <LCD_Scan_Dir+0x3fc>)
 800163a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800163e:	611a      	str	r2, [r3, #16]
			LCD_WR_REG(lcddev.setycmd + 3);
 8001640:	4b0f      	ldr	r3, [pc, #60]	; (8001680 <LCD_Scan_Dir+0x3f8>)
 8001642:	899b      	ldrh	r3, [r3, #12]
 8001644:	3303      	adds	r3, #3
 8001646:	b29b      	uxth	r3, r3
 8001648:	4618      	mov	r0, r3
 800164a:	f7ff fa7f 	bl	8000b4c <LCD_WR_REG>
			LCD_WR_DATA((lcddev.height - 1) & 0XFF);
 800164e:	4b0d      	ldr	r3, [pc, #52]	; (8001684 <LCD_Scan_Dir+0x3fc>)
 8001650:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001654:	611a      	str	r2, [r3, #16]
 8001656:	4b0b      	ldr	r3, [pc, #44]	; (8001684 <LCD_Scan_Dir+0x3fc>)
 8001658:	f44f 7200 	mov.w	r2, #512	; 0x200
 800165c:	615a      	str	r2, [r3, #20]
 800165e:	4b08      	ldr	r3, [pc, #32]	; (8001680 <LCD_Scan_Dir+0x3f8>)
 8001660:	885b      	ldrh	r3, [r3, #2]
 8001662:	3b01      	subs	r3, #1
 8001664:	4a08      	ldr	r2, [pc, #32]	; (8001688 <LCD_Scan_Dir+0x400>)
 8001666:	b2db      	uxtb	r3, r3
 8001668:	60d3      	str	r3, [r2, #12]
 800166a:	4b06      	ldr	r3, [pc, #24]	; (8001684 <LCD_Scan_Dir+0x3fc>)
 800166c:	2280      	movs	r2, #128	; 0x80
 800166e:	615a      	str	r2, [r3, #20]
 8001670:	4b04      	ldr	r3, [pc, #16]	; (8001684 <LCD_Scan_Dir+0x3fc>)
 8001672:	2280      	movs	r2, #128	; 0x80
 8001674:	611a      	str	r2, [r3, #16]
 8001676:	4b03      	ldr	r3, [pc, #12]	; (8001684 <LCD_Scan_Dir+0x3fc>)
 8001678:	f44f 7200 	mov.w	r2, #512	; 0x200
 800167c:	611a      	str	r2, [r3, #16]
		if (lcddev.id == 0X5510) {
 800167e:	e10b      	b.n	8001898 <LCD_Scan_Dir+0x610>
 8001680:	20000028 	.word	0x20000028
 8001684:	40011000 	.word	0x40011000
 8001688:	40010c00 	.word	0x40010c00
		} else {
			LCD_WR_REG(lcddev.setxcmd);
 800168c:	4b84      	ldr	r3, [pc, #528]	; (80018a0 <LCD_Scan_Dir+0x618>)
 800168e:	895b      	ldrh	r3, [r3, #10]
 8001690:	4618      	mov	r0, r3
 8001692:	f7ff fa5b 	bl	8000b4c <LCD_WR_REG>
			LCD_WR_DATA(0);
 8001696:	4b83      	ldr	r3, [pc, #524]	; (80018a4 <LCD_Scan_Dir+0x61c>)
 8001698:	f44f 7280 	mov.w	r2, #256	; 0x100
 800169c:	611a      	str	r2, [r3, #16]
 800169e:	4b81      	ldr	r3, [pc, #516]	; (80018a4 <LCD_Scan_Dir+0x61c>)
 80016a0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80016a4:	615a      	str	r2, [r3, #20]
 80016a6:	4b80      	ldr	r3, [pc, #512]	; (80018a8 <LCD_Scan_Dir+0x620>)
 80016a8:	2200      	movs	r2, #0
 80016aa:	60da      	str	r2, [r3, #12]
 80016ac:	4b7d      	ldr	r3, [pc, #500]	; (80018a4 <LCD_Scan_Dir+0x61c>)
 80016ae:	2280      	movs	r2, #128	; 0x80
 80016b0:	615a      	str	r2, [r3, #20]
 80016b2:	4b7c      	ldr	r3, [pc, #496]	; (80018a4 <LCD_Scan_Dir+0x61c>)
 80016b4:	2280      	movs	r2, #128	; 0x80
 80016b6:	611a      	str	r2, [r3, #16]
 80016b8:	4b7a      	ldr	r3, [pc, #488]	; (80018a4 <LCD_Scan_Dir+0x61c>)
 80016ba:	f44f 7200 	mov.w	r2, #512	; 0x200
 80016be:	611a      	str	r2, [r3, #16]
			LCD_WR_DATA(0);
 80016c0:	4b78      	ldr	r3, [pc, #480]	; (80018a4 <LCD_Scan_Dir+0x61c>)
 80016c2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80016c6:	611a      	str	r2, [r3, #16]
 80016c8:	4b76      	ldr	r3, [pc, #472]	; (80018a4 <LCD_Scan_Dir+0x61c>)
 80016ca:	f44f 7200 	mov.w	r2, #512	; 0x200
 80016ce:	615a      	str	r2, [r3, #20]
 80016d0:	4b75      	ldr	r3, [pc, #468]	; (80018a8 <LCD_Scan_Dir+0x620>)
 80016d2:	2200      	movs	r2, #0
 80016d4:	60da      	str	r2, [r3, #12]
 80016d6:	4b73      	ldr	r3, [pc, #460]	; (80018a4 <LCD_Scan_Dir+0x61c>)
 80016d8:	2280      	movs	r2, #128	; 0x80
 80016da:	615a      	str	r2, [r3, #20]
 80016dc:	4b71      	ldr	r3, [pc, #452]	; (80018a4 <LCD_Scan_Dir+0x61c>)
 80016de:	2280      	movs	r2, #128	; 0x80
 80016e0:	611a      	str	r2, [r3, #16]
 80016e2:	4b70      	ldr	r3, [pc, #448]	; (80018a4 <LCD_Scan_Dir+0x61c>)
 80016e4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80016e8:	611a      	str	r2, [r3, #16]
			LCD_WR_DATA((lcddev.width - 1) >> 8);
 80016ea:	4b6e      	ldr	r3, [pc, #440]	; (80018a4 <LCD_Scan_Dir+0x61c>)
 80016ec:	f44f 7280 	mov.w	r2, #256	; 0x100
 80016f0:	611a      	str	r2, [r3, #16]
 80016f2:	4b6c      	ldr	r3, [pc, #432]	; (80018a4 <LCD_Scan_Dir+0x61c>)
 80016f4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80016f8:	615a      	str	r2, [r3, #20]
 80016fa:	4b69      	ldr	r3, [pc, #420]	; (80018a0 <LCD_Scan_Dir+0x618>)
 80016fc:	881b      	ldrh	r3, [r3, #0]
 80016fe:	3b01      	subs	r3, #1
 8001700:	121a      	asrs	r2, r3, #8
 8001702:	4b69      	ldr	r3, [pc, #420]	; (80018a8 <LCD_Scan_Dir+0x620>)
 8001704:	60da      	str	r2, [r3, #12]
 8001706:	4b67      	ldr	r3, [pc, #412]	; (80018a4 <LCD_Scan_Dir+0x61c>)
 8001708:	2280      	movs	r2, #128	; 0x80
 800170a:	615a      	str	r2, [r3, #20]
 800170c:	4b65      	ldr	r3, [pc, #404]	; (80018a4 <LCD_Scan_Dir+0x61c>)
 800170e:	2280      	movs	r2, #128	; 0x80
 8001710:	611a      	str	r2, [r3, #16]
 8001712:	4b64      	ldr	r3, [pc, #400]	; (80018a4 <LCD_Scan_Dir+0x61c>)
 8001714:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001718:	611a      	str	r2, [r3, #16]
			LCD_WR_DATA((lcddev.width - 1) & 0XFF);
 800171a:	4b62      	ldr	r3, [pc, #392]	; (80018a4 <LCD_Scan_Dir+0x61c>)
 800171c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001720:	611a      	str	r2, [r3, #16]
 8001722:	4b60      	ldr	r3, [pc, #384]	; (80018a4 <LCD_Scan_Dir+0x61c>)
 8001724:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001728:	615a      	str	r2, [r3, #20]
 800172a:	4b5d      	ldr	r3, [pc, #372]	; (80018a0 <LCD_Scan_Dir+0x618>)
 800172c:	881b      	ldrh	r3, [r3, #0]
 800172e:	3b01      	subs	r3, #1
 8001730:	4a5d      	ldr	r2, [pc, #372]	; (80018a8 <LCD_Scan_Dir+0x620>)
 8001732:	b2db      	uxtb	r3, r3
 8001734:	60d3      	str	r3, [r2, #12]
 8001736:	4b5b      	ldr	r3, [pc, #364]	; (80018a4 <LCD_Scan_Dir+0x61c>)
 8001738:	2280      	movs	r2, #128	; 0x80
 800173a:	615a      	str	r2, [r3, #20]
 800173c:	4b59      	ldr	r3, [pc, #356]	; (80018a4 <LCD_Scan_Dir+0x61c>)
 800173e:	2280      	movs	r2, #128	; 0x80
 8001740:	611a      	str	r2, [r3, #16]
 8001742:	4b58      	ldr	r3, [pc, #352]	; (80018a4 <LCD_Scan_Dir+0x61c>)
 8001744:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001748:	611a      	str	r2, [r3, #16]
			LCD_WR_REG(lcddev.setycmd);
 800174a:	4b55      	ldr	r3, [pc, #340]	; (80018a0 <LCD_Scan_Dir+0x618>)
 800174c:	899b      	ldrh	r3, [r3, #12]
 800174e:	4618      	mov	r0, r3
 8001750:	f7ff f9fc 	bl	8000b4c <LCD_WR_REG>
			LCD_WR_DATA(0);
 8001754:	4b53      	ldr	r3, [pc, #332]	; (80018a4 <LCD_Scan_Dir+0x61c>)
 8001756:	f44f 7280 	mov.w	r2, #256	; 0x100
 800175a:	611a      	str	r2, [r3, #16]
 800175c:	4b51      	ldr	r3, [pc, #324]	; (80018a4 <LCD_Scan_Dir+0x61c>)
 800175e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001762:	615a      	str	r2, [r3, #20]
 8001764:	4b50      	ldr	r3, [pc, #320]	; (80018a8 <LCD_Scan_Dir+0x620>)
 8001766:	2200      	movs	r2, #0
 8001768:	60da      	str	r2, [r3, #12]
 800176a:	4b4e      	ldr	r3, [pc, #312]	; (80018a4 <LCD_Scan_Dir+0x61c>)
 800176c:	2280      	movs	r2, #128	; 0x80
 800176e:	615a      	str	r2, [r3, #20]
 8001770:	4b4c      	ldr	r3, [pc, #304]	; (80018a4 <LCD_Scan_Dir+0x61c>)
 8001772:	2280      	movs	r2, #128	; 0x80
 8001774:	611a      	str	r2, [r3, #16]
 8001776:	4b4b      	ldr	r3, [pc, #300]	; (80018a4 <LCD_Scan_Dir+0x61c>)
 8001778:	f44f 7200 	mov.w	r2, #512	; 0x200
 800177c:	611a      	str	r2, [r3, #16]
			LCD_WR_DATA(0);
 800177e:	4b49      	ldr	r3, [pc, #292]	; (80018a4 <LCD_Scan_Dir+0x61c>)
 8001780:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001784:	611a      	str	r2, [r3, #16]
 8001786:	4b47      	ldr	r3, [pc, #284]	; (80018a4 <LCD_Scan_Dir+0x61c>)
 8001788:	f44f 7200 	mov.w	r2, #512	; 0x200
 800178c:	615a      	str	r2, [r3, #20]
 800178e:	4b46      	ldr	r3, [pc, #280]	; (80018a8 <LCD_Scan_Dir+0x620>)
 8001790:	2200      	movs	r2, #0
 8001792:	60da      	str	r2, [r3, #12]
 8001794:	4b43      	ldr	r3, [pc, #268]	; (80018a4 <LCD_Scan_Dir+0x61c>)
 8001796:	2280      	movs	r2, #128	; 0x80
 8001798:	615a      	str	r2, [r3, #20]
 800179a:	4b42      	ldr	r3, [pc, #264]	; (80018a4 <LCD_Scan_Dir+0x61c>)
 800179c:	2280      	movs	r2, #128	; 0x80
 800179e:	611a      	str	r2, [r3, #16]
 80017a0:	4b40      	ldr	r3, [pc, #256]	; (80018a4 <LCD_Scan_Dir+0x61c>)
 80017a2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80017a6:	611a      	str	r2, [r3, #16]
			LCD_WR_DATA((lcddev.height - 1) >> 8);
 80017a8:	4b3e      	ldr	r3, [pc, #248]	; (80018a4 <LCD_Scan_Dir+0x61c>)
 80017aa:	f44f 7280 	mov.w	r2, #256	; 0x100
 80017ae:	611a      	str	r2, [r3, #16]
 80017b0:	4b3c      	ldr	r3, [pc, #240]	; (80018a4 <LCD_Scan_Dir+0x61c>)
 80017b2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80017b6:	615a      	str	r2, [r3, #20]
 80017b8:	4b39      	ldr	r3, [pc, #228]	; (80018a0 <LCD_Scan_Dir+0x618>)
 80017ba:	885b      	ldrh	r3, [r3, #2]
 80017bc:	3b01      	subs	r3, #1
 80017be:	121a      	asrs	r2, r3, #8
 80017c0:	4b39      	ldr	r3, [pc, #228]	; (80018a8 <LCD_Scan_Dir+0x620>)
 80017c2:	60da      	str	r2, [r3, #12]
 80017c4:	4b37      	ldr	r3, [pc, #220]	; (80018a4 <LCD_Scan_Dir+0x61c>)
 80017c6:	2280      	movs	r2, #128	; 0x80
 80017c8:	615a      	str	r2, [r3, #20]
 80017ca:	4b36      	ldr	r3, [pc, #216]	; (80018a4 <LCD_Scan_Dir+0x61c>)
 80017cc:	2280      	movs	r2, #128	; 0x80
 80017ce:	611a      	str	r2, [r3, #16]
 80017d0:	4b34      	ldr	r3, [pc, #208]	; (80018a4 <LCD_Scan_Dir+0x61c>)
 80017d2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80017d6:	611a      	str	r2, [r3, #16]
			LCD_WR_DATA((lcddev.height - 1) & 0XFF);
 80017d8:	4b32      	ldr	r3, [pc, #200]	; (80018a4 <LCD_Scan_Dir+0x61c>)
 80017da:	f44f 7280 	mov.w	r2, #256	; 0x100
 80017de:	611a      	str	r2, [r3, #16]
 80017e0:	4b30      	ldr	r3, [pc, #192]	; (80018a4 <LCD_Scan_Dir+0x61c>)
 80017e2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80017e6:	615a      	str	r2, [r3, #20]
 80017e8:	4b2d      	ldr	r3, [pc, #180]	; (80018a0 <LCD_Scan_Dir+0x618>)
 80017ea:	885b      	ldrh	r3, [r3, #2]
 80017ec:	3b01      	subs	r3, #1
 80017ee:	4a2e      	ldr	r2, [pc, #184]	; (80018a8 <LCD_Scan_Dir+0x620>)
 80017f0:	b2db      	uxtb	r3, r3
 80017f2:	60d3      	str	r3, [r2, #12]
 80017f4:	4b2b      	ldr	r3, [pc, #172]	; (80018a4 <LCD_Scan_Dir+0x61c>)
 80017f6:	2280      	movs	r2, #128	; 0x80
 80017f8:	615a      	str	r2, [r3, #20]
 80017fa:	4b2a      	ldr	r3, [pc, #168]	; (80018a4 <LCD_Scan_Dir+0x61c>)
 80017fc:	2280      	movs	r2, #128	; 0x80
 80017fe:	611a      	str	r2, [r3, #16]
 8001800:	4b28      	ldr	r3, [pc, #160]	; (80018a4 <LCD_Scan_Dir+0x61c>)
 8001802:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001806:	611a      	str	r2, [r3, #16]
		if (lcddev.id == 0X5510) {
 8001808:	e046      	b.n	8001898 <LCD_Scan_Dir+0x610>
		}
	} else {
		switch (dir) {
 800180a:	79fb      	ldrb	r3, [r7, #7]
 800180c:	2b07      	cmp	r3, #7
 800180e:	d836      	bhi.n	800187e <LCD_Scan_Dir+0x5f6>
 8001810:	a201      	add	r2, pc, #4	; (adr r2, 8001818 <LCD_Scan_Dir+0x590>)
 8001812:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001816:	bf00      	nop
 8001818:	08001839 	.word	0x08001839
 800181c:	08001843 	.word	0x08001843
 8001820:	0800184d 	.word	0x0800184d
 8001824:	0800187f 	.word	0x0800187f
 8001828:	08001857 	.word	0x08001857
 800182c:	08001861 	.word	0x08001861
 8001830:	0800186b 	.word	0x0800186b
 8001834:	08001875 	.word	0x08001875
		case L2R_U2D:	//从左到右,从上到下
			regval |= (1 << 5) | (1 << 4) | (0 << 3);
 8001838:	89fb      	ldrh	r3, [r7, #14]
 800183a:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 800183e:	81fb      	strh	r3, [r7, #14]
			break;
 8001840:	e01d      	b.n	800187e <LCD_Scan_Dir+0x5f6>
		case L2R_D2U:	//从左到右,从下到上
			regval |= (0 << 5) | (1 << 4) | (0 << 3);
 8001842:	89fb      	ldrh	r3, [r7, #14]
 8001844:	f043 0310 	orr.w	r3, r3, #16
 8001848:	81fb      	strh	r3, [r7, #14]
			break;
 800184a:	e018      	b.n	800187e <LCD_Scan_Dir+0x5f6>
		case R2L_U2D:	//从右到左,从上到下
			regval |= (1 << 5) | (0 << 4) | (0 << 3);
 800184c:	89fb      	ldrh	r3, [r7, #14]
 800184e:	f043 0320 	orr.w	r3, r3, #32
 8001852:	81fb      	strh	r3, [r7, #14]
			break;
 8001854:	e013      	b.n	800187e <LCD_Scan_Dir+0x5f6>
		case R2L_D2U:	//从右到左,从下到上
			regval |= (0 << 5) | (0 << 4) | (0 << 3);
			break;
		case U2D_L2R:	//从上到下,从左到右
			regval |= (1 << 5) | (1 << 4) | (1 << 3);
 8001856:	89fb      	ldrh	r3, [r7, #14]
 8001858:	f043 0338 	orr.w	r3, r3, #56	; 0x38
 800185c:	81fb      	strh	r3, [r7, #14]
			break;
 800185e:	e00e      	b.n	800187e <LCD_Scan_Dir+0x5f6>
		case U2D_R2L:	//从上到下,从右到左
			regval |= (1 << 5) | (0 << 4) | (1 << 3);
 8001860:	89fb      	ldrh	r3, [r7, #14]
 8001862:	f043 0328 	orr.w	r3, r3, #40	; 0x28
 8001866:	81fb      	strh	r3, [r7, #14]
			break;
 8001868:	e009      	b.n	800187e <LCD_Scan_Dir+0x5f6>
		case D2U_L2R:	//从下到上,从左到右
			regval |= (0 << 5) | (1 << 4) | (1 << 3);
 800186a:	89fb      	ldrh	r3, [r7, #14]
 800186c:	f043 0318 	orr.w	r3, r3, #24
 8001870:	81fb      	strh	r3, [r7, #14]
			break;
 8001872:	e004      	b.n	800187e <LCD_Scan_Dir+0x5f6>
		case D2U_R2L:	//从下到上,从右到左
			regval |= (0 << 5) | (0 << 4) | (1 << 3);
 8001874:	89fb      	ldrh	r3, [r7, #14]
 8001876:	f043 0308 	orr.w	r3, r3, #8
 800187a:	81fb      	strh	r3, [r7, #14]
			break;
 800187c:	bf00      	nop
		}
		dirreg = 0X03;
 800187e:	2303      	movs	r3, #3
 8001880:	81bb      	strh	r3, [r7, #12]
		regval |= 1 << 12;
 8001882:	89fb      	ldrh	r3, [r7, #14]
 8001884:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001888:	81fb      	strh	r3, [r7, #14]
		LCD_WriteReg(dirreg, regval);
 800188a:	89fa      	ldrh	r2, [r7, #14]
 800188c:	89bb      	ldrh	r3, [r7, #12]
 800188e:	4611      	mov	r1, r2
 8001890:	4618      	mov	r0, r3
 8001892:	f7ff f9e7 	bl	8000c64 <LCD_WriteReg>
	}
}
 8001896:	bf00      	nop
 8001898:	bf00      	nop
 800189a:	3710      	adds	r7, #16
 800189c:	46bd      	mov	sp, r7
 800189e:	bd80      	pop	{r7, pc}
 80018a0:	20000028 	.word	0x20000028
 80018a4:	40011000 	.word	0x40011000
 80018a8:	40010c00 	.word	0x40010c00
 80018ac:	00000000 	.word	0x00000000

080018b0 <LCD_SSD_BackLightSet>:
	LCD_CS_SET;
	LCD_WR_DATA(color);		//写数据
}
//SSD1963 背光设置
//pwm:背光等级,0~100.越大越亮.
void LCD_SSD_BackLightSet(uint8_t pwm) {
 80018b0:	b590      	push	{r4, r7, lr}
 80018b2:	b083      	sub	sp, #12
 80018b4:	af00      	add	r7, sp, #0
 80018b6:	4603      	mov	r3, r0
 80018b8:	71fb      	strb	r3, [r7, #7]
	LCD_WR_REG(0xBE);	//配置PWM输出
 80018ba:	20be      	movs	r0, #190	; 0xbe
 80018bc:	f7ff f946 	bl	8000b4c <LCD_WR_REG>
	LCD_WR_DATA(0x05);	//1设置PWM频率
 80018c0:	4b4b      	ldr	r3, [pc, #300]	; (80019f0 <LCD_SSD_BackLightSet+0x140>)
 80018c2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80018c6:	611a      	str	r2, [r3, #16]
 80018c8:	4b49      	ldr	r3, [pc, #292]	; (80019f0 <LCD_SSD_BackLightSet+0x140>)
 80018ca:	f44f 7200 	mov.w	r2, #512	; 0x200
 80018ce:	615a      	str	r2, [r3, #20]
 80018d0:	4b48      	ldr	r3, [pc, #288]	; (80019f4 <LCD_SSD_BackLightSet+0x144>)
 80018d2:	2205      	movs	r2, #5
 80018d4:	60da      	str	r2, [r3, #12]
 80018d6:	4b46      	ldr	r3, [pc, #280]	; (80019f0 <LCD_SSD_BackLightSet+0x140>)
 80018d8:	2280      	movs	r2, #128	; 0x80
 80018da:	615a      	str	r2, [r3, #20]
 80018dc:	4b44      	ldr	r3, [pc, #272]	; (80019f0 <LCD_SSD_BackLightSet+0x140>)
 80018de:	2280      	movs	r2, #128	; 0x80
 80018e0:	611a      	str	r2, [r3, #16]
 80018e2:	4b43      	ldr	r3, [pc, #268]	; (80019f0 <LCD_SSD_BackLightSet+0x140>)
 80018e4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80018e8:	611a      	str	r2, [r3, #16]
	LCD_WR_DATA(pwm * 2.55);	//2设置PWM占空比
 80018ea:	4b41      	ldr	r3, [pc, #260]	; (80019f0 <LCD_SSD_BackLightSet+0x140>)
 80018ec:	f44f 7280 	mov.w	r2, #256	; 0x100
 80018f0:	611a      	str	r2, [r3, #16]
 80018f2:	4b3f      	ldr	r3, [pc, #252]	; (80019f0 <LCD_SSD_BackLightSet+0x140>)
 80018f4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80018f8:	615a      	str	r2, [r3, #20]
 80018fa:	79fb      	ldrb	r3, [r7, #7]
 80018fc:	4618      	mov	r0, r3
 80018fe:	f7fe fde5 	bl	80004cc <__aeabi_i2d>
 8001902:	a339      	add	r3, pc, #228	; (adr r3, 80019e8 <LCD_SSD_BackLightSet+0x138>)
 8001904:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001908:	f7fe fe4a 	bl	80005a0 <__aeabi_dmul>
 800190c:	4602      	mov	r2, r0
 800190e:	460b      	mov	r3, r1
 8001910:	4c38      	ldr	r4, [pc, #224]	; (80019f4 <LCD_SSD_BackLightSet+0x144>)
 8001912:	4610      	mov	r0, r2
 8001914:	4619      	mov	r1, r3
 8001916:	f7ff f855 	bl	80009c4 <__aeabi_d2uiz>
 800191a:	4603      	mov	r3, r0
 800191c:	60e3      	str	r3, [r4, #12]
 800191e:	4b34      	ldr	r3, [pc, #208]	; (80019f0 <LCD_SSD_BackLightSet+0x140>)
 8001920:	2280      	movs	r2, #128	; 0x80
 8001922:	615a      	str	r2, [r3, #20]
 8001924:	4b32      	ldr	r3, [pc, #200]	; (80019f0 <LCD_SSD_BackLightSet+0x140>)
 8001926:	2280      	movs	r2, #128	; 0x80
 8001928:	611a      	str	r2, [r3, #16]
 800192a:	4b31      	ldr	r3, [pc, #196]	; (80019f0 <LCD_SSD_BackLightSet+0x140>)
 800192c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001930:	611a      	str	r2, [r3, #16]
	LCD_WR_DATA(0x01);	//3设置C
 8001932:	4b2f      	ldr	r3, [pc, #188]	; (80019f0 <LCD_SSD_BackLightSet+0x140>)
 8001934:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001938:	611a      	str	r2, [r3, #16]
 800193a:	4b2d      	ldr	r3, [pc, #180]	; (80019f0 <LCD_SSD_BackLightSet+0x140>)
 800193c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001940:	615a      	str	r2, [r3, #20]
 8001942:	4b2c      	ldr	r3, [pc, #176]	; (80019f4 <LCD_SSD_BackLightSet+0x144>)
 8001944:	2201      	movs	r2, #1
 8001946:	60da      	str	r2, [r3, #12]
 8001948:	4b29      	ldr	r3, [pc, #164]	; (80019f0 <LCD_SSD_BackLightSet+0x140>)
 800194a:	2280      	movs	r2, #128	; 0x80
 800194c:	615a      	str	r2, [r3, #20]
 800194e:	4b28      	ldr	r3, [pc, #160]	; (80019f0 <LCD_SSD_BackLightSet+0x140>)
 8001950:	2280      	movs	r2, #128	; 0x80
 8001952:	611a      	str	r2, [r3, #16]
 8001954:	4b26      	ldr	r3, [pc, #152]	; (80019f0 <LCD_SSD_BackLightSet+0x140>)
 8001956:	f44f 7200 	mov.w	r2, #512	; 0x200
 800195a:	611a      	str	r2, [r3, #16]
	LCD_WR_DATA(0xFF);	//4设置D
 800195c:	4b24      	ldr	r3, [pc, #144]	; (80019f0 <LCD_SSD_BackLightSet+0x140>)
 800195e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001962:	611a      	str	r2, [r3, #16]
 8001964:	4b22      	ldr	r3, [pc, #136]	; (80019f0 <LCD_SSD_BackLightSet+0x140>)
 8001966:	f44f 7200 	mov.w	r2, #512	; 0x200
 800196a:	615a      	str	r2, [r3, #20]
 800196c:	4b21      	ldr	r3, [pc, #132]	; (80019f4 <LCD_SSD_BackLightSet+0x144>)
 800196e:	22ff      	movs	r2, #255	; 0xff
 8001970:	60da      	str	r2, [r3, #12]
 8001972:	4b1f      	ldr	r3, [pc, #124]	; (80019f0 <LCD_SSD_BackLightSet+0x140>)
 8001974:	2280      	movs	r2, #128	; 0x80
 8001976:	615a      	str	r2, [r3, #20]
 8001978:	4b1d      	ldr	r3, [pc, #116]	; (80019f0 <LCD_SSD_BackLightSet+0x140>)
 800197a:	2280      	movs	r2, #128	; 0x80
 800197c:	611a      	str	r2, [r3, #16]
 800197e:	4b1c      	ldr	r3, [pc, #112]	; (80019f0 <LCD_SSD_BackLightSet+0x140>)
 8001980:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001984:	611a      	str	r2, [r3, #16]
	LCD_WR_DATA(0x00);	//5设置E
 8001986:	4b1a      	ldr	r3, [pc, #104]	; (80019f0 <LCD_SSD_BackLightSet+0x140>)
 8001988:	f44f 7280 	mov.w	r2, #256	; 0x100
 800198c:	611a      	str	r2, [r3, #16]
 800198e:	4b18      	ldr	r3, [pc, #96]	; (80019f0 <LCD_SSD_BackLightSet+0x140>)
 8001990:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001994:	615a      	str	r2, [r3, #20]
 8001996:	4b17      	ldr	r3, [pc, #92]	; (80019f4 <LCD_SSD_BackLightSet+0x144>)
 8001998:	2200      	movs	r2, #0
 800199a:	60da      	str	r2, [r3, #12]
 800199c:	4b14      	ldr	r3, [pc, #80]	; (80019f0 <LCD_SSD_BackLightSet+0x140>)
 800199e:	2280      	movs	r2, #128	; 0x80
 80019a0:	615a      	str	r2, [r3, #20]
 80019a2:	4b13      	ldr	r3, [pc, #76]	; (80019f0 <LCD_SSD_BackLightSet+0x140>)
 80019a4:	2280      	movs	r2, #128	; 0x80
 80019a6:	611a      	str	r2, [r3, #16]
 80019a8:	4b11      	ldr	r3, [pc, #68]	; (80019f0 <LCD_SSD_BackLightSet+0x140>)
 80019aa:	f44f 7200 	mov.w	r2, #512	; 0x200
 80019ae:	611a      	str	r2, [r3, #16]
	LCD_WR_DATA(0x00);	//6设置F
 80019b0:	4b0f      	ldr	r3, [pc, #60]	; (80019f0 <LCD_SSD_BackLightSet+0x140>)
 80019b2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80019b6:	611a      	str	r2, [r3, #16]
 80019b8:	4b0d      	ldr	r3, [pc, #52]	; (80019f0 <LCD_SSD_BackLightSet+0x140>)
 80019ba:	f44f 7200 	mov.w	r2, #512	; 0x200
 80019be:	615a      	str	r2, [r3, #20]
 80019c0:	4b0c      	ldr	r3, [pc, #48]	; (80019f4 <LCD_SSD_BackLightSet+0x144>)
 80019c2:	2200      	movs	r2, #0
 80019c4:	60da      	str	r2, [r3, #12]
 80019c6:	4b0a      	ldr	r3, [pc, #40]	; (80019f0 <LCD_SSD_BackLightSet+0x140>)
 80019c8:	2280      	movs	r2, #128	; 0x80
 80019ca:	615a      	str	r2, [r3, #20]
 80019cc:	4b08      	ldr	r3, [pc, #32]	; (80019f0 <LCD_SSD_BackLightSet+0x140>)
 80019ce:	2280      	movs	r2, #128	; 0x80
 80019d0:	611a      	str	r2, [r3, #16]
 80019d2:	4b07      	ldr	r3, [pc, #28]	; (80019f0 <LCD_SSD_BackLightSet+0x140>)
 80019d4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80019d8:	611a      	str	r2, [r3, #16]
}
 80019da:	bf00      	nop
 80019dc:	370c      	adds	r7, #12
 80019de:	46bd      	mov	sp, r7
 80019e0:	bd90      	pop	{r4, r7, pc}
 80019e2:	bf00      	nop
 80019e4:	f3af 8000 	nop.w
 80019e8:	66666666 	.word	0x66666666
 80019ec:	40046666 	.word	0x40046666
 80019f0:	40011000 	.word	0x40011000
 80019f4:	40010c00 	.word	0x40010c00

080019f8 <LCD_Display_Dir>:
// Set LCD display direction
// dir: 0, vertical 1, horizontal
void LCD_Display_Dir(uint8_t dir) {
 80019f8:	b580      	push	{r7, lr}
 80019fa:	b082      	sub	sp, #8
 80019fc:	af00      	add	r7, sp, #0
 80019fe:	4603      	mov	r3, r0
 8001a00:	71fb      	strb	r3, [r7, #7]
	if (dir == 0)			//竖屏
 8001a02:	79fb      	ldrb	r3, [r7, #7]
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	d177      	bne.n	8001af8 <LCD_Display_Dir+0x100>
			{
		lcddev.dir = 0;	//竖屏
 8001a08:	4b80      	ldr	r3, [pc, #512]	; (8001c0c <LCD_Display_Dir+0x214>)
 8001a0a:	2200      	movs	r2, #0
 8001a0c:	719a      	strb	r2, [r3, #6]
		lcddev.width = 240;
 8001a0e:	4b7f      	ldr	r3, [pc, #508]	; (8001c0c <LCD_Display_Dir+0x214>)
 8001a10:	22f0      	movs	r2, #240	; 0xf0
 8001a12:	801a      	strh	r2, [r3, #0]
		lcddev.height = 320;
 8001a14:	4b7d      	ldr	r3, [pc, #500]	; (8001c0c <LCD_Display_Dir+0x214>)
 8001a16:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8001a1a:	805a      	strh	r2, [r3, #2]
		if (lcddev.id == 0X9341 || lcddev.id == 0X6804 || lcddev.id == 0X5310) {
 8001a1c:	4b7b      	ldr	r3, [pc, #492]	; (8001c0c <LCD_Display_Dir+0x214>)
 8001a1e:	889b      	ldrh	r3, [r3, #4]
 8001a20:	f249 3241 	movw	r2, #37697	; 0x9341
 8001a24:	4293      	cmp	r3, r2
 8001a26:	d00b      	beq.n	8001a40 <LCD_Display_Dir+0x48>
 8001a28:	4b78      	ldr	r3, [pc, #480]	; (8001c0c <LCD_Display_Dir+0x214>)
 8001a2a:	889b      	ldrh	r3, [r3, #4]
 8001a2c:	f646 0204 	movw	r2, #26628	; 0x6804
 8001a30:	4293      	cmp	r3, r2
 8001a32:	d005      	beq.n	8001a40 <LCD_Display_Dir+0x48>
 8001a34:	4b75      	ldr	r3, [pc, #468]	; (8001c0c <LCD_Display_Dir+0x214>)
 8001a36:	889b      	ldrh	r3, [r3, #4]
 8001a38:	f245 3210 	movw	r2, #21264	; 0x5310
 8001a3c:	4293      	cmp	r3, r2
 8001a3e:	d11e      	bne.n	8001a7e <LCD_Display_Dir+0x86>
			lcddev.wramcmd = 0X2C;
 8001a40:	4b72      	ldr	r3, [pc, #456]	; (8001c0c <LCD_Display_Dir+0x214>)
 8001a42:	222c      	movs	r2, #44	; 0x2c
 8001a44:	811a      	strh	r2, [r3, #8]
			lcddev.setxcmd = 0X2A;
 8001a46:	4b71      	ldr	r3, [pc, #452]	; (8001c0c <LCD_Display_Dir+0x214>)
 8001a48:	222a      	movs	r2, #42	; 0x2a
 8001a4a:	815a      	strh	r2, [r3, #10]
			lcddev.setycmd = 0X2B;
 8001a4c:	4b6f      	ldr	r3, [pc, #444]	; (8001c0c <LCD_Display_Dir+0x214>)
 8001a4e:	222b      	movs	r2, #43	; 0x2b
 8001a50:	819a      	strh	r2, [r3, #12]
			if (lcddev.id == 0X6804 || lcddev.id == 0X5310) {
 8001a52:	4b6e      	ldr	r3, [pc, #440]	; (8001c0c <LCD_Display_Dir+0x214>)
 8001a54:	889b      	ldrh	r3, [r3, #4]
 8001a56:	f646 0204 	movw	r2, #26628	; 0x6804
 8001a5a:	4293      	cmp	r3, r2
 8001a5c:	d006      	beq.n	8001a6c <LCD_Display_Dir+0x74>
 8001a5e:	4b6b      	ldr	r3, [pc, #428]	; (8001c0c <LCD_Display_Dir+0x214>)
 8001a60:	889b      	ldrh	r3, [r3, #4]
 8001a62:	f245 3210 	movw	r2, #21264	; 0x5310
 8001a66:	4293      	cmp	r3, r2
 8001a68:	f040 80c7 	bne.w	8001bfa <LCD_Display_Dir+0x202>
				lcddev.width = 320;
 8001a6c:	4b67      	ldr	r3, [pc, #412]	; (8001c0c <LCD_Display_Dir+0x214>)
 8001a6e:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8001a72:	801a      	strh	r2, [r3, #0]
				lcddev.height = 480;
 8001a74:	4b65      	ldr	r3, [pc, #404]	; (8001c0c <LCD_Display_Dir+0x214>)
 8001a76:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8001a7a:	805a      	strh	r2, [r3, #2]
			if (lcddev.id == 0X6804 || lcddev.id == 0X5310) {
 8001a7c:	e0bd      	b.n	8001bfa <LCD_Display_Dir+0x202>
			}
		} else if (lcddev.id == 0x5510) {
 8001a7e:	4b63      	ldr	r3, [pc, #396]	; (8001c0c <LCD_Display_Dir+0x214>)
 8001a80:	889b      	ldrh	r3, [r3, #4]
 8001a82:	f245 5210 	movw	r2, #21776	; 0x5510
 8001a86:	4293      	cmp	r3, r2
 8001a88:	d114      	bne.n	8001ab4 <LCD_Display_Dir+0xbc>
			lcddev.wramcmd = 0X2C00;
 8001a8a:	4b60      	ldr	r3, [pc, #384]	; (8001c0c <LCD_Display_Dir+0x214>)
 8001a8c:	f44f 5230 	mov.w	r2, #11264	; 0x2c00
 8001a90:	811a      	strh	r2, [r3, #8]
			lcddev.setxcmd = 0X2A00;
 8001a92:	4b5e      	ldr	r3, [pc, #376]	; (8001c0c <LCD_Display_Dir+0x214>)
 8001a94:	f44f 5228 	mov.w	r2, #10752	; 0x2a00
 8001a98:	815a      	strh	r2, [r3, #10]
			lcddev.setycmd = 0X2B00;
 8001a9a:	4b5c      	ldr	r3, [pc, #368]	; (8001c0c <LCD_Display_Dir+0x214>)
 8001a9c:	f44f 522c 	mov.w	r2, #11008	; 0x2b00
 8001aa0:	819a      	strh	r2, [r3, #12]
			lcddev.width = 480;
 8001aa2:	4b5a      	ldr	r3, [pc, #360]	; (8001c0c <LCD_Display_Dir+0x214>)
 8001aa4:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8001aa8:	801a      	strh	r2, [r3, #0]
			lcddev.height = 800;
 8001aaa:	4b58      	ldr	r3, [pc, #352]	; (8001c0c <LCD_Display_Dir+0x214>)
 8001aac:	f44f 7248 	mov.w	r2, #800	; 0x320
 8001ab0:	805a      	strh	r2, [r3, #2]
 8001ab2:	e0a3      	b.n	8001bfc <LCD_Display_Dir+0x204>
		} else if (lcddev.id == 0X1963) {
 8001ab4:	4b55      	ldr	r3, [pc, #340]	; (8001c0c <LCD_Display_Dir+0x214>)
 8001ab6:	889b      	ldrh	r3, [r3, #4]
 8001ab8:	f641 1263 	movw	r2, #6499	; 0x1963
 8001abc:	4293      	cmp	r3, r2
 8001abe:	d111      	bne.n	8001ae4 <LCD_Display_Dir+0xec>
			lcddev.wramcmd = 0X2C;	//设置写入GRAM的指令
 8001ac0:	4b52      	ldr	r3, [pc, #328]	; (8001c0c <LCD_Display_Dir+0x214>)
 8001ac2:	222c      	movs	r2, #44	; 0x2c
 8001ac4:	811a      	strh	r2, [r3, #8]
			lcddev.setxcmd = 0X2B;	//设置写X坐标指令
 8001ac6:	4b51      	ldr	r3, [pc, #324]	; (8001c0c <LCD_Display_Dir+0x214>)
 8001ac8:	222b      	movs	r2, #43	; 0x2b
 8001aca:	815a      	strh	r2, [r3, #10]
			lcddev.setycmd = 0X2A;	//设置写Y坐标指令
 8001acc:	4b4f      	ldr	r3, [pc, #316]	; (8001c0c <LCD_Display_Dir+0x214>)
 8001ace:	222a      	movs	r2, #42	; 0x2a
 8001ad0:	819a      	strh	r2, [r3, #12]
			lcddev.width = 480;		//设置宽度480
 8001ad2:	4b4e      	ldr	r3, [pc, #312]	; (8001c0c <LCD_Display_Dir+0x214>)
 8001ad4:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8001ad8:	801a      	strh	r2, [r3, #0]
			lcddev.height = 800;		//设置高度800
 8001ada:	4b4c      	ldr	r3, [pc, #304]	; (8001c0c <LCD_Display_Dir+0x214>)
 8001adc:	f44f 7248 	mov.w	r2, #800	; 0x320
 8001ae0:	805a      	strh	r2, [r3, #2]
 8001ae2:	e08b      	b.n	8001bfc <LCD_Display_Dir+0x204>
		} else {
			lcddev.wramcmd = 0X22;
 8001ae4:	4b49      	ldr	r3, [pc, #292]	; (8001c0c <LCD_Display_Dir+0x214>)
 8001ae6:	2222      	movs	r2, #34	; 0x22
 8001ae8:	811a      	strh	r2, [r3, #8]
			lcddev.setxcmd = 0X20;
 8001aea:	4b48      	ldr	r3, [pc, #288]	; (8001c0c <LCD_Display_Dir+0x214>)
 8001aec:	2220      	movs	r2, #32
 8001aee:	815a      	strh	r2, [r3, #10]
			lcddev.setycmd = 0X21;
 8001af0:	4b46      	ldr	r3, [pc, #280]	; (8001c0c <LCD_Display_Dir+0x214>)
 8001af2:	2221      	movs	r2, #33	; 0x21
 8001af4:	819a      	strh	r2, [r3, #12]
 8001af6:	e081      	b.n	8001bfc <LCD_Display_Dir+0x204>
		}
	} else 				//横屏
	{
		lcddev.dir = 1;	//横屏
 8001af8:	4b44      	ldr	r3, [pc, #272]	; (8001c0c <LCD_Display_Dir+0x214>)
 8001afa:	2201      	movs	r2, #1
 8001afc:	719a      	strb	r2, [r3, #6]
		lcddev.width = 320;
 8001afe:	4b43      	ldr	r3, [pc, #268]	; (8001c0c <LCD_Display_Dir+0x214>)
 8001b00:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8001b04:	801a      	strh	r2, [r3, #0]
		lcddev.height = 240;
 8001b06:	4b41      	ldr	r3, [pc, #260]	; (8001c0c <LCD_Display_Dir+0x214>)
 8001b08:	22f0      	movs	r2, #240	; 0xf0
 8001b0a:	805a      	strh	r2, [r3, #2]
		if (lcddev.id == 0X9341 || lcddev.id == 0X5310) {
 8001b0c:	4b3f      	ldr	r3, [pc, #252]	; (8001c0c <LCD_Display_Dir+0x214>)
 8001b0e:	889b      	ldrh	r3, [r3, #4]
 8001b10:	f249 3241 	movw	r2, #37697	; 0x9341
 8001b14:	4293      	cmp	r3, r2
 8001b16:	d005      	beq.n	8001b24 <LCD_Display_Dir+0x12c>
 8001b18:	4b3c      	ldr	r3, [pc, #240]	; (8001c0c <LCD_Display_Dir+0x214>)
 8001b1a:	889b      	ldrh	r3, [r3, #4]
 8001b1c:	f245 3210 	movw	r2, #21264	; 0x5310
 8001b20:	4293      	cmp	r3, r2
 8001b22:	d109      	bne.n	8001b38 <LCD_Display_Dir+0x140>
			lcddev.wramcmd = 0X2C;
 8001b24:	4b39      	ldr	r3, [pc, #228]	; (8001c0c <LCD_Display_Dir+0x214>)
 8001b26:	222c      	movs	r2, #44	; 0x2c
 8001b28:	811a      	strh	r2, [r3, #8]
			lcddev.setxcmd = 0X2A;
 8001b2a:	4b38      	ldr	r3, [pc, #224]	; (8001c0c <LCD_Display_Dir+0x214>)
 8001b2c:	222a      	movs	r2, #42	; 0x2a
 8001b2e:	815a      	strh	r2, [r3, #10]
			lcddev.setycmd = 0X2B;
 8001b30:	4b36      	ldr	r3, [pc, #216]	; (8001c0c <LCD_Display_Dir+0x214>)
 8001b32:	222b      	movs	r2, #43	; 0x2b
 8001b34:	819a      	strh	r2, [r3, #12]
 8001b36:	e04b      	b.n	8001bd0 <LCD_Display_Dir+0x1d8>
		} else if (lcddev.id == 0X6804) {
 8001b38:	4b34      	ldr	r3, [pc, #208]	; (8001c0c <LCD_Display_Dir+0x214>)
 8001b3a:	889b      	ldrh	r3, [r3, #4]
 8001b3c:	f646 0204 	movw	r2, #26628	; 0x6804
 8001b40:	4293      	cmp	r3, r2
 8001b42:	d109      	bne.n	8001b58 <LCD_Display_Dir+0x160>
			lcddev.wramcmd = 0X2C;
 8001b44:	4b31      	ldr	r3, [pc, #196]	; (8001c0c <LCD_Display_Dir+0x214>)
 8001b46:	222c      	movs	r2, #44	; 0x2c
 8001b48:	811a      	strh	r2, [r3, #8]
			lcddev.setxcmd = 0X2B;
 8001b4a:	4b30      	ldr	r3, [pc, #192]	; (8001c0c <LCD_Display_Dir+0x214>)
 8001b4c:	222b      	movs	r2, #43	; 0x2b
 8001b4e:	815a      	strh	r2, [r3, #10]
			lcddev.setycmd = 0X2A;
 8001b50:	4b2e      	ldr	r3, [pc, #184]	; (8001c0c <LCD_Display_Dir+0x214>)
 8001b52:	222a      	movs	r2, #42	; 0x2a
 8001b54:	819a      	strh	r2, [r3, #12]
 8001b56:	e03b      	b.n	8001bd0 <LCD_Display_Dir+0x1d8>
		} else if (lcddev.id == 0x5510) {
 8001b58:	4b2c      	ldr	r3, [pc, #176]	; (8001c0c <LCD_Display_Dir+0x214>)
 8001b5a:	889b      	ldrh	r3, [r3, #4]
 8001b5c:	f245 5210 	movw	r2, #21776	; 0x5510
 8001b60:	4293      	cmp	r3, r2
 8001b62:	d114      	bne.n	8001b8e <LCD_Display_Dir+0x196>
			lcddev.wramcmd = 0X2C00;
 8001b64:	4b29      	ldr	r3, [pc, #164]	; (8001c0c <LCD_Display_Dir+0x214>)
 8001b66:	f44f 5230 	mov.w	r2, #11264	; 0x2c00
 8001b6a:	811a      	strh	r2, [r3, #8]
			lcddev.setxcmd = 0X2A00;
 8001b6c:	4b27      	ldr	r3, [pc, #156]	; (8001c0c <LCD_Display_Dir+0x214>)
 8001b6e:	f44f 5228 	mov.w	r2, #10752	; 0x2a00
 8001b72:	815a      	strh	r2, [r3, #10]
			lcddev.setycmd = 0X2B00;
 8001b74:	4b25      	ldr	r3, [pc, #148]	; (8001c0c <LCD_Display_Dir+0x214>)
 8001b76:	f44f 522c 	mov.w	r2, #11008	; 0x2b00
 8001b7a:	819a      	strh	r2, [r3, #12]
			lcddev.width = 800;
 8001b7c:	4b23      	ldr	r3, [pc, #140]	; (8001c0c <LCD_Display_Dir+0x214>)
 8001b7e:	f44f 7248 	mov.w	r2, #800	; 0x320
 8001b82:	801a      	strh	r2, [r3, #0]
			lcddev.height = 480;
 8001b84:	4b21      	ldr	r3, [pc, #132]	; (8001c0c <LCD_Display_Dir+0x214>)
 8001b86:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8001b8a:	805a      	strh	r2, [r3, #2]
 8001b8c:	e020      	b.n	8001bd0 <LCD_Display_Dir+0x1d8>
		} else if (lcddev.id == 0X1963) {
 8001b8e:	4b1f      	ldr	r3, [pc, #124]	; (8001c0c <LCD_Display_Dir+0x214>)
 8001b90:	889b      	ldrh	r3, [r3, #4]
 8001b92:	f641 1263 	movw	r2, #6499	; 0x1963
 8001b96:	4293      	cmp	r3, r2
 8001b98:	d111      	bne.n	8001bbe <LCD_Display_Dir+0x1c6>
			lcddev.wramcmd = 0X2C;	//设置写入GRAM的指令
 8001b9a:	4b1c      	ldr	r3, [pc, #112]	; (8001c0c <LCD_Display_Dir+0x214>)
 8001b9c:	222c      	movs	r2, #44	; 0x2c
 8001b9e:	811a      	strh	r2, [r3, #8]
			lcddev.setxcmd = 0X2A;	//设置写X坐标指令
 8001ba0:	4b1a      	ldr	r3, [pc, #104]	; (8001c0c <LCD_Display_Dir+0x214>)
 8001ba2:	222a      	movs	r2, #42	; 0x2a
 8001ba4:	815a      	strh	r2, [r3, #10]
			lcddev.setycmd = 0X2B;	//设置写Y坐标指令
 8001ba6:	4b19      	ldr	r3, [pc, #100]	; (8001c0c <LCD_Display_Dir+0x214>)
 8001ba8:	222b      	movs	r2, #43	; 0x2b
 8001baa:	819a      	strh	r2, [r3, #12]
			lcddev.width = 800;		//设置宽度800
 8001bac:	4b17      	ldr	r3, [pc, #92]	; (8001c0c <LCD_Display_Dir+0x214>)
 8001bae:	f44f 7248 	mov.w	r2, #800	; 0x320
 8001bb2:	801a      	strh	r2, [r3, #0]
			lcddev.height = 480;		//设置高度480
 8001bb4:	4b15      	ldr	r3, [pc, #84]	; (8001c0c <LCD_Display_Dir+0x214>)
 8001bb6:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8001bba:	805a      	strh	r2, [r3, #2]
 8001bbc:	e008      	b.n	8001bd0 <LCD_Display_Dir+0x1d8>
		} else {
			lcddev.wramcmd = 0X22;
 8001bbe:	4b13      	ldr	r3, [pc, #76]	; (8001c0c <LCD_Display_Dir+0x214>)
 8001bc0:	2222      	movs	r2, #34	; 0x22
 8001bc2:	811a      	strh	r2, [r3, #8]
			lcddev.setxcmd = 0X21;
 8001bc4:	4b11      	ldr	r3, [pc, #68]	; (8001c0c <LCD_Display_Dir+0x214>)
 8001bc6:	2221      	movs	r2, #33	; 0x21
 8001bc8:	815a      	strh	r2, [r3, #10]
			lcddev.setycmd = 0X20;
 8001bca:	4b10      	ldr	r3, [pc, #64]	; (8001c0c <LCD_Display_Dir+0x214>)
 8001bcc:	2220      	movs	r2, #32
 8001bce:	819a      	strh	r2, [r3, #12]
		}
		if (lcddev.id == 0X6804 || lcddev.id == 0X5310) {
 8001bd0:	4b0e      	ldr	r3, [pc, #56]	; (8001c0c <LCD_Display_Dir+0x214>)
 8001bd2:	889b      	ldrh	r3, [r3, #4]
 8001bd4:	f646 0204 	movw	r2, #26628	; 0x6804
 8001bd8:	4293      	cmp	r3, r2
 8001bda:	d005      	beq.n	8001be8 <LCD_Display_Dir+0x1f0>
 8001bdc:	4b0b      	ldr	r3, [pc, #44]	; (8001c0c <LCD_Display_Dir+0x214>)
 8001bde:	889b      	ldrh	r3, [r3, #4]
 8001be0:	f245 3210 	movw	r2, #21264	; 0x5310
 8001be4:	4293      	cmp	r3, r2
 8001be6:	d109      	bne.n	8001bfc <LCD_Display_Dir+0x204>
			lcddev.width = 480;
 8001be8:	4b08      	ldr	r3, [pc, #32]	; (8001c0c <LCD_Display_Dir+0x214>)
 8001bea:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8001bee:	801a      	strh	r2, [r3, #0]
			lcddev.height = 320;
 8001bf0:	4b06      	ldr	r3, [pc, #24]	; (8001c0c <LCD_Display_Dir+0x214>)
 8001bf2:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8001bf6:	805a      	strh	r2, [r3, #2]
 8001bf8:	e000      	b.n	8001bfc <LCD_Display_Dir+0x204>
			if (lcddev.id == 0X6804 || lcddev.id == 0X5310) {
 8001bfa:	bf00      	nop
		}
	}
	LCD_Scan_Dir(DFT_SCAN_DIR);	//默认扫描方向
 8001bfc:	2000      	movs	r0, #0
 8001bfe:	f7ff fb43 	bl	8001288 <LCD_Scan_Dir>
}
 8001c02:	bf00      	nop
 8001c04:	3708      	adds	r7, #8
 8001c06:	46bd      	mov	sp, r7
 8001c08:	bd80      	pop	{r7, pc}
 8001c0a:	bf00      	nop
 8001c0c:	20000028 	.word	0x20000028

08001c10 <LCD_Init>:
	}
}
//初始化lcd
//该初始化函数可以初始化各种ALIENTEK出品的LCD液晶屏
//本函数占用较大flash,用户可以根据自己的实际情况,删掉未用到的LCD初始化代码.以节省空间.
void LCD_Init(void) {
 8001c10:	b580      	push	{r7, lr}
 8001c12:	b086      	sub	sp, #24
 8001c14:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_Initure;

	__HAL_RCC_GPIOB_CLK_ENABLE();           	//开启GPIOB时钟
 8001c16:	4b90      	ldr	r3, [pc, #576]	; (8001e58 <LCD_Init+0x248>)
 8001c18:	699b      	ldr	r3, [r3, #24]
 8001c1a:	4a8f      	ldr	r2, [pc, #572]	; (8001e58 <LCD_Init+0x248>)
 8001c1c:	f043 0308 	orr.w	r3, r3, #8
 8001c20:	6193      	str	r3, [r2, #24]
 8001c22:	4b8d      	ldr	r3, [pc, #564]	; (8001e58 <LCD_Init+0x248>)
 8001c24:	699b      	ldr	r3, [r3, #24]
 8001c26:	f003 0308 	and.w	r3, r3, #8
 8001c2a:	607b      	str	r3, [r7, #4]
 8001c2c:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOC_CLK_ENABLE();           	//开启GPIOC时钟
 8001c2e:	4b8a      	ldr	r3, [pc, #552]	; (8001e58 <LCD_Init+0x248>)
 8001c30:	699b      	ldr	r3, [r3, #24]
 8001c32:	4a89      	ldr	r2, [pc, #548]	; (8001e58 <LCD_Init+0x248>)
 8001c34:	f043 0310 	orr.w	r3, r3, #16
 8001c38:	6193      	str	r3, [r2, #24]
 8001c3a:	4b87      	ldr	r3, [pc, #540]	; (8001e58 <LCD_Init+0x248>)
 8001c3c:	699b      	ldr	r3, [r3, #24]
 8001c3e:	f003 0310 	and.w	r3, r3, #16
 8001c42:	603b      	str	r3, [r7, #0]
 8001c44:	683b      	ldr	r3, [r7, #0]

	//PC6,7,8,9,10
	GPIO_Initure.Pin = GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_8 |\
 8001c46:	f44f 63f8 	mov.w	r3, #1984	; 0x7c0
 8001c4a:	60bb      	str	r3, [r7, #8]
 GPIO_PIN_9
			| GPIO_PIN_10;
	GPIO_Initure.Mode = GPIO_MODE_OUTPUT_PP;  	//推挽输出
 8001c4c:	2301      	movs	r3, #1
 8001c4e:	60fb      	str	r3, [r7, #12]
	GPIO_Initure.Pull = GPIO_PULLUP;          	//上拉
 8001c50:	2301      	movs	r3, #1
 8001c52:	613b      	str	r3, [r7, #16]
	GPIO_Initure.Speed = GPIO_SPEED_FREQ_HIGH;    	 	//高速
 8001c54:	2303      	movs	r3, #3
 8001c56:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIOC, &GPIO_Initure);
 8001c58:	f107 0308 	add.w	r3, r7, #8
 8001c5c:	4619      	mov	r1, r3
 8001c5e:	487f      	ldr	r0, [pc, #508]	; (8001e5c <LCD_Init+0x24c>)
 8001c60:	f004 fc28 	bl	80064b4 <HAL_GPIO_Init>

	//PB0~15
	GPIO_Initure.Pin = GPIO_PIN_All;				//PB推挽输出
 8001c64:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001c68:	60bb      	str	r3, [r7, #8]
	HAL_GPIO_Init(GPIOB, &GPIO_Initure);
 8001c6a:	f107 0308 	add.w	r3, r7, #8
 8001c6e:	4619      	mov	r1, r3
 8001c70:	487b      	ldr	r0, [pc, #492]	; (8001e60 <LCD_Init+0x250>)
 8001c72:	f004 fc1f 	bl	80064b4 <HAL_GPIO_Init>

//	__HAL_AFIO_REMAP_SWJ_DISABLE();				//禁止JTAG

	HAL_Delay(50); // delay 50 ms
 8001c76:	2032      	movs	r0, #50	; 0x32
 8001c78:	f004 f9a8 	bl	8005fcc <HAL_Delay>
	LCD_WriteReg(0x0000, 0x0001);
 8001c7c:	2101      	movs	r1, #1
 8001c7e:	2000      	movs	r0, #0
 8001c80:	f7fe fff0 	bl	8000c64 <LCD_WriteReg>
	HAL_Delay(50); // delay 50 ms
 8001c84:	2032      	movs	r0, #50	; 0x32
 8001c86:	f004 f9a1 	bl	8005fcc <HAL_Delay>
	lcddev.id = LCD_ReadReg(0x0000);
 8001c8a:	2000      	movs	r0, #0
 8001c8c:	f7ff f814 	bl	8000cb8 <LCD_ReadReg>
 8001c90:	4603      	mov	r3, r0
 8001c92:	461a      	mov	r2, r3
 8001c94:	4b73      	ldr	r3, [pc, #460]	; (8001e64 <LCD_Init+0x254>)
 8001c96:	809a      	strh	r2, [r3, #4]
	if (lcddev.id < 0XFF || lcddev.id == 0XFFFF || lcddev.id == 0X9300) //读到ID不正确,新增lcddev.id==0X9300判断，因为9341在未被复位的情况下会被读成9300
 8001c98:	4b72      	ldr	r3, [pc, #456]	; (8001e64 <LCD_Init+0x254>)
 8001c9a:	889b      	ldrh	r3, [r3, #4]
 8001c9c:	2bfe      	cmp	r3, #254	; 0xfe
 8001c9e:	d90b      	bls.n	8001cb8 <LCD_Init+0xa8>
 8001ca0:	4b70      	ldr	r3, [pc, #448]	; (8001e64 <LCD_Init+0x254>)
 8001ca2:	889b      	ldrh	r3, [r3, #4]
 8001ca4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001ca8:	4293      	cmp	r3, r2
 8001caa:	d005      	beq.n	8001cb8 <LCD_Init+0xa8>
 8001cac:	4b6d      	ldr	r3, [pc, #436]	; (8001e64 <LCD_Init+0x254>)
 8001cae:	889b      	ldrh	r3, [r3, #4]
 8001cb0:	f5b3 4f13 	cmp.w	r3, #37632	; 0x9300
 8001cb4:	f040 80c8 	bne.w	8001e48 <LCD_Init+0x238>
			{
		//尝试9341 ID的读取
		LCD_WR_REG(0XD3);
 8001cb8:	20d3      	movs	r0, #211	; 0xd3
 8001cba:	f7fe ff47 	bl	8000b4c <LCD_WR_REG>
		LCD_RD_DATA(); 				//dummy read 	
 8001cbe:	f7fe ff8d 	bl	8000bdc <LCD_RD_DATA>
		LCD_RD_DATA();   	    	//读到0X00
 8001cc2:	f7fe ff8b 	bl	8000bdc <LCD_RD_DATA>
		lcddev.id = LCD_RD_DATA();   	//读取93
 8001cc6:	f7fe ff89 	bl	8000bdc <LCD_RD_DATA>
 8001cca:	4603      	mov	r3, r0
 8001ccc:	461a      	mov	r2, r3
 8001cce:	4b65      	ldr	r3, [pc, #404]	; (8001e64 <LCD_Init+0x254>)
 8001cd0:	809a      	strh	r2, [r3, #4]
		lcddev.id <<= 8;
 8001cd2:	4b64      	ldr	r3, [pc, #400]	; (8001e64 <LCD_Init+0x254>)
 8001cd4:	889b      	ldrh	r3, [r3, #4]
 8001cd6:	021b      	lsls	r3, r3, #8
 8001cd8:	b29a      	uxth	r2, r3
 8001cda:	4b62      	ldr	r3, [pc, #392]	; (8001e64 <LCD_Init+0x254>)
 8001cdc:	809a      	strh	r2, [r3, #4]
		lcddev.id |= LCD_RD_DATA();  	//读取41
 8001cde:	f7fe ff7d 	bl	8000bdc <LCD_RD_DATA>
 8001ce2:	4603      	mov	r3, r0
 8001ce4:	461a      	mov	r2, r3
 8001ce6:	4b5f      	ldr	r3, [pc, #380]	; (8001e64 <LCD_Init+0x254>)
 8001ce8:	889b      	ldrh	r3, [r3, #4]
 8001cea:	4313      	orrs	r3, r2
 8001cec:	b29a      	uxth	r2, r3
 8001cee:	4b5d      	ldr	r3, [pc, #372]	; (8001e64 <LCD_Init+0x254>)
 8001cf0:	809a      	strh	r2, [r3, #4]
		if (lcddev.id != 0X9341)		//非9341,尝试是不是6804
 8001cf2:	4b5c      	ldr	r3, [pc, #368]	; (8001e64 <LCD_Init+0x254>)
 8001cf4:	889b      	ldrh	r3, [r3, #4]
 8001cf6:	f249 3241 	movw	r2, #37697	; 0x9341
 8001cfa:	4293      	cmp	r3, r2
 8001cfc:	f000 80a4 	beq.w	8001e48 <LCD_Init+0x238>
				{
			LCD_WR_REG(0XBF);
 8001d00:	20bf      	movs	r0, #191	; 0xbf
 8001d02:	f7fe ff23 	bl	8000b4c <LCD_WR_REG>
			LCD_RD_DATA(); 			//dummy read 	 
 8001d06:	f7fe ff69 	bl	8000bdc <LCD_RD_DATA>
			LCD_RD_DATA();   	    //读回0X01
 8001d0a:	f7fe ff67 	bl	8000bdc <LCD_RD_DATA>
			LCD_RD_DATA(); 			//读回0XD0
 8001d0e:	f7fe ff65 	bl	8000bdc <LCD_RD_DATA>
			lcddev.id = LCD_RD_DATA(); 			//这里读回0X68
 8001d12:	f7fe ff63 	bl	8000bdc <LCD_RD_DATA>
 8001d16:	4603      	mov	r3, r0
 8001d18:	461a      	mov	r2, r3
 8001d1a:	4b52      	ldr	r3, [pc, #328]	; (8001e64 <LCD_Init+0x254>)
 8001d1c:	809a      	strh	r2, [r3, #4]
			lcddev.id <<= 8;
 8001d1e:	4b51      	ldr	r3, [pc, #324]	; (8001e64 <LCD_Init+0x254>)
 8001d20:	889b      	ldrh	r3, [r3, #4]
 8001d22:	021b      	lsls	r3, r3, #8
 8001d24:	b29a      	uxth	r2, r3
 8001d26:	4b4f      	ldr	r3, [pc, #316]	; (8001e64 <LCD_Init+0x254>)
 8001d28:	809a      	strh	r2, [r3, #4]
			lcddev.id |= LCD_RD_DATA(); 			//这里读回0X04
 8001d2a:	f7fe ff57 	bl	8000bdc <LCD_RD_DATA>
 8001d2e:	4603      	mov	r3, r0
 8001d30:	461a      	mov	r2, r3
 8001d32:	4b4c      	ldr	r3, [pc, #304]	; (8001e64 <LCD_Init+0x254>)
 8001d34:	889b      	ldrh	r3, [r3, #4]
 8001d36:	4313      	orrs	r3, r2
 8001d38:	b29a      	uxth	r2, r3
 8001d3a:	4b4a      	ldr	r3, [pc, #296]	; (8001e64 <LCD_Init+0x254>)
 8001d3c:	809a      	strh	r2, [r3, #4]
			if (lcddev.id != 0X6804)	//也不是6804,尝试看看是不是NT35310
 8001d3e:	4b49      	ldr	r3, [pc, #292]	; (8001e64 <LCD_Init+0x254>)
 8001d40:	889b      	ldrh	r3, [r3, #4]
 8001d42:	f646 0204 	movw	r2, #26628	; 0x6804
 8001d46:	4293      	cmp	r3, r2
 8001d48:	d07e      	beq.n	8001e48 <LCD_Init+0x238>
					{
				LCD_WR_REG(0XD4);
 8001d4a:	20d4      	movs	r0, #212	; 0xd4
 8001d4c:	f7fe fefe 	bl	8000b4c <LCD_WR_REG>
				LCD_RD_DATA(); 				//dummy read  
 8001d50:	f7fe ff44 	bl	8000bdc <LCD_RD_DATA>
				LCD_RD_DATA();   			//读回0X01	 
 8001d54:	f7fe ff42 	bl	8000bdc <LCD_RD_DATA>
				lcddev.id = LCD_RD_DATA();	//读回0X53
 8001d58:	f7fe ff40 	bl	8000bdc <LCD_RD_DATA>
 8001d5c:	4603      	mov	r3, r0
 8001d5e:	461a      	mov	r2, r3
 8001d60:	4b40      	ldr	r3, [pc, #256]	; (8001e64 <LCD_Init+0x254>)
 8001d62:	809a      	strh	r2, [r3, #4]
				lcddev.id <<= 8;
 8001d64:	4b3f      	ldr	r3, [pc, #252]	; (8001e64 <LCD_Init+0x254>)
 8001d66:	889b      	ldrh	r3, [r3, #4]
 8001d68:	021b      	lsls	r3, r3, #8
 8001d6a:	b29a      	uxth	r2, r3
 8001d6c:	4b3d      	ldr	r3, [pc, #244]	; (8001e64 <LCD_Init+0x254>)
 8001d6e:	809a      	strh	r2, [r3, #4]
				lcddev.id |= LCD_RD_DATA();	//这里读回0X10
 8001d70:	f7fe ff34 	bl	8000bdc <LCD_RD_DATA>
 8001d74:	4603      	mov	r3, r0
 8001d76:	461a      	mov	r2, r3
 8001d78:	4b3a      	ldr	r3, [pc, #232]	; (8001e64 <LCD_Init+0x254>)
 8001d7a:	889b      	ldrh	r3, [r3, #4]
 8001d7c:	4313      	orrs	r3, r2
 8001d7e:	b29a      	uxth	r2, r3
 8001d80:	4b38      	ldr	r3, [pc, #224]	; (8001e64 <LCD_Init+0x254>)
 8001d82:	809a      	strh	r2, [r3, #4]
				if (lcddev.id != 0X5310)		//也不是NT35310,尝试看看是不是NT35510
 8001d84:	4b37      	ldr	r3, [pc, #220]	; (8001e64 <LCD_Init+0x254>)
 8001d86:	889b      	ldrh	r3, [r3, #4]
 8001d88:	f245 3210 	movw	r2, #21264	; 0x5310
 8001d8c:	4293      	cmp	r3, r2
 8001d8e:	d05b      	beq.n	8001e48 <LCD_Init+0x238>
						{
					LCD_WR_REG(0XDA00);
 8001d90:	f44f 405a 	mov.w	r0, #55808	; 0xda00
 8001d94:	f7fe feda 	bl	8000b4c <LCD_WR_REG>
					LCD_RD_DATA();   		//读回0X00	 
 8001d98:	f7fe ff20 	bl	8000bdc <LCD_RD_DATA>
					LCD_WR_REG(0XDB00);
 8001d9c:	f44f 405b 	mov.w	r0, #56064	; 0xdb00
 8001da0:	f7fe fed4 	bl	8000b4c <LCD_WR_REG>
					lcddev.id = LCD_RD_DATA();   		//读回0X80
 8001da4:	f7fe ff1a 	bl	8000bdc <LCD_RD_DATA>
 8001da8:	4603      	mov	r3, r0
 8001daa:	461a      	mov	r2, r3
 8001dac:	4b2d      	ldr	r3, [pc, #180]	; (8001e64 <LCD_Init+0x254>)
 8001dae:	809a      	strh	r2, [r3, #4]
					lcddev.id <<= 8;
 8001db0:	4b2c      	ldr	r3, [pc, #176]	; (8001e64 <LCD_Init+0x254>)
 8001db2:	889b      	ldrh	r3, [r3, #4]
 8001db4:	021b      	lsls	r3, r3, #8
 8001db6:	b29a      	uxth	r2, r3
 8001db8:	4b2a      	ldr	r3, [pc, #168]	; (8001e64 <LCD_Init+0x254>)
 8001dba:	809a      	strh	r2, [r3, #4]
					LCD_WR_REG(0XDC00);
 8001dbc:	f44f 405c 	mov.w	r0, #56320	; 0xdc00
 8001dc0:	f7fe fec4 	bl	8000b4c <LCD_WR_REG>
					lcddev.id |= LCD_RD_DATA();   		//读回0X00
 8001dc4:	f7fe ff0a 	bl	8000bdc <LCD_RD_DATA>
 8001dc8:	4603      	mov	r3, r0
 8001dca:	461a      	mov	r2, r3
 8001dcc:	4b25      	ldr	r3, [pc, #148]	; (8001e64 <LCD_Init+0x254>)
 8001dce:	889b      	ldrh	r3, [r3, #4]
 8001dd0:	4313      	orrs	r3, r2
 8001dd2:	b29a      	uxth	r2, r3
 8001dd4:	4b23      	ldr	r3, [pc, #140]	; (8001e64 <LCD_Init+0x254>)
 8001dd6:	809a      	strh	r2, [r3, #4]
					if (lcddev.id == 0x8000)
 8001dd8:	4b22      	ldr	r3, [pc, #136]	; (8001e64 <LCD_Init+0x254>)
 8001dda:	889b      	ldrh	r3, [r3, #4]
 8001ddc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001de0:	d103      	bne.n	8001dea <LCD_Init+0x1da>
						lcddev.id = 0x5510;   		//NT35510读回的ID是8000H,为方便区分,我们强制设置为5510
 8001de2:	4b20      	ldr	r3, [pc, #128]	; (8001e64 <LCD_Init+0x254>)
 8001de4:	f245 5210 	movw	r2, #21776	; 0x5510
 8001de8:	809a      	strh	r2, [r3, #4]
					if (lcddev.id != 0X5510)			//也不是NT5510,尝试看看是不是SSD1963
 8001dea:	4b1e      	ldr	r3, [pc, #120]	; (8001e64 <LCD_Init+0x254>)
 8001dec:	889b      	ldrh	r3, [r3, #4]
 8001dee:	f245 5210 	movw	r2, #21776	; 0x5510
 8001df2:	4293      	cmp	r3, r2
 8001df4:	d028      	beq.n	8001e48 <LCD_Init+0x238>
							{
						LCD_WR_REG(0XA1);
 8001df6:	20a1      	movs	r0, #161	; 0xa1
 8001df8:	f7fe fea8 	bl	8000b4c <LCD_WR_REG>
						lcddev.id = LCD_RD_DATA();
 8001dfc:	f7fe feee 	bl	8000bdc <LCD_RD_DATA>
 8001e00:	4603      	mov	r3, r0
 8001e02:	461a      	mov	r2, r3
 8001e04:	4b17      	ldr	r3, [pc, #92]	; (8001e64 <LCD_Init+0x254>)
 8001e06:	809a      	strh	r2, [r3, #4]
						lcddev.id = LCD_RD_DATA();	//读回0X57
 8001e08:	f7fe fee8 	bl	8000bdc <LCD_RD_DATA>
 8001e0c:	4603      	mov	r3, r0
 8001e0e:	461a      	mov	r2, r3
 8001e10:	4b14      	ldr	r3, [pc, #80]	; (8001e64 <LCD_Init+0x254>)
 8001e12:	809a      	strh	r2, [r3, #4]
						lcddev.id <<= 8;
 8001e14:	4b13      	ldr	r3, [pc, #76]	; (8001e64 <LCD_Init+0x254>)
 8001e16:	889b      	ldrh	r3, [r3, #4]
 8001e18:	021b      	lsls	r3, r3, #8
 8001e1a:	b29a      	uxth	r2, r3
 8001e1c:	4b11      	ldr	r3, [pc, #68]	; (8001e64 <LCD_Init+0x254>)
 8001e1e:	809a      	strh	r2, [r3, #4]
						lcddev.id |= LCD_RD_DATA();	//读回0X61
 8001e20:	f7fe fedc 	bl	8000bdc <LCD_RD_DATA>
 8001e24:	4603      	mov	r3, r0
 8001e26:	461a      	mov	r2, r3
 8001e28:	4b0e      	ldr	r3, [pc, #56]	; (8001e64 <LCD_Init+0x254>)
 8001e2a:	889b      	ldrh	r3, [r3, #4]
 8001e2c:	4313      	orrs	r3, r2
 8001e2e:	b29a      	uxth	r2, r3
 8001e30:	4b0c      	ldr	r3, [pc, #48]	; (8001e64 <LCD_Init+0x254>)
 8001e32:	809a      	strh	r2, [r3, #4]
						if (lcddev.id == 0X5761)
 8001e34:	4b0b      	ldr	r3, [pc, #44]	; (8001e64 <LCD_Init+0x254>)
 8001e36:	889b      	ldrh	r3, [r3, #4]
 8001e38:	f245 7261 	movw	r2, #22369	; 0x5761
 8001e3c:	4293      	cmp	r3, r2
 8001e3e:	d103      	bne.n	8001e48 <LCD_Init+0x238>
							lcddev.id = 0X1963;	//SSD1963读回的ID是5761H,为方便区分,我们强制设置为1963
 8001e40:	4b08      	ldr	r3, [pc, #32]	; (8001e64 <LCD_Init+0x254>)
 8001e42:	f641 1263 	movw	r2, #6499	; 0x1963
 8001e46:	809a      	strh	r2, [r3, #4]
				}
			}
		}
	}
// 	printf(" LCD ID:%x\r\n",lcddev.id); //打印LCD ID
	if (lcddev.id == 0X9341)	//9341初始化
 8001e48:	4b06      	ldr	r3, [pc, #24]	; (8001e64 <LCD_Init+0x254>)
 8001e4a:	889b      	ldrh	r3, [r3, #4]
 8001e4c:	f249 3241 	movw	r2, #37697	; 0x9341
 8001e50:	4293      	cmp	r3, r2
 8001e52:	f040 811f 	bne.w	8002094 <LCD_Init+0x484>
 8001e56:	e007      	b.n	8001e68 <LCD_Init+0x258>
 8001e58:	40021000 	.word	0x40021000
 8001e5c:	40011000 	.word	0x40011000
 8001e60:	40010c00 	.word	0x40010c00
 8001e64:	20000028 	.word	0x20000028
			{
		LCD_WR_REG(0xCF);
 8001e68:	20cf      	movs	r0, #207	; 0xcf
 8001e6a:	f7fe fe6f 	bl	8000b4c <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 8001e6e:	2000      	movs	r0, #0
 8001e70:	f7fe fe90 	bl	8000b94 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xC1);
 8001e74:	20c1      	movs	r0, #193	; 0xc1
 8001e76:	f7fe fe8d 	bl	8000b94 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X30);
 8001e7a:	2030      	movs	r0, #48	; 0x30
 8001e7c:	f7fe fe8a 	bl	8000b94 <LCD_WR_DATAX>
		LCD_WR_REG(0xED);
 8001e80:	20ed      	movs	r0, #237	; 0xed
 8001e82:	f7fe fe63 	bl	8000b4c <LCD_WR_REG>
		LCD_WR_DATAX(0x64);
 8001e86:	2064      	movs	r0, #100	; 0x64
 8001e88:	f7fe fe84 	bl	8000b94 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x03);
 8001e8c:	2003      	movs	r0, #3
 8001e8e:	f7fe fe81 	bl	8000b94 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X12);
 8001e92:	2012      	movs	r0, #18
 8001e94:	f7fe fe7e 	bl	8000b94 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X81);
 8001e98:	2081      	movs	r0, #129	; 0x81
 8001e9a:	f7fe fe7b 	bl	8000b94 <LCD_WR_DATAX>
		LCD_WR_REG(0xE8);
 8001e9e:	20e8      	movs	r0, #232	; 0xe8
 8001ea0:	f7fe fe54 	bl	8000b4c <LCD_WR_REG>
		LCD_WR_DATAX(0x85);
 8001ea4:	2085      	movs	r0, #133	; 0x85
 8001ea6:	f7fe fe75 	bl	8000b94 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x10);
 8001eaa:	2010      	movs	r0, #16
 8001eac:	f7fe fe72 	bl	8000b94 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x7A);
 8001eb0:	207a      	movs	r0, #122	; 0x7a
 8001eb2:	f7fe fe6f 	bl	8000b94 <LCD_WR_DATAX>
		LCD_WR_REG(0xCB);
 8001eb6:	20cb      	movs	r0, #203	; 0xcb
 8001eb8:	f7fe fe48 	bl	8000b4c <LCD_WR_REG>
		LCD_WR_DATAX(0x39);
 8001ebc:	2039      	movs	r0, #57	; 0x39
 8001ebe:	f7fe fe69 	bl	8000b94 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x2C);
 8001ec2:	202c      	movs	r0, #44	; 0x2c
 8001ec4:	f7fe fe66 	bl	8000b94 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8001ec8:	2000      	movs	r0, #0
 8001eca:	f7fe fe63 	bl	8000b94 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x34);
 8001ece:	2034      	movs	r0, #52	; 0x34
 8001ed0:	f7fe fe60 	bl	8000b94 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x02);
 8001ed4:	2002      	movs	r0, #2
 8001ed6:	f7fe fe5d 	bl	8000b94 <LCD_WR_DATAX>
		LCD_WR_REG(0xF7);
 8001eda:	20f7      	movs	r0, #247	; 0xf7
 8001edc:	f7fe fe36 	bl	8000b4c <LCD_WR_REG>
		LCD_WR_DATAX(0x20);
 8001ee0:	2020      	movs	r0, #32
 8001ee2:	f7fe fe57 	bl	8000b94 <LCD_WR_DATAX>
		LCD_WR_REG(0xEA);
 8001ee6:	20ea      	movs	r0, #234	; 0xea
 8001ee8:	f7fe fe30 	bl	8000b4c <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 8001eec:	2000      	movs	r0, #0
 8001eee:	f7fe fe51 	bl	8000b94 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8001ef2:	2000      	movs	r0, #0
 8001ef4:	f7fe fe4e 	bl	8000b94 <LCD_WR_DATAX>
		LCD_WR_REG(0xC0);    //Power control 
 8001ef8:	20c0      	movs	r0, #192	; 0xc0
 8001efa:	f7fe fe27 	bl	8000b4c <LCD_WR_REG>
		LCD_WR_DATAX(0x1B);   //VRH[5:0] 
 8001efe:	201b      	movs	r0, #27
 8001f00:	f7fe fe48 	bl	8000b94 <LCD_WR_DATAX>
		LCD_WR_REG(0xC1);    //Power control 
 8001f04:	20c1      	movs	r0, #193	; 0xc1
 8001f06:	f7fe fe21 	bl	8000b4c <LCD_WR_REG>
		LCD_WR_DATAX(0x01);   //SAP[2:0];BT[3:0] 
 8001f0a:	2001      	movs	r0, #1
 8001f0c:	f7fe fe42 	bl	8000b94 <LCD_WR_DATAX>
		LCD_WR_REG(0xC5);    //VCM control 
 8001f10:	20c5      	movs	r0, #197	; 0xc5
 8001f12:	f7fe fe1b 	bl	8000b4c <LCD_WR_REG>
		LCD_WR_DATAX(0x30); 	 //3F
 8001f16:	2030      	movs	r0, #48	; 0x30
 8001f18:	f7fe fe3c 	bl	8000b94 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x30); 	 //3C
 8001f1c:	2030      	movs	r0, #48	; 0x30
 8001f1e:	f7fe fe39 	bl	8000b94 <LCD_WR_DATAX>
		LCD_WR_REG(0xC7);    //VCM control2 
 8001f22:	20c7      	movs	r0, #199	; 0xc7
 8001f24:	f7fe fe12 	bl	8000b4c <LCD_WR_REG>
		LCD_WR_DATAX(0XB7);
 8001f28:	20b7      	movs	r0, #183	; 0xb7
 8001f2a:	f7fe fe33 	bl	8000b94 <LCD_WR_DATAX>
		LCD_WR_REG(0x36);    // Memory Access Control 
 8001f2e:	2036      	movs	r0, #54	; 0x36
 8001f30:	f7fe fe0c 	bl	8000b4c <LCD_WR_REG>
		LCD_WR_DATAX(0x48);
 8001f34:	2048      	movs	r0, #72	; 0x48
 8001f36:	f7fe fe2d 	bl	8000b94 <LCD_WR_DATAX>
		LCD_WR_REG(0x3A);
 8001f3a:	203a      	movs	r0, #58	; 0x3a
 8001f3c:	f7fe fe06 	bl	8000b4c <LCD_WR_REG>
		LCD_WR_DATAX(0x55);
 8001f40:	2055      	movs	r0, #85	; 0x55
 8001f42:	f7fe fe27 	bl	8000b94 <LCD_WR_DATAX>
		LCD_WR_REG(0xB1);
 8001f46:	20b1      	movs	r0, #177	; 0xb1
 8001f48:	f7fe fe00 	bl	8000b4c <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 8001f4c:	2000      	movs	r0, #0
 8001f4e:	f7fe fe21 	bl	8000b94 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x1A);
 8001f52:	201a      	movs	r0, #26
 8001f54:	f7fe fe1e 	bl	8000b94 <LCD_WR_DATAX>
		LCD_WR_REG(0xB6);    // Display Function Control 
 8001f58:	20b6      	movs	r0, #182	; 0xb6
 8001f5a:	f7fe fdf7 	bl	8000b4c <LCD_WR_REG>
		LCD_WR_DATAX(0x0A);
 8001f5e:	200a      	movs	r0, #10
 8001f60:	f7fe fe18 	bl	8000b94 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xA2);
 8001f64:	20a2      	movs	r0, #162	; 0xa2
 8001f66:	f7fe fe15 	bl	8000b94 <LCD_WR_DATAX>
		LCD_WR_REG(0xF2);    // 3Gamma Function Disable 
 8001f6a:	20f2      	movs	r0, #242	; 0xf2
 8001f6c:	f7fe fdee 	bl	8000b4c <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 8001f70:	2000      	movs	r0, #0
 8001f72:	f7fe fe0f 	bl	8000b94 <LCD_WR_DATAX>
		LCD_WR_REG(0x26);    //Gamma curve selected 
 8001f76:	2026      	movs	r0, #38	; 0x26
 8001f78:	f7fe fde8 	bl	8000b4c <LCD_WR_REG>
		LCD_WR_DATAX(0x01);
 8001f7c:	2001      	movs	r0, #1
 8001f7e:	f7fe fe09 	bl	8000b94 <LCD_WR_DATAX>
		LCD_WR_REG(0xE0);    //Set Gamma 
 8001f82:	20e0      	movs	r0, #224	; 0xe0
 8001f84:	f7fe fde2 	bl	8000b4c <LCD_WR_REG>
		LCD_WR_DATAX(0x0F);
 8001f88:	200f      	movs	r0, #15
 8001f8a:	f7fe fe03 	bl	8000b94 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x2A);
 8001f8e:	202a      	movs	r0, #42	; 0x2a
 8001f90:	f7fe fe00 	bl	8000b94 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x28);
 8001f94:	2028      	movs	r0, #40	; 0x28
 8001f96:	f7fe fdfd 	bl	8000b94 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x08);
 8001f9a:	2008      	movs	r0, #8
 8001f9c:	f7fe fdfa 	bl	8000b94 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x0E);
 8001fa0:	200e      	movs	r0, #14
 8001fa2:	f7fe fdf7 	bl	8000b94 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x08);
 8001fa6:	2008      	movs	r0, #8
 8001fa8:	f7fe fdf4 	bl	8000b94 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x54);
 8001fac:	2054      	movs	r0, #84	; 0x54
 8001fae:	f7fe fdf1 	bl	8000b94 <LCD_WR_DATAX>
		LCD_WR_DATAX(0XA9);
 8001fb2:	20a9      	movs	r0, #169	; 0xa9
 8001fb4:	f7fe fdee 	bl	8000b94 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x43);
 8001fb8:	2043      	movs	r0, #67	; 0x43
 8001fba:	f7fe fdeb 	bl	8000b94 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x0A);
 8001fbe:	200a      	movs	r0, #10
 8001fc0:	f7fe fde8 	bl	8000b94 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x0F);
 8001fc4:	200f      	movs	r0, #15
 8001fc6:	f7fe fde5 	bl	8000b94 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8001fca:	2000      	movs	r0, #0
 8001fcc:	f7fe fde2 	bl	8000b94 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8001fd0:	2000      	movs	r0, #0
 8001fd2:	f7fe fddf 	bl	8000b94 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8001fd6:	2000      	movs	r0, #0
 8001fd8:	f7fe fddc 	bl	8000b94 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8001fdc:	2000      	movs	r0, #0
 8001fde:	f7fe fdd9 	bl	8000b94 <LCD_WR_DATAX>
		LCD_WR_REG(0XE1);    //Set Gamma 
 8001fe2:	20e1      	movs	r0, #225	; 0xe1
 8001fe4:	f7fe fdb2 	bl	8000b4c <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 8001fe8:	2000      	movs	r0, #0
 8001fea:	f7fe fdd3 	bl	8000b94 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x15);
 8001fee:	2015      	movs	r0, #21
 8001ff0:	f7fe fdd0 	bl	8000b94 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x17);
 8001ff4:	2017      	movs	r0, #23
 8001ff6:	f7fe fdcd 	bl	8000b94 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x07);
 8001ffa:	2007      	movs	r0, #7
 8001ffc:	f7fe fdca 	bl	8000b94 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x11);
 8002000:	2011      	movs	r0, #17
 8002002:	f7fe fdc7 	bl	8000b94 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x06);
 8002006:	2006      	movs	r0, #6
 8002008:	f7fe fdc4 	bl	8000b94 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x2B);
 800200c:	202b      	movs	r0, #43	; 0x2b
 800200e:	f7fe fdc1 	bl	8000b94 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x56);
 8002012:	2056      	movs	r0, #86	; 0x56
 8002014:	f7fe fdbe 	bl	8000b94 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x3C);
 8002018:	203c      	movs	r0, #60	; 0x3c
 800201a:	f7fe fdbb 	bl	8000b94 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x05);
 800201e:	2005      	movs	r0, #5
 8002020:	f7fe fdb8 	bl	8000b94 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x10);
 8002024:	2010      	movs	r0, #16
 8002026:	f7fe fdb5 	bl	8000b94 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x0F);
 800202a:	200f      	movs	r0, #15
 800202c:	f7fe fdb2 	bl	8000b94 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x3F);
 8002030:	203f      	movs	r0, #63	; 0x3f
 8002032:	f7fe fdaf 	bl	8000b94 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x3F);
 8002036:	203f      	movs	r0, #63	; 0x3f
 8002038:	f7fe fdac 	bl	8000b94 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x0F);
 800203c:	200f      	movs	r0, #15
 800203e:	f7fe fda9 	bl	8000b94 <LCD_WR_DATAX>
		LCD_WR_REG(0x2B);
 8002042:	202b      	movs	r0, #43	; 0x2b
 8002044:	f7fe fd82 	bl	8000b4c <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 8002048:	2000      	movs	r0, #0
 800204a:	f7fe fda3 	bl	8000b94 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800204e:	2000      	movs	r0, #0
 8002050:	f7fe fda0 	bl	8000b94 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x01);
 8002054:	2001      	movs	r0, #1
 8002056:	f7fe fd9d 	bl	8000b94 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x3f);
 800205a:	203f      	movs	r0, #63	; 0x3f
 800205c:	f7fe fd9a 	bl	8000b94 <LCD_WR_DATAX>
		LCD_WR_REG(0x2A);
 8002060:	202a      	movs	r0, #42	; 0x2a
 8002062:	f7fe fd73 	bl	8000b4c <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 8002066:	2000      	movs	r0, #0
 8002068:	f7fe fd94 	bl	8000b94 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800206c:	2000      	movs	r0, #0
 800206e:	f7fe fd91 	bl	8000b94 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002072:	2000      	movs	r0, #0
 8002074:	f7fe fd8e 	bl	8000b94 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xef);
 8002078:	20ef      	movs	r0, #239	; 0xef
 800207a:	f7fe fd8b 	bl	8000b94 <LCD_WR_DATAX>
		LCD_WR_REG(0x11); //Exit Sleep
 800207e:	2011      	movs	r0, #17
 8002080:	f7fe fd64 	bl	8000b4c <LCD_WR_REG>
		HAL_Delay(120);
 8002084:	2078      	movs	r0, #120	; 0x78
 8002086:	f003 ffa1 	bl	8005fcc <HAL_Delay>
		LCD_WR_REG(0x29); //display on	
 800208a:	2029      	movs	r0, #41	; 0x29
 800208c:	f7fe fd5e 	bl	8000b4c <LCD_WR_REG>
 8002090:	f003 bcd8 	b.w	8005a44 <LCD_Init+0x3e34>
	} else if (lcddev.id == 0x6804) //6804初始化
 8002094:	4b58      	ldr	r3, [pc, #352]	; (80021f8 <LCD_Init+0x5e8>)
 8002096:	889b      	ldrh	r3, [r3, #4]
 8002098:	f646 0204 	movw	r2, #26628	; 0x6804
 800209c:	4293      	cmp	r3, r2
 800209e:	f040 80ad 	bne.w	80021fc <LCD_Init+0x5ec>
			{
		LCD_WR_REG(0X11);
 80020a2:	2011      	movs	r0, #17
 80020a4:	f7fe fd52 	bl	8000b4c <LCD_WR_REG>
		HAL_Delay(20);
 80020a8:	2014      	movs	r0, #20
 80020aa:	f003 ff8f 	bl	8005fcc <HAL_Delay>
		LCD_WR_REG(0XD0); //VCI1  VCL  VGH  VGL DDVDH VREG1OUT power amplitude setting
 80020ae:	20d0      	movs	r0, #208	; 0xd0
 80020b0:	f7fe fd4c 	bl	8000b4c <LCD_WR_REG>
		LCD_WR_DATAX(0X07);
 80020b4:	2007      	movs	r0, #7
 80020b6:	f7fe fd6d 	bl	8000b94 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X42);
 80020ba:	2042      	movs	r0, #66	; 0x42
 80020bc:	f7fe fd6a 	bl	8000b94 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X1D);
 80020c0:	201d      	movs	r0, #29
 80020c2:	f7fe fd67 	bl	8000b94 <LCD_WR_DATAX>
		LCD_WR_REG(0XD1); //VCOMH VCOM_AC amplitude setting
 80020c6:	20d1      	movs	r0, #209	; 0xd1
 80020c8:	f7fe fd40 	bl	8000b4c <LCD_WR_REG>
		LCD_WR_DATAX(0X00);
 80020cc:	2000      	movs	r0, #0
 80020ce:	f7fe fd61 	bl	8000b94 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X1a);
 80020d2:	201a      	movs	r0, #26
 80020d4:	f7fe fd5e 	bl	8000b94 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X09);
 80020d8:	2009      	movs	r0, #9
 80020da:	f7fe fd5b 	bl	8000b94 <LCD_WR_DATAX>
		LCD_WR_REG(0XD2); //Operational Amplifier Circuit Constant Current Adjust , charge pump frequency setting
 80020de:	20d2      	movs	r0, #210	; 0xd2
 80020e0:	f7fe fd34 	bl	8000b4c <LCD_WR_REG>
		LCD_WR_DATAX(0X01);
 80020e4:	2001      	movs	r0, #1
 80020e6:	f7fe fd55 	bl	8000b94 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X22);
 80020ea:	2022      	movs	r0, #34	; 0x22
 80020ec:	f7fe fd52 	bl	8000b94 <LCD_WR_DATAX>
		LCD_WR_REG(0XC0); //REV SM GS
 80020f0:	20c0      	movs	r0, #192	; 0xc0
 80020f2:	f7fe fd2b 	bl	8000b4c <LCD_WR_REG>
		LCD_WR_DATAX(0X10);
 80020f6:	2010      	movs	r0, #16
 80020f8:	f7fe fd4c 	bl	8000b94 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X3B);
 80020fc:	203b      	movs	r0, #59	; 0x3b
 80020fe:	f7fe fd49 	bl	8000b94 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X00);
 8002102:	2000      	movs	r0, #0
 8002104:	f7fe fd46 	bl	8000b94 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X02);
 8002108:	2002      	movs	r0, #2
 800210a:	f7fe fd43 	bl	8000b94 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X11);
 800210e:	2011      	movs	r0, #17
 8002110:	f7fe fd40 	bl	8000b94 <LCD_WR_DATAX>

		LCD_WR_REG(0XC5); // Frame rate setting = 72HZ  when setting 0x03
 8002114:	20c5      	movs	r0, #197	; 0xc5
 8002116:	f7fe fd19 	bl	8000b4c <LCD_WR_REG>
		LCD_WR_DATAX(0X03);
 800211a:	2003      	movs	r0, #3
 800211c:	f7fe fd3a 	bl	8000b94 <LCD_WR_DATAX>

		LCD_WR_REG(0XC8); //Gamma setting
 8002120:	20c8      	movs	r0, #200	; 0xc8
 8002122:	f7fe fd13 	bl	8000b4c <LCD_WR_REG>
		LCD_WR_DATAX(0X00);
 8002126:	2000      	movs	r0, #0
 8002128:	f7fe fd34 	bl	8000b94 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X25);
 800212c:	2025      	movs	r0, #37	; 0x25
 800212e:	f7fe fd31 	bl	8000b94 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X21);
 8002132:	2021      	movs	r0, #33	; 0x21
 8002134:	f7fe fd2e 	bl	8000b94 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X05);
 8002138:	2005      	movs	r0, #5
 800213a:	f7fe fd2b 	bl	8000b94 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X00);
 800213e:	2000      	movs	r0, #0
 8002140:	f7fe fd28 	bl	8000b94 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X0a);
 8002144:	200a      	movs	r0, #10
 8002146:	f7fe fd25 	bl	8000b94 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X65);
 800214a:	2065      	movs	r0, #101	; 0x65
 800214c:	f7fe fd22 	bl	8000b94 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X25);
 8002150:	2025      	movs	r0, #37	; 0x25
 8002152:	f7fe fd1f 	bl	8000b94 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X77);
 8002156:	2077      	movs	r0, #119	; 0x77
 8002158:	f7fe fd1c 	bl	8000b94 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X50);
 800215c:	2050      	movs	r0, #80	; 0x50
 800215e:	f7fe fd19 	bl	8000b94 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X0f);
 8002162:	200f      	movs	r0, #15
 8002164:	f7fe fd16 	bl	8000b94 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X00);
 8002168:	2000      	movs	r0, #0
 800216a:	f7fe fd13 	bl	8000b94 <LCD_WR_DATAX>

		LCD_WR_REG(0XF8);
 800216e:	20f8      	movs	r0, #248	; 0xf8
 8002170:	f7fe fcec 	bl	8000b4c <LCD_WR_REG>
		LCD_WR_DATAX(0X01);
 8002174:	2001      	movs	r0, #1
 8002176:	f7fe fd0d 	bl	8000b94 <LCD_WR_DATAX>

		LCD_WR_REG(0XFE);
 800217a:	20fe      	movs	r0, #254	; 0xfe
 800217c:	f7fe fce6 	bl	8000b4c <LCD_WR_REG>
		LCD_WR_DATAX(0X00);
 8002180:	2000      	movs	r0, #0
 8002182:	f7fe fd07 	bl	8000b94 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X02);
 8002186:	2002      	movs	r0, #2
 8002188:	f7fe fd04 	bl	8000b94 <LCD_WR_DATAX>

		LCD_WR_REG(0X20); //Exit invert mode
 800218c:	2020      	movs	r0, #32
 800218e:	f7fe fcdd 	bl	8000b4c <LCD_WR_REG>

		LCD_WR_REG(0X36);
 8002192:	2036      	movs	r0, #54	; 0x36
 8002194:	f7fe fcda 	bl	8000b4c <LCD_WR_REG>
		LCD_WR_DATAX(0X08); //原来是a
 8002198:	2008      	movs	r0, #8
 800219a:	f7fe fcfb 	bl	8000b94 <LCD_WR_DATAX>

		LCD_WR_REG(0X3A);
 800219e:	203a      	movs	r0, #58	; 0x3a
 80021a0:	f7fe fcd4 	bl	8000b4c <LCD_WR_REG>
		LCD_WR_DATAX(0X55); //16位模式
 80021a4:	2055      	movs	r0, #85	; 0x55
 80021a6:	f7fe fcf5 	bl	8000b94 <LCD_WR_DATAX>
		LCD_WR_REG(0X2B);
 80021aa:	202b      	movs	r0, #43	; 0x2b
 80021ac:	f7fe fcce 	bl	8000b4c <LCD_WR_REG>
		LCD_WR_DATAX(0X00);
 80021b0:	2000      	movs	r0, #0
 80021b2:	f7fe fcef 	bl	8000b94 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X00);
 80021b6:	2000      	movs	r0, #0
 80021b8:	f7fe fcec 	bl	8000b94 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X01);
 80021bc:	2001      	movs	r0, #1
 80021be:	f7fe fce9 	bl	8000b94 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X3F);
 80021c2:	203f      	movs	r0, #63	; 0x3f
 80021c4:	f7fe fce6 	bl	8000b94 <LCD_WR_DATAX>

		LCD_WR_REG(0X2A);
 80021c8:	202a      	movs	r0, #42	; 0x2a
 80021ca:	f7fe fcbf 	bl	8000b4c <LCD_WR_REG>
		LCD_WR_DATAX(0X00);
 80021ce:	2000      	movs	r0, #0
 80021d0:	f7fe fce0 	bl	8000b94 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X00);
 80021d4:	2000      	movs	r0, #0
 80021d6:	f7fe fcdd 	bl	8000b94 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X01);
 80021da:	2001      	movs	r0, #1
 80021dc:	f7fe fcda 	bl	8000b94 <LCD_WR_DATAX>
		LCD_WR_DATAX(0XDF);
 80021e0:	20df      	movs	r0, #223	; 0xdf
 80021e2:	f7fe fcd7 	bl	8000b94 <LCD_WR_DATAX>
		HAL_Delay(120);
 80021e6:	2078      	movs	r0, #120	; 0x78
 80021e8:	f003 fef0 	bl	8005fcc <HAL_Delay>
		LCD_WR_REG(0X29);
 80021ec:	2029      	movs	r0, #41	; 0x29
 80021ee:	f7fe fcad 	bl	8000b4c <LCD_WR_REG>
 80021f2:	f003 bc27 	b.w	8005a44 <LCD_Init+0x3e34>
 80021f6:	bf00      	nop
 80021f8:	20000028 	.word	0x20000028
	} else if (lcddev.id == 0x5310) {
 80021fc:	4b03      	ldr	r3, [pc, #12]	; (800220c <LCD_Init+0x5fc>)
 80021fe:	889b      	ldrh	r3, [r3, #4]
 8002200:	f245 3210 	movw	r2, #21264	; 0x5310
 8002204:	4293      	cmp	r3, r2
 8002206:	f040 877c 	bne.w	8003102 <LCD_Init+0x14f2>
 800220a:	e001      	b.n	8002210 <LCD_Init+0x600>
 800220c:	20000028 	.word	0x20000028
		LCD_WR_REG(0xED);
 8002210:	20ed      	movs	r0, #237	; 0xed
 8002212:	f7fe fc9b 	bl	8000b4c <LCD_WR_REG>
		LCD_WR_DATAX(0x01);
 8002216:	2001      	movs	r0, #1
 8002218:	f7fe fcbc 	bl	8000b94 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xFE);
 800221c:	20fe      	movs	r0, #254	; 0xfe
 800221e:	f7fe fcb9 	bl	8000b94 <LCD_WR_DATAX>

		LCD_WR_REG(0xEE);
 8002222:	20ee      	movs	r0, #238	; 0xee
 8002224:	f7fe fc92 	bl	8000b4c <LCD_WR_REG>
		LCD_WR_DATAX(0xDE);
 8002228:	20de      	movs	r0, #222	; 0xde
 800222a:	f7fe fcb3 	bl	8000b94 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x21);
 800222e:	2021      	movs	r0, #33	; 0x21
 8002230:	f7fe fcb0 	bl	8000b94 <LCD_WR_DATAX>

		LCD_WR_REG(0xF1);
 8002234:	20f1      	movs	r0, #241	; 0xf1
 8002236:	f7fe fc89 	bl	8000b4c <LCD_WR_REG>
		LCD_WR_DATAX(0x01);
 800223a:	2001      	movs	r0, #1
 800223c:	f7fe fcaa 	bl	8000b94 <LCD_WR_DATAX>
		LCD_WR_REG(0xDF);
 8002240:	20df      	movs	r0, #223	; 0xdf
 8002242:	f7fe fc83 	bl	8000b4c <LCD_WR_REG>
		LCD_WR_DATAX(0x10);
 8002246:	2010      	movs	r0, #16
 8002248:	f7fe fca4 	bl	8000b94 <LCD_WR_DATAX>

		//VCOMvoltage//
		LCD_WR_REG(0xC4);
 800224c:	20c4      	movs	r0, #196	; 0xc4
 800224e:	f7fe fc7d 	bl	8000b4c <LCD_WR_REG>
		LCD_WR_DATAX(0x8F);	  //5f
 8002252:	208f      	movs	r0, #143	; 0x8f
 8002254:	f7fe fc9e 	bl	8000b94 <LCD_WR_DATAX>

		LCD_WR_REG(0xC6);
 8002258:	20c6      	movs	r0, #198	; 0xc6
 800225a:	f7fe fc77 	bl	8000b4c <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 800225e:	2000      	movs	r0, #0
 8002260:	f7fe fc98 	bl	8000b94 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xE2);
 8002264:	20e2      	movs	r0, #226	; 0xe2
 8002266:	f7fe fc95 	bl	8000b94 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xE2);
 800226a:	20e2      	movs	r0, #226	; 0xe2
 800226c:	f7fe fc92 	bl	8000b94 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xE2);
 8002270:	20e2      	movs	r0, #226	; 0xe2
 8002272:	f7fe fc8f 	bl	8000b94 <LCD_WR_DATAX>
		LCD_WR_REG(0xBF);
 8002276:	20bf      	movs	r0, #191	; 0xbf
 8002278:	f7fe fc68 	bl	8000b4c <LCD_WR_REG>
		LCD_WR_DATAX(0xAA);
 800227c:	20aa      	movs	r0, #170	; 0xaa
 800227e:	f7fe fc89 	bl	8000b94 <LCD_WR_DATAX>

		LCD_WR_REG(0xB0);
 8002282:	20b0      	movs	r0, #176	; 0xb0
 8002284:	f7fe fc62 	bl	8000b4c <LCD_WR_REG>
		LCD_WR_DATAX(0x0D);
 8002288:	200d      	movs	r0, #13
 800228a:	f7fe fc83 	bl	8000b94 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800228e:	2000      	movs	r0, #0
 8002290:	f7fe fc80 	bl	8000b94 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x0D);
 8002294:	200d      	movs	r0, #13
 8002296:	f7fe fc7d 	bl	8000b94 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800229a:	2000      	movs	r0, #0
 800229c:	f7fe fc7a 	bl	8000b94 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x11);
 80022a0:	2011      	movs	r0, #17
 80022a2:	f7fe fc77 	bl	8000b94 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80022a6:	2000      	movs	r0, #0
 80022a8:	f7fe fc74 	bl	8000b94 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x19);
 80022ac:	2019      	movs	r0, #25
 80022ae:	f7fe fc71 	bl	8000b94 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80022b2:	2000      	movs	r0, #0
 80022b4:	f7fe fc6e 	bl	8000b94 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x21);
 80022b8:	2021      	movs	r0, #33	; 0x21
 80022ba:	f7fe fc6b 	bl	8000b94 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80022be:	2000      	movs	r0, #0
 80022c0:	f7fe fc68 	bl	8000b94 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x2D);
 80022c4:	202d      	movs	r0, #45	; 0x2d
 80022c6:	f7fe fc65 	bl	8000b94 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80022ca:	2000      	movs	r0, #0
 80022cc:	f7fe fc62 	bl	8000b94 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x3D);
 80022d0:	203d      	movs	r0, #61	; 0x3d
 80022d2:	f7fe fc5f 	bl	8000b94 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80022d6:	2000      	movs	r0, #0
 80022d8:	f7fe fc5c 	bl	8000b94 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x5D);
 80022dc:	205d      	movs	r0, #93	; 0x5d
 80022de:	f7fe fc59 	bl	8000b94 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80022e2:	2000      	movs	r0, #0
 80022e4:	f7fe fc56 	bl	8000b94 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x5D);
 80022e8:	205d      	movs	r0, #93	; 0x5d
 80022ea:	f7fe fc53 	bl	8000b94 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80022ee:	2000      	movs	r0, #0
 80022f0:	f7fe fc50 	bl	8000b94 <LCD_WR_DATAX>

		LCD_WR_REG(0xB1);
 80022f4:	20b1      	movs	r0, #177	; 0xb1
 80022f6:	f7fe fc29 	bl	8000b4c <LCD_WR_REG>
		LCD_WR_DATAX(0x80);
 80022fa:	2080      	movs	r0, #128	; 0x80
 80022fc:	f7fe fc4a 	bl	8000b94 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002300:	2000      	movs	r0, #0
 8002302:	f7fe fc47 	bl	8000b94 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x8B);
 8002306:	208b      	movs	r0, #139	; 0x8b
 8002308:	f7fe fc44 	bl	8000b94 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800230c:	2000      	movs	r0, #0
 800230e:	f7fe fc41 	bl	8000b94 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x96);
 8002312:	2096      	movs	r0, #150	; 0x96
 8002314:	f7fe fc3e 	bl	8000b94 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002318:	2000      	movs	r0, #0
 800231a:	f7fe fc3b 	bl	8000b94 <LCD_WR_DATAX>

		LCD_WR_REG(0xB2);
 800231e:	20b2      	movs	r0, #178	; 0xb2
 8002320:	f7fe fc14 	bl	8000b4c <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 8002324:	2000      	movs	r0, #0
 8002326:	f7fe fc35 	bl	8000b94 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800232a:	2000      	movs	r0, #0
 800232c:	f7fe fc32 	bl	8000b94 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x02);
 8002330:	2002      	movs	r0, #2
 8002332:	f7fe fc2f 	bl	8000b94 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002336:	2000      	movs	r0, #0
 8002338:	f7fe fc2c 	bl	8000b94 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x03);
 800233c:	2003      	movs	r0, #3
 800233e:	f7fe fc29 	bl	8000b94 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002342:	2000      	movs	r0, #0
 8002344:	f7fe fc26 	bl	8000b94 <LCD_WR_DATAX>

		LCD_WR_REG(0xB3);
 8002348:	20b3      	movs	r0, #179	; 0xb3
 800234a:	f7fe fbff 	bl	8000b4c <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 800234e:	2000      	movs	r0, #0
 8002350:	f7fe fc20 	bl	8000b94 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002354:	2000      	movs	r0, #0
 8002356:	f7fe fc1d 	bl	8000b94 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800235a:	2000      	movs	r0, #0
 800235c:	f7fe fc1a 	bl	8000b94 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002360:	2000      	movs	r0, #0
 8002362:	f7fe fc17 	bl	8000b94 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002366:	2000      	movs	r0, #0
 8002368:	f7fe fc14 	bl	8000b94 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800236c:	2000      	movs	r0, #0
 800236e:	f7fe fc11 	bl	8000b94 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002372:	2000      	movs	r0, #0
 8002374:	f7fe fc0e 	bl	8000b94 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002378:	2000      	movs	r0, #0
 800237a:	f7fe fc0b 	bl	8000b94 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800237e:	2000      	movs	r0, #0
 8002380:	f7fe fc08 	bl	8000b94 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002384:	2000      	movs	r0, #0
 8002386:	f7fe fc05 	bl	8000b94 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800238a:	2000      	movs	r0, #0
 800238c:	f7fe fc02 	bl	8000b94 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002390:	2000      	movs	r0, #0
 8002392:	f7fe fbff 	bl	8000b94 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002396:	2000      	movs	r0, #0
 8002398:	f7fe fbfc 	bl	8000b94 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800239c:	2000      	movs	r0, #0
 800239e:	f7fe fbf9 	bl	8000b94 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80023a2:	2000      	movs	r0, #0
 80023a4:	f7fe fbf6 	bl	8000b94 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80023a8:	2000      	movs	r0, #0
 80023aa:	f7fe fbf3 	bl	8000b94 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80023ae:	2000      	movs	r0, #0
 80023b0:	f7fe fbf0 	bl	8000b94 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80023b4:	2000      	movs	r0, #0
 80023b6:	f7fe fbed 	bl	8000b94 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80023ba:	2000      	movs	r0, #0
 80023bc:	f7fe fbea 	bl	8000b94 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80023c0:	2000      	movs	r0, #0
 80023c2:	f7fe fbe7 	bl	8000b94 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80023c6:	2000      	movs	r0, #0
 80023c8:	f7fe fbe4 	bl	8000b94 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80023cc:	2000      	movs	r0, #0
 80023ce:	f7fe fbe1 	bl	8000b94 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80023d2:	2000      	movs	r0, #0
 80023d4:	f7fe fbde 	bl	8000b94 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80023d8:	2000      	movs	r0, #0
 80023da:	f7fe fbdb 	bl	8000b94 <LCD_WR_DATAX>

		LCD_WR_REG(0xB4);
 80023de:	20b4      	movs	r0, #180	; 0xb4
 80023e0:	f7fe fbb4 	bl	8000b4c <LCD_WR_REG>
		LCD_WR_DATAX(0x8B);
 80023e4:	208b      	movs	r0, #139	; 0x8b
 80023e6:	f7fe fbd5 	bl	8000b94 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80023ea:	2000      	movs	r0, #0
 80023ec:	f7fe fbd2 	bl	8000b94 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x96);
 80023f0:	2096      	movs	r0, #150	; 0x96
 80023f2:	f7fe fbcf 	bl	8000b94 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80023f6:	2000      	movs	r0, #0
 80023f8:	f7fe fbcc 	bl	8000b94 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xA1);
 80023fc:	20a1      	movs	r0, #161	; 0xa1
 80023fe:	f7fe fbc9 	bl	8000b94 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002402:	2000      	movs	r0, #0
 8002404:	f7fe fbc6 	bl	8000b94 <LCD_WR_DATAX>

		LCD_WR_REG(0xB5);
 8002408:	20b5      	movs	r0, #181	; 0xb5
 800240a:	f7fe fb9f 	bl	8000b4c <LCD_WR_REG>
		LCD_WR_DATAX(0x02);
 800240e:	2002      	movs	r0, #2
 8002410:	f7fe fbc0 	bl	8000b94 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002414:	2000      	movs	r0, #0
 8002416:	f7fe fbbd 	bl	8000b94 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x03);
 800241a:	2003      	movs	r0, #3
 800241c:	f7fe fbba 	bl	8000b94 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002420:	2000      	movs	r0, #0
 8002422:	f7fe fbb7 	bl	8000b94 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x04);
 8002426:	2004      	movs	r0, #4
 8002428:	f7fe fbb4 	bl	8000b94 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800242c:	2000      	movs	r0, #0
 800242e:	f7fe fbb1 	bl	8000b94 <LCD_WR_DATAX>

		LCD_WR_REG(0xB6);
 8002432:	20b6      	movs	r0, #182	; 0xb6
 8002434:	f7fe fb8a 	bl	8000b4c <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 8002438:	2000      	movs	r0, #0
 800243a:	f7fe fbab 	bl	8000b94 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800243e:	2000      	movs	r0, #0
 8002440:	f7fe fba8 	bl	8000b94 <LCD_WR_DATAX>

		LCD_WR_REG(0xB7);
 8002444:	20b7      	movs	r0, #183	; 0xb7
 8002446:	f7fe fb81 	bl	8000b4c <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 800244a:	2000      	movs	r0, #0
 800244c:	f7fe fba2 	bl	8000b94 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002450:	2000      	movs	r0, #0
 8002452:	f7fe fb9f 	bl	8000b94 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x3F);
 8002456:	203f      	movs	r0, #63	; 0x3f
 8002458:	f7fe fb9c 	bl	8000b94 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800245c:	2000      	movs	r0, #0
 800245e:	f7fe fb99 	bl	8000b94 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x5E);
 8002462:	205e      	movs	r0, #94	; 0x5e
 8002464:	f7fe fb96 	bl	8000b94 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002468:	2000      	movs	r0, #0
 800246a:	f7fe fb93 	bl	8000b94 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x64);
 800246e:	2064      	movs	r0, #100	; 0x64
 8002470:	f7fe fb90 	bl	8000b94 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002474:	2000      	movs	r0, #0
 8002476:	f7fe fb8d 	bl	8000b94 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x8C);
 800247a:	208c      	movs	r0, #140	; 0x8c
 800247c:	f7fe fb8a 	bl	8000b94 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002480:	2000      	movs	r0, #0
 8002482:	f7fe fb87 	bl	8000b94 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xAC);
 8002486:	20ac      	movs	r0, #172	; 0xac
 8002488:	f7fe fb84 	bl	8000b94 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800248c:	2000      	movs	r0, #0
 800248e:	f7fe fb81 	bl	8000b94 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xDC);
 8002492:	20dc      	movs	r0, #220	; 0xdc
 8002494:	f7fe fb7e 	bl	8000b94 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002498:	2000      	movs	r0, #0
 800249a:	f7fe fb7b 	bl	8000b94 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x70);
 800249e:	2070      	movs	r0, #112	; 0x70
 80024a0:	f7fe fb78 	bl	8000b94 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80024a4:	2000      	movs	r0, #0
 80024a6:	f7fe fb75 	bl	8000b94 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x90);
 80024aa:	2090      	movs	r0, #144	; 0x90
 80024ac:	f7fe fb72 	bl	8000b94 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80024b0:	2000      	movs	r0, #0
 80024b2:	f7fe fb6f 	bl	8000b94 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xEB);
 80024b6:	20eb      	movs	r0, #235	; 0xeb
 80024b8:	f7fe fb6c 	bl	8000b94 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80024bc:	2000      	movs	r0, #0
 80024be:	f7fe fb69 	bl	8000b94 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xDC);
 80024c2:	20dc      	movs	r0, #220	; 0xdc
 80024c4:	f7fe fb66 	bl	8000b94 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80024c8:	2000      	movs	r0, #0
 80024ca:	f7fe fb63 	bl	8000b94 <LCD_WR_DATAX>

		LCD_WR_REG(0xB8);
 80024ce:	20b8      	movs	r0, #184	; 0xb8
 80024d0:	f7fe fb3c 	bl	8000b4c <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 80024d4:	2000      	movs	r0, #0
 80024d6:	f7fe fb5d 	bl	8000b94 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80024da:	2000      	movs	r0, #0
 80024dc:	f7fe fb5a 	bl	8000b94 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80024e0:	2000      	movs	r0, #0
 80024e2:	f7fe fb57 	bl	8000b94 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80024e6:	2000      	movs	r0, #0
 80024e8:	f7fe fb54 	bl	8000b94 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80024ec:	2000      	movs	r0, #0
 80024ee:	f7fe fb51 	bl	8000b94 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80024f2:	2000      	movs	r0, #0
 80024f4:	f7fe fb4e 	bl	8000b94 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80024f8:	2000      	movs	r0, #0
 80024fa:	f7fe fb4b 	bl	8000b94 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80024fe:	2000      	movs	r0, #0
 8002500:	f7fe fb48 	bl	8000b94 <LCD_WR_DATAX>

		LCD_WR_REG(0xBA);
 8002504:	20ba      	movs	r0, #186	; 0xba
 8002506:	f7fe fb21 	bl	8000b4c <LCD_WR_REG>
		LCD_WR_DATAX(0x24);
 800250a:	2024      	movs	r0, #36	; 0x24
 800250c:	f7fe fb42 	bl	8000b94 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002510:	2000      	movs	r0, #0
 8002512:	f7fe fb3f 	bl	8000b94 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002516:	2000      	movs	r0, #0
 8002518:	f7fe fb3c 	bl	8000b94 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800251c:	2000      	movs	r0, #0
 800251e:	f7fe fb39 	bl	8000b94 <LCD_WR_DATAX>

		LCD_WR_REG(0xC1);
 8002522:	20c1      	movs	r0, #193	; 0xc1
 8002524:	f7fe fb12 	bl	8000b4c <LCD_WR_REG>
		LCD_WR_DATAX(0x20);
 8002528:	2020      	movs	r0, #32
 800252a:	f7fe fb33 	bl	8000b94 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800252e:	2000      	movs	r0, #0
 8002530:	f7fe fb30 	bl	8000b94 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x54);
 8002534:	2054      	movs	r0, #84	; 0x54
 8002536:	f7fe fb2d 	bl	8000b94 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800253a:	2000      	movs	r0, #0
 800253c:	f7fe fb2a 	bl	8000b94 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xFF);
 8002540:	20ff      	movs	r0, #255	; 0xff
 8002542:	f7fe fb27 	bl	8000b94 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002546:	2000      	movs	r0, #0
 8002548:	f7fe fb24 	bl	8000b94 <LCD_WR_DATAX>

		LCD_WR_REG(0xC2);
 800254c:	20c2      	movs	r0, #194	; 0xc2
 800254e:	f7fe fafd 	bl	8000b4c <LCD_WR_REG>
		LCD_WR_DATAX(0x0A);
 8002552:	200a      	movs	r0, #10
 8002554:	f7fe fb1e 	bl	8000b94 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002558:	2000      	movs	r0, #0
 800255a:	f7fe fb1b 	bl	8000b94 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x04);
 800255e:	2004      	movs	r0, #4
 8002560:	f7fe fb18 	bl	8000b94 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002564:	2000      	movs	r0, #0
 8002566:	f7fe fb15 	bl	8000b94 <LCD_WR_DATAX>

		LCD_WR_REG(0xC3);
 800256a:	20c3      	movs	r0, #195	; 0xc3
 800256c:	f7fe faee 	bl	8000b4c <LCD_WR_REG>
		LCD_WR_DATAX(0x3C);
 8002570:	203c      	movs	r0, #60	; 0x3c
 8002572:	f7fe fb0f 	bl	8000b94 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002576:	2000      	movs	r0, #0
 8002578:	f7fe fb0c 	bl	8000b94 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x3A);
 800257c:	203a      	movs	r0, #58	; 0x3a
 800257e:	f7fe fb09 	bl	8000b94 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002582:	2000      	movs	r0, #0
 8002584:	f7fe fb06 	bl	8000b94 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x39);
 8002588:	2039      	movs	r0, #57	; 0x39
 800258a:	f7fe fb03 	bl	8000b94 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800258e:	2000      	movs	r0, #0
 8002590:	f7fe fb00 	bl	8000b94 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x37);
 8002594:	2037      	movs	r0, #55	; 0x37
 8002596:	f7fe fafd 	bl	8000b94 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800259a:	2000      	movs	r0, #0
 800259c:	f7fe fafa 	bl	8000b94 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x3C);
 80025a0:	203c      	movs	r0, #60	; 0x3c
 80025a2:	f7fe faf7 	bl	8000b94 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80025a6:	2000      	movs	r0, #0
 80025a8:	f7fe faf4 	bl	8000b94 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x36);
 80025ac:	2036      	movs	r0, #54	; 0x36
 80025ae:	f7fe faf1 	bl	8000b94 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80025b2:	2000      	movs	r0, #0
 80025b4:	f7fe faee 	bl	8000b94 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x32);
 80025b8:	2032      	movs	r0, #50	; 0x32
 80025ba:	f7fe faeb 	bl	8000b94 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80025be:	2000      	movs	r0, #0
 80025c0:	f7fe fae8 	bl	8000b94 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x2F);
 80025c4:	202f      	movs	r0, #47	; 0x2f
 80025c6:	f7fe fae5 	bl	8000b94 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80025ca:	2000      	movs	r0, #0
 80025cc:	f7fe fae2 	bl	8000b94 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x2C);
 80025d0:	202c      	movs	r0, #44	; 0x2c
 80025d2:	f7fe fadf 	bl	8000b94 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80025d6:	2000      	movs	r0, #0
 80025d8:	f7fe fadc 	bl	8000b94 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x29);
 80025dc:	2029      	movs	r0, #41	; 0x29
 80025de:	f7fe fad9 	bl	8000b94 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80025e2:	2000      	movs	r0, #0
 80025e4:	f7fe fad6 	bl	8000b94 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x26);
 80025e8:	2026      	movs	r0, #38	; 0x26
 80025ea:	f7fe fad3 	bl	8000b94 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80025ee:	2000      	movs	r0, #0
 80025f0:	f7fe fad0 	bl	8000b94 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x24);
 80025f4:	2024      	movs	r0, #36	; 0x24
 80025f6:	f7fe facd 	bl	8000b94 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80025fa:	2000      	movs	r0, #0
 80025fc:	f7fe faca 	bl	8000b94 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x24);
 8002600:	2024      	movs	r0, #36	; 0x24
 8002602:	f7fe fac7 	bl	8000b94 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002606:	2000      	movs	r0, #0
 8002608:	f7fe fac4 	bl	8000b94 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x23);
 800260c:	2023      	movs	r0, #35	; 0x23
 800260e:	f7fe fac1 	bl	8000b94 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002612:	2000      	movs	r0, #0
 8002614:	f7fe fabe 	bl	8000b94 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x3C);
 8002618:	203c      	movs	r0, #60	; 0x3c
 800261a:	f7fe fabb 	bl	8000b94 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800261e:	2000      	movs	r0, #0
 8002620:	f7fe fab8 	bl	8000b94 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x36);
 8002624:	2036      	movs	r0, #54	; 0x36
 8002626:	f7fe fab5 	bl	8000b94 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800262a:	2000      	movs	r0, #0
 800262c:	f7fe fab2 	bl	8000b94 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x32);
 8002630:	2032      	movs	r0, #50	; 0x32
 8002632:	f7fe faaf 	bl	8000b94 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002636:	2000      	movs	r0, #0
 8002638:	f7fe faac 	bl	8000b94 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x2F);
 800263c:	202f      	movs	r0, #47	; 0x2f
 800263e:	f7fe faa9 	bl	8000b94 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002642:	2000      	movs	r0, #0
 8002644:	f7fe faa6 	bl	8000b94 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x2C);
 8002648:	202c      	movs	r0, #44	; 0x2c
 800264a:	f7fe faa3 	bl	8000b94 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800264e:	2000      	movs	r0, #0
 8002650:	f7fe faa0 	bl	8000b94 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x29);
 8002654:	2029      	movs	r0, #41	; 0x29
 8002656:	f7fe fa9d 	bl	8000b94 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800265a:	2000      	movs	r0, #0
 800265c:	f7fe fa9a 	bl	8000b94 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x26);
 8002660:	2026      	movs	r0, #38	; 0x26
 8002662:	f7fe fa97 	bl	8000b94 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002666:	2000      	movs	r0, #0
 8002668:	f7fe fa94 	bl	8000b94 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x24);
 800266c:	2024      	movs	r0, #36	; 0x24
 800266e:	f7fe fa91 	bl	8000b94 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002672:	2000      	movs	r0, #0
 8002674:	f7fe fa8e 	bl	8000b94 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x24);
 8002678:	2024      	movs	r0, #36	; 0x24
 800267a:	f7fe fa8b 	bl	8000b94 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800267e:	2000      	movs	r0, #0
 8002680:	f7fe fa88 	bl	8000b94 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x23);
 8002684:	2023      	movs	r0, #35	; 0x23
 8002686:	f7fe fa85 	bl	8000b94 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800268a:	2000      	movs	r0, #0
 800268c:	f7fe fa82 	bl	8000b94 <LCD_WR_DATAX>

		LCD_WR_REG(0xC4);
 8002690:	20c4      	movs	r0, #196	; 0xc4
 8002692:	f7fe fa5b 	bl	8000b4c <LCD_WR_REG>
		LCD_WR_DATAX(0x62);
 8002696:	2062      	movs	r0, #98	; 0x62
 8002698:	f7fe fa7c 	bl	8000b94 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800269c:	2000      	movs	r0, #0
 800269e:	f7fe fa79 	bl	8000b94 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x05);
 80026a2:	2005      	movs	r0, #5
 80026a4:	f7fe fa76 	bl	8000b94 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80026a8:	2000      	movs	r0, #0
 80026aa:	f7fe fa73 	bl	8000b94 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x84);
 80026ae:	2084      	movs	r0, #132	; 0x84
 80026b0:	f7fe fa70 	bl	8000b94 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80026b4:	2000      	movs	r0, #0
 80026b6:	f7fe fa6d 	bl	8000b94 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xF0);
 80026ba:	20f0      	movs	r0, #240	; 0xf0
 80026bc:	f7fe fa6a 	bl	8000b94 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80026c0:	2000      	movs	r0, #0
 80026c2:	f7fe fa67 	bl	8000b94 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x18);
 80026c6:	2018      	movs	r0, #24
 80026c8:	f7fe fa64 	bl	8000b94 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80026cc:	2000      	movs	r0, #0
 80026ce:	f7fe fa61 	bl	8000b94 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xA4);
 80026d2:	20a4      	movs	r0, #164	; 0xa4
 80026d4:	f7fe fa5e 	bl	8000b94 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80026d8:	2000      	movs	r0, #0
 80026da:	f7fe fa5b 	bl	8000b94 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x18);
 80026de:	2018      	movs	r0, #24
 80026e0:	f7fe fa58 	bl	8000b94 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80026e4:	2000      	movs	r0, #0
 80026e6:	f7fe fa55 	bl	8000b94 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x50);
 80026ea:	2050      	movs	r0, #80	; 0x50
 80026ec:	f7fe fa52 	bl	8000b94 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80026f0:	2000      	movs	r0, #0
 80026f2:	f7fe fa4f 	bl	8000b94 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x0C);
 80026f6:	200c      	movs	r0, #12
 80026f8:	f7fe fa4c 	bl	8000b94 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80026fc:	2000      	movs	r0, #0
 80026fe:	f7fe fa49 	bl	8000b94 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x17);
 8002702:	2017      	movs	r0, #23
 8002704:	f7fe fa46 	bl	8000b94 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002708:	2000      	movs	r0, #0
 800270a:	f7fe fa43 	bl	8000b94 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x95);
 800270e:	2095      	movs	r0, #149	; 0x95
 8002710:	f7fe fa40 	bl	8000b94 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002714:	2000      	movs	r0, #0
 8002716:	f7fe fa3d 	bl	8000b94 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xF3);
 800271a:	20f3      	movs	r0, #243	; 0xf3
 800271c:	f7fe fa3a 	bl	8000b94 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002720:	2000      	movs	r0, #0
 8002722:	f7fe fa37 	bl	8000b94 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xE6);
 8002726:	20e6      	movs	r0, #230	; 0xe6
 8002728:	f7fe fa34 	bl	8000b94 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800272c:	2000      	movs	r0, #0
 800272e:	f7fe fa31 	bl	8000b94 <LCD_WR_DATAX>

		LCD_WR_REG(0xC5);
 8002732:	20c5      	movs	r0, #197	; 0xc5
 8002734:	f7fe fa0a 	bl	8000b4c <LCD_WR_REG>
		LCD_WR_DATAX(0x32);
 8002738:	2032      	movs	r0, #50	; 0x32
 800273a:	f7fe fa2b 	bl	8000b94 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800273e:	2000      	movs	r0, #0
 8002740:	f7fe fa28 	bl	8000b94 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x44);
 8002744:	2044      	movs	r0, #68	; 0x44
 8002746:	f7fe fa25 	bl	8000b94 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800274a:	2000      	movs	r0, #0
 800274c:	f7fe fa22 	bl	8000b94 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x65);
 8002750:	2065      	movs	r0, #101	; 0x65
 8002752:	f7fe fa1f 	bl	8000b94 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002756:	2000      	movs	r0, #0
 8002758:	f7fe fa1c 	bl	8000b94 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x76);
 800275c:	2076      	movs	r0, #118	; 0x76
 800275e:	f7fe fa19 	bl	8000b94 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002762:	2000      	movs	r0, #0
 8002764:	f7fe fa16 	bl	8000b94 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x88);
 8002768:	2088      	movs	r0, #136	; 0x88
 800276a:	f7fe fa13 	bl	8000b94 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800276e:	2000      	movs	r0, #0
 8002770:	f7fe fa10 	bl	8000b94 <LCD_WR_DATAX>

		LCD_WR_REG(0xC6);
 8002774:	20c6      	movs	r0, #198	; 0xc6
 8002776:	f7fe f9e9 	bl	8000b4c <LCD_WR_REG>
		LCD_WR_DATAX(0x20);
 800277a:	2020      	movs	r0, #32
 800277c:	f7fe fa0a 	bl	8000b94 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002780:	2000      	movs	r0, #0
 8002782:	f7fe fa07 	bl	8000b94 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x17);
 8002786:	2017      	movs	r0, #23
 8002788:	f7fe fa04 	bl	8000b94 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800278c:	2000      	movs	r0, #0
 800278e:	f7fe fa01 	bl	8000b94 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x01);
 8002792:	2001      	movs	r0, #1
 8002794:	f7fe f9fe 	bl	8000b94 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002798:	2000      	movs	r0, #0
 800279a:	f7fe f9fb 	bl	8000b94 <LCD_WR_DATAX>

		LCD_WR_REG(0xC7);
 800279e:	20c7      	movs	r0, #199	; 0xc7
 80027a0:	f7fe f9d4 	bl	8000b4c <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 80027a4:	2000      	movs	r0, #0
 80027a6:	f7fe f9f5 	bl	8000b94 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80027aa:	2000      	movs	r0, #0
 80027ac:	f7fe f9f2 	bl	8000b94 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80027b0:	2000      	movs	r0, #0
 80027b2:	f7fe f9ef 	bl	8000b94 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80027b6:	2000      	movs	r0, #0
 80027b8:	f7fe f9ec 	bl	8000b94 <LCD_WR_DATAX>

		LCD_WR_REG(0xC8);
 80027bc:	20c8      	movs	r0, #200	; 0xc8
 80027be:	f7fe f9c5 	bl	8000b4c <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 80027c2:	2000      	movs	r0, #0
 80027c4:	f7fe f9e6 	bl	8000b94 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80027c8:	2000      	movs	r0, #0
 80027ca:	f7fe f9e3 	bl	8000b94 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80027ce:	2000      	movs	r0, #0
 80027d0:	f7fe f9e0 	bl	8000b94 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80027d4:	2000      	movs	r0, #0
 80027d6:	f7fe f9dd 	bl	8000b94 <LCD_WR_DATAX>

		LCD_WR_REG(0xC9);
 80027da:	20c9      	movs	r0, #201	; 0xc9
 80027dc:	f7fe f9b6 	bl	8000b4c <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 80027e0:	2000      	movs	r0, #0
 80027e2:	f7fe f9d7 	bl	8000b94 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80027e6:	2000      	movs	r0, #0
 80027e8:	f7fe f9d4 	bl	8000b94 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80027ec:	2000      	movs	r0, #0
 80027ee:	f7fe f9d1 	bl	8000b94 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80027f2:	2000      	movs	r0, #0
 80027f4:	f7fe f9ce 	bl	8000b94 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80027f8:	2000      	movs	r0, #0
 80027fa:	f7fe f9cb 	bl	8000b94 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80027fe:	2000      	movs	r0, #0
 8002800:	f7fe f9c8 	bl	8000b94 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002804:	2000      	movs	r0, #0
 8002806:	f7fe f9c5 	bl	8000b94 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800280a:	2000      	movs	r0, #0
 800280c:	f7fe f9c2 	bl	8000b94 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002810:	2000      	movs	r0, #0
 8002812:	f7fe f9bf 	bl	8000b94 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002816:	2000      	movs	r0, #0
 8002818:	f7fe f9bc 	bl	8000b94 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800281c:	2000      	movs	r0, #0
 800281e:	f7fe f9b9 	bl	8000b94 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002822:	2000      	movs	r0, #0
 8002824:	f7fe f9b6 	bl	8000b94 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002828:	2000      	movs	r0, #0
 800282a:	f7fe f9b3 	bl	8000b94 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800282e:	2000      	movs	r0, #0
 8002830:	f7fe f9b0 	bl	8000b94 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002834:	2000      	movs	r0, #0
 8002836:	f7fe f9ad 	bl	8000b94 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800283a:	2000      	movs	r0, #0
 800283c:	f7fe f9aa 	bl	8000b94 <LCD_WR_DATAX>

		LCD_WR_REG(0xE0);
 8002840:	20e0      	movs	r0, #224	; 0xe0
 8002842:	f7fe f983 	bl	8000b4c <LCD_WR_REG>
		LCD_WR_DATAX(0x16);
 8002846:	2016      	movs	r0, #22
 8002848:	f7fe f9a4 	bl	8000b94 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800284c:	2000      	movs	r0, #0
 800284e:	f7fe f9a1 	bl	8000b94 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x1C);
 8002852:	201c      	movs	r0, #28
 8002854:	f7fe f99e 	bl	8000b94 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002858:	2000      	movs	r0, #0
 800285a:	f7fe f99b 	bl	8000b94 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x21);
 800285e:	2021      	movs	r0, #33	; 0x21
 8002860:	f7fe f998 	bl	8000b94 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002864:	2000      	movs	r0, #0
 8002866:	f7fe f995 	bl	8000b94 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x36);
 800286a:	2036      	movs	r0, #54	; 0x36
 800286c:	f7fe f992 	bl	8000b94 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002870:	2000      	movs	r0, #0
 8002872:	f7fe f98f 	bl	8000b94 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x46);
 8002876:	2046      	movs	r0, #70	; 0x46
 8002878:	f7fe f98c 	bl	8000b94 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800287c:	2000      	movs	r0, #0
 800287e:	f7fe f989 	bl	8000b94 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x52);
 8002882:	2052      	movs	r0, #82	; 0x52
 8002884:	f7fe f986 	bl	8000b94 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002888:	2000      	movs	r0, #0
 800288a:	f7fe f983 	bl	8000b94 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x64);
 800288e:	2064      	movs	r0, #100	; 0x64
 8002890:	f7fe f980 	bl	8000b94 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002894:	2000      	movs	r0, #0
 8002896:	f7fe f97d 	bl	8000b94 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x7A);
 800289a:	207a      	movs	r0, #122	; 0x7a
 800289c:	f7fe f97a 	bl	8000b94 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80028a0:	2000      	movs	r0, #0
 80028a2:	f7fe f977 	bl	8000b94 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x8B);
 80028a6:	208b      	movs	r0, #139	; 0x8b
 80028a8:	f7fe f974 	bl	8000b94 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80028ac:	2000      	movs	r0, #0
 80028ae:	f7fe f971 	bl	8000b94 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x99);
 80028b2:	2099      	movs	r0, #153	; 0x99
 80028b4:	f7fe f96e 	bl	8000b94 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80028b8:	2000      	movs	r0, #0
 80028ba:	f7fe f96b 	bl	8000b94 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xA8);
 80028be:	20a8      	movs	r0, #168	; 0xa8
 80028c0:	f7fe f968 	bl	8000b94 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80028c4:	2000      	movs	r0, #0
 80028c6:	f7fe f965 	bl	8000b94 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xB9);
 80028ca:	20b9      	movs	r0, #185	; 0xb9
 80028cc:	f7fe f962 	bl	8000b94 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80028d0:	2000      	movs	r0, #0
 80028d2:	f7fe f95f 	bl	8000b94 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xC4);
 80028d6:	20c4      	movs	r0, #196	; 0xc4
 80028d8:	f7fe f95c 	bl	8000b94 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80028dc:	2000      	movs	r0, #0
 80028de:	f7fe f959 	bl	8000b94 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xCA);
 80028e2:	20ca      	movs	r0, #202	; 0xca
 80028e4:	f7fe f956 	bl	8000b94 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80028e8:	2000      	movs	r0, #0
 80028ea:	f7fe f953 	bl	8000b94 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xD2);
 80028ee:	20d2      	movs	r0, #210	; 0xd2
 80028f0:	f7fe f950 	bl	8000b94 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80028f4:	2000      	movs	r0, #0
 80028f6:	f7fe f94d 	bl	8000b94 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xD9);
 80028fa:	20d9      	movs	r0, #217	; 0xd9
 80028fc:	f7fe f94a 	bl	8000b94 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002900:	2000      	movs	r0, #0
 8002902:	f7fe f947 	bl	8000b94 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xE0);
 8002906:	20e0      	movs	r0, #224	; 0xe0
 8002908:	f7fe f944 	bl	8000b94 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800290c:	2000      	movs	r0, #0
 800290e:	f7fe f941 	bl	8000b94 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xF3);
 8002912:	20f3      	movs	r0, #243	; 0xf3
 8002914:	f7fe f93e 	bl	8000b94 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002918:	2000      	movs	r0, #0
 800291a:	f7fe f93b 	bl	8000b94 <LCD_WR_DATAX>

		LCD_WR_REG(0xE1);
 800291e:	20e1      	movs	r0, #225	; 0xe1
 8002920:	f7fe f914 	bl	8000b4c <LCD_WR_REG>
		LCD_WR_DATAX(0x16);
 8002924:	2016      	movs	r0, #22
 8002926:	f7fe f935 	bl	8000b94 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800292a:	2000      	movs	r0, #0
 800292c:	f7fe f932 	bl	8000b94 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x1C);
 8002930:	201c      	movs	r0, #28
 8002932:	f7fe f92f 	bl	8000b94 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002936:	2000      	movs	r0, #0
 8002938:	f7fe f92c 	bl	8000b94 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x22);
 800293c:	2022      	movs	r0, #34	; 0x22
 800293e:	f7fe f929 	bl	8000b94 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002942:	2000      	movs	r0, #0
 8002944:	f7fe f926 	bl	8000b94 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x36);
 8002948:	2036      	movs	r0, #54	; 0x36
 800294a:	f7fe f923 	bl	8000b94 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800294e:	2000      	movs	r0, #0
 8002950:	f7fe f920 	bl	8000b94 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x45);
 8002954:	2045      	movs	r0, #69	; 0x45
 8002956:	f7fe f91d 	bl	8000b94 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800295a:	2000      	movs	r0, #0
 800295c:	f7fe f91a 	bl	8000b94 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x52);
 8002960:	2052      	movs	r0, #82	; 0x52
 8002962:	f7fe f917 	bl	8000b94 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002966:	2000      	movs	r0, #0
 8002968:	f7fe f914 	bl	8000b94 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x64);
 800296c:	2064      	movs	r0, #100	; 0x64
 800296e:	f7fe f911 	bl	8000b94 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002972:	2000      	movs	r0, #0
 8002974:	f7fe f90e 	bl	8000b94 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x7A);
 8002978:	207a      	movs	r0, #122	; 0x7a
 800297a:	f7fe f90b 	bl	8000b94 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800297e:	2000      	movs	r0, #0
 8002980:	f7fe f908 	bl	8000b94 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x8B);
 8002984:	208b      	movs	r0, #139	; 0x8b
 8002986:	f7fe f905 	bl	8000b94 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800298a:	2000      	movs	r0, #0
 800298c:	f7fe f902 	bl	8000b94 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x99);
 8002990:	2099      	movs	r0, #153	; 0x99
 8002992:	f7fe f8ff 	bl	8000b94 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002996:	2000      	movs	r0, #0
 8002998:	f7fe f8fc 	bl	8000b94 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xA8);
 800299c:	20a8      	movs	r0, #168	; 0xa8
 800299e:	f7fe f8f9 	bl	8000b94 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80029a2:	2000      	movs	r0, #0
 80029a4:	f7fe f8f6 	bl	8000b94 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xB9);
 80029a8:	20b9      	movs	r0, #185	; 0xb9
 80029aa:	f7fe f8f3 	bl	8000b94 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80029ae:	2000      	movs	r0, #0
 80029b0:	f7fe f8f0 	bl	8000b94 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xC4);
 80029b4:	20c4      	movs	r0, #196	; 0xc4
 80029b6:	f7fe f8ed 	bl	8000b94 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80029ba:	2000      	movs	r0, #0
 80029bc:	f7fe f8ea 	bl	8000b94 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xCA);
 80029c0:	20ca      	movs	r0, #202	; 0xca
 80029c2:	f7fe f8e7 	bl	8000b94 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80029c6:	2000      	movs	r0, #0
 80029c8:	f7fe f8e4 	bl	8000b94 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xD2);
 80029cc:	20d2      	movs	r0, #210	; 0xd2
 80029ce:	f7fe f8e1 	bl	8000b94 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80029d2:	2000      	movs	r0, #0
 80029d4:	f7fe f8de 	bl	8000b94 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xD8);
 80029d8:	20d8      	movs	r0, #216	; 0xd8
 80029da:	f7fe f8db 	bl	8000b94 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80029de:	2000      	movs	r0, #0
 80029e0:	f7fe f8d8 	bl	8000b94 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xE0);
 80029e4:	20e0      	movs	r0, #224	; 0xe0
 80029e6:	f7fe f8d5 	bl	8000b94 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80029ea:	2000      	movs	r0, #0
 80029ec:	f7fe f8d2 	bl	8000b94 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xF3);
 80029f0:	20f3      	movs	r0, #243	; 0xf3
 80029f2:	f7fe f8cf 	bl	8000b94 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80029f6:	2000      	movs	r0, #0
 80029f8:	f7fe f8cc 	bl	8000b94 <LCD_WR_DATAX>

		LCD_WR_REG(0xE2);
 80029fc:	20e2      	movs	r0, #226	; 0xe2
 80029fe:	f7fe f8a5 	bl	8000b4c <LCD_WR_REG>
		LCD_WR_DATAX(0x05);
 8002a02:	2005      	movs	r0, #5
 8002a04:	f7fe f8c6 	bl	8000b94 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002a08:	2000      	movs	r0, #0
 8002a0a:	f7fe f8c3 	bl	8000b94 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x0B);
 8002a0e:	200b      	movs	r0, #11
 8002a10:	f7fe f8c0 	bl	8000b94 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002a14:	2000      	movs	r0, #0
 8002a16:	f7fe f8bd 	bl	8000b94 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x1B);
 8002a1a:	201b      	movs	r0, #27
 8002a1c:	f7fe f8ba 	bl	8000b94 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002a20:	2000      	movs	r0, #0
 8002a22:	f7fe f8b7 	bl	8000b94 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x34);
 8002a26:	2034      	movs	r0, #52	; 0x34
 8002a28:	f7fe f8b4 	bl	8000b94 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002a2c:	2000      	movs	r0, #0
 8002a2e:	f7fe f8b1 	bl	8000b94 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x44);
 8002a32:	2044      	movs	r0, #68	; 0x44
 8002a34:	f7fe f8ae 	bl	8000b94 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002a38:	2000      	movs	r0, #0
 8002a3a:	f7fe f8ab 	bl	8000b94 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x4F);
 8002a3e:	204f      	movs	r0, #79	; 0x4f
 8002a40:	f7fe f8a8 	bl	8000b94 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002a44:	2000      	movs	r0, #0
 8002a46:	f7fe f8a5 	bl	8000b94 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x61);
 8002a4a:	2061      	movs	r0, #97	; 0x61
 8002a4c:	f7fe f8a2 	bl	8000b94 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002a50:	2000      	movs	r0, #0
 8002a52:	f7fe f89f 	bl	8000b94 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x79);
 8002a56:	2079      	movs	r0, #121	; 0x79
 8002a58:	f7fe f89c 	bl	8000b94 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002a5c:	2000      	movs	r0, #0
 8002a5e:	f7fe f899 	bl	8000b94 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x88);
 8002a62:	2088      	movs	r0, #136	; 0x88
 8002a64:	f7fe f896 	bl	8000b94 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002a68:	2000      	movs	r0, #0
 8002a6a:	f7fe f893 	bl	8000b94 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x97);
 8002a6e:	2097      	movs	r0, #151	; 0x97
 8002a70:	f7fe f890 	bl	8000b94 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002a74:	2000      	movs	r0, #0
 8002a76:	f7fe f88d 	bl	8000b94 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xA6);
 8002a7a:	20a6      	movs	r0, #166	; 0xa6
 8002a7c:	f7fe f88a 	bl	8000b94 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002a80:	2000      	movs	r0, #0
 8002a82:	f7fe f887 	bl	8000b94 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xB7);
 8002a86:	20b7      	movs	r0, #183	; 0xb7
 8002a88:	f7fe f884 	bl	8000b94 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002a8c:	2000      	movs	r0, #0
 8002a8e:	f7fe f881 	bl	8000b94 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xC2);
 8002a92:	20c2      	movs	r0, #194	; 0xc2
 8002a94:	f7fe f87e 	bl	8000b94 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002a98:	2000      	movs	r0, #0
 8002a9a:	f7fe f87b 	bl	8000b94 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xC7);
 8002a9e:	20c7      	movs	r0, #199	; 0xc7
 8002aa0:	f7fe f878 	bl	8000b94 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002aa4:	2000      	movs	r0, #0
 8002aa6:	f7fe f875 	bl	8000b94 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xD1);
 8002aaa:	20d1      	movs	r0, #209	; 0xd1
 8002aac:	f7fe f872 	bl	8000b94 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002ab0:	2000      	movs	r0, #0
 8002ab2:	f7fe f86f 	bl	8000b94 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xD6);
 8002ab6:	20d6      	movs	r0, #214	; 0xd6
 8002ab8:	f7fe f86c 	bl	8000b94 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002abc:	2000      	movs	r0, #0
 8002abe:	f7fe f869 	bl	8000b94 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xDD);
 8002ac2:	20dd      	movs	r0, #221	; 0xdd
 8002ac4:	f7fe f866 	bl	8000b94 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002ac8:	2000      	movs	r0, #0
 8002aca:	f7fe f863 	bl	8000b94 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xF3);
 8002ace:	20f3      	movs	r0, #243	; 0xf3
 8002ad0:	f7fe f860 	bl	8000b94 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002ad4:	2000      	movs	r0, #0
 8002ad6:	f7fe f85d 	bl	8000b94 <LCD_WR_DATAX>
		LCD_WR_REG(0xE3);
 8002ada:	20e3      	movs	r0, #227	; 0xe3
 8002adc:	f7fe f836 	bl	8000b4c <LCD_WR_REG>
		LCD_WR_DATAX(0x05);
 8002ae0:	2005      	movs	r0, #5
 8002ae2:	f7fe f857 	bl	8000b94 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002ae6:	2000      	movs	r0, #0
 8002ae8:	f7fe f854 	bl	8000b94 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xA);
 8002aec:	200a      	movs	r0, #10
 8002aee:	f7fe f851 	bl	8000b94 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002af2:	2000      	movs	r0, #0
 8002af4:	f7fe f84e 	bl	8000b94 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x1C);
 8002af8:	201c      	movs	r0, #28
 8002afa:	f7fe f84b 	bl	8000b94 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002afe:	2000      	movs	r0, #0
 8002b00:	f7fe f848 	bl	8000b94 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x33);
 8002b04:	2033      	movs	r0, #51	; 0x33
 8002b06:	f7fe f845 	bl	8000b94 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002b0a:	2000      	movs	r0, #0
 8002b0c:	f7fe f842 	bl	8000b94 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x44);
 8002b10:	2044      	movs	r0, #68	; 0x44
 8002b12:	f7fe f83f 	bl	8000b94 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002b16:	2000      	movs	r0, #0
 8002b18:	f7fe f83c 	bl	8000b94 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x50);
 8002b1c:	2050      	movs	r0, #80	; 0x50
 8002b1e:	f7fe f839 	bl	8000b94 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002b22:	2000      	movs	r0, #0
 8002b24:	f7fe f836 	bl	8000b94 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x62);
 8002b28:	2062      	movs	r0, #98	; 0x62
 8002b2a:	f7fe f833 	bl	8000b94 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002b2e:	2000      	movs	r0, #0
 8002b30:	f7fe f830 	bl	8000b94 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x78);
 8002b34:	2078      	movs	r0, #120	; 0x78
 8002b36:	f7fe f82d 	bl	8000b94 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002b3a:	2000      	movs	r0, #0
 8002b3c:	f7fe f82a 	bl	8000b94 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x88);
 8002b40:	2088      	movs	r0, #136	; 0x88
 8002b42:	f7fe f827 	bl	8000b94 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002b46:	2000      	movs	r0, #0
 8002b48:	f7fe f824 	bl	8000b94 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x97);
 8002b4c:	2097      	movs	r0, #151	; 0x97
 8002b4e:	f7fe f821 	bl	8000b94 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002b52:	2000      	movs	r0, #0
 8002b54:	f7fe f81e 	bl	8000b94 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xA6);
 8002b58:	20a6      	movs	r0, #166	; 0xa6
 8002b5a:	f7fe f81b 	bl	8000b94 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002b5e:	2000      	movs	r0, #0
 8002b60:	f7fe f818 	bl	8000b94 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xB7);
 8002b64:	20b7      	movs	r0, #183	; 0xb7
 8002b66:	f7fe f815 	bl	8000b94 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002b6a:	2000      	movs	r0, #0
 8002b6c:	f7fe f812 	bl	8000b94 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xC2);
 8002b70:	20c2      	movs	r0, #194	; 0xc2
 8002b72:	f7fe f80f 	bl	8000b94 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002b76:	2000      	movs	r0, #0
 8002b78:	f7fe f80c 	bl	8000b94 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xC7);
 8002b7c:	20c7      	movs	r0, #199	; 0xc7
 8002b7e:	f7fe f809 	bl	8000b94 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002b82:	2000      	movs	r0, #0
 8002b84:	f7fe f806 	bl	8000b94 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xD1);
 8002b88:	20d1      	movs	r0, #209	; 0xd1
 8002b8a:	f7fe f803 	bl	8000b94 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002b8e:	2000      	movs	r0, #0
 8002b90:	f7fe f800 	bl	8000b94 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xD5);
 8002b94:	20d5      	movs	r0, #213	; 0xd5
 8002b96:	f7fd fffd 	bl	8000b94 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002b9a:	2000      	movs	r0, #0
 8002b9c:	f7fd fffa 	bl	8000b94 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xDD);
 8002ba0:	20dd      	movs	r0, #221	; 0xdd
 8002ba2:	f7fd fff7 	bl	8000b94 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002ba6:	2000      	movs	r0, #0
 8002ba8:	f7fd fff4 	bl	8000b94 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xF3);
 8002bac:	20f3      	movs	r0, #243	; 0xf3
 8002bae:	f7fd fff1 	bl	8000b94 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002bb2:	2000      	movs	r0, #0
 8002bb4:	f7fd ffee 	bl	8000b94 <LCD_WR_DATAX>

		LCD_WR_REG(0xE4);
 8002bb8:	20e4      	movs	r0, #228	; 0xe4
 8002bba:	f7fd ffc7 	bl	8000b4c <LCD_WR_REG>
		LCD_WR_DATAX(0x01);
 8002bbe:	2001      	movs	r0, #1
 8002bc0:	f7fd ffe8 	bl	8000b94 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002bc4:	2000      	movs	r0, #0
 8002bc6:	f7fd ffe5 	bl	8000b94 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x01);
 8002bca:	2001      	movs	r0, #1
 8002bcc:	f7fd ffe2 	bl	8000b94 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002bd0:	2000      	movs	r0, #0
 8002bd2:	f7fd ffdf 	bl	8000b94 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x02);
 8002bd6:	2002      	movs	r0, #2
 8002bd8:	f7fd ffdc 	bl	8000b94 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002bdc:	2000      	movs	r0, #0
 8002bde:	f7fd ffd9 	bl	8000b94 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x2A);
 8002be2:	202a      	movs	r0, #42	; 0x2a
 8002be4:	f7fd ffd6 	bl	8000b94 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002be8:	2000      	movs	r0, #0
 8002bea:	f7fd ffd3 	bl	8000b94 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x3C);
 8002bee:	203c      	movs	r0, #60	; 0x3c
 8002bf0:	f7fd ffd0 	bl	8000b94 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002bf4:	2000      	movs	r0, #0
 8002bf6:	f7fd ffcd 	bl	8000b94 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x4B);
 8002bfa:	204b      	movs	r0, #75	; 0x4b
 8002bfc:	f7fd ffca 	bl	8000b94 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002c00:	2000      	movs	r0, #0
 8002c02:	f7fd ffc7 	bl	8000b94 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x5D);
 8002c06:	205d      	movs	r0, #93	; 0x5d
 8002c08:	f7fd ffc4 	bl	8000b94 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002c0c:	2000      	movs	r0, #0
 8002c0e:	f7fd ffc1 	bl	8000b94 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x74);
 8002c12:	2074      	movs	r0, #116	; 0x74
 8002c14:	f7fd ffbe 	bl	8000b94 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002c18:	2000      	movs	r0, #0
 8002c1a:	f7fd ffbb 	bl	8000b94 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x84);
 8002c1e:	2084      	movs	r0, #132	; 0x84
 8002c20:	f7fd ffb8 	bl	8000b94 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002c24:	2000      	movs	r0, #0
 8002c26:	f7fd ffb5 	bl	8000b94 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x93);
 8002c2a:	2093      	movs	r0, #147	; 0x93
 8002c2c:	f7fd ffb2 	bl	8000b94 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002c30:	2000      	movs	r0, #0
 8002c32:	f7fd ffaf 	bl	8000b94 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xA2);
 8002c36:	20a2      	movs	r0, #162	; 0xa2
 8002c38:	f7fd ffac 	bl	8000b94 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002c3c:	2000      	movs	r0, #0
 8002c3e:	f7fd ffa9 	bl	8000b94 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xB3);
 8002c42:	20b3      	movs	r0, #179	; 0xb3
 8002c44:	f7fd ffa6 	bl	8000b94 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002c48:	2000      	movs	r0, #0
 8002c4a:	f7fd ffa3 	bl	8000b94 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xBE);
 8002c4e:	20be      	movs	r0, #190	; 0xbe
 8002c50:	f7fd ffa0 	bl	8000b94 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002c54:	2000      	movs	r0, #0
 8002c56:	f7fd ff9d 	bl	8000b94 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xC4);
 8002c5a:	20c4      	movs	r0, #196	; 0xc4
 8002c5c:	f7fd ff9a 	bl	8000b94 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002c60:	2000      	movs	r0, #0
 8002c62:	f7fd ff97 	bl	8000b94 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xCD);
 8002c66:	20cd      	movs	r0, #205	; 0xcd
 8002c68:	f7fd ff94 	bl	8000b94 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002c6c:	2000      	movs	r0, #0
 8002c6e:	f7fd ff91 	bl	8000b94 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xD3);
 8002c72:	20d3      	movs	r0, #211	; 0xd3
 8002c74:	f7fd ff8e 	bl	8000b94 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002c78:	2000      	movs	r0, #0
 8002c7a:	f7fd ff8b 	bl	8000b94 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xDD);
 8002c7e:	20dd      	movs	r0, #221	; 0xdd
 8002c80:	f7fd ff88 	bl	8000b94 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002c84:	2000      	movs	r0, #0
 8002c86:	f7fd ff85 	bl	8000b94 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xF3);
 8002c8a:	20f3      	movs	r0, #243	; 0xf3
 8002c8c:	f7fd ff82 	bl	8000b94 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002c90:	2000      	movs	r0, #0
 8002c92:	f7fd ff7f 	bl	8000b94 <LCD_WR_DATAX>
		LCD_WR_REG(0xE5);
 8002c96:	20e5      	movs	r0, #229	; 0xe5
 8002c98:	f7fd ff58 	bl	8000b4c <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 8002c9c:	2000      	movs	r0, #0
 8002c9e:	f7fd ff79 	bl	8000b94 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002ca2:	2000      	movs	r0, #0
 8002ca4:	f7fd ff76 	bl	8000b94 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002ca8:	2000      	movs	r0, #0
 8002caa:	f7fd ff73 	bl	8000b94 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002cae:	2000      	movs	r0, #0
 8002cb0:	f7fd ff70 	bl	8000b94 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x02);
 8002cb4:	2002      	movs	r0, #2
 8002cb6:	f7fd ff6d 	bl	8000b94 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002cba:	2000      	movs	r0, #0
 8002cbc:	f7fd ff6a 	bl	8000b94 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x29);
 8002cc0:	2029      	movs	r0, #41	; 0x29
 8002cc2:	f7fd ff67 	bl	8000b94 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002cc6:	2000      	movs	r0, #0
 8002cc8:	f7fd ff64 	bl	8000b94 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x3C);
 8002ccc:	203c      	movs	r0, #60	; 0x3c
 8002cce:	f7fd ff61 	bl	8000b94 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002cd2:	2000      	movs	r0, #0
 8002cd4:	f7fd ff5e 	bl	8000b94 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x4B);
 8002cd8:	204b      	movs	r0, #75	; 0x4b
 8002cda:	f7fd ff5b 	bl	8000b94 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002cde:	2000      	movs	r0, #0
 8002ce0:	f7fd ff58 	bl	8000b94 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x5D);
 8002ce4:	205d      	movs	r0, #93	; 0x5d
 8002ce6:	f7fd ff55 	bl	8000b94 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002cea:	2000      	movs	r0, #0
 8002cec:	f7fd ff52 	bl	8000b94 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x74);
 8002cf0:	2074      	movs	r0, #116	; 0x74
 8002cf2:	f7fd ff4f 	bl	8000b94 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002cf6:	2000      	movs	r0, #0
 8002cf8:	f7fd ff4c 	bl	8000b94 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x84);
 8002cfc:	2084      	movs	r0, #132	; 0x84
 8002cfe:	f7fd ff49 	bl	8000b94 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002d02:	2000      	movs	r0, #0
 8002d04:	f7fd ff46 	bl	8000b94 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x93);
 8002d08:	2093      	movs	r0, #147	; 0x93
 8002d0a:	f7fd ff43 	bl	8000b94 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002d0e:	2000      	movs	r0, #0
 8002d10:	f7fd ff40 	bl	8000b94 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xA2);
 8002d14:	20a2      	movs	r0, #162	; 0xa2
 8002d16:	f7fd ff3d 	bl	8000b94 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002d1a:	2000      	movs	r0, #0
 8002d1c:	f7fd ff3a 	bl	8000b94 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xB3);
 8002d20:	20b3      	movs	r0, #179	; 0xb3
 8002d22:	f7fd ff37 	bl	8000b94 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002d26:	2000      	movs	r0, #0
 8002d28:	f7fd ff34 	bl	8000b94 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xBE);
 8002d2c:	20be      	movs	r0, #190	; 0xbe
 8002d2e:	f7fd ff31 	bl	8000b94 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002d32:	2000      	movs	r0, #0
 8002d34:	f7fd ff2e 	bl	8000b94 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xC4);
 8002d38:	20c4      	movs	r0, #196	; 0xc4
 8002d3a:	f7fd ff2b 	bl	8000b94 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002d3e:	2000      	movs	r0, #0
 8002d40:	f7fd ff28 	bl	8000b94 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xCD);
 8002d44:	20cd      	movs	r0, #205	; 0xcd
 8002d46:	f7fd ff25 	bl	8000b94 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002d4a:	2000      	movs	r0, #0
 8002d4c:	f7fd ff22 	bl	8000b94 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xD3);
 8002d50:	20d3      	movs	r0, #211	; 0xd3
 8002d52:	f7fd ff1f 	bl	8000b94 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002d56:	2000      	movs	r0, #0
 8002d58:	f7fd ff1c 	bl	8000b94 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xDC);
 8002d5c:	20dc      	movs	r0, #220	; 0xdc
 8002d5e:	f7fd ff19 	bl	8000b94 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002d62:	2000      	movs	r0, #0
 8002d64:	f7fd ff16 	bl	8000b94 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xF3);
 8002d68:	20f3      	movs	r0, #243	; 0xf3
 8002d6a:	f7fd ff13 	bl	8000b94 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002d6e:	2000      	movs	r0, #0
 8002d70:	f7fd ff10 	bl	8000b94 <LCD_WR_DATAX>

		LCD_WR_REG(0xE6);
 8002d74:	20e6      	movs	r0, #230	; 0xe6
 8002d76:	f7fd fee9 	bl	8000b4c <LCD_WR_REG>
		LCD_WR_DATAX(0x11);
 8002d7a:	2011      	movs	r0, #17
 8002d7c:	f7fd ff0a 	bl	8000b94 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002d80:	2000      	movs	r0, #0
 8002d82:	f7fd ff07 	bl	8000b94 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x34);
 8002d86:	2034      	movs	r0, #52	; 0x34
 8002d88:	f7fd ff04 	bl	8000b94 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002d8c:	2000      	movs	r0, #0
 8002d8e:	f7fd ff01 	bl	8000b94 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x56);
 8002d92:	2056      	movs	r0, #86	; 0x56
 8002d94:	f7fd fefe 	bl	8000b94 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002d98:	2000      	movs	r0, #0
 8002d9a:	f7fd fefb 	bl	8000b94 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x76);
 8002d9e:	2076      	movs	r0, #118	; 0x76
 8002da0:	f7fd fef8 	bl	8000b94 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002da4:	2000      	movs	r0, #0
 8002da6:	f7fd fef5 	bl	8000b94 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x77);
 8002daa:	2077      	movs	r0, #119	; 0x77
 8002dac:	f7fd fef2 	bl	8000b94 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002db0:	2000      	movs	r0, #0
 8002db2:	f7fd feef 	bl	8000b94 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x66);
 8002db6:	2066      	movs	r0, #102	; 0x66
 8002db8:	f7fd feec 	bl	8000b94 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002dbc:	2000      	movs	r0, #0
 8002dbe:	f7fd fee9 	bl	8000b94 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x88);
 8002dc2:	2088      	movs	r0, #136	; 0x88
 8002dc4:	f7fd fee6 	bl	8000b94 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002dc8:	2000      	movs	r0, #0
 8002dca:	f7fd fee3 	bl	8000b94 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x99);
 8002dce:	2099      	movs	r0, #153	; 0x99
 8002dd0:	f7fd fee0 	bl	8000b94 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002dd4:	2000      	movs	r0, #0
 8002dd6:	f7fd fedd 	bl	8000b94 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xBB);
 8002dda:	20bb      	movs	r0, #187	; 0xbb
 8002ddc:	f7fd feda 	bl	8000b94 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002de0:	2000      	movs	r0, #0
 8002de2:	f7fd fed7 	bl	8000b94 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x99);
 8002de6:	2099      	movs	r0, #153	; 0x99
 8002de8:	f7fd fed4 	bl	8000b94 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002dec:	2000      	movs	r0, #0
 8002dee:	f7fd fed1 	bl	8000b94 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x66);
 8002df2:	2066      	movs	r0, #102	; 0x66
 8002df4:	f7fd fece 	bl	8000b94 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002df8:	2000      	movs	r0, #0
 8002dfa:	f7fd fecb 	bl	8000b94 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x55);
 8002dfe:	2055      	movs	r0, #85	; 0x55
 8002e00:	f7fd fec8 	bl	8000b94 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002e04:	2000      	movs	r0, #0
 8002e06:	f7fd fec5 	bl	8000b94 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x55);
 8002e0a:	2055      	movs	r0, #85	; 0x55
 8002e0c:	f7fd fec2 	bl	8000b94 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002e10:	2000      	movs	r0, #0
 8002e12:	f7fd febf 	bl	8000b94 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x45);
 8002e16:	2045      	movs	r0, #69	; 0x45
 8002e18:	f7fd febc 	bl	8000b94 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002e1c:	2000      	movs	r0, #0
 8002e1e:	f7fd feb9 	bl	8000b94 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x43);
 8002e22:	2043      	movs	r0, #67	; 0x43
 8002e24:	f7fd feb6 	bl	8000b94 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002e28:	2000      	movs	r0, #0
 8002e2a:	f7fd feb3 	bl	8000b94 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x44);
 8002e2e:	2044      	movs	r0, #68	; 0x44
 8002e30:	f7fd feb0 	bl	8000b94 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002e34:	2000      	movs	r0, #0
 8002e36:	f7fd fead 	bl	8000b94 <LCD_WR_DATAX>

		LCD_WR_REG(0xE7);
 8002e3a:	20e7      	movs	r0, #231	; 0xe7
 8002e3c:	f7fd fe86 	bl	8000b4c <LCD_WR_REG>
		LCD_WR_DATAX(0x32);
 8002e40:	2032      	movs	r0, #50	; 0x32
 8002e42:	f7fd fea7 	bl	8000b94 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002e46:	2000      	movs	r0, #0
 8002e48:	f7fd fea4 	bl	8000b94 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x55);
 8002e4c:	2055      	movs	r0, #85	; 0x55
 8002e4e:	f7fd fea1 	bl	8000b94 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002e52:	2000      	movs	r0, #0
 8002e54:	f7fd fe9e 	bl	8000b94 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x76);
 8002e58:	2076      	movs	r0, #118	; 0x76
 8002e5a:	f7fd fe9b 	bl	8000b94 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002e5e:	2000      	movs	r0, #0
 8002e60:	f7fd fe98 	bl	8000b94 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x66);
 8002e64:	2066      	movs	r0, #102	; 0x66
 8002e66:	f7fd fe95 	bl	8000b94 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002e6a:	2000      	movs	r0, #0
 8002e6c:	f7fd fe92 	bl	8000b94 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x67);
 8002e70:	2067      	movs	r0, #103	; 0x67
 8002e72:	f7fd fe8f 	bl	8000b94 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002e76:	2000      	movs	r0, #0
 8002e78:	f7fd fe8c 	bl	8000b94 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x67);
 8002e7c:	2067      	movs	r0, #103	; 0x67
 8002e7e:	f7fd fe89 	bl	8000b94 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002e82:	2000      	movs	r0, #0
 8002e84:	f7fd fe86 	bl	8000b94 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x87);
 8002e88:	2087      	movs	r0, #135	; 0x87
 8002e8a:	f7fd fe83 	bl	8000b94 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002e8e:	2000      	movs	r0, #0
 8002e90:	f7fd fe80 	bl	8000b94 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x99);
 8002e94:	2099      	movs	r0, #153	; 0x99
 8002e96:	f7fd fe7d 	bl	8000b94 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002e9a:	2000      	movs	r0, #0
 8002e9c:	f7fd fe7a 	bl	8000b94 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xBB);
 8002ea0:	20bb      	movs	r0, #187	; 0xbb
 8002ea2:	f7fd fe77 	bl	8000b94 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002ea6:	2000      	movs	r0, #0
 8002ea8:	f7fd fe74 	bl	8000b94 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x99);
 8002eac:	2099      	movs	r0, #153	; 0x99
 8002eae:	f7fd fe71 	bl	8000b94 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002eb2:	2000      	movs	r0, #0
 8002eb4:	f7fd fe6e 	bl	8000b94 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x77);
 8002eb8:	2077      	movs	r0, #119	; 0x77
 8002eba:	f7fd fe6b 	bl	8000b94 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002ebe:	2000      	movs	r0, #0
 8002ec0:	f7fd fe68 	bl	8000b94 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x44);
 8002ec4:	2044      	movs	r0, #68	; 0x44
 8002ec6:	f7fd fe65 	bl	8000b94 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002eca:	2000      	movs	r0, #0
 8002ecc:	f7fd fe62 	bl	8000b94 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x56);
 8002ed0:	2056      	movs	r0, #86	; 0x56
 8002ed2:	f7fd fe5f 	bl	8000b94 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002ed6:	2000      	movs	r0, #0
 8002ed8:	f7fd fe5c 	bl	8000b94 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x23);
 8002edc:	2023      	movs	r0, #35	; 0x23
 8002ede:	f7fd fe59 	bl	8000b94 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002ee2:	2000      	movs	r0, #0
 8002ee4:	f7fd fe56 	bl	8000b94 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x33);
 8002ee8:	2033      	movs	r0, #51	; 0x33
 8002eea:	f7fd fe53 	bl	8000b94 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002eee:	2000      	movs	r0, #0
 8002ef0:	f7fd fe50 	bl	8000b94 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x45);
 8002ef4:	2045      	movs	r0, #69	; 0x45
 8002ef6:	f7fd fe4d 	bl	8000b94 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002efa:	2000      	movs	r0, #0
 8002efc:	f7fd fe4a 	bl	8000b94 <LCD_WR_DATAX>

		LCD_WR_REG(0xE8);
 8002f00:	20e8      	movs	r0, #232	; 0xe8
 8002f02:	f7fd fe23 	bl	8000b4c <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 8002f06:	2000      	movs	r0, #0
 8002f08:	f7fd fe44 	bl	8000b94 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002f0c:	2000      	movs	r0, #0
 8002f0e:	f7fd fe41 	bl	8000b94 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x99);
 8002f12:	2099      	movs	r0, #153	; 0x99
 8002f14:	f7fd fe3e 	bl	8000b94 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002f18:	2000      	movs	r0, #0
 8002f1a:	f7fd fe3b 	bl	8000b94 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x87);
 8002f1e:	2087      	movs	r0, #135	; 0x87
 8002f20:	f7fd fe38 	bl	8000b94 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002f24:	2000      	movs	r0, #0
 8002f26:	f7fd fe35 	bl	8000b94 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x88);
 8002f2a:	2088      	movs	r0, #136	; 0x88
 8002f2c:	f7fd fe32 	bl	8000b94 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002f30:	2000      	movs	r0, #0
 8002f32:	f7fd fe2f 	bl	8000b94 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x77);
 8002f36:	2077      	movs	r0, #119	; 0x77
 8002f38:	f7fd fe2c 	bl	8000b94 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002f3c:	2000      	movs	r0, #0
 8002f3e:	f7fd fe29 	bl	8000b94 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x66);
 8002f42:	2066      	movs	r0, #102	; 0x66
 8002f44:	f7fd fe26 	bl	8000b94 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002f48:	2000      	movs	r0, #0
 8002f4a:	f7fd fe23 	bl	8000b94 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x88);
 8002f4e:	2088      	movs	r0, #136	; 0x88
 8002f50:	f7fd fe20 	bl	8000b94 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002f54:	2000      	movs	r0, #0
 8002f56:	f7fd fe1d 	bl	8000b94 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xAA);
 8002f5a:	20aa      	movs	r0, #170	; 0xaa
 8002f5c:	f7fd fe1a 	bl	8000b94 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002f60:	2000      	movs	r0, #0
 8002f62:	f7fd fe17 	bl	8000b94 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xBB);
 8002f66:	20bb      	movs	r0, #187	; 0xbb
 8002f68:	f7fd fe14 	bl	8000b94 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002f6c:	2000      	movs	r0, #0
 8002f6e:	f7fd fe11 	bl	8000b94 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x99);
 8002f72:	2099      	movs	r0, #153	; 0x99
 8002f74:	f7fd fe0e 	bl	8000b94 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002f78:	2000      	movs	r0, #0
 8002f7a:	f7fd fe0b 	bl	8000b94 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x66);
 8002f7e:	2066      	movs	r0, #102	; 0x66
 8002f80:	f7fd fe08 	bl	8000b94 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002f84:	2000      	movs	r0, #0
 8002f86:	f7fd fe05 	bl	8000b94 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x55);
 8002f8a:	2055      	movs	r0, #85	; 0x55
 8002f8c:	f7fd fe02 	bl	8000b94 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002f90:	2000      	movs	r0, #0
 8002f92:	f7fd fdff 	bl	8000b94 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x55);
 8002f96:	2055      	movs	r0, #85	; 0x55
 8002f98:	f7fd fdfc 	bl	8000b94 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002f9c:	2000      	movs	r0, #0
 8002f9e:	f7fd fdf9 	bl	8000b94 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x44);
 8002fa2:	2044      	movs	r0, #68	; 0x44
 8002fa4:	f7fd fdf6 	bl	8000b94 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002fa8:	2000      	movs	r0, #0
 8002faa:	f7fd fdf3 	bl	8000b94 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x44);
 8002fae:	2044      	movs	r0, #68	; 0x44
 8002fb0:	f7fd fdf0 	bl	8000b94 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002fb4:	2000      	movs	r0, #0
 8002fb6:	f7fd fded 	bl	8000b94 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x55);
 8002fba:	2055      	movs	r0, #85	; 0x55
 8002fbc:	f7fd fdea 	bl	8000b94 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002fc0:	2000      	movs	r0, #0
 8002fc2:	f7fd fde7 	bl	8000b94 <LCD_WR_DATAX>

		LCD_WR_REG(0xE9);
 8002fc6:	20e9      	movs	r0, #233	; 0xe9
 8002fc8:	f7fd fdc0 	bl	8000b4c <LCD_WR_REG>
		LCD_WR_DATAX(0xAA);
 8002fcc:	20aa      	movs	r0, #170	; 0xaa
 8002fce:	f7fd fde1 	bl	8000b94 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002fd2:	2000      	movs	r0, #0
 8002fd4:	f7fd fdde 	bl	8000b94 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002fd8:	2000      	movs	r0, #0
 8002fda:	f7fd fddb 	bl	8000b94 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002fde:	2000      	movs	r0, #0
 8002fe0:	f7fd fdd8 	bl	8000b94 <LCD_WR_DATAX>

		LCD_WR_REG(0x00);
 8002fe4:	2000      	movs	r0, #0
 8002fe6:	f7fd fdb1 	bl	8000b4c <LCD_WR_REG>
		LCD_WR_DATAX(0xAA);
 8002fea:	20aa      	movs	r0, #170	; 0xaa
 8002fec:	f7fd fdd2 	bl	8000b94 <LCD_WR_DATAX>

		LCD_WR_REG(0xCF);
 8002ff0:	20cf      	movs	r0, #207	; 0xcf
 8002ff2:	f7fd fdab 	bl	8000b4c <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 8002ff6:	2000      	movs	r0, #0
 8002ff8:	f7fd fdcc 	bl	8000b94 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002ffc:	2000      	movs	r0, #0
 8002ffe:	f7fd fdc9 	bl	8000b94 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003002:	2000      	movs	r0, #0
 8003004:	f7fd fdc6 	bl	8000b94 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003008:	2000      	movs	r0, #0
 800300a:	f7fd fdc3 	bl	8000b94 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800300e:	2000      	movs	r0, #0
 8003010:	f7fd fdc0 	bl	8000b94 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003014:	2000      	movs	r0, #0
 8003016:	f7fd fdbd 	bl	8000b94 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800301a:	2000      	movs	r0, #0
 800301c:	f7fd fdba 	bl	8000b94 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003020:	2000      	movs	r0, #0
 8003022:	f7fd fdb7 	bl	8000b94 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003026:	2000      	movs	r0, #0
 8003028:	f7fd fdb4 	bl	8000b94 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800302c:	2000      	movs	r0, #0
 800302e:	f7fd fdb1 	bl	8000b94 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003032:	2000      	movs	r0, #0
 8003034:	f7fd fdae 	bl	8000b94 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003038:	2000      	movs	r0, #0
 800303a:	f7fd fdab 	bl	8000b94 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800303e:	2000      	movs	r0, #0
 8003040:	f7fd fda8 	bl	8000b94 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003044:	2000      	movs	r0, #0
 8003046:	f7fd fda5 	bl	8000b94 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800304a:	2000      	movs	r0, #0
 800304c:	f7fd fda2 	bl	8000b94 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003050:	2000      	movs	r0, #0
 8003052:	f7fd fd9f 	bl	8000b94 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003056:	2000      	movs	r0, #0
 8003058:	f7fd fd9c 	bl	8000b94 <LCD_WR_DATAX>

		LCD_WR_REG(0xF0);
 800305c:	20f0      	movs	r0, #240	; 0xf0
 800305e:	f7fd fd75 	bl	8000b4c <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 8003062:	2000      	movs	r0, #0
 8003064:	f7fd fd96 	bl	8000b94 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x50);
 8003068:	2050      	movs	r0, #80	; 0x50
 800306a:	f7fd fd93 	bl	8000b94 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800306e:	2000      	movs	r0, #0
 8003070:	f7fd fd90 	bl	8000b94 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003074:	2000      	movs	r0, #0
 8003076:	f7fd fd8d 	bl	8000b94 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800307a:	2000      	movs	r0, #0
 800307c:	f7fd fd8a 	bl	8000b94 <LCD_WR_DATAX>

		LCD_WR_REG(0xF3);
 8003080:	20f3      	movs	r0, #243	; 0xf3
 8003082:	f7fd fd63 	bl	8000b4c <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 8003086:	2000      	movs	r0, #0
 8003088:	f7fd fd84 	bl	8000b94 <LCD_WR_DATAX>

		LCD_WR_REG(0xF9);
 800308c:	20f9      	movs	r0, #249	; 0xf9
 800308e:	f7fd fd5d 	bl	8000b4c <LCD_WR_REG>
		LCD_WR_DATAX(0x06);
 8003092:	2006      	movs	r0, #6
 8003094:	f7fd fd7e 	bl	8000b94 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x10);
 8003098:	2010      	movs	r0, #16
 800309a:	f7fd fd7b 	bl	8000b94 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x29);
 800309e:	2029      	movs	r0, #41	; 0x29
 80030a0:	f7fd fd78 	bl	8000b94 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80030a4:	2000      	movs	r0, #0
 80030a6:	f7fd fd75 	bl	8000b94 <LCD_WR_DATAX>

		LCD_WR_REG(0x3A);
 80030aa:	203a      	movs	r0, #58	; 0x3a
 80030ac:	f7fd fd4e 	bl	8000b4c <LCD_WR_REG>
		LCD_WR_DATAX(0x55);	//66
 80030b0:	2055      	movs	r0, #85	; 0x55
 80030b2:	f7fd fd6f 	bl	8000b94 <LCD_WR_DATAX>

		LCD_WR_REG(0x11);
 80030b6:	2011      	movs	r0, #17
 80030b8:	f7fd fd48 	bl	8000b4c <LCD_WR_REG>
		HAL_Delay(100);
 80030bc:	2064      	movs	r0, #100	; 0x64
 80030be:	f002 ff85 	bl	8005fcc <HAL_Delay>
		LCD_WR_REG(0x29);
 80030c2:	2029      	movs	r0, #41	; 0x29
 80030c4:	f7fd fd42 	bl	8000b4c <LCD_WR_REG>
		LCD_WR_REG(0x35);
 80030c8:	2035      	movs	r0, #53	; 0x35
 80030ca:	f7fd fd3f 	bl	8000b4c <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 80030ce:	2000      	movs	r0, #0
 80030d0:	f7fd fd60 	bl	8000b94 <LCD_WR_DATAX>

		LCD_WR_REG(0x51);
 80030d4:	2051      	movs	r0, #81	; 0x51
 80030d6:	f7fd fd39 	bl	8000b4c <LCD_WR_REG>
		LCD_WR_DATAX(0xFF);
 80030da:	20ff      	movs	r0, #255	; 0xff
 80030dc:	f7fd fd5a 	bl	8000b94 <LCD_WR_DATAX>
		LCD_WR_REG(0x53);
 80030e0:	2053      	movs	r0, #83	; 0x53
 80030e2:	f7fd fd33 	bl	8000b4c <LCD_WR_REG>
		LCD_WR_DATAX(0x2C);
 80030e6:	202c      	movs	r0, #44	; 0x2c
 80030e8:	f7fd fd54 	bl	8000b94 <LCD_WR_DATAX>
		LCD_WR_REG(0x55);
 80030ec:	2055      	movs	r0, #85	; 0x55
 80030ee:	f7fd fd2d 	bl	8000b4c <LCD_WR_REG>
		LCD_WR_DATAX(0x82);
 80030f2:	2082      	movs	r0, #130	; 0x82
 80030f4:	f7fd fd4e 	bl	8000b94 <LCD_WR_DATAX>
		LCD_WR_REG(0x2c);
 80030f8:	202c      	movs	r0, #44	; 0x2c
 80030fa:	f7fd fd27 	bl	8000b4c <LCD_WR_REG>
 80030fe:	f002 bca1 	b.w	8005a44 <LCD_Init+0x3e34>
	} else if (lcddev.id == 0x5510) {
 8003102:	4b04      	ldr	r3, [pc, #16]	; (8003114 <LCD_Init+0x1504>)
 8003104:	889b      	ldrh	r3, [r3, #4]
 8003106:	f245 5210 	movw	r2, #21776	; 0x5510
 800310a:	4293      	cmp	r3, r2
 800310c:	f040 8782 	bne.w	8004014 <LCD_Init+0x2404>
 8003110:	e002      	b.n	8003118 <LCD_Init+0x1508>
 8003112:	bf00      	nop
 8003114:	20000028 	.word	0x20000028
		LCD_WriteReg(0xF000, 0x55);
 8003118:	2155      	movs	r1, #85	; 0x55
 800311a:	f44f 4070 	mov.w	r0, #61440	; 0xf000
 800311e:	f7fd fda1 	bl	8000c64 <LCD_WriteReg>
		LCD_WriteReg(0xF001, 0xAA);
 8003122:	21aa      	movs	r1, #170	; 0xaa
 8003124:	f24f 0001 	movw	r0, #61441	; 0xf001
 8003128:	f7fd fd9c 	bl	8000c64 <LCD_WriteReg>
		LCD_WriteReg(0xF002, 0x52);
 800312c:	2152      	movs	r1, #82	; 0x52
 800312e:	f24f 0002 	movw	r0, #61442	; 0xf002
 8003132:	f7fd fd97 	bl	8000c64 <LCD_WriteReg>
		LCD_WriteReg(0xF003, 0x08);
 8003136:	2108      	movs	r1, #8
 8003138:	f24f 0003 	movw	r0, #61443	; 0xf003
 800313c:	f7fd fd92 	bl	8000c64 <LCD_WriteReg>
		LCD_WriteReg(0xF004, 0x01);
 8003140:	2101      	movs	r1, #1
 8003142:	f24f 0004 	movw	r0, #61444	; 0xf004
 8003146:	f7fd fd8d 	bl	8000c64 <LCD_WriteReg>
		//AVDD Set AVDD 5.2V
		LCD_WriteReg(0xB000, 0x0D);
 800314a:	210d      	movs	r1, #13
 800314c:	f44f 4030 	mov.w	r0, #45056	; 0xb000
 8003150:	f7fd fd88 	bl	8000c64 <LCD_WriteReg>
		LCD_WriteReg(0xB001, 0x0D);
 8003154:	210d      	movs	r1, #13
 8003156:	f24b 0001 	movw	r0, #45057	; 0xb001
 800315a:	f7fd fd83 	bl	8000c64 <LCD_WriteReg>
		LCD_WriteReg(0xB002, 0x0D);
 800315e:	210d      	movs	r1, #13
 8003160:	f24b 0002 	movw	r0, #45058	; 0xb002
 8003164:	f7fd fd7e 	bl	8000c64 <LCD_WriteReg>
		//AVDD ratio
		LCD_WriteReg(0xB600, 0x34);
 8003168:	2134      	movs	r1, #52	; 0x34
 800316a:	f44f 4036 	mov.w	r0, #46592	; 0xb600
 800316e:	f7fd fd79 	bl	8000c64 <LCD_WriteReg>
		LCD_WriteReg(0xB601, 0x34);
 8003172:	2134      	movs	r1, #52	; 0x34
 8003174:	f24b 6001 	movw	r0, #46593	; 0xb601
 8003178:	f7fd fd74 	bl	8000c64 <LCD_WriteReg>
		LCD_WriteReg(0xB602, 0x34);
 800317c:	2134      	movs	r1, #52	; 0x34
 800317e:	f24b 6002 	movw	r0, #46594	; 0xb602
 8003182:	f7fd fd6f 	bl	8000c64 <LCD_WriteReg>
		//AVEE -5.2V
		LCD_WriteReg(0xB100, 0x0D);
 8003186:	210d      	movs	r1, #13
 8003188:	f44f 4031 	mov.w	r0, #45312	; 0xb100
 800318c:	f7fd fd6a 	bl	8000c64 <LCD_WriteReg>
		LCD_WriteReg(0xB101, 0x0D);
 8003190:	210d      	movs	r1, #13
 8003192:	f24b 1001 	movw	r0, #45313	; 0xb101
 8003196:	f7fd fd65 	bl	8000c64 <LCD_WriteReg>
		LCD_WriteReg(0xB102, 0x0D);
 800319a:	210d      	movs	r1, #13
 800319c:	f24b 1002 	movw	r0, #45314	; 0xb102
 80031a0:	f7fd fd60 	bl	8000c64 <LCD_WriteReg>
		//AVEE ratio
		LCD_WriteReg(0xB700, 0x34);
 80031a4:	2134      	movs	r1, #52	; 0x34
 80031a6:	f44f 4037 	mov.w	r0, #46848	; 0xb700
 80031aa:	f7fd fd5b 	bl	8000c64 <LCD_WriteReg>
		LCD_WriteReg(0xB701, 0x34);
 80031ae:	2134      	movs	r1, #52	; 0x34
 80031b0:	f24b 7001 	movw	r0, #46849	; 0xb701
 80031b4:	f7fd fd56 	bl	8000c64 <LCD_WriteReg>
		LCD_WriteReg(0xB702, 0x34);
 80031b8:	2134      	movs	r1, #52	; 0x34
 80031ba:	f24b 7002 	movw	r0, #46850	; 0xb702
 80031be:	f7fd fd51 	bl	8000c64 <LCD_WriteReg>
		//VCL -2.5V
		LCD_WriteReg(0xB200, 0x00);
 80031c2:	2100      	movs	r1, #0
 80031c4:	f44f 4032 	mov.w	r0, #45568	; 0xb200
 80031c8:	f7fd fd4c 	bl	8000c64 <LCD_WriteReg>
		LCD_WriteReg(0xB201, 0x00);
 80031cc:	2100      	movs	r1, #0
 80031ce:	f24b 2001 	movw	r0, #45569	; 0xb201
 80031d2:	f7fd fd47 	bl	8000c64 <LCD_WriteReg>
		LCD_WriteReg(0xB202, 0x00);
 80031d6:	2100      	movs	r1, #0
 80031d8:	f24b 2002 	movw	r0, #45570	; 0xb202
 80031dc:	f7fd fd42 	bl	8000c64 <LCD_WriteReg>
		//VCL ratio
		LCD_WriteReg(0xB800, 0x24);
 80031e0:	2124      	movs	r1, #36	; 0x24
 80031e2:	f44f 4038 	mov.w	r0, #47104	; 0xb800
 80031e6:	f7fd fd3d 	bl	8000c64 <LCD_WriteReg>
		LCD_WriteReg(0xB801, 0x24);
 80031ea:	2124      	movs	r1, #36	; 0x24
 80031ec:	f64b 0001 	movw	r0, #47105	; 0xb801
 80031f0:	f7fd fd38 	bl	8000c64 <LCD_WriteReg>
		LCD_WriteReg(0xB802, 0x24);
 80031f4:	2124      	movs	r1, #36	; 0x24
 80031f6:	f64b 0002 	movw	r0, #47106	; 0xb802
 80031fa:	f7fd fd33 	bl	8000c64 <LCD_WriteReg>
		//VGH 15V (Free pump)
		LCD_WriteReg(0xBF00, 0x01);
 80031fe:	2101      	movs	r1, #1
 8003200:	f44f 403f 	mov.w	r0, #48896	; 0xbf00
 8003204:	f7fd fd2e 	bl	8000c64 <LCD_WriteReg>
		LCD_WriteReg(0xB300, 0x0F);
 8003208:	210f      	movs	r1, #15
 800320a:	f44f 4033 	mov.w	r0, #45824	; 0xb300
 800320e:	f7fd fd29 	bl	8000c64 <LCD_WriteReg>
		LCD_WriteReg(0xB301, 0x0F);
 8003212:	210f      	movs	r1, #15
 8003214:	f24b 3001 	movw	r0, #45825	; 0xb301
 8003218:	f7fd fd24 	bl	8000c64 <LCD_WriteReg>
		LCD_WriteReg(0xB302, 0x0F);
 800321c:	210f      	movs	r1, #15
 800321e:	f24b 3002 	movw	r0, #45826	; 0xb302
 8003222:	f7fd fd1f 	bl	8000c64 <LCD_WriteReg>
		//VGH ratio
		LCD_WriteReg(0xB900, 0x34);
 8003226:	2134      	movs	r1, #52	; 0x34
 8003228:	f44f 4039 	mov.w	r0, #47360	; 0xb900
 800322c:	f7fd fd1a 	bl	8000c64 <LCD_WriteReg>
		LCD_WriteReg(0xB901, 0x34);
 8003230:	2134      	movs	r1, #52	; 0x34
 8003232:	f64b 1001 	movw	r0, #47361	; 0xb901
 8003236:	f7fd fd15 	bl	8000c64 <LCD_WriteReg>
		LCD_WriteReg(0xB902, 0x34);
 800323a:	2134      	movs	r1, #52	; 0x34
 800323c:	f64b 1002 	movw	r0, #47362	; 0xb902
 8003240:	f7fd fd10 	bl	8000c64 <LCD_WriteReg>
		//VGL_REG -10V
		LCD_WriteReg(0xB500, 0x08);
 8003244:	2108      	movs	r1, #8
 8003246:	f44f 4035 	mov.w	r0, #46336	; 0xb500
 800324a:	f7fd fd0b 	bl	8000c64 <LCD_WriteReg>
		LCD_WriteReg(0xB501, 0x08);
 800324e:	2108      	movs	r1, #8
 8003250:	f24b 5001 	movw	r0, #46337	; 0xb501
 8003254:	f7fd fd06 	bl	8000c64 <LCD_WriteReg>
		LCD_WriteReg(0xB502, 0x08);
 8003258:	2108      	movs	r1, #8
 800325a:	f24b 5002 	movw	r0, #46338	; 0xb502
 800325e:	f7fd fd01 	bl	8000c64 <LCD_WriteReg>
		LCD_WriteReg(0xC200, 0x03);
 8003262:	2103      	movs	r1, #3
 8003264:	f44f 4042 	mov.w	r0, #49664	; 0xc200
 8003268:	f7fd fcfc 	bl	8000c64 <LCD_WriteReg>
		//VGLX ratio
		LCD_WriteReg(0xBA00, 0x24);
 800326c:	2124      	movs	r1, #36	; 0x24
 800326e:	f44f 403a 	mov.w	r0, #47616	; 0xba00
 8003272:	f7fd fcf7 	bl	8000c64 <LCD_WriteReg>
		LCD_WriteReg(0xBA01, 0x24);
 8003276:	2124      	movs	r1, #36	; 0x24
 8003278:	f64b 2001 	movw	r0, #47617	; 0xba01
 800327c:	f7fd fcf2 	bl	8000c64 <LCD_WriteReg>
		LCD_WriteReg(0xBA02, 0x24);
 8003280:	2124      	movs	r1, #36	; 0x24
 8003282:	f64b 2002 	movw	r0, #47618	; 0xba02
 8003286:	f7fd fced 	bl	8000c64 <LCD_WriteReg>
		//VGMP/VGSP 4.5V/0V
		LCD_WriteReg(0xBC00, 0x00);
 800328a:	2100      	movs	r1, #0
 800328c:	f44f 403c 	mov.w	r0, #48128	; 0xbc00
 8003290:	f7fd fce8 	bl	8000c64 <LCD_WriteReg>
		LCD_WriteReg(0xBC01, 0x78);
 8003294:	2178      	movs	r1, #120	; 0x78
 8003296:	f64b 4001 	movw	r0, #48129	; 0xbc01
 800329a:	f7fd fce3 	bl	8000c64 <LCD_WriteReg>
		LCD_WriteReg(0xBC02, 0x00);
 800329e:	2100      	movs	r1, #0
 80032a0:	f64b 4002 	movw	r0, #48130	; 0xbc02
 80032a4:	f7fd fcde 	bl	8000c64 <LCD_WriteReg>
		//VGMN/VGSN -4.5V/0V
		LCD_WriteReg(0xBD00, 0x00);
 80032a8:	2100      	movs	r1, #0
 80032aa:	f44f 403d 	mov.w	r0, #48384	; 0xbd00
 80032ae:	f7fd fcd9 	bl	8000c64 <LCD_WriteReg>
		LCD_WriteReg(0xBD01, 0x78);
 80032b2:	2178      	movs	r1, #120	; 0x78
 80032b4:	f64b 5001 	movw	r0, #48385	; 0xbd01
 80032b8:	f7fd fcd4 	bl	8000c64 <LCD_WriteReg>
		LCD_WriteReg(0xBD02, 0x00);
 80032bc:	2100      	movs	r1, #0
 80032be:	f64b 5002 	movw	r0, #48386	; 0xbd02
 80032c2:	f7fd fccf 	bl	8000c64 <LCD_WriteReg>
		//VCOM
		LCD_WriteReg(0xBE00, 0x00);
 80032c6:	2100      	movs	r1, #0
 80032c8:	f44f 403e 	mov.w	r0, #48640	; 0xbe00
 80032cc:	f7fd fcca 	bl	8000c64 <LCD_WriteReg>
		LCD_WriteReg(0xBE01, 0x64);
 80032d0:	2164      	movs	r1, #100	; 0x64
 80032d2:	f64b 6001 	movw	r0, #48641	; 0xbe01
 80032d6:	f7fd fcc5 	bl	8000c64 <LCD_WriteReg>
		//Gamma Setting
		LCD_WriteReg(0xD100, 0x00);
 80032da:	2100      	movs	r1, #0
 80032dc:	f44f 4051 	mov.w	r0, #53504	; 0xd100
 80032e0:	f7fd fcc0 	bl	8000c64 <LCD_WriteReg>
		LCD_WriteReg(0xD101, 0x33);
 80032e4:	2133      	movs	r1, #51	; 0x33
 80032e6:	f24d 1001 	movw	r0, #53505	; 0xd101
 80032ea:	f7fd fcbb 	bl	8000c64 <LCD_WriteReg>
		LCD_WriteReg(0xD102, 0x00);
 80032ee:	2100      	movs	r1, #0
 80032f0:	f24d 1002 	movw	r0, #53506	; 0xd102
 80032f4:	f7fd fcb6 	bl	8000c64 <LCD_WriteReg>
		LCD_WriteReg(0xD103, 0x34);
 80032f8:	2134      	movs	r1, #52	; 0x34
 80032fa:	f24d 1003 	movw	r0, #53507	; 0xd103
 80032fe:	f7fd fcb1 	bl	8000c64 <LCD_WriteReg>
		LCD_WriteReg(0xD104, 0x00);
 8003302:	2100      	movs	r1, #0
 8003304:	f24d 1004 	movw	r0, #53508	; 0xd104
 8003308:	f7fd fcac 	bl	8000c64 <LCD_WriteReg>
		LCD_WriteReg(0xD105, 0x3A);
 800330c:	213a      	movs	r1, #58	; 0x3a
 800330e:	f24d 1005 	movw	r0, #53509	; 0xd105
 8003312:	f7fd fca7 	bl	8000c64 <LCD_WriteReg>
		LCD_WriteReg(0xD106, 0x00);
 8003316:	2100      	movs	r1, #0
 8003318:	f24d 1006 	movw	r0, #53510	; 0xd106
 800331c:	f7fd fca2 	bl	8000c64 <LCD_WriteReg>
		LCD_WriteReg(0xD107, 0x4A);
 8003320:	214a      	movs	r1, #74	; 0x4a
 8003322:	f24d 1007 	movw	r0, #53511	; 0xd107
 8003326:	f7fd fc9d 	bl	8000c64 <LCD_WriteReg>
		LCD_WriteReg(0xD108, 0x00);
 800332a:	2100      	movs	r1, #0
 800332c:	f24d 1008 	movw	r0, #53512	; 0xd108
 8003330:	f7fd fc98 	bl	8000c64 <LCD_WriteReg>
		LCD_WriteReg(0xD109, 0x5C);
 8003334:	215c      	movs	r1, #92	; 0x5c
 8003336:	f24d 1009 	movw	r0, #53513	; 0xd109
 800333a:	f7fd fc93 	bl	8000c64 <LCD_WriteReg>
		LCD_WriteReg(0xD10A, 0x00);
 800333e:	2100      	movs	r1, #0
 8003340:	f24d 100a 	movw	r0, #53514	; 0xd10a
 8003344:	f7fd fc8e 	bl	8000c64 <LCD_WriteReg>
		LCD_WriteReg(0xD10B, 0x81);
 8003348:	2181      	movs	r1, #129	; 0x81
 800334a:	f24d 100b 	movw	r0, #53515	; 0xd10b
 800334e:	f7fd fc89 	bl	8000c64 <LCD_WriteReg>
		LCD_WriteReg(0xD10C, 0x00);
 8003352:	2100      	movs	r1, #0
 8003354:	f24d 100c 	movw	r0, #53516	; 0xd10c
 8003358:	f7fd fc84 	bl	8000c64 <LCD_WriteReg>
		LCD_WriteReg(0xD10D, 0xA6);
 800335c:	21a6      	movs	r1, #166	; 0xa6
 800335e:	f24d 100d 	movw	r0, #53517	; 0xd10d
 8003362:	f7fd fc7f 	bl	8000c64 <LCD_WriteReg>
		LCD_WriteReg(0xD10E, 0x00);
 8003366:	2100      	movs	r1, #0
 8003368:	f24d 100e 	movw	r0, #53518	; 0xd10e
 800336c:	f7fd fc7a 	bl	8000c64 <LCD_WriteReg>
		LCD_WriteReg(0xD10F, 0xE5);
 8003370:	21e5      	movs	r1, #229	; 0xe5
 8003372:	f24d 100f 	movw	r0, #53519	; 0xd10f
 8003376:	f7fd fc75 	bl	8000c64 <LCD_WriteReg>
		LCD_WriteReg(0xD110, 0x01);
 800337a:	2101      	movs	r1, #1
 800337c:	f24d 1010 	movw	r0, #53520	; 0xd110
 8003380:	f7fd fc70 	bl	8000c64 <LCD_WriteReg>
		LCD_WriteReg(0xD111, 0x13);
 8003384:	2113      	movs	r1, #19
 8003386:	f24d 1011 	movw	r0, #53521	; 0xd111
 800338a:	f7fd fc6b 	bl	8000c64 <LCD_WriteReg>
		LCD_WriteReg(0xD112, 0x01);
 800338e:	2101      	movs	r1, #1
 8003390:	f24d 1012 	movw	r0, #53522	; 0xd112
 8003394:	f7fd fc66 	bl	8000c64 <LCD_WriteReg>
		LCD_WriteReg(0xD113, 0x54);
 8003398:	2154      	movs	r1, #84	; 0x54
 800339a:	f24d 1013 	movw	r0, #53523	; 0xd113
 800339e:	f7fd fc61 	bl	8000c64 <LCD_WriteReg>
		LCD_WriteReg(0xD114, 0x01);
 80033a2:	2101      	movs	r1, #1
 80033a4:	f24d 1014 	movw	r0, #53524	; 0xd114
 80033a8:	f7fd fc5c 	bl	8000c64 <LCD_WriteReg>
		LCD_WriteReg(0xD115, 0x82);
 80033ac:	2182      	movs	r1, #130	; 0x82
 80033ae:	f24d 1015 	movw	r0, #53525	; 0xd115
 80033b2:	f7fd fc57 	bl	8000c64 <LCD_WriteReg>
		LCD_WriteReg(0xD116, 0x01);
 80033b6:	2101      	movs	r1, #1
 80033b8:	f24d 1016 	movw	r0, #53526	; 0xd116
 80033bc:	f7fd fc52 	bl	8000c64 <LCD_WriteReg>
		LCD_WriteReg(0xD117, 0xCA);
 80033c0:	21ca      	movs	r1, #202	; 0xca
 80033c2:	f24d 1017 	movw	r0, #53527	; 0xd117
 80033c6:	f7fd fc4d 	bl	8000c64 <LCD_WriteReg>
		LCD_WriteReg(0xD118, 0x02);
 80033ca:	2102      	movs	r1, #2
 80033cc:	f24d 1018 	movw	r0, #53528	; 0xd118
 80033d0:	f7fd fc48 	bl	8000c64 <LCD_WriteReg>
		LCD_WriteReg(0xD119, 0x00);
 80033d4:	2100      	movs	r1, #0
 80033d6:	f24d 1019 	movw	r0, #53529	; 0xd119
 80033da:	f7fd fc43 	bl	8000c64 <LCD_WriteReg>
		LCD_WriteReg(0xD11A, 0x02);
 80033de:	2102      	movs	r1, #2
 80033e0:	f24d 101a 	movw	r0, #53530	; 0xd11a
 80033e4:	f7fd fc3e 	bl	8000c64 <LCD_WriteReg>
		LCD_WriteReg(0xD11B, 0x01);
 80033e8:	2101      	movs	r1, #1
 80033ea:	f24d 101b 	movw	r0, #53531	; 0xd11b
 80033ee:	f7fd fc39 	bl	8000c64 <LCD_WriteReg>
		LCD_WriteReg(0xD11C, 0x02);
 80033f2:	2102      	movs	r1, #2
 80033f4:	f24d 101c 	movw	r0, #53532	; 0xd11c
 80033f8:	f7fd fc34 	bl	8000c64 <LCD_WriteReg>
		LCD_WriteReg(0xD11D, 0x34);
 80033fc:	2134      	movs	r1, #52	; 0x34
 80033fe:	f24d 101d 	movw	r0, #53533	; 0xd11d
 8003402:	f7fd fc2f 	bl	8000c64 <LCD_WriteReg>
		LCD_WriteReg(0xD11E, 0x02);
 8003406:	2102      	movs	r1, #2
 8003408:	f24d 101e 	movw	r0, #53534	; 0xd11e
 800340c:	f7fd fc2a 	bl	8000c64 <LCD_WriteReg>
		LCD_WriteReg(0xD11F, 0x67);
 8003410:	2167      	movs	r1, #103	; 0x67
 8003412:	f24d 101f 	movw	r0, #53535	; 0xd11f
 8003416:	f7fd fc25 	bl	8000c64 <LCD_WriteReg>
		LCD_WriteReg(0xD120, 0x02);
 800341a:	2102      	movs	r1, #2
 800341c:	f24d 1020 	movw	r0, #53536	; 0xd120
 8003420:	f7fd fc20 	bl	8000c64 <LCD_WriteReg>
		LCD_WriteReg(0xD121, 0x84);
 8003424:	2184      	movs	r1, #132	; 0x84
 8003426:	f24d 1021 	movw	r0, #53537	; 0xd121
 800342a:	f7fd fc1b 	bl	8000c64 <LCD_WriteReg>
		LCD_WriteReg(0xD122, 0x02);
 800342e:	2102      	movs	r1, #2
 8003430:	f24d 1022 	movw	r0, #53538	; 0xd122
 8003434:	f7fd fc16 	bl	8000c64 <LCD_WriteReg>
		LCD_WriteReg(0xD123, 0xA4);
 8003438:	21a4      	movs	r1, #164	; 0xa4
 800343a:	f24d 1023 	movw	r0, #53539	; 0xd123
 800343e:	f7fd fc11 	bl	8000c64 <LCD_WriteReg>
		LCD_WriteReg(0xD124, 0x02);
 8003442:	2102      	movs	r1, #2
 8003444:	f24d 1024 	movw	r0, #53540	; 0xd124
 8003448:	f7fd fc0c 	bl	8000c64 <LCD_WriteReg>
		LCD_WriteReg(0xD125, 0xB7);
 800344c:	21b7      	movs	r1, #183	; 0xb7
 800344e:	f24d 1025 	movw	r0, #53541	; 0xd125
 8003452:	f7fd fc07 	bl	8000c64 <LCD_WriteReg>
		LCD_WriteReg(0xD126, 0x02);
 8003456:	2102      	movs	r1, #2
 8003458:	f24d 1026 	movw	r0, #53542	; 0xd126
 800345c:	f7fd fc02 	bl	8000c64 <LCD_WriteReg>
		LCD_WriteReg(0xD127, 0xCF);
 8003460:	21cf      	movs	r1, #207	; 0xcf
 8003462:	f24d 1027 	movw	r0, #53543	; 0xd127
 8003466:	f7fd fbfd 	bl	8000c64 <LCD_WriteReg>
		LCD_WriteReg(0xD128, 0x02);
 800346a:	2102      	movs	r1, #2
 800346c:	f24d 1028 	movw	r0, #53544	; 0xd128
 8003470:	f7fd fbf8 	bl	8000c64 <LCD_WriteReg>
		LCD_WriteReg(0xD129, 0xDE);
 8003474:	21de      	movs	r1, #222	; 0xde
 8003476:	f24d 1029 	movw	r0, #53545	; 0xd129
 800347a:	f7fd fbf3 	bl	8000c64 <LCD_WriteReg>
		LCD_WriteReg(0xD12A, 0x02);
 800347e:	2102      	movs	r1, #2
 8003480:	f24d 102a 	movw	r0, #53546	; 0xd12a
 8003484:	f7fd fbee 	bl	8000c64 <LCD_WriteReg>
		LCD_WriteReg(0xD12B, 0xF2);
 8003488:	21f2      	movs	r1, #242	; 0xf2
 800348a:	f24d 102b 	movw	r0, #53547	; 0xd12b
 800348e:	f7fd fbe9 	bl	8000c64 <LCD_WriteReg>
		LCD_WriteReg(0xD12C, 0x02);
 8003492:	2102      	movs	r1, #2
 8003494:	f24d 102c 	movw	r0, #53548	; 0xd12c
 8003498:	f7fd fbe4 	bl	8000c64 <LCD_WriteReg>
		LCD_WriteReg(0xD12D, 0xFE);
 800349c:	21fe      	movs	r1, #254	; 0xfe
 800349e:	f24d 102d 	movw	r0, #53549	; 0xd12d
 80034a2:	f7fd fbdf 	bl	8000c64 <LCD_WriteReg>
		LCD_WriteReg(0xD12E, 0x03);
 80034a6:	2103      	movs	r1, #3
 80034a8:	f24d 102e 	movw	r0, #53550	; 0xd12e
 80034ac:	f7fd fbda 	bl	8000c64 <LCD_WriteReg>
		LCD_WriteReg(0xD12F, 0x10);
 80034b0:	2110      	movs	r1, #16
 80034b2:	f24d 102f 	movw	r0, #53551	; 0xd12f
 80034b6:	f7fd fbd5 	bl	8000c64 <LCD_WriteReg>
		LCD_WriteReg(0xD130, 0x03);
 80034ba:	2103      	movs	r1, #3
 80034bc:	f24d 1030 	movw	r0, #53552	; 0xd130
 80034c0:	f7fd fbd0 	bl	8000c64 <LCD_WriteReg>
		LCD_WriteReg(0xD131, 0x33);
 80034c4:	2133      	movs	r1, #51	; 0x33
 80034c6:	f24d 1031 	movw	r0, #53553	; 0xd131
 80034ca:	f7fd fbcb 	bl	8000c64 <LCD_WriteReg>
		LCD_WriteReg(0xD132, 0x03);
 80034ce:	2103      	movs	r1, #3
 80034d0:	f24d 1032 	movw	r0, #53554	; 0xd132
 80034d4:	f7fd fbc6 	bl	8000c64 <LCD_WriteReg>
		LCD_WriteReg(0xD133, 0x6D);
 80034d8:	216d      	movs	r1, #109	; 0x6d
 80034da:	f24d 1033 	movw	r0, #53555	; 0xd133
 80034de:	f7fd fbc1 	bl	8000c64 <LCD_WriteReg>
		LCD_WriteReg(0xD200, 0x00);
 80034e2:	2100      	movs	r1, #0
 80034e4:	f44f 4052 	mov.w	r0, #53760	; 0xd200
 80034e8:	f7fd fbbc 	bl	8000c64 <LCD_WriteReg>
		LCD_WriteReg(0xD201, 0x33);
 80034ec:	2133      	movs	r1, #51	; 0x33
 80034ee:	f24d 2001 	movw	r0, #53761	; 0xd201
 80034f2:	f7fd fbb7 	bl	8000c64 <LCD_WriteReg>
		LCD_WriteReg(0xD202, 0x00);
 80034f6:	2100      	movs	r1, #0
 80034f8:	f24d 2002 	movw	r0, #53762	; 0xd202
 80034fc:	f7fd fbb2 	bl	8000c64 <LCD_WriteReg>
		LCD_WriteReg(0xD203, 0x34);
 8003500:	2134      	movs	r1, #52	; 0x34
 8003502:	f24d 2003 	movw	r0, #53763	; 0xd203
 8003506:	f7fd fbad 	bl	8000c64 <LCD_WriteReg>
		LCD_WriteReg(0xD204, 0x00);
 800350a:	2100      	movs	r1, #0
 800350c:	f24d 2004 	movw	r0, #53764	; 0xd204
 8003510:	f7fd fba8 	bl	8000c64 <LCD_WriteReg>
		LCD_WriteReg(0xD205, 0x3A);
 8003514:	213a      	movs	r1, #58	; 0x3a
 8003516:	f24d 2005 	movw	r0, #53765	; 0xd205
 800351a:	f7fd fba3 	bl	8000c64 <LCD_WriteReg>
		LCD_WriteReg(0xD206, 0x00);
 800351e:	2100      	movs	r1, #0
 8003520:	f24d 2006 	movw	r0, #53766	; 0xd206
 8003524:	f7fd fb9e 	bl	8000c64 <LCD_WriteReg>
		LCD_WriteReg(0xD207, 0x4A);
 8003528:	214a      	movs	r1, #74	; 0x4a
 800352a:	f24d 2007 	movw	r0, #53767	; 0xd207
 800352e:	f7fd fb99 	bl	8000c64 <LCD_WriteReg>
		LCD_WriteReg(0xD208, 0x00);
 8003532:	2100      	movs	r1, #0
 8003534:	f24d 2008 	movw	r0, #53768	; 0xd208
 8003538:	f7fd fb94 	bl	8000c64 <LCD_WriteReg>
		LCD_WriteReg(0xD209, 0x5C);
 800353c:	215c      	movs	r1, #92	; 0x5c
 800353e:	f24d 2009 	movw	r0, #53769	; 0xd209
 8003542:	f7fd fb8f 	bl	8000c64 <LCD_WriteReg>
		LCD_WriteReg(0xD20A, 0x00);
 8003546:	2100      	movs	r1, #0
 8003548:	f24d 200a 	movw	r0, #53770	; 0xd20a
 800354c:	f7fd fb8a 	bl	8000c64 <LCD_WriteReg>

		LCD_WriteReg(0xD20B, 0x81);
 8003550:	2181      	movs	r1, #129	; 0x81
 8003552:	f24d 200b 	movw	r0, #53771	; 0xd20b
 8003556:	f7fd fb85 	bl	8000c64 <LCD_WriteReg>
		LCD_WriteReg(0xD20C, 0x00);
 800355a:	2100      	movs	r1, #0
 800355c:	f24d 200c 	movw	r0, #53772	; 0xd20c
 8003560:	f7fd fb80 	bl	8000c64 <LCD_WriteReg>
		LCD_WriteReg(0xD20D, 0xA6);
 8003564:	21a6      	movs	r1, #166	; 0xa6
 8003566:	f24d 200d 	movw	r0, #53773	; 0xd20d
 800356a:	f7fd fb7b 	bl	8000c64 <LCD_WriteReg>
		LCD_WriteReg(0xD20E, 0x00);
 800356e:	2100      	movs	r1, #0
 8003570:	f24d 200e 	movw	r0, #53774	; 0xd20e
 8003574:	f7fd fb76 	bl	8000c64 <LCD_WriteReg>
		LCD_WriteReg(0xD20F, 0xE5);
 8003578:	21e5      	movs	r1, #229	; 0xe5
 800357a:	f24d 200f 	movw	r0, #53775	; 0xd20f
 800357e:	f7fd fb71 	bl	8000c64 <LCD_WriteReg>
		LCD_WriteReg(0xD210, 0x01);
 8003582:	2101      	movs	r1, #1
 8003584:	f24d 2010 	movw	r0, #53776	; 0xd210
 8003588:	f7fd fb6c 	bl	8000c64 <LCD_WriteReg>
		LCD_WriteReg(0xD211, 0x13);
 800358c:	2113      	movs	r1, #19
 800358e:	f24d 2011 	movw	r0, #53777	; 0xd211
 8003592:	f7fd fb67 	bl	8000c64 <LCD_WriteReg>
		LCD_WriteReg(0xD212, 0x01);
 8003596:	2101      	movs	r1, #1
 8003598:	f24d 2012 	movw	r0, #53778	; 0xd212
 800359c:	f7fd fb62 	bl	8000c64 <LCD_WriteReg>
		LCD_WriteReg(0xD213, 0x54);
 80035a0:	2154      	movs	r1, #84	; 0x54
 80035a2:	f24d 2013 	movw	r0, #53779	; 0xd213
 80035a6:	f7fd fb5d 	bl	8000c64 <LCD_WriteReg>
		LCD_WriteReg(0xD214, 0x01);
 80035aa:	2101      	movs	r1, #1
 80035ac:	f24d 2014 	movw	r0, #53780	; 0xd214
 80035b0:	f7fd fb58 	bl	8000c64 <LCD_WriteReg>
		LCD_WriteReg(0xD215, 0x82);
 80035b4:	2182      	movs	r1, #130	; 0x82
 80035b6:	f24d 2015 	movw	r0, #53781	; 0xd215
 80035ba:	f7fd fb53 	bl	8000c64 <LCD_WriteReg>
		LCD_WriteReg(0xD216, 0x01);
 80035be:	2101      	movs	r1, #1
 80035c0:	f24d 2016 	movw	r0, #53782	; 0xd216
 80035c4:	f7fd fb4e 	bl	8000c64 <LCD_WriteReg>
		LCD_WriteReg(0xD217, 0xCA);
 80035c8:	21ca      	movs	r1, #202	; 0xca
 80035ca:	f24d 2017 	movw	r0, #53783	; 0xd217
 80035ce:	f7fd fb49 	bl	8000c64 <LCD_WriteReg>
		LCD_WriteReg(0xD218, 0x02);
 80035d2:	2102      	movs	r1, #2
 80035d4:	f24d 2018 	movw	r0, #53784	; 0xd218
 80035d8:	f7fd fb44 	bl	8000c64 <LCD_WriteReg>
		LCD_WriteReg(0xD219, 0x00);
 80035dc:	2100      	movs	r1, #0
 80035de:	f24d 2019 	movw	r0, #53785	; 0xd219
 80035e2:	f7fd fb3f 	bl	8000c64 <LCD_WriteReg>
		LCD_WriteReg(0xD21A, 0x02);
 80035e6:	2102      	movs	r1, #2
 80035e8:	f24d 201a 	movw	r0, #53786	; 0xd21a
 80035ec:	f7fd fb3a 	bl	8000c64 <LCD_WriteReg>
		LCD_WriteReg(0xD21B, 0x01);
 80035f0:	2101      	movs	r1, #1
 80035f2:	f24d 201b 	movw	r0, #53787	; 0xd21b
 80035f6:	f7fd fb35 	bl	8000c64 <LCD_WriteReg>
		LCD_WriteReg(0xD21C, 0x02);
 80035fa:	2102      	movs	r1, #2
 80035fc:	f24d 201c 	movw	r0, #53788	; 0xd21c
 8003600:	f7fd fb30 	bl	8000c64 <LCD_WriteReg>
		LCD_WriteReg(0xD21D, 0x34);
 8003604:	2134      	movs	r1, #52	; 0x34
 8003606:	f24d 201d 	movw	r0, #53789	; 0xd21d
 800360a:	f7fd fb2b 	bl	8000c64 <LCD_WriteReg>
		LCD_WriteReg(0xD21E, 0x02);
 800360e:	2102      	movs	r1, #2
 8003610:	f24d 201e 	movw	r0, #53790	; 0xd21e
 8003614:	f7fd fb26 	bl	8000c64 <LCD_WriteReg>
		LCD_WriteReg(0xD21F, 0x67);
 8003618:	2167      	movs	r1, #103	; 0x67
 800361a:	f24d 201f 	movw	r0, #53791	; 0xd21f
 800361e:	f7fd fb21 	bl	8000c64 <LCD_WriteReg>
		LCD_WriteReg(0xD220, 0x02);
 8003622:	2102      	movs	r1, #2
 8003624:	f24d 2020 	movw	r0, #53792	; 0xd220
 8003628:	f7fd fb1c 	bl	8000c64 <LCD_WriteReg>
		LCD_WriteReg(0xD221, 0x84);
 800362c:	2184      	movs	r1, #132	; 0x84
 800362e:	f24d 2021 	movw	r0, #53793	; 0xd221
 8003632:	f7fd fb17 	bl	8000c64 <LCD_WriteReg>
		LCD_WriteReg(0xD222, 0x02);
 8003636:	2102      	movs	r1, #2
 8003638:	f24d 2022 	movw	r0, #53794	; 0xd222
 800363c:	f7fd fb12 	bl	8000c64 <LCD_WriteReg>
		LCD_WriteReg(0xD223, 0xA4);
 8003640:	21a4      	movs	r1, #164	; 0xa4
 8003642:	f24d 2023 	movw	r0, #53795	; 0xd223
 8003646:	f7fd fb0d 	bl	8000c64 <LCD_WriteReg>
		LCD_WriteReg(0xD224, 0x02);
 800364a:	2102      	movs	r1, #2
 800364c:	f24d 2024 	movw	r0, #53796	; 0xd224
 8003650:	f7fd fb08 	bl	8000c64 <LCD_WriteReg>
		LCD_WriteReg(0xD225, 0xB7);
 8003654:	21b7      	movs	r1, #183	; 0xb7
 8003656:	f24d 2025 	movw	r0, #53797	; 0xd225
 800365a:	f7fd fb03 	bl	8000c64 <LCD_WriteReg>
		LCD_WriteReg(0xD226, 0x02);
 800365e:	2102      	movs	r1, #2
 8003660:	f24d 2026 	movw	r0, #53798	; 0xd226
 8003664:	f7fd fafe 	bl	8000c64 <LCD_WriteReg>
		LCD_WriteReg(0xD227, 0xCF);
 8003668:	21cf      	movs	r1, #207	; 0xcf
 800366a:	f24d 2027 	movw	r0, #53799	; 0xd227
 800366e:	f7fd faf9 	bl	8000c64 <LCD_WriteReg>
		LCD_WriteReg(0xD228, 0x02);
 8003672:	2102      	movs	r1, #2
 8003674:	f24d 2028 	movw	r0, #53800	; 0xd228
 8003678:	f7fd faf4 	bl	8000c64 <LCD_WriteReg>
		LCD_WriteReg(0xD229, 0xDE);
 800367c:	21de      	movs	r1, #222	; 0xde
 800367e:	f24d 2029 	movw	r0, #53801	; 0xd229
 8003682:	f7fd faef 	bl	8000c64 <LCD_WriteReg>
		LCD_WriteReg(0xD22A, 0x02);
 8003686:	2102      	movs	r1, #2
 8003688:	f24d 202a 	movw	r0, #53802	; 0xd22a
 800368c:	f7fd faea 	bl	8000c64 <LCD_WriteReg>
		LCD_WriteReg(0xD22B, 0xF2);
 8003690:	21f2      	movs	r1, #242	; 0xf2
 8003692:	f24d 202b 	movw	r0, #53803	; 0xd22b
 8003696:	f7fd fae5 	bl	8000c64 <LCD_WriteReg>
		LCD_WriteReg(0xD22C, 0x02);
 800369a:	2102      	movs	r1, #2
 800369c:	f24d 202c 	movw	r0, #53804	; 0xd22c
 80036a0:	f7fd fae0 	bl	8000c64 <LCD_WriteReg>
		LCD_WriteReg(0xD22D, 0xFE);
 80036a4:	21fe      	movs	r1, #254	; 0xfe
 80036a6:	f24d 202d 	movw	r0, #53805	; 0xd22d
 80036aa:	f7fd fadb 	bl	8000c64 <LCD_WriteReg>
		LCD_WriteReg(0xD22E, 0x03);
 80036ae:	2103      	movs	r1, #3
 80036b0:	f24d 202e 	movw	r0, #53806	; 0xd22e
 80036b4:	f7fd fad6 	bl	8000c64 <LCD_WriteReg>
		LCD_WriteReg(0xD22F, 0x10);
 80036b8:	2110      	movs	r1, #16
 80036ba:	f24d 202f 	movw	r0, #53807	; 0xd22f
 80036be:	f7fd fad1 	bl	8000c64 <LCD_WriteReg>
		LCD_WriteReg(0xD230, 0x03);
 80036c2:	2103      	movs	r1, #3
 80036c4:	f24d 2030 	movw	r0, #53808	; 0xd230
 80036c8:	f7fd facc 	bl	8000c64 <LCD_WriteReg>
		LCD_WriteReg(0xD231, 0x33);
 80036cc:	2133      	movs	r1, #51	; 0x33
 80036ce:	f24d 2031 	movw	r0, #53809	; 0xd231
 80036d2:	f7fd fac7 	bl	8000c64 <LCD_WriteReg>
		LCD_WriteReg(0xD232, 0x03);
 80036d6:	2103      	movs	r1, #3
 80036d8:	f24d 2032 	movw	r0, #53810	; 0xd232
 80036dc:	f7fd fac2 	bl	8000c64 <LCD_WriteReg>
		LCD_WriteReg(0xD233, 0x6D);
 80036e0:	216d      	movs	r1, #109	; 0x6d
 80036e2:	f24d 2033 	movw	r0, #53811	; 0xd233
 80036e6:	f7fd fabd 	bl	8000c64 <LCD_WriteReg>
		LCD_WriteReg(0xD300, 0x00);
 80036ea:	2100      	movs	r1, #0
 80036ec:	f44f 4053 	mov.w	r0, #54016	; 0xd300
 80036f0:	f7fd fab8 	bl	8000c64 <LCD_WriteReg>
		LCD_WriteReg(0xD301, 0x33);
 80036f4:	2133      	movs	r1, #51	; 0x33
 80036f6:	f24d 3001 	movw	r0, #54017	; 0xd301
 80036fa:	f7fd fab3 	bl	8000c64 <LCD_WriteReg>
		LCD_WriteReg(0xD302, 0x00);
 80036fe:	2100      	movs	r1, #0
 8003700:	f24d 3002 	movw	r0, #54018	; 0xd302
 8003704:	f7fd faae 	bl	8000c64 <LCD_WriteReg>
		LCD_WriteReg(0xD303, 0x34);
 8003708:	2134      	movs	r1, #52	; 0x34
 800370a:	f24d 3003 	movw	r0, #54019	; 0xd303
 800370e:	f7fd faa9 	bl	8000c64 <LCD_WriteReg>
		LCD_WriteReg(0xD304, 0x00);
 8003712:	2100      	movs	r1, #0
 8003714:	f24d 3004 	movw	r0, #54020	; 0xd304
 8003718:	f7fd faa4 	bl	8000c64 <LCD_WriteReg>
		LCD_WriteReg(0xD305, 0x3A);
 800371c:	213a      	movs	r1, #58	; 0x3a
 800371e:	f24d 3005 	movw	r0, #54021	; 0xd305
 8003722:	f7fd fa9f 	bl	8000c64 <LCD_WriteReg>
		LCD_WriteReg(0xD306, 0x00);
 8003726:	2100      	movs	r1, #0
 8003728:	f24d 3006 	movw	r0, #54022	; 0xd306
 800372c:	f7fd fa9a 	bl	8000c64 <LCD_WriteReg>
		LCD_WriteReg(0xD307, 0x4A);
 8003730:	214a      	movs	r1, #74	; 0x4a
 8003732:	f24d 3007 	movw	r0, #54023	; 0xd307
 8003736:	f7fd fa95 	bl	8000c64 <LCD_WriteReg>
		LCD_WriteReg(0xD308, 0x00);
 800373a:	2100      	movs	r1, #0
 800373c:	f24d 3008 	movw	r0, #54024	; 0xd308
 8003740:	f7fd fa90 	bl	8000c64 <LCD_WriteReg>
		LCD_WriteReg(0xD309, 0x5C);
 8003744:	215c      	movs	r1, #92	; 0x5c
 8003746:	f24d 3009 	movw	r0, #54025	; 0xd309
 800374a:	f7fd fa8b 	bl	8000c64 <LCD_WriteReg>
		LCD_WriteReg(0xD30A, 0x00);
 800374e:	2100      	movs	r1, #0
 8003750:	f24d 300a 	movw	r0, #54026	; 0xd30a
 8003754:	f7fd fa86 	bl	8000c64 <LCD_WriteReg>

		LCD_WriteReg(0xD30B, 0x81);
 8003758:	2181      	movs	r1, #129	; 0x81
 800375a:	f24d 300b 	movw	r0, #54027	; 0xd30b
 800375e:	f7fd fa81 	bl	8000c64 <LCD_WriteReg>
		LCD_WriteReg(0xD30C, 0x00);
 8003762:	2100      	movs	r1, #0
 8003764:	f24d 300c 	movw	r0, #54028	; 0xd30c
 8003768:	f7fd fa7c 	bl	8000c64 <LCD_WriteReg>
		LCD_WriteReg(0xD30D, 0xA6);
 800376c:	21a6      	movs	r1, #166	; 0xa6
 800376e:	f24d 300d 	movw	r0, #54029	; 0xd30d
 8003772:	f7fd fa77 	bl	8000c64 <LCD_WriteReg>
		LCD_WriteReg(0xD30E, 0x00);
 8003776:	2100      	movs	r1, #0
 8003778:	f24d 300e 	movw	r0, #54030	; 0xd30e
 800377c:	f7fd fa72 	bl	8000c64 <LCD_WriteReg>
		LCD_WriteReg(0xD30F, 0xE5);
 8003780:	21e5      	movs	r1, #229	; 0xe5
 8003782:	f24d 300f 	movw	r0, #54031	; 0xd30f
 8003786:	f7fd fa6d 	bl	8000c64 <LCD_WriteReg>
		LCD_WriteReg(0xD310, 0x01);
 800378a:	2101      	movs	r1, #1
 800378c:	f24d 3010 	movw	r0, #54032	; 0xd310
 8003790:	f7fd fa68 	bl	8000c64 <LCD_WriteReg>
		LCD_WriteReg(0xD311, 0x13);
 8003794:	2113      	movs	r1, #19
 8003796:	f24d 3011 	movw	r0, #54033	; 0xd311
 800379a:	f7fd fa63 	bl	8000c64 <LCD_WriteReg>
		LCD_WriteReg(0xD312, 0x01);
 800379e:	2101      	movs	r1, #1
 80037a0:	f24d 3012 	movw	r0, #54034	; 0xd312
 80037a4:	f7fd fa5e 	bl	8000c64 <LCD_WriteReg>
		LCD_WriteReg(0xD313, 0x54);
 80037a8:	2154      	movs	r1, #84	; 0x54
 80037aa:	f24d 3013 	movw	r0, #54035	; 0xd313
 80037ae:	f7fd fa59 	bl	8000c64 <LCD_WriteReg>
		LCD_WriteReg(0xD314, 0x01);
 80037b2:	2101      	movs	r1, #1
 80037b4:	f24d 3014 	movw	r0, #54036	; 0xd314
 80037b8:	f7fd fa54 	bl	8000c64 <LCD_WriteReg>
		LCD_WriteReg(0xD315, 0x82);
 80037bc:	2182      	movs	r1, #130	; 0x82
 80037be:	f24d 3015 	movw	r0, #54037	; 0xd315
 80037c2:	f7fd fa4f 	bl	8000c64 <LCD_WriteReg>
		LCD_WriteReg(0xD316, 0x01);
 80037c6:	2101      	movs	r1, #1
 80037c8:	f24d 3016 	movw	r0, #54038	; 0xd316
 80037cc:	f7fd fa4a 	bl	8000c64 <LCD_WriteReg>
		LCD_WriteReg(0xD317, 0xCA);
 80037d0:	21ca      	movs	r1, #202	; 0xca
 80037d2:	f24d 3017 	movw	r0, #54039	; 0xd317
 80037d6:	f7fd fa45 	bl	8000c64 <LCD_WriteReg>
		LCD_WriteReg(0xD318, 0x02);
 80037da:	2102      	movs	r1, #2
 80037dc:	f24d 3018 	movw	r0, #54040	; 0xd318
 80037e0:	f7fd fa40 	bl	8000c64 <LCD_WriteReg>
		LCD_WriteReg(0xD319, 0x00);
 80037e4:	2100      	movs	r1, #0
 80037e6:	f24d 3019 	movw	r0, #54041	; 0xd319
 80037ea:	f7fd fa3b 	bl	8000c64 <LCD_WriteReg>
		LCD_WriteReg(0xD31A, 0x02);
 80037ee:	2102      	movs	r1, #2
 80037f0:	f24d 301a 	movw	r0, #54042	; 0xd31a
 80037f4:	f7fd fa36 	bl	8000c64 <LCD_WriteReg>
		LCD_WriteReg(0xD31B, 0x01);
 80037f8:	2101      	movs	r1, #1
 80037fa:	f24d 301b 	movw	r0, #54043	; 0xd31b
 80037fe:	f7fd fa31 	bl	8000c64 <LCD_WriteReg>
		LCD_WriteReg(0xD31C, 0x02);
 8003802:	2102      	movs	r1, #2
 8003804:	f24d 301c 	movw	r0, #54044	; 0xd31c
 8003808:	f7fd fa2c 	bl	8000c64 <LCD_WriteReg>
		LCD_WriteReg(0xD31D, 0x34);
 800380c:	2134      	movs	r1, #52	; 0x34
 800380e:	f24d 301d 	movw	r0, #54045	; 0xd31d
 8003812:	f7fd fa27 	bl	8000c64 <LCD_WriteReg>
		LCD_WriteReg(0xD31E, 0x02);
 8003816:	2102      	movs	r1, #2
 8003818:	f24d 301e 	movw	r0, #54046	; 0xd31e
 800381c:	f7fd fa22 	bl	8000c64 <LCD_WriteReg>
		LCD_WriteReg(0xD31F, 0x67);
 8003820:	2167      	movs	r1, #103	; 0x67
 8003822:	f24d 301f 	movw	r0, #54047	; 0xd31f
 8003826:	f7fd fa1d 	bl	8000c64 <LCD_WriteReg>
		LCD_WriteReg(0xD320, 0x02);
 800382a:	2102      	movs	r1, #2
 800382c:	f24d 3020 	movw	r0, #54048	; 0xd320
 8003830:	f7fd fa18 	bl	8000c64 <LCD_WriteReg>
		LCD_WriteReg(0xD321, 0x84);
 8003834:	2184      	movs	r1, #132	; 0x84
 8003836:	f24d 3021 	movw	r0, #54049	; 0xd321
 800383a:	f7fd fa13 	bl	8000c64 <LCD_WriteReg>
		LCD_WriteReg(0xD322, 0x02);
 800383e:	2102      	movs	r1, #2
 8003840:	f24d 3022 	movw	r0, #54050	; 0xd322
 8003844:	f7fd fa0e 	bl	8000c64 <LCD_WriteReg>
		LCD_WriteReg(0xD323, 0xA4);
 8003848:	21a4      	movs	r1, #164	; 0xa4
 800384a:	f24d 3023 	movw	r0, #54051	; 0xd323
 800384e:	f7fd fa09 	bl	8000c64 <LCD_WriteReg>
		LCD_WriteReg(0xD324, 0x02);
 8003852:	2102      	movs	r1, #2
 8003854:	f24d 3024 	movw	r0, #54052	; 0xd324
 8003858:	f7fd fa04 	bl	8000c64 <LCD_WriteReg>
		LCD_WriteReg(0xD325, 0xB7);
 800385c:	21b7      	movs	r1, #183	; 0xb7
 800385e:	f24d 3025 	movw	r0, #54053	; 0xd325
 8003862:	f7fd f9ff 	bl	8000c64 <LCD_WriteReg>
		LCD_WriteReg(0xD326, 0x02);
 8003866:	2102      	movs	r1, #2
 8003868:	f24d 3026 	movw	r0, #54054	; 0xd326
 800386c:	f7fd f9fa 	bl	8000c64 <LCD_WriteReg>
		LCD_WriteReg(0xD327, 0xCF);
 8003870:	21cf      	movs	r1, #207	; 0xcf
 8003872:	f24d 3027 	movw	r0, #54055	; 0xd327
 8003876:	f7fd f9f5 	bl	8000c64 <LCD_WriteReg>
		LCD_WriteReg(0xD328, 0x02);
 800387a:	2102      	movs	r1, #2
 800387c:	f24d 3028 	movw	r0, #54056	; 0xd328
 8003880:	f7fd f9f0 	bl	8000c64 <LCD_WriteReg>
		LCD_WriteReg(0xD329, 0xDE);
 8003884:	21de      	movs	r1, #222	; 0xde
 8003886:	f24d 3029 	movw	r0, #54057	; 0xd329
 800388a:	f7fd f9eb 	bl	8000c64 <LCD_WriteReg>
		LCD_WriteReg(0xD32A, 0x02);
 800388e:	2102      	movs	r1, #2
 8003890:	f24d 302a 	movw	r0, #54058	; 0xd32a
 8003894:	f7fd f9e6 	bl	8000c64 <LCD_WriteReg>
		LCD_WriteReg(0xD32B, 0xF2);
 8003898:	21f2      	movs	r1, #242	; 0xf2
 800389a:	f24d 302b 	movw	r0, #54059	; 0xd32b
 800389e:	f7fd f9e1 	bl	8000c64 <LCD_WriteReg>
		LCD_WriteReg(0xD32C, 0x02);
 80038a2:	2102      	movs	r1, #2
 80038a4:	f24d 302c 	movw	r0, #54060	; 0xd32c
 80038a8:	f7fd f9dc 	bl	8000c64 <LCD_WriteReg>
		LCD_WriteReg(0xD32D, 0xFE);
 80038ac:	21fe      	movs	r1, #254	; 0xfe
 80038ae:	f24d 302d 	movw	r0, #54061	; 0xd32d
 80038b2:	f7fd f9d7 	bl	8000c64 <LCD_WriteReg>
		LCD_WriteReg(0xD32E, 0x03);
 80038b6:	2103      	movs	r1, #3
 80038b8:	f24d 302e 	movw	r0, #54062	; 0xd32e
 80038bc:	f7fd f9d2 	bl	8000c64 <LCD_WriteReg>
		LCD_WriteReg(0xD32F, 0x10);
 80038c0:	2110      	movs	r1, #16
 80038c2:	f24d 302f 	movw	r0, #54063	; 0xd32f
 80038c6:	f7fd f9cd 	bl	8000c64 <LCD_WriteReg>
		LCD_WriteReg(0xD330, 0x03);
 80038ca:	2103      	movs	r1, #3
 80038cc:	f24d 3030 	movw	r0, #54064	; 0xd330
 80038d0:	f7fd f9c8 	bl	8000c64 <LCD_WriteReg>
		LCD_WriteReg(0xD331, 0x33);
 80038d4:	2133      	movs	r1, #51	; 0x33
 80038d6:	f24d 3031 	movw	r0, #54065	; 0xd331
 80038da:	f7fd f9c3 	bl	8000c64 <LCD_WriteReg>
		LCD_WriteReg(0xD332, 0x03);
 80038de:	2103      	movs	r1, #3
 80038e0:	f24d 3032 	movw	r0, #54066	; 0xd332
 80038e4:	f7fd f9be 	bl	8000c64 <LCD_WriteReg>
		LCD_WriteReg(0xD333, 0x6D);
 80038e8:	216d      	movs	r1, #109	; 0x6d
 80038ea:	f24d 3033 	movw	r0, #54067	; 0xd333
 80038ee:	f7fd f9b9 	bl	8000c64 <LCD_WriteReg>
		LCD_WriteReg(0xD400, 0x00);
 80038f2:	2100      	movs	r1, #0
 80038f4:	f44f 4054 	mov.w	r0, #54272	; 0xd400
 80038f8:	f7fd f9b4 	bl	8000c64 <LCD_WriteReg>
		LCD_WriteReg(0xD401, 0x33);
 80038fc:	2133      	movs	r1, #51	; 0x33
 80038fe:	f24d 4001 	movw	r0, #54273	; 0xd401
 8003902:	f7fd f9af 	bl	8000c64 <LCD_WriteReg>
		LCD_WriteReg(0xD402, 0x00);
 8003906:	2100      	movs	r1, #0
 8003908:	f24d 4002 	movw	r0, #54274	; 0xd402
 800390c:	f7fd f9aa 	bl	8000c64 <LCD_WriteReg>
		LCD_WriteReg(0xD403, 0x34);
 8003910:	2134      	movs	r1, #52	; 0x34
 8003912:	f24d 4003 	movw	r0, #54275	; 0xd403
 8003916:	f7fd f9a5 	bl	8000c64 <LCD_WriteReg>
		LCD_WriteReg(0xD404, 0x00);
 800391a:	2100      	movs	r1, #0
 800391c:	f24d 4004 	movw	r0, #54276	; 0xd404
 8003920:	f7fd f9a0 	bl	8000c64 <LCD_WriteReg>
		LCD_WriteReg(0xD405, 0x3A);
 8003924:	213a      	movs	r1, #58	; 0x3a
 8003926:	f24d 4005 	movw	r0, #54277	; 0xd405
 800392a:	f7fd f99b 	bl	8000c64 <LCD_WriteReg>
		LCD_WriteReg(0xD406, 0x00);
 800392e:	2100      	movs	r1, #0
 8003930:	f24d 4006 	movw	r0, #54278	; 0xd406
 8003934:	f7fd f996 	bl	8000c64 <LCD_WriteReg>
		LCD_WriteReg(0xD407, 0x4A);
 8003938:	214a      	movs	r1, #74	; 0x4a
 800393a:	f24d 4007 	movw	r0, #54279	; 0xd407
 800393e:	f7fd f991 	bl	8000c64 <LCD_WriteReg>
		LCD_WriteReg(0xD408, 0x00);
 8003942:	2100      	movs	r1, #0
 8003944:	f24d 4008 	movw	r0, #54280	; 0xd408
 8003948:	f7fd f98c 	bl	8000c64 <LCD_WriteReg>
		LCD_WriteReg(0xD409, 0x5C);
 800394c:	215c      	movs	r1, #92	; 0x5c
 800394e:	f24d 4009 	movw	r0, #54281	; 0xd409
 8003952:	f7fd f987 	bl	8000c64 <LCD_WriteReg>
		LCD_WriteReg(0xD40A, 0x00);
 8003956:	2100      	movs	r1, #0
 8003958:	f24d 400a 	movw	r0, #54282	; 0xd40a
 800395c:	f7fd f982 	bl	8000c64 <LCD_WriteReg>
		LCD_WriteReg(0xD40B, 0x81);
 8003960:	2181      	movs	r1, #129	; 0x81
 8003962:	f24d 400b 	movw	r0, #54283	; 0xd40b
 8003966:	f7fd f97d 	bl	8000c64 <LCD_WriteReg>

		LCD_WriteReg(0xD40C, 0x00);
 800396a:	2100      	movs	r1, #0
 800396c:	f24d 400c 	movw	r0, #54284	; 0xd40c
 8003970:	f7fd f978 	bl	8000c64 <LCD_WriteReg>
		LCD_WriteReg(0xD40D, 0xA6);
 8003974:	21a6      	movs	r1, #166	; 0xa6
 8003976:	f24d 400d 	movw	r0, #54285	; 0xd40d
 800397a:	f7fd f973 	bl	8000c64 <LCD_WriteReg>
		LCD_WriteReg(0xD40E, 0x00);
 800397e:	2100      	movs	r1, #0
 8003980:	f24d 400e 	movw	r0, #54286	; 0xd40e
 8003984:	f7fd f96e 	bl	8000c64 <LCD_WriteReg>
		LCD_WriteReg(0xD40F, 0xE5);
 8003988:	21e5      	movs	r1, #229	; 0xe5
 800398a:	f24d 400f 	movw	r0, #54287	; 0xd40f
 800398e:	f7fd f969 	bl	8000c64 <LCD_WriteReg>
		LCD_WriteReg(0xD410, 0x01);
 8003992:	2101      	movs	r1, #1
 8003994:	f24d 4010 	movw	r0, #54288	; 0xd410
 8003998:	f7fd f964 	bl	8000c64 <LCD_WriteReg>
		LCD_WriteReg(0xD411, 0x13);
 800399c:	2113      	movs	r1, #19
 800399e:	f24d 4011 	movw	r0, #54289	; 0xd411
 80039a2:	f7fd f95f 	bl	8000c64 <LCD_WriteReg>
		LCD_WriteReg(0xD412, 0x01);
 80039a6:	2101      	movs	r1, #1
 80039a8:	f24d 4012 	movw	r0, #54290	; 0xd412
 80039ac:	f7fd f95a 	bl	8000c64 <LCD_WriteReg>
		LCD_WriteReg(0xD413, 0x54);
 80039b0:	2154      	movs	r1, #84	; 0x54
 80039b2:	f24d 4013 	movw	r0, #54291	; 0xd413
 80039b6:	f7fd f955 	bl	8000c64 <LCD_WriteReg>
		LCD_WriteReg(0xD414, 0x01);
 80039ba:	2101      	movs	r1, #1
 80039bc:	f24d 4014 	movw	r0, #54292	; 0xd414
 80039c0:	f7fd f950 	bl	8000c64 <LCD_WriteReg>
		LCD_WriteReg(0xD415, 0x82);
 80039c4:	2182      	movs	r1, #130	; 0x82
 80039c6:	f24d 4015 	movw	r0, #54293	; 0xd415
 80039ca:	f7fd f94b 	bl	8000c64 <LCD_WriteReg>
		LCD_WriteReg(0xD416, 0x01);
 80039ce:	2101      	movs	r1, #1
 80039d0:	f24d 4016 	movw	r0, #54294	; 0xd416
 80039d4:	f7fd f946 	bl	8000c64 <LCD_WriteReg>
		LCD_WriteReg(0xD417, 0xCA);
 80039d8:	21ca      	movs	r1, #202	; 0xca
 80039da:	f24d 4017 	movw	r0, #54295	; 0xd417
 80039de:	f7fd f941 	bl	8000c64 <LCD_WriteReg>
		LCD_WriteReg(0xD418, 0x02);
 80039e2:	2102      	movs	r1, #2
 80039e4:	f24d 4018 	movw	r0, #54296	; 0xd418
 80039e8:	f7fd f93c 	bl	8000c64 <LCD_WriteReg>
		LCD_WriteReg(0xD419, 0x00);
 80039ec:	2100      	movs	r1, #0
 80039ee:	f24d 4019 	movw	r0, #54297	; 0xd419
 80039f2:	f7fd f937 	bl	8000c64 <LCD_WriteReg>
		LCD_WriteReg(0xD41A, 0x02);
 80039f6:	2102      	movs	r1, #2
 80039f8:	f24d 401a 	movw	r0, #54298	; 0xd41a
 80039fc:	f7fd f932 	bl	8000c64 <LCD_WriteReg>
		LCD_WriteReg(0xD41B, 0x01);
 8003a00:	2101      	movs	r1, #1
 8003a02:	f24d 401b 	movw	r0, #54299	; 0xd41b
 8003a06:	f7fd f92d 	bl	8000c64 <LCD_WriteReg>
		LCD_WriteReg(0xD41C, 0x02);
 8003a0a:	2102      	movs	r1, #2
 8003a0c:	f24d 401c 	movw	r0, #54300	; 0xd41c
 8003a10:	f7fd f928 	bl	8000c64 <LCD_WriteReg>
		LCD_WriteReg(0xD41D, 0x34);
 8003a14:	2134      	movs	r1, #52	; 0x34
 8003a16:	f24d 401d 	movw	r0, #54301	; 0xd41d
 8003a1a:	f7fd f923 	bl	8000c64 <LCD_WriteReg>
		LCD_WriteReg(0xD41E, 0x02);
 8003a1e:	2102      	movs	r1, #2
 8003a20:	f24d 401e 	movw	r0, #54302	; 0xd41e
 8003a24:	f7fd f91e 	bl	8000c64 <LCD_WriteReg>
		LCD_WriteReg(0xD41F, 0x67);
 8003a28:	2167      	movs	r1, #103	; 0x67
 8003a2a:	f24d 401f 	movw	r0, #54303	; 0xd41f
 8003a2e:	f7fd f919 	bl	8000c64 <LCD_WriteReg>
		LCD_WriteReg(0xD420, 0x02);
 8003a32:	2102      	movs	r1, #2
 8003a34:	f24d 4020 	movw	r0, #54304	; 0xd420
 8003a38:	f7fd f914 	bl	8000c64 <LCD_WriteReg>
		LCD_WriteReg(0xD421, 0x84);
 8003a3c:	2184      	movs	r1, #132	; 0x84
 8003a3e:	f24d 4021 	movw	r0, #54305	; 0xd421
 8003a42:	f7fd f90f 	bl	8000c64 <LCD_WriteReg>
		LCD_WriteReg(0xD422, 0x02);
 8003a46:	2102      	movs	r1, #2
 8003a48:	f24d 4022 	movw	r0, #54306	; 0xd422
 8003a4c:	f7fd f90a 	bl	8000c64 <LCD_WriteReg>
		LCD_WriteReg(0xD423, 0xA4);
 8003a50:	21a4      	movs	r1, #164	; 0xa4
 8003a52:	f24d 4023 	movw	r0, #54307	; 0xd423
 8003a56:	f7fd f905 	bl	8000c64 <LCD_WriteReg>
		LCD_WriteReg(0xD424, 0x02);
 8003a5a:	2102      	movs	r1, #2
 8003a5c:	f24d 4024 	movw	r0, #54308	; 0xd424
 8003a60:	f7fd f900 	bl	8000c64 <LCD_WriteReg>
		LCD_WriteReg(0xD425, 0xB7);
 8003a64:	21b7      	movs	r1, #183	; 0xb7
 8003a66:	f24d 4025 	movw	r0, #54309	; 0xd425
 8003a6a:	f7fd f8fb 	bl	8000c64 <LCD_WriteReg>
		LCD_WriteReg(0xD426, 0x02);
 8003a6e:	2102      	movs	r1, #2
 8003a70:	f24d 4026 	movw	r0, #54310	; 0xd426
 8003a74:	f7fd f8f6 	bl	8000c64 <LCD_WriteReg>
		LCD_WriteReg(0xD427, 0xCF);
 8003a78:	21cf      	movs	r1, #207	; 0xcf
 8003a7a:	f24d 4027 	movw	r0, #54311	; 0xd427
 8003a7e:	f7fd f8f1 	bl	8000c64 <LCD_WriteReg>
		LCD_WriteReg(0xD428, 0x02);
 8003a82:	2102      	movs	r1, #2
 8003a84:	f24d 4028 	movw	r0, #54312	; 0xd428
 8003a88:	f7fd f8ec 	bl	8000c64 <LCD_WriteReg>
		LCD_WriteReg(0xD429, 0xDE);
 8003a8c:	21de      	movs	r1, #222	; 0xde
 8003a8e:	f24d 4029 	movw	r0, #54313	; 0xd429
 8003a92:	f7fd f8e7 	bl	8000c64 <LCD_WriteReg>
		LCD_WriteReg(0xD42A, 0x02);
 8003a96:	2102      	movs	r1, #2
 8003a98:	f24d 402a 	movw	r0, #54314	; 0xd42a
 8003a9c:	f7fd f8e2 	bl	8000c64 <LCD_WriteReg>
		LCD_WriteReg(0xD42B, 0xF2);
 8003aa0:	21f2      	movs	r1, #242	; 0xf2
 8003aa2:	f24d 402b 	movw	r0, #54315	; 0xd42b
 8003aa6:	f7fd f8dd 	bl	8000c64 <LCD_WriteReg>
		LCD_WriteReg(0xD42C, 0x02);
 8003aaa:	2102      	movs	r1, #2
 8003aac:	f24d 402c 	movw	r0, #54316	; 0xd42c
 8003ab0:	f7fd f8d8 	bl	8000c64 <LCD_WriteReg>
		LCD_WriteReg(0xD42D, 0xFE);
 8003ab4:	21fe      	movs	r1, #254	; 0xfe
 8003ab6:	f24d 402d 	movw	r0, #54317	; 0xd42d
 8003aba:	f7fd f8d3 	bl	8000c64 <LCD_WriteReg>
		LCD_WriteReg(0xD42E, 0x03);
 8003abe:	2103      	movs	r1, #3
 8003ac0:	f24d 402e 	movw	r0, #54318	; 0xd42e
 8003ac4:	f7fd f8ce 	bl	8000c64 <LCD_WriteReg>
		LCD_WriteReg(0xD42F, 0x10);
 8003ac8:	2110      	movs	r1, #16
 8003aca:	f24d 402f 	movw	r0, #54319	; 0xd42f
 8003ace:	f7fd f8c9 	bl	8000c64 <LCD_WriteReg>
		LCD_WriteReg(0xD430, 0x03);
 8003ad2:	2103      	movs	r1, #3
 8003ad4:	f24d 4030 	movw	r0, #54320	; 0xd430
 8003ad8:	f7fd f8c4 	bl	8000c64 <LCD_WriteReg>
		LCD_WriteReg(0xD431, 0x33);
 8003adc:	2133      	movs	r1, #51	; 0x33
 8003ade:	f24d 4031 	movw	r0, #54321	; 0xd431
 8003ae2:	f7fd f8bf 	bl	8000c64 <LCD_WriteReg>
		LCD_WriteReg(0xD432, 0x03);
 8003ae6:	2103      	movs	r1, #3
 8003ae8:	f24d 4032 	movw	r0, #54322	; 0xd432
 8003aec:	f7fd f8ba 	bl	8000c64 <LCD_WriteReg>
		LCD_WriteReg(0xD433, 0x6D);
 8003af0:	216d      	movs	r1, #109	; 0x6d
 8003af2:	f24d 4033 	movw	r0, #54323	; 0xd433
 8003af6:	f7fd f8b5 	bl	8000c64 <LCD_WriteReg>
		LCD_WriteReg(0xD500, 0x00);
 8003afa:	2100      	movs	r1, #0
 8003afc:	f44f 4055 	mov.w	r0, #54528	; 0xd500
 8003b00:	f7fd f8b0 	bl	8000c64 <LCD_WriteReg>
		LCD_WriteReg(0xD501, 0x33);
 8003b04:	2133      	movs	r1, #51	; 0x33
 8003b06:	f24d 5001 	movw	r0, #54529	; 0xd501
 8003b0a:	f7fd f8ab 	bl	8000c64 <LCD_WriteReg>
		LCD_WriteReg(0xD502, 0x00);
 8003b0e:	2100      	movs	r1, #0
 8003b10:	f24d 5002 	movw	r0, #54530	; 0xd502
 8003b14:	f7fd f8a6 	bl	8000c64 <LCD_WriteReg>
		LCD_WriteReg(0xD503, 0x34);
 8003b18:	2134      	movs	r1, #52	; 0x34
 8003b1a:	f24d 5003 	movw	r0, #54531	; 0xd503
 8003b1e:	f7fd f8a1 	bl	8000c64 <LCD_WriteReg>
		LCD_WriteReg(0xD504, 0x00);
 8003b22:	2100      	movs	r1, #0
 8003b24:	f24d 5004 	movw	r0, #54532	; 0xd504
 8003b28:	f7fd f89c 	bl	8000c64 <LCD_WriteReg>
		LCD_WriteReg(0xD505, 0x3A);
 8003b2c:	213a      	movs	r1, #58	; 0x3a
 8003b2e:	f24d 5005 	movw	r0, #54533	; 0xd505
 8003b32:	f7fd f897 	bl	8000c64 <LCD_WriteReg>
		LCD_WriteReg(0xD506, 0x00);
 8003b36:	2100      	movs	r1, #0
 8003b38:	f24d 5006 	movw	r0, #54534	; 0xd506
 8003b3c:	f7fd f892 	bl	8000c64 <LCD_WriteReg>
		LCD_WriteReg(0xD507, 0x4A);
 8003b40:	214a      	movs	r1, #74	; 0x4a
 8003b42:	f24d 5007 	movw	r0, #54535	; 0xd507
 8003b46:	f7fd f88d 	bl	8000c64 <LCD_WriteReg>
		LCD_WriteReg(0xD508, 0x00);
 8003b4a:	2100      	movs	r1, #0
 8003b4c:	f24d 5008 	movw	r0, #54536	; 0xd508
 8003b50:	f7fd f888 	bl	8000c64 <LCD_WriteReg>
		LCD_WriteReg(0xD509, 0x5C);
 8003b54:	215c      	movs	r1, #92	; 0x5c
 8003b56:	f24d 5009 	movw	r0, #54537	; 0xd509
 8003b5a:	f7fd f883 	bl	8000c64 <LCD_WriteReg>
		LCD_WriteReg(0xD50A, 0x00);
 8003b5e:	2100      	movs	r1, #0
 8003b60:	f24d 500a 	movw	r0, #54538	; 0xd50a
 8003b64:	f7fd f87e 	bl	8000c64 <LCD_WriteReg>
		LCD_WriteReg(0xD50B, 0x81);
 8003b68:	2181      	movs	r1, #129	; 0x81
 8003b6a:	f24d 500b 	movw	r0, #54539	; 0xd50b
 8003b6e:	f7fd f879 	bl	8000c64 <LCD_WriteReg>

		LCD_WriteReg(0xD50C, 0x00);
 8003b72:	2100      	movs	r1, #0
 8003b74:	f24d 500c 	movw	r0, #54540	; 0xd50c
 8003b78:	f7fd f874 	bl	8000c64 <LCD_WriteReg>
		LCD_WriteReg(0xD50D, 0xA6);
 8003b7c:	21a6      	movs	r1, #166	; 0xa6
 8003b7e:	f24d 500d 	movw	r0, #54541	; 0xd50d
 8003b82:	f7fd f86f 	bl	8000c64 <LCD_WriteReg>
		LCD_WriteReg(0xD50E, 0x00);
 8003b86:	2100      	movs	r1, #0
 8003b88:	f24d 500e 	movw	r0, #54542	; 0xd50e
 8003b8c:	f7fd f86a 	bl	8000c64 <LCD_WriteReg>
		LCD_WriteReg(0xD50F, 0xE5);
 8003b90:	21e5      	movs	r1, #229	; 0xe5
 8003b92:	f24d 500f 	movw	r0, #54543	; 0xd50f
 8003b96:	f7fd f865 	bl	8000c64 <LCD_WriteReg>
		LCD_WriteReg(0xD510, 0x01);
 8003b9a:	2101      	movs	r1, #1
 8003b9c:	f24d 5010 	movw	r0, #54544	; 0xd510
 8003ba0:	f7fd f860 	bl	8000c64 <LCD_WriteReg>
		LCD_WriteReg(0xD511, 0x13);
 8003ba4:	2113      	movs	r1, #19
 8003ba6:	f24d 5011 	movw	r0, #54545	; 0xd511
 8003baa:	f7fd f85b 	bl	8000c64 <LCD_WriteReg>
		LCD_WriteReg(0xD512, 0x01);
 8003bae:	2101      	movs	r1, #1
 8003bb0:	f24d 5012 	movw	r0, #54546	; 0xd512
 8003bb4:	f7fd f856 	bl	8000c64 <LCD_WriteReg>
		LCD_WriteReg(0xD513, 0x54);
 8003bb8:	2154      	movs	r1, #84	; 0x54
 8003bba:	f24d 5013 	movw	r0, #54547	; 0xd513
 8003bbe:	f7fd f851 	bl	8000c64 <LCD_WriteReg>
		LCD_WriteReg(0xD514, 0x01);
 8003bc2:	2101      	movs	r1, #1
 8003bc4:	f24d 5014 	movw	r0, #54548	; 0xd514
 8003bc8:	f7fd f84c 	bl	8000c64 <LCD_WriteReg>
		LCD_WriteReg(0xD515, 0x82);
 8003bcc:	2182      	movs	r1, #130	; 0x82
 8003bce:	f24d 5015 	movw	r0, #54549	; 0xd515
 8003bd2:	f7fd f847 	bl	8000c64 <LCD_WriteReg>
		LCD_WriteReg(0xD516, 0x01);
 8003bd6:	2101      	movs	r1, #1
 8003bd8:	f24d 5016 	movw	r0, #54550	; 0xd516
 8003bdc:	f7fd f842 	bl	8000c64 <LCD_WriteReg>
		LCD_WriteReg(0xD517, 0xCA);
 8003be0:	21ca      	movs	r1, #202	; 0xca
 8003be2:	f24d 5017 	movw	r0, #54551	; 0xd517
 8003be6:	f7fd f83d 	bl	8000c64 <LCD_WriteReg>
		LCD_WriteReg(0xD518, 0x02);
 8003bea:	2102      	movs	r1, #2
 8003bec:	f24d 5018 	movw	r0, #54552	; 0xd518
 8003bf0:	f7fd f838 	bl	8000c64 <LCD_WriteReg>
		LCD_WriteReg(0xD519, 0x00);
 8003bf4:	2100      	movs	r1, #0
 8003bf6:	f24d 5019 	movw	r0, #54553	; 0xd519
 8003bfa:	f7fd f833 	bl	8000c64 <LCD_WriteReg>
		LCD_WriteReg(0xD51A, 0x02);
 8003bfe:	2102      	movs	r1, #2
 8003c00:	f24d 501a 	movw	r0, #54554	; 0xd51a
 8003c04:	f7fd f82e 	bl	8000c64 <LCD_WriteReg>
		LCD_WriteReg(0xD51B, 0x01);
 8003c08:	2101      	movs	r1, #1
 8003c0a:	f24d 501b 	movw	r0, #54555	; 0xd51b
 8003c0e:	f7fd f829 	bl	8000c64 <LCD_WriteReg>
		LCD_WriteReg(0xD51C, 0x02);
 8003c12:	2102      	movs	r1, #2
 8003c14:	f24d 501c 	movw	r0, #54556	; 0xd51c
 8003c18:	f7fd f824 	bl	8000c64 <LCD_WriteReg>
		LCD_WriteReg(0xD51D, 0x34);
 8003c1c:	2134      	movs	r1, #52	; 0x34
 8003c1e:	f24d 501d 	movw	r0, #54557	; 0xd51d
 8003c22:	f7fd f81f 	bl	8000c64 <LCD_WriteReg>
		LCD_WriteReg(0xD51E, 0x02);
 8003c26:	2102      	movs	r1, #2
 8003c28:	f24d 501e 	movw	r0, #54558	; 0xd51e
 8003c2c:	f7fd f81a 	bl	8000c64 <LCD_WriteReg>
		LCD_WriteReg(0xD51F, 0x67);
 8003c30:	2167      	movs	r1, #103	; 0x67
 8003c32:	f24d 501f 	movw	r0, #54559	; 0xd51f
 8003c36:	f7fd f815 	bl	8000c64 <LCD_WriteReg>
		LCD_WriteReg(0xD520, 0x02);
 8003c3a:	2102      	movs	r1, #2
 8003c3c:	f24d 5020 	movw	r0, #54560	; 0xd520
 8003c40:	f7fd f810 	bl	8000c64 <LCD_WriteReg>
		LCD_WriteReg(0xD521, 0x84);
 8003c44:	2184      	movs	r1, #132	; 0x84
 8003c46:	f24d 5021 	movw	r0, #54561	; 0xd521
 8003c4a:	f7fd f80b 	bl	8000c64 <LCD_WriteReg>
		LCD_WriteReg(0xD522, 0x02);
 8003c4e:	2102      	movs	r1, #2
 8003c50:	f24d 5022 	movw	r0, #54562	; 0xd522
 8003c54:	f7fd f806 	bl	8000c64 <LCD_WriteReg>
		LCD_WriteReg(0xD523, 0xA4);
 8003c58:	21a4      	movs	r1, #164	; 0xa4
 8003c5a:	f24d 5023 	movw	r0, #54563	; 0xd523
 8003c5e:	f7fd f801 	bl	8000c64 <LCD_WriteReg>
		LCD_WriteReg(0xD524, 0x02);
 8003c62:	2102      	movs	r1, #2
 8003c64:	f24d 5024 	movw	r0, #54564	; 0xd524
 8003c68:	f7fc fffc 	bl	8000c64 <LCD_WriteReg>
		LCD_WriteReg(0xD525, 0xB7);
 8003c6c:	21b7      	movs	r1, #183	; 0xb7
 8003c6e:	f24d 5025 	movw	r0, #54565	; 0xd525
 8003c72:	f7fc fff7 	bl	8000c64 <LCD_WriteReg>
		LCD_WriteReg(0xD526, 0x02);
 8003c76:	2102      	movs	r1, #2
 8003c78:	f24d 5026 	movw	r0, #54566	; 0xd526
 8003c7c:	f7fc fff2 	bl	8000c64 <LCD_WriteReg>
		LCD_WriteReg(0xD527, 0xCF);
 8003c80:	21cf      	movs	r1, #207	; 0xcf
 8003c82:	f24d 5027 	movw	r0, #54567	; 0xd527
 8003c86:	f7fc ffed 	bl	8000c64 <LCD_WriteReg>
		LCD_WriteReg(0xD528, 0x02);
 8003c8a:	2102      	movs	r1, #2
 8003c8c:	f24d 5028 	movw	r0, #54568	; 0xd528
 8003c90:	f7fc ffe8 	bl	8000c64 <LCD_WriteReg>
		LCD_WriteReg(0xD529, 0xDE);
 8003c94:	21de      	movs	r1, #222	; 0xde
 8003c96:	f24d 5029 	movw	r0, #54569	; 0xd529
 8003c9a:	f7fc ffe3 	bl	8000c64 <LCD_WriteReg>
		LCD_WriteReg(0xD52A, 0x02);
 8003c9e:	2102      	movs	r1, #2
 8003ca0:	f24d 502a 	movw	r0, #54570	; 0xd52a
 8003ca4:	f7fc ffde 	bl	8000c64 <LCD_WriteReg>
		LCD_WriteReg(0xD52B, 0xF2);
 8003ca8:	21f2      	movs	r1, #242	; 0xf2
 8003caa:	f24d 502b 	movw	r0, #54571	; 0xd52b
 8003cae:	f7fc ffd9 	bl	8000c64 <LCD_WriteReg>
		LCD_WriteReg(0xD52C, 0x02);
 8003cb2:	2102      	movs	r1, #2
 8003cb4:	f24d 502c 	movw	r0, #54572	; 0xd52c
 8003cb8:	f7fc ffd4 	bl	8000c64 <LCD_WriteReg>
		LCD_WriteReg(0xD52D, 0xFE);
 8003cbc:	21fe      	movs	r1, #254	; 0xfe
 8003cbe:	f24d 502d 	movw	r0, #54573	; 0xd52d
 8003cc2:	f7fc ffcf 	bl	8000c64 <LCD_WriteReg>
		LCD_WriteReg(0xD52E, 0x03);
 8003cc6:	2103      	movs	r1, #3
 8003cc8:	f24d 502e 	movw	r0, #54574	; 0xd52e
 8003ccc:	f7fc ffca 	bl	8000c64 <LCD_WriteReg>
		LCD_WriteReg(0xD52F, 0x10);
 8003cd0:	2110      	movs	r1, #16
 8003cd2:	f24d 502f 	movw	r0, #54575	; 0xd52f
 8003cd6:	f7fc ffc5 	bl	8000c64 <LCD_WriteReg>
		LCD_WriteReg(0xD530, 0x03);
 8003cda:	2103      	movs	r1, #3
 8003cdc:	f24d 5030 	movw	r0, #54576	; 0xd530
 8003ce0:	f7fc ffc0 	bl	8000c64 <LCD_WriteReg>
		LCD_WriteReg(0xD531, 0x33);
 8003ce4:	2133      	movs	r1, #51	; 0x33
 8003ce6:	f24d 5031 	movw	r0, #54577	; 0xd531
 8003cea:	f7fc ffbb 	bl	8000c64 <LCD_WriteReg>
		LCD_WriteReg(0xD532, 0x03);
 8003cee:	2103      	movs	r1, #3
 8003cf0:	f24d 5032 	movw	r0, #54578	; 0xd532
 8003cf4:	f7fc ffb6 	bl	8000c64 <LCD_WriteReg>
		LCD_WriteReg(0xD533, 0x6D);
 8003cf8:	216d      	movs	r1, #109	; 0x6d
 8003cfa:	f24d 5033 	movw	r0, #54579	; 0xd533
 8003cfe:	f7fc ffb1 	bl	8000c64 <LCD_WriteReg>
		LCD_WriteReg(0xD600, 0x00);
 8003d02:	2100      	movs	r1, #0
 8003d04:	f44f 4056 	mov.w	r0, #54784	; 0xd600
 8003d08:	f7fc ffac 	bl	8000c64 <LCD_WriteReg>
		LCD_WriteReg(0xD601, 0x33);
 8003d0c:	2133      	movs	r1, #51	; 0x33
 8003d0e:	f24d 6001 	movw	r0, #54785	; 0xd601
 8003d12:	f7fc ffa7 	bl	8000c64 <LCD_WriteReg>
		LCD_WriteReg(0xD602, 0x00);
 8003d16:	2100      	movs	r1, #0
 8003d18:	f24d 6002 	movw	r0, #54786	; 0xd602
 8003d1c:	f7fc ffa2 	bl	8000c64 <LCD_WriteReg>
		LCD_WriteReg(0xD603, 0x34);
 8003d20:	2134      	movs	r1, #52	; 0x34
 8003d22:	f24d 6003 	movw	r0, #54787	; 0xd603
 8003d26:	f7fc ff9d 	bl	8000c64 <LCD_WriteReg>
		LCD_WriteReg(0xD604, 0x00);
 8003d2a:	2100      	movs	r1, #0
 8003d2c:	f24d 6004 	movw	r0, #54788	; 0xd604
 8003d30:	f7fc ff98 	bl	8000c64 <LCD_WriteReg>
		LCD_WriteReg(0xD605, 0x3A);
 8003d34:	213a      	movs	r1, #58	; 0x3a
 8003d36:	f24d 6005 	movw	r0, #54789	; 0xd605
 8003d3a:	f7fc ff93 	bl	8000c64 <LCD_WriteReg>
		LCD_WriteReg(0xD606, 0x00);
 8003d3e:	2100      	movs	r1, #0
 8003d40:	f24d 6006 	movw	r0, #54790	; 0xd606
 8003d44:	f7fc ff8e 	bl	8000c64 <LCD_WriteReg>
		LCD_WriteReg(0xD607, 0x4A);
 8003d48:	214a      	movs	r1, #74	; 0x4a
 8003d4a:	f24d 6007 	movw	r0, #54791	; 0xd607
 8003d4e:	f7fc ff89 	bl	8000c64 <LCD_WriteReg>
		LCD_WriteReg(0xD608, 0x00);
 8003d52:	2100      	movs	r1, #0
 8003d54:	f24d 6008 	movw	r0, #54792	; 0xd608
 8003d58:	f7fc ff84 	bl	8000c64 <LCD_WriteReg>
		LCD_WriteReg(0xD609, 0x5C);
 8003d5c:	215c      	movs	r1, #92	; 0x5c
 8003d5e:	f24d 6009 	movw	r0, #54793	; 0xd609
 8003d62:	f7fc ff7f 	bl	8000c64 <LCD_WriteReg>
		LCD_WriteReg(0xD60A, 0x00);
 8003d66:	2100      	movs	r1, #0
 8003d68:	f24d 600a 	movw	r0, #54794	; 0xd60a
 8003d6c:	f7fc ff7a 	bl	8000c64 <LCD_WriteReg>
		LCD_WriteReg(0xD60B, 0x81);
 8003d70:	2181      	movs	r1, #129	; 0x81
 8003d72:	f24d 600b 	movw	r0, #54795	; 0xd60b
 8003d76:	f7fc ff75 	bl	8000c64 <LCD_WriteReg>

		LCD_WriteReg(0xD60C, 0x00);
 8003d7a:	2100      	movs	r1, #0
 8003d7c:	f24d 600c 	movw	r0, #54796	; 0xd60c
 8003d80:	f7fc ff70 	bl	8000c64 <LCD_WriteReg>
		LCD_WriteReg(0xD60D, 0xA6);
 8003d84:	21a6      	movs	r1, #166	; 0xa6
 8003d86:	f24d 600d 	movw	r0, #54797	; 0xd60d
 8003d8a:	f7fc ff6b 	bl	8000c64 <LCD_WriteReg>
		LCD_WriteReg(0xD60E, 0x00);
 8003d8e:	2100      	movs	r1, #0
 8003d90:	f24d 600e 	movw	r0, #54798	; 0xd60e
 8003d94:	f7fc ff66 	bl	8000c64 <LCD_WriteReg>
		LCD_WriteReg(0xD60F, 0xE5);
 8003d98:	21e5      	movs	r1, #229	; 0xe5
 8003d9a:	f24d 600f 	movw	r0, #54799	; 0xd60f
 8003d9e:	f7fc ff61 	bl	8000c64 <LCD_WriteReg>
		LCD_WriteReg(0xD610, 0x01);
 8003da2:	2101      	movs	r1, #1
 8003da4:	f24d 6010 	movw	r0, #54800	; 0xd610
 8003da8:	f7fc ff5c 	bl	8000c64 <LCD_WriteReg>
		LCD_WriteReg(0xD611, 0x13);
 8003dac:	2113      	movs	r1, #19
 8003dae:	f24d 6011 	movw	r0, #54801	; 0xd611
 8003db2:	f7fc ff57 	bl	8000c64 <LCD_WriteReg>
		LCD_WriteReg(0xD612, 0x01);
 8003db6:	2101      	movs	r1, #1
 8003db8:	f24d 6012 	movw	r0, #54802	; 0xd612
 8003dbc:	f7fc ff52 	bl	8000c64 <LCD_WriteReg>
		LCD_WriteReg(0xD613, 0x54);
 8003dc0:	2154      	movs	r1, #84	; 0x54
 8003dc2:	f24d 6013 	movw	r0, #54803	; 0xd613
 8003dc6:	f7fc ff4d 	bl	8000c64 <LCD_WriteReg>
		LCD_WriteReg(0xD614, 0x01);
 8003dca:	2101      	movs	r1, #1
 8003dcc:	f24d 6014 	movw	r0, #54804	; 0xd614
 8003dd0:	f7fc ff48 	bl	8000c64 <LCD_WriteReg>
		LCD_WriteReg(0xD615, 0x82);
 8003dd4:	2182      	movs	r1, #130	; 0x82
 8003dd6:	f24d 6015 	movw	r0, #54805	; 0xd615
 8003dda:	f7fc ff43 	bl	8000c64 <LCD_WriteReg>
		LCD_WriteReg(0xD616, 0x01);
 8003dde:	2101      	movs	r1, #1
 8003de0:	f24d 6016 	movw	r0, #54806	; 0xd616
 8003de4:	f7fc ff3e 	bl	8000c64 <LCD_WriteReg>
		LCD_WriteReg(0xD617, 0xCA);
 8003de8:	21ca      	movs	r1, #202	; 0xca
 8003dea:	f24d 6017 	movw	r0, #54807	; 0xd617
 8003dee:	f7fc ff39 	bl	8000c64 <LCD_WriteReg>
		LCD_WriteReg(0xD618, 0x02);
 8003df2:	2102      	movs	r1, #2
 8003df4:	f24d 6018 	movw	r0, #54808	; 0xd618
 8003df8:	f7fc ff34 	bl	8000c64 <LCD_WriteReg>
		LCD_WriteReg(0xD619, 0x00);
 8003dfc:	2100      	movs	r1, #0
 8003dfe:	f24d 6019 	movw	r0, #54809	; 0xd619
 8003e02:	f7fc ff2f 	bl	8000c64 <LCD_WriteReg>
		LCD_WriteReg(0xD61A, 0x02);
 8003e06:	2102      	movs	r1, #2
 8003e08:	f24d 601a 	movw	r0, #54810	; 0xd61a
 8003e0c:	f7fc ff2a 	bl	8000c64 <LCD_WriteReg>
		LCD_WriteReg(0xD61B, 0x01);
 8003e10:	2101      	movs	r1, #1
 8003e12:	f24d 601b 	movw	r0, #54811	; 0xd61b
 8003e16:	f7fc ff25 	bl	8000c64 <LCD_WriteReg>
		LCD_WriteReg(0xD61C, 0x02);
 8003e1a:	2102      	movs	r1, #2
 8003e1c:	f24d 601c 	movw	r0, #54812	; 0xd61c
 8003e20:	f7fc ff20 	bl	8000c64 <LCD_WriteReg>
		LCD_WriteReg(0xD61D, 0x34);
 8003e24:	2134      	movs	r1, #52	; 0x34
 8003e26:	f24d 601d 	movw	r0, #54813	; 0xd61d
 8003e2a:	f7fc ff1b 	bl	8000c64 <LCD_WriteReg>
		LCD_WriteReg(0xD61E, 0x02);
 8003e2e:	2102      	movs	r1, #2
 8003e30:	f24d 601e 	movw	r0, #54814	; 0xd61e
 8003e34:	f7fc ff16 	bl	8000c64 <LCD_WriteReg>
		LCD_WriteReg(0xD61F, 0x67);
 8003e38:	2167      	movs	r1, #103	; 0x67
 8003e3a:	f24d 601f 	movw	r0, #54815	; 0xd61f
 8003e3e:	f7fc ff11 	bl	8000c64 <LCD_WriteReg>
		LCD_WriteReg(0xD620, 0x02);
 8003e42:	2102      	movs	r1, #2
 8003e44:	f24d 6020 	movw	r0, #54816	; 0xd620
 8003e48:	f7fc ff0c 	bl	8000c64 <LCD_WriteReg>
		LCD_WriteReg(0xD621, 0x84);
 8003e4c:	2184      	movs	r1, #132	; 0x84
 8003e4e:	f24d 6021 	movw	r0, #54817	; 0xd621
 8003e52:	f7fc ff07 	bl	8000c64 <LCD_WriteReg>
		LCD_WriteReg(0xD622, 0x02);
 8003e56:	2102      	movs	r1, #2
 8003e58:	f24d 6022 	movw	r0, #54818	; 0xd622
 8003e5c:	f7fc ff02 	bl	8000c64 <LCD_WriteReg>
		LCD_WriteReg(0xD623, 0xA4);
 8003e60:	21a4      	movs	r1, #164	; 0xa4
 8003e62:	f24d 6023 	movw	r0, #54819	; 0xd623
 8003e66:	f7fc fefd 	bl	8000c64 <LCD_WriteReg>
		LCD_WriteReg(0xD624, 0x02);
 8003e6a:	2102      	movs	r1, #2
 8003e6c:	f24d 6024 	movw	r0, #54820	; 0xd624
 8003e70:	f7fc fef8 	bl	8000c64 <LCD_WriteReg>
		LCD_WriteReg(0xD625, 0xB7);
 8003e74:	21b7      	movs	r1, #183	; 0xb7
 8003e76:	f24d 6025 	movw	r0, #54821	; 0xd625
 8003e7a:	f7fc fef3 	bl	8000c64 <LCD_WriteReg>
		LCD_WriteReg(0xD626, 0x02);
 8003e7e:	2102      	movs	r1, #2
 8003e80:	f24d 6026 	movw	r0, #54822	; 0xd626
 8003e84:	f7fc feee 	bl	8000c64 <LCD_WriteReg>
		LCD_WriteReg(0xD627, 0xCF);
 8003e88:	21cf      	movs	r1, #207	; 0xcf
 8003e8a:	f24d 6027 	movw	r0, #54823	; 0xd627
 8003e8e:	f7fc fee9 	bl	8000c64 <LCD_WriteReg>
		LCD_WriteReg(0xD628, 0x02);
 8003e92:	2102      	movs	r1, #2
 8003e94:	f24d 6028 	movw	r0, #54824	; 0xd628
 8003e98:	f7fc fee4 	bl	8000c64 <LCD_WriteReg>
		LCD_WriteReg(0xD629, 0xDE);
 8003e9c:	21de      	movs	r1, #222	; 0xde
 8003e9e:	f24d 6029 	movw	r0, #54825	; 0xd629
 8003ea2:	f7fc fedf 	bl	8000c64 <LCD_WriteReg>
		LCD_WriteReg(0xD62A, 0x02);
 8003ea6:	2102      	movs	r1, #2
 8003ea8:	f24d 602a 	movw	r0, #54826	; 0xd62a
 8003eac:	f7fc feda 	bl	8000c64 <LCD_WriteReg>
		LCD_WriteReg(0xD62B, 0xF2);
 8003eb0:	21f2      	movs	r1, #242	; 0xf2
 8003eb2:	f24d 602b 	movw	r0, #54827	; 0xd62b
 8003eb6:	f7fc fed5 	bl	8000c64 <LCD_WriteReg>
		LCD_WriteReg(0xD62C, 0x02);
 8003eba:	2102      	movs	r1, #2
 8003ebc:	f24d 602c 	movw	r0, #54828	; 0xd62c
 8003ec0:	f7fc fed0 	bl	8000c64 <LCD_WriteReg>
		LCD_WriteReg(0xD62D, 0xFE);
 8003ec4:	21fe      	movs	r1, #254	; 0xfe
 8003ec6:	f24d 602d 	movw	r0, #54829	; 0xd62d
 8003eca:	f7fc fecb 	bl	8000c64 <LCD_WriteReg>
		LCD_WriteReg(0xD62E, 0x03);
 8003ece:	2103      	movs	r1, #3
 8003ed0:	f24d 602e 	movw	r0, #54830	; 0xd62e
 8003ed4:	f7fc fec6 	bl	8000c64 <LCD_WriteReg>
		LCD_WriteReg(0xD62F, 0x10);
 8003ed8:	2110      	movs	r1, #16
 8003eda:	f24d 602f 	movw	r0, #54831	; 0xd62f
 8003ede:	f7fc fec1 	bl	8000c64 <LCD_WriteReg>
		LCD_WriteReg(0xD630, 0x03);
 8003ee2:	2103      	movs	r1, #3
 8003ee4:	f24d 6030 	movw	r0, #54832	; 0xd630
 8003ee8:	f7fc febc 	bl	8000c64 <LCD_WriteReg>
		LCD_WriteReg(0xD631, 0x33);
 8003eec:	2133      	movs	r1, #51	; 0x33
 8003eee:	f24d 6031 	movw	r0, #54833	; 0xd631
 8003ef2:	f7fc feb7 	bl	8000c64 <LCD_WriteReg>
		LCD_WriteReg(0xD632, 0x03);
 8003ef6:	2103      	movs	r1, #3
 8003ef8:	f24d 6032 	movw	r0, #54834	; 0xd632
 8003efc:	f7fc feb2 	bl	8000c64 <LCD_WriteReg>
		LCD_WriteReg(0xD633, 0x6D);
 8003f00:	216d      	movs	r1, #109	; 0x6d
 8003f02:	f24d 6033 	movw	r0, #54835	; 0xd633
 8003f06:	f7fc fead 	bl	8000c64 <LCD_WriteReg>
		//LV2 Page 0 enable
		LCD_WriteReg(0xF000, 0x55);
 8003f0a:	2155      	movs	r1, #85	; 0x55
 8003f0c:	f44f 4070 	mov.w	r0, #61440	; 0xf000
 8003f10:	f7fc fea8 	bl	8000c64 <LCD_WriteReg>
		LCD_WriteReg(0xF001, 0xAA);
 8003f14:	21aa      	movs	r1, #170	; 0xaa
 8003f16:	f24f 0001 	movw	r0, #61441	; 0xf001
 8003f1a:	f7fc fea3 	bl	8000c64 <LCD_WriteReg>
		LCD_WriteReg(0xF002, 0x52);
 8003f1e:	2152      	movs	r1, #82	; 0x52
 8003f20:	f24f 0002 	movw	r0, #61442	; 0xf002
 8003f24:	f7fc fe9e 	bl	8000c64 <LCD_WriteReg>
		LCD_WriteReg(0xF003, 0x08);
 8003f28:	2108      	movs	r1, #8
 8003f2a:	f24f 0003 	movw	r0, #61443	; 0xf003
 8003f2e:	f7fc fe99 	bl	8000c64 <LCD_WriteReg>
		LCD_WriteReg(0xF004, 0x00);
 8003f32:	2100      	movs	r1, #0
 8003f34:	f24f 0004 	movw	r0, #61444	; 0xf004
 8003f38:	f7fc fe94 	bl	8000c64 <LCD_WriteReg>
		//Display control
		LCD_WriteReg(0xB100, 0xCC);
 8003f3c:	21cc      	movs	r1, #204	; 0xcc
 8003f3e:	f44f 4031 	mov.w	r0, #45312	; 0xb100
 8003f42:	f7fc fe8f 	bl	8000c64 <LCD_WriteReg>
		LCD_WriteReg(0xB101, 0x00);
 8003f46:	2100      	movs	r1, #0
 8003f48:	f24b 1001 	movw	r0, #45313	; 0xb101
 8003f4c:	f7fc fe8a 	bl	8000c64 <LCD_WriteReg>
		//Source hold time
		LCD_WriteReg(0xB600, 0x05);
 8003f50:	2105      	movs	r1, #5
 8003f52:	f44f 4036 	mov.w	r0, #46592	; 0xb600
 8003f56:	f7fc fe85 	bl	8000c64 <LCD_WriteReg>
		//Gate EQ control
		LCD_WriteReg(0xB700, 0x70);
 8003f5a:	2170      	movs	r1, #112	; 0x70
 8003f5c:	f44f 4037 	mov.w	r0, #46848	; 0xb700
 8003f60:	f7fc fe80 	bl	8000c64 <LCD_WriteReg>
		LCD_WriteReg(0xB701, 0x70);
 8003f64:	2170      	movs	r1, #112	; 0x70
 8003f66:	f24b 7001 	movw	r0, #46849	; 0xb701
 8003f6a:	f7fc fe7b 	bl	8000c64 <LCD_WriteReg>
		//Source EQ control (Mode 2)
		LCD_WriteReg(0xB800, 0x01);
 8003f6e:	2101      	movs	r1, #1
 8003f70:	f44f 4038 	mov.w	r0, #47104	; 0xb800
 8003f74:	f7fc fe76 	bl	8000c64 <LCD_WriteReg>
		LCD_WriteReg(0xB801, 0x03);
 8003f78:	2103      	movs	r1, #3
 8003f7a:	f64b 0001 	movw	r0, #47105	; 0xb801
 8003f7e:	f7fc fe71 	bl	8000c64 <LCD_WriteReg>
		LCD_WriteReg(0xB802, 0x03);
 8003f82:	2103      	movs	r1, #3
 8003f84:	f64b 0002 	movw	r0, #47106	; 0xb802
 8003f88:	f7fc fe6c 	bl	8000c64 <LCD_WriteReg>
		LCD_WriteReg(0xB803, 0x03);
 8003f8c:	2103      	movs	r1, #3
 8003f8e:	f64b 0003 	movw	r0, #47107	; 0xb803
 8003f92:	f7fc fe67 	bl	8000c64 <LCD_WriteReg>
		//Inversion mode (2-dot)
		LCD_WriteReg(0xBC00, 0x02);
 8003f96:	2102      	movs	r1, #2
 8003f98:	f44f 403c 	mov.w	r0, #48128	; 0xbc00
 8003f9c:	f7fc fe62 	bl	8000c64 <LCD_WriteReg>
		LCD_WriteReg(0xBC01, 0x00);
 8003fa0:	2100      	movs	r1, #0
 8003fa2:	f64b 4001 	movw	r0, #48129	; 0xbc01
 8003fa6:	f7fc fe5d 	bl	8000c64 <LCD_WriteReg>
		LCD_WriteReg(0xBC02, 0x00);
 8003faa:	2100      	movs	r1, #0
 8003fac:	f64b 4002 	movw	r0, #48130	; 0xbc02
 8003fb0:	f7fc fe58 	bl	8000c64 <LCD_WriteReg>
		//Timing control 4H w/ 4-delay
		LCD_WriteReg(0xC900, 0xD0);
 8003fb4:	21d0      	movs	r1, #208	; 0xd0
 8003fb6:	f44f 4049 	mov.w	r0, #51456	; 0xc900
 8003fba:	f7fc fe53 	bl	8000c64 <LCD_WriteReg>
		LCD_WriteReg(0xC901, 0x02);
 8003fbe:	2102      	movs	r1, #2
 8003fc0:	f64c 1001 	movw	r0, #51457	; 0xc901
 8003fc4:	f7fc fe4e 	bl	8000c64 <LCD_WriteReg>
		LCD_WriteReg(0xC902, 0x50);
 8003fc8:	2150      	movs	r1, #80	; 0x50
 8003fca:	f64c 1002 	movw	r0, #51458	; 0xc902
 8003fce:	f7fc fe49 	bl	8000c64 <LCD_WriteReg>
		LCD_WriteReg(0xC903, 0x50);
 8003fd2:	2150      	movs	r1, #80	; 0x50
 8003fd4:	f64c 1003 	movw	r0, #51459	; 0xc903
 8003fd8:	f7fc fe44 	bl	8000c64 <LCD_WriteReg>
		LCD_WriteReg(0xC904, 0x50);
 8003fdc:	2150      	movs	r1, #80	; 0x50
 8003fde:	f64c 1004 	movw	r0, #51460	; 0xc904
 8003fe2:	f7fc fe3f 	bl	8000c64 <LCD_WriteReg>
		LCD_WriteReg(0x3500, 0x00);
 8003fe6:	2100      	movs	r1, #0
 8003fe8:	f44f 5054 	mov.w	r0, #13568	; 0x3500
 8003fec:	f7fc fe3a 	bl	8000c64 <LCD_WriteReg>
		LCD_WriteReg(0x3A00, 0x55);  //16-bit/pixel
 8003ff0:	2155      	movs	r1, #85	; 0x55
 8003ff2:	f44f 5068 	mov.w	r0, #14848	; 0x3a00
 8003ff6:	f7fc fe35 	bl	8000c64 <LCD_WriteReg>
		LCD_WR_REG(0x1100);
 8003ffa:	f44f 5088 	mov.w	r0, #4352	; 0x1100
 8003ffe:	f7fc fda5 	bl	8000b4c <LCD_WR_REG>
//		delay_us(120); // us
		HAL_Delay(1);
 8004002:	2001      	movs	r0, #1
 8004004:	f001 ffe2 	bl	8005fcc <HAL_Delay>
		LCD_WR_REG(0x2900);
 8004008:	f44f 5024 	mov.w	r0, #10496	; 0x2900
 800400c:	f7fc fd9e 	bl	8000b4c <LCD_WR_REG>
 8004010:	f001 bd18 	b.w	8005a44 <LCD_Init+0x3e34>
	} else if (lcddev.id == 0x9325)  //9325
 8004014:	4bec      	ldr	r3, [pc, #944]	; (80043c8 <LCD_Init+0x27b8>)
 8004016:	889b      	ldrh	r3, [r3, #4]
 8004018:	f249 3225 	movw	r2, #37669	; 0x9325
 800401c:	4293      	cmp	r3, r2
 800401e:	f040 80d7 	bne.w	80041d0 <LCD_Init+0x25c0>
			{
		LCD_WriteReg(0x00E5, 0x78F0);
 8004022:	f647 01f0 	movw	r1, #30960	; 0x78f0
 8004026:	20e5      	movs	r0, #229	; 0xe5
 8004028:	f7fc fe1c 	bl	8000c64 <LCD_WriteReg>
		LCD_WriteReg(0x0001, 0x0100);
 800402c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004030:	2001      	movs	r0, #1
 8004032:	f7fc fe17 	bl	8000c64 <LCD_WriteReg>
		LCD_WriteReg(0x0002, 0x0700);
 8004036:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 800403a:	2002      	movs	r0, #2
 800403c:	f7fc fe12 	bl	8000c64 <LCD_WriteReg>
		LCD_WriteReg(0x0003, 0x1030);
 8004040:	f241 0130 	movw	r1, #4144	; 0x1030
 8004044:	2003      	movs	r0, #3
 8004046:	f7fc fe0d 	bl	8000c64 <LCD_WriteReg>
		LCD_WriteReg(0x0004, 0x0000);
 800404a:	2100      	movs	r1, #0
 800404c:	2004      	movs	r0, #4
 800404e:	f7fc fe09 	bl	8000c64 <LCD_WriteReg>
		LCD_WriteReg(0x0008, 0x0202);
 8004052:	f240 2102 	movw	r1, #514	; 0x202
 8004056:	2008      	movs	r0, #8
 8004058:	f7fc fe04 	bl	8000c64 <LCD_WriteReg>
		LCD_WriteReg(0x0009, 0x0000);
 800405c:	2100      	movs	r1, #0
 800405e:	2009      	movs	r0, #9
 8004060:	f7fc fe00 	bl	8000c64 <LCD_WriteReg>
		LCD_WriteReg(0x000A, 0x0000);
 8004064:	2100      	movs	r1, #0
 8004066:	200a      	movs	r0, #10
 8004068:	f7fc fdfc 	bl	8000c64 <LCD_WriteReg>
		LCD_WriteReg(0x000C, 0x0000);
 800406c:	2100      	movs	r1, #0
 800406e:	200c      	movs	r0, #12
 8004070:	f7fc fdf8 	bl	8000c64 <LCD_WriteReg>
		LCD_WriteReg(0x000D, 0x0000);
 8004074:	2100      	movs	r1, #0
 8004076:	200d      	movs	r0, #13
 8004078:	f7fc fdf4 	bl	8000c64 <LCD_WriteReg>
		LCD_WriteReg(0x000F, 0x0000);
 800407c:	2100      	movs	r1, #0
 800407e:	200f      	movs	r0, #15
 8004080:	f7fc fdf0 	bl	8000c64 <LCD_WriteReg>
		//power on sequence VGHVGL
		LCD_WriteReg(0x0010, 0x0000);
 8004084:	2100      	movs	r1, #0
 8004086:	2010      	movs	r0, #16
 8004088:	f7fc fdec 	bl	8000c64 <LCD_WriteReg>
		LCD_WriteReg(0x0011, 0x0007);
 800408c:	2107      	movs	r1, #7
 800408e:	2011      	movs	r0, #17
 8004090:	f7fc fde8 	bl	8000c64 <LCD_WriteReg>
		LCD_WriteReg(0x0012, 0x0000);
 8004094:	2100      	movs	r1, #0
 8004096:	2012      	movs	r0, #18
 8004098:	f7fc fde4 	bl	8000c64 <LCD_WriteReg>
		LCD_WriteReg(0x0013, 0x0000);
 800409c:	2100      	movs	r1, #0
 800409e:	2013      	movs	r0, #19
 80040a0:	f7fc fde0 	bl	8000c64 <LCD_WriteReg>
		LCD_WriteReg(0x0007, 0x0000);
 80040a4:	2100      	movs	r1, #0
 80040a6:	2007      	movs	r0, #7
 80040a8:	f7fc fddc 	bl	8000c64 <LCD_WriteReg>
		//vgh 
		LCD_WriteReg(0x0010, 0x1690);
 80040ac:	f241 6190 	movw	r1, #5776	; 0x1690
 80040b0:	2010      	movs	r0, #16
 80040b2:	f7fc fdd7 	bl	8000c64 <LCD_WriteReg>
		LCD_WriteReg(0x0011, 0x0227);
 80040b6:	f240 2127 	movw	r1, #551	; 0x227
 80040ba:	2011      	movs	r0, #17
 80040bc:	f7fc fdd2 	bl	8000c64 <LCD_WriteReg>
		//delayms(100);
		//vregiout 
		LCD_WriteReg(0x0012, 0x009D); //0x001b
 80040c0:	219d      	movs	r1, #157	; 0x9d
 80040c2:	2012      	movs	r0, #18
 80040c4:	f7fc fdce 	bl	8000c64 <LCD_WriteReg>
		//delayms(100); 
		//vom amplitude
		LCD_WriteReg(0x0013, 0x1900);
 80040c8:	f44f 51c8 	mov.w	r1, #6400	; 0x1900
 80040cc:	2013      	movs	r0, #19
 80040ce:	f7fc fdc9 	bl	8000c64 <LCD_WriteReg>
		//delayms(100); 
		//vom H
		LCD_WriteReg(0x0029, 0x0025);
 80040d2:	2125      	movs	r1, #37	; 0x25
 80040d4:	2029      	movs	r0, #41	; 0x29
 80040d6:	f7fc fdc5 	bl	8000c64 <LCD_WriteReg>
		LCD_WriteReg(0x002B, 0x000D);
 80040da:	210d      	movs	r1, #13
 80040dc:	202b      	movs	r0, #43	; 0x2b
 80040de:	f7fc fdc1 	bl	8000c64 <LCD_WriteReg>
		//gamma
		LCD_WriteReg(0x0030, 0x0007);
 80040e2:	2107      	movs	r1, #7
 80040e4:	2030      	movs	r0, #48	; 0x30
 80040e6:	f7fc fdbd 	bl	8000c64 <LCD_WriteReg>
		LCD_WriteReg(0x0031, 0x0303);
 80040ea:	f240 3103 	movw	r1, #771	; 0x303
 80040ee:	2031      	movs	r0, #49	; 0x31
 80040f0:	f7fc fdb8 	bl	8000c64 <LCD_WriteReg>
		LCD_WriteReg(0x0032, 0x0003);		// 0006
 80040f4:	2103      	movs	r1, #3
 80040f6:	2032      	movs	r0, #50	; 0x32
 80040f8:	f7fc fdb4 	bl	8000c64 <LCD_WriteReg>
		LCD_WriteReg(0x0035, 0x0206);
 80040fc:	f240 2106 	movw	r1, #518	; 0x206
 8004100:	2035      	movs	r0, #53	; 0x35
 8004102:	f7fc fdaf 	bl	8000c64 <LCD_WriteReg>
		LCD_WriteReg(0x0036, 0x0008);
 8004106:	2108      	movs	r1, #8
 8004108:	2036      	movs	r0, #54	; 0x36
 800410a:	f7fc fdab 	bl	8000c64 <LCD_WriteReg>
		LCD_WriteReg(0x0037, 0x0406);
 800410e:	f240 4106 	movw	r1, #1030	; 0x406
 8004112:	2037      	movs	r0, #55	; 0x37
 8004114:	f7fc fda6 	bl	8000c64 <LCD_WriteReg>
		LCD_WriteReg(0x0038, 0x0304);		//0200
 8004118:	f44f 7141 	mov.w	r1, #772	; 0x304
 800411c:	2038      	movs	r0, #56	; 0x38
 800411e:	f7fc fda1 	bl	8000c64 <LCD_WriteReg>
		LCD_WriteReg(0x0039, 0x0007);
 8004122:	2107      	movs	r1, #7
 8004124:	2039      	movs	r0, #57	; 0x39
 8004126:	f7fc fd9d 	bl	8000c64 <LCD_WriteReg>
		LCD_WriteReg(0x003C, 0x0602);		// 0504
 800412a:	f240 6102 	movw	r1, #1538	; 0x602
 800412e:	203c      	movs	r0, #60	; 0x3c
 8004130:	f7fc fd98 	bl	8000c64 <LCD_WriteReg>
		LCD_WriteReg(0x003D, 0x0008);
 8004134:	2108      	movs	r1, #8
 8004136:	203d      	movs	r0, #61	; 0x3d
 8004138:	f7fc fd94 	bl	8000c64 <LCD_WriteReg>
		//ram
		LCD_WriteReg(0x0050, 0x0000);
 800413c:	2100      	movs	r1, #0
 800413e:	2050      	movs	r0, #80	; 0x50
 8004140:	f7fc fd90 	bl	8000c64 <LCD_WriteReg>
		LCD_WriteReg(0x0051, 0x00EF);
 8004144:	21ef      	movs	r1, #239	; 0xef
 8004146:	2051      	movs	r0, #81	; 0x51
 8004148:	f7fc fd8c 	bl	8000c64 <LCD_WriteReg>
		LCD_WriteReg(0x0052, 0x0000);
 800414c:	2100      	movs	r1, #0
 800414e:	2052      	movs	r0, #82	; 0x52
 8004150:	f7fc fd88 	bl	8000c64 <LCD_WriteReg>
		LCD_WriteReg(0x0053, 0x013F);
 8004154:	f240 113f 	movw	r1, #319	; 0x13f
 8004158:	2053      	movs	r0, #83	; 0x53
 800415a:	f7fc fd83 	bl	8000c64 <LCD_WriteReg>
		LCD_WriteReg(0x0060, 0xA700);
 800415e:	f44f 4127 	mov.w	r1, #42752	; 0xa700
 8004162:	2060      	movs	r0, #96	; 0x60
 8004164:	f7fc fd7e 	bl	8000c64 <LCD_WriteReg>
		LCD_WriteReg(0x0061, 0x0001);
 8004168:	2101      	movs	r1, #1
 800416a:	2061      	movs	r0, #97	; 0x61
 800416c:	f7fc fd7a 	bl	8000c64 <LCD_WriteReg>
		LCD_WriteReg(0x006A, 0x0000);
 8004170:	2100      	movs	r1, #0
 8004172:	206a      	movs	r0, #106	; 0x6a
 8004174:	f7fc fd76 	bl	8000c64 <LCD_WriteReg>
		//
		LCD_WriteReg(0x0080, 0x0000);
 8004178:	2100      	movs	r1, #0
 800417a:	2080      	movs	r0, #128	; 0x80
 800417c:	f7fc fd72 	bl	8000c64 <LCD_WriteReg>
		LCD_WriteReg(0x0081, 0x0000);
 8004180:	2100      	movs	r1, #0
 8004182:	2081      	movs	r0, #129	; 0x81
 8004184:	f7fc fd6e 	bl	8000c64 <LCD_WriteReg>
		LCD_WriteReg(0x0082, 0x0000);
 8004188:	2100      	movs	r1, #0
 800418a:	2082      	movs	r0, #130	; 0x82
 800418c:	f7fc fd6a 	bl	8000c64 <LCD_WriteReg>
		LCD_WriteReg(0x0083, 0x0000);
 8004190:	2100      	movs	r1, #0
 8004192:	2083      	movs	r0, #131	; 0x83
 8004194:	f7fc fd66 	bl	8000c64 <LCD_WriteReg>
		LCD_WriteReg(0x0084, 0x0000);
 8004198:	2100      	movs	r1, #0
 800419a:	2084      	movs	r0, #132	; 0x84
 800419c:	f7fc fd62 	bl	8000c64 <LCD_WriteReg>
		LCD_WriteReg(0x0085, 0x0000);
 80041a0:	2100      	movs	r1, #0
 80041a2:	2085      	movs	r0, #133	; 0x85
 80041a4:	f7fc fd5e 	bl	8000c64 <LCD_WriteReg>
		//
		LCD_WriteReg(0x0090, 0x0010);
 80041a8:	2110      	movs	r1, #16
 80041aa:	2090      	movs	r0, #144	; 0x90
 80041ac:	f7fc fd5a 	bl	8000c64 <LCD_WriteReg>
		LCD_WriteReg(0x0092, 0x0600);
 80041b0:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80041b4:	2092      	movs	r0, #146	; 0x92
 80041b6:	f7fc fd55 	bl	8000c64 <LCD_WriteReg>

		LCD_WriteReg(0x0007, 0x0133);
 80041ba:	f240 1133 	movw	r1, #307	; 0x133
 80041be:	2007      	movs	r0, #7
 80041c0:	f7fc fd50 	bl	8000c64 <LCD_WriteReg>
		LCD_WriteReg(0x00, 0x0022);		//
 80041c4:	2122      	movs	r1, #34	; 0x22
 80041c6:	2000      	movs	r0, #0
 80041c8:	f7fc fd4c 	bl	8000c64 <LCD_WriteReg>
 80041cc:	f001 bc3a 	b.w	8005a44 <LCD_Init+0x3e34>
	} else if (lcddev.id == 0x9328)		//ILI9328   OK
 80041d0:	4b7d      	ldr	r3, [pc, #500]	; (80043c8 <LCD_Init+0x27b8>)
 80041d2:	889b      	ldrh	r3, [r3, #4]
 80041d4:	f249 3228 	movw	r2, #37672	; 0x9328
 80041d8:	4293      	cmp	r3, r2
 80041da:	f040 80f7 	bne.w	80043cc <LCD_Init+0x27bc>
			{
		LCD_WriteReg(0x00EC, 0x108F);		// internal timeing
 80041de:	f241 018f 	movw	r1, #4239	; 0x108f
 80041e2:	20ec      	movs	r0, #236	; 0xec
 80041e4:	f7fc fd3e 	bl	8000c64 <LCD_WriteReg>
		LCD_WriteReg(0x00EF, 0x1234);		// ADD
 80041e8:	f241 2134 	movw	r1, #4660	; 0x1234
 80041ec:	20ef      	movs	r0, #239	; 0xef
 80041ee:	f7fc fd39 	bl	8000c64 <LCD_WriteReg>
		//LCD_WriteReg(0x00e7,0x0010);      
		//LCD_WriteReg(0x0000,0x0001);//开启内部时钟
		LCD_WriteReg(0x0001, 0x0100);
 80041f2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80041f6:	2001      	movs	r0, #1
 80041f8:	f7fc fd34 	bl	8000c64 <LCD_WriteReg>
		LCD_WriteReg(0x0002, 0x0700);        //电源开启
 80041fc:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 8004200:	2002      	movs	r0, #2
 8004202:	f7fc fd2f 	bl	8000c64 <LCD_WriteReg>
		// 1  1   0    D->U	L->R
		// 0  0   1	   R->L U->D
		// 1  0   1    U->D	R->L
		// 0  1   1    L->R U->D 正常就用这个.
		// 1  1   1	   U->D	L->R
		LCD_WriteReg(0x0003, (1 << 12) | (3 << 4) | (0 << 3));		//65K
 8004206:	f241 0130 	movw	r1, #4144	; 0x1030
 800420a:	2003      	movs	r0, #3
 800420c:	f7fc fd2a 	bl	8000c64 <LCD_WriteReg>
		LCD_WriteReg(0x0004, 0x0000);
 8004210:	2100      	movs	r1, #0
 8004212:	2004      	movs	r0, #4
 8004214:	f7fc fd26 	bl	8000c64 <LCD_WriteReg>
		LCD_WriteReg(0x0008, 0x0202);
 8004218:	f240 2102 	movw	r1, #514	; 0x202
 800421c:	2008      	movs	r0, #8
 800421e:	f7fc fd21 	bl	8000c64 <LCD_WriteReg>
		LCD_WriteReg(0x0009, 0x0000);
 8004222:	2100      	movs	r1, #0
 8004224:	2009      	movs	r0, #9
 8004226:	f7fc fd1d 	bl	8000c64 <LCD_WriteReg>
		LCD_WriteReg(0x000a, 0x0000);		//display setting
 800422a:	2100      	movs	r1, #0
 800422c:	200a      	movs	r0, #10
 800422e:	f7fc fd19 	bl	8000c64 <LCD_WriteReg>
		LCD_WriteReg(0x000c, 0x0001);		//display setting
 8004232:	2101      	movs	r1, #1
 8004234:	200c      	movs	r0, #12
 8004236:	f7fc fd15 	bl	8000c64 <LCD_WriteReg>
		LCD_WriteReg(0x000d, 0x0000);		//0f3c
 800423a:	2100      	movs	r1, #0
 800423c:	200d      	movs	r0, #13
 800423e:	f7fc fd11 	bl	8000c64 <LCD_WriteReg>
		LCD_WriteReg(0x000f, 0x0000);
 8004242:	2100      	movs	r1, #0
 8004244:	200f      	movs	r0, #15
 8004246:	f7fc fd0d 	bl	8000c64 <LCD_WriteReg>
		//电源配置
		LCD_WriteReg(0x0010, 0x0000);
 800424a:	2100      	movs	r1, #0
 800424c:	2010      	movs	r0, #16
 800424e:	f7fc fd09 	bl	8000c64 <LCD_WriteReg>
		LCD_WriteReg(0x0011, 0x0007);
 8004252:	2107      	movs	r1, #7
 8004254:	2011      	movs	r0, #17
 8004256:	f7fc fd05 	bl	8000c64 <LCD_WriteReg>
		LCD_WriteReg(0x0012, 0x0000);
 800425a:	2100      	movs	r1, #0
 800425c:	2012      	movs	r0, #18
 800425e:	f7fc fd01 	bl	8000c64 <LCD_WriteReg>
		LCD_WriteReg(0x0013, 0x0000);
 8004262:	2100      	movs	r1, #0
 8004264:	2013      	movs	r0, #19
 8004266:	f7fc fcfd 	bl	8000c64 <LCD_WriteReg>
		LCD_WriteReg(0x0007, 0x0001);
 800426a:	2101      	movs	r1, #1
 800426c:	2007      	movs	r0, #7
 800426e:	f7fc fcf9 	bl	8000c64 <LCD_WriteReg>
		HAL_Delay(50);
 8004272:	2032      	movs	r0, #50	; 0x32
 8004274:	f001 feaa 	bl	8005fcc <HAL_Delay>
		LCD_WriteReg(0x0010, 0x1490);
 8004278:	f241 4190 	movw	r1, #5264	; 0x1490
 800427c:	2010      	movs	r0, #16
 800427e:	f7fc fcf1 	bl	8000c64 <LCD_WriteReg>
		LCD_WriteReg(0x0011, 0x0227);
 8004282:	f240 2127 	movw	r1, #551	; 0x227
 8004286:	2011      	movs	r0, #17
 8004288:	f7fc fcec 	bl	8000c64 <LCD_WriteReg>
		HAL_Delay(50);
 800428c:	2032      	movs	r0, #50	; 0x32
 800428e:	f001 fe9d 	bl	8005fcc <HAL_Delay>
		LCD_WriteReg(0x0012, 0x008A);
 8004292:	218a      	movs	r1, #138	; 0x8a
 8004294:	2012      	movs	r0, #18
 8004296:	f7fc fce5 	bl	8000c64 <LCD_WriteReg>
		HAL_Delay(50);
 800429a:	2032      	movs	r0, #50	; 0x32
 800429c:	f001 fe96 	bl	8005fcc <HAL_Delay>
		LCD_WriteReg(0x0013, 0x1a00);
 80042a0:	f44f 51d0 	mov.w	r1, #6656	; 0x1a00
 80042a4:	2013      	movs	r0, #19
 80042a6:	f7fc fcdd 	bl	8000c64 <LCD_WriteReg>
		LCD_WriteReg(0x0029, 0x0006);
 80042aa:	2106      	movs	r1, #6
 80042ac:	2029      	movs	r0, #41	; 0x29
 80042ae:	f7fc fcd9 	bl	8000c64 <LCD_WriteReg>
		LCD_WriteReg(0x002b, 0x000d);
 80042b2:	210d      	movs	r1, #13
 80042b4:	202b      	movs	r0, #43	; 0x2b
 80042b6:	f7fc fcd5 	bl	8000c64 <LCD_WriteReg>
		HAL_Delay(50);
 80042ba:	2032      	movs	r0, #50	; 0x32
 80042bc:	f001 fe86 	bl	8005fcc <HAL_Delay>
		LCD_WriteReg(0x0020, 0x0000);
 80042c0:	2100      	movs	r1, #0
 80042c2:	2020      	movs	r0, #32
 80042c4:	f7fc fcce 	bl	8000c64 <LCD_WriteReg>
		LCD_WriteReg(0x0021, 0x0000);
 80042c8:	2100      	movs	r1, #0
 80042ca:	2021      	movs	r0, #33	; 0x21
 80042cc:	f7fc fcca 	bl	8000c64 <LCD_WriteReg>
		HAL_Delay(50);
 80042d0:	2032      	movs	r0, #50	; 0x32
 80042d2:	f001 fe7b 	bl	8005fcc <HAL_Delay>
		//伽马校正
		LCD_WriteReg(0x0030, 0x0000);
 80042d6:	2100      	movs	r1, #0
 80042d8:	2030      	movs	r0, #48	; 0x30
 80042da:	f7fc fcc3 	bl	8000c64 <LCD_WriteReg>
		LCD_WriteReg(0x0031, 0x0604);
 80042de:	f240 6104 	movw	r1, #1540	; 0x604
 80042e2:	2031      	movs	r0, #49	; 0x31
 80042e4:	f7fc fcbe 	bl	8000c64 <LCD_WriteReg>
		LCD_WriteReg(0x0032, 0x0305);
 80042e8:	f240 3105 	movw	r1, #773	; 0x305
 80042ec:	2032      	movs	r0, #50	; 0x32
 80042ee:	f7fc fcb9 	bl	8000c64 <LCD_WriteReg>
		LCD_WriteReg(0x0035, 0x0000);
 80042f2:	2100      	movs	r1, #0
 80042f4:	2035      	movs	r0, #53	; 0x35
 80042f6:	f7fc fcb5 	bl	8000c64 <LCD_WriteReg>
		LCD_WriteReg(0x0036, 0x0C09);
 80042fa:	f640 4109 	movw	r1, #3081	; 0xc09
 80042fe:	2036      	movs	r0, #54	; 0x36
 8004300:	f7fc fcb0 	bl	8000c64 <LCD_WriteReg>
		LCD_WriteReg(0x0037, 0x0204);
 8004304:	f44f 7101 	mov.w	r1, #516	; 0x204
 8004308:	2037      	movs	r0, #55	; 0x37
 800430a:	f7fc fcab 	bl	8000c64 <LCD_WriteReg>
		LCD_WriteReg(0x0038, 0x0301);
 800430e:	f240 3101 	movw	r1, #769	; 0x301
 8004312:	2038      	movs	r0, #56	; 0x38
 8004314:	f7fc fca6 	bl	8000c64 <LCD_WriteReg>
		LCD_WriteReg(0x0039, 0x0707);
 8004318:	f240 7107 	movw	r1, #1799	; 0x707
 800431c:	2039      	movs	r0, #57	; 0x39
 800431e:	f7fc fca1 	bl	8000c64 <LCD_WriteReg>
		LCD_WriteReg(0x003c, 0x0000);
 8004322:	2100      	movs	r1, #0
 8004324:	203c      	movs	r0, #60	; 0x3c
 8004326:	f7fc fc9d 	bl	8000c64 <LCD_WriteReg>
		LCD_WriteReg(0x003d, 0x0a0a);
 800432a:	f640 210a 	movw	r1, #2570	; 0xa0a
 800432e:	203d      	movs	r0, #61	; 0x3d
 8004330:	f7fc fc98 	bl	8000c64 <LCD_WriteReg>
		HAL_Delay(50);
 8004334:	2032      	movs	r0, #50	; 0x32
 8004336:	f001 fe49 	bl	8005fcc <HAL_Delay>
		LCD_WriteReg(0x0050, 0x0000); //水平GRAM起始位置
 800433a:	2100      	movs	r1, #0
 800433c:	2050      	movs	r0, #80	; 0x50
 800433e:	f7fc fc91 	bl	8000c64 <LCD_WriteReg>
		LCD_WriteReg(0x0051, 0x00ef); //水平GRAM终止位置
 8004342:	21ef      	movs	r1, #239	; 0xef
 8004344:	2051      	movs	r0, #81	; 0x51
 8004346:	f7fc fc8d 	bl	8000c64 <LCD_WriteReg>
		LCD_WriteReg(0x0052, 0x0000); //垂直GRAM起始位置
 800434a:	2100      	movs	r1, #0
 800434c:	2052      	movs	r0, #82	; 0x52
 800434e:	f7fc fc89 	bl	8000c64 <LCD_WriteReg>
		LCD_WriteReg(0x0053, 0x013f); //垂直GRAM终止位置
 8004352:	f240 113f 	movw	r1, #319	; 0x13f
 8004356:	2053      	movs	r0, #83	; 0x53
 8004358:	f7fc fc84 	bl	8000c64 <LCD_WriteReg>

		LCD_WriteReg(0x0060, 0xa700);
 800435c:	f44f 4127 	mov.w	r1, #42752	; 0xa700
 8004360:	2060      	movs	r0, #96	; 0x60
 8004362:	f7fc fc7f 	bl	8000c64 <LCD_WriteReg>
		LCD_WriteReg(0x0061, 0x0001);
 8004366:	2101      	movs	r1, #1
 8004368:	2061      	movs	r0, #97	; 0x61
 800436a:	f7fc fc7b 	bl	8000c64 <LCD_WriteReg>
		LCD_WriteReg(0x006a, 0x0000);
 800436e:	2100      	movs	r1, #0
 8004370:	206a      	movs	r0, #106	; 0x6a
 8004372:	f7fc fc77 	bl	8000c64 <LCD_WriteReg>
		LCD_WriteReg(0x0080, 0x0000);
 8004376:	2100      	movs	r1, #0
 8004378:	2080      	movs	r0, #128	; 0x80
 800437a:	f7fc fc73 	bl	8000c64 <LCD_WriteReg>
		LCD_WriteReg(0x0081, 0x0000);
 800437e:	2100      	movs	r1, #0
 8004380:	2081      	movs	r0, #129	; 0x81
 8004382:	f7fc fc6f 	bl	8000c64 <LCD_WriteReg>
		LCD_WriteReg(0x0082, 0x0000);
 8004386:	2100      	movs	r1, #0
 8004388:	2082      	movs	r0, #130	; 0x82
 800438a:	f7fc fc6b 	bl	8000c64 <LCD_WriteReg>
		LCD_WriteReg(0x0083, 0x0000);
 800438e:	2100      	movs	r1, #0
 8004390:	2083      	movs	r0, #131	; 0x83
 8004392:	f7fc fc67 	bl	8000c64 <LCD_WriteReg>
		LCD_WriteReg(0x0084, 0x0000);
 8004396:	2100      	movs	r1, #0
 8004398:	2084      	movs	r0, #132	; 0x84
 800439a:	f7fc fc63 	bl	8000c64 <LCD_WriteReg>
		LCD_WriteReg(0x0085, 0x0000);
 800439e:	2100      	movs	r1, #0
 80043a0:	2085      	movs	r0, #133	; 0x85
 80043a2:	f7fc fc5f 	bl	8000c64 <LCD_WriteReg>

		LCD_WriteReg(0x0090, 0x0010);
 80043a6:	2110      	movs	r1, #16
 80043a8:	2090      	movs	r0, #144	; 0x90
 80043aa:	f7fc fc5b 	bl	8000c64 <LCD_WriteReg>
		LCD_WriteReg(0x0092, 0x0600);
 80043ae:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80043b2:	2092      	movs	r0, #146	; 0x92
 80043b4:	f7fc fc56 	bl	8000c64 <LCD_WriteReg>
		//开启显示设置
		LCD_WriteReg(0x0007, 0x0133);
 80043b8:	f240 1133 	movw	r1, #307	; 0x133
 80043bc:	2007      	movs	r0, #7
 80043be:	f7fc fc51 	bl	8000c64 <LCD_WriteReg>
 80043c2:	f001 bb3f 	b.w	8005a44 <LCD_Init+0x3e34>
 80043c6:	bf00      	nop
 80043c8:	20000028 	.word	0x20000028
	} else if (lcddev.id == 0x9320) //测试OK.
 80043cc:	4bce      	ldr	r3, [pc, #824]	; (8004708 <LCD_Init+0x2af8>)
 80043ce:	889b      	ldrh	r3, [r3, #4]
 80043d0:	f249 3220 	movw	r2, #37664	; 0x9320
 80043d4:	4293      	cmp	r3, r2
 80043d6:	f040 80ad 	bne.w	8004534 <LCD_Init+0x2924>
			{
		LCD_WriteReg(0x00, 0x0000);
 80043da:	2100      	movs	r1, #0
 80043dc:	2000      	movs	r0, #0
 80043de:	f7fc fc41 	bl	8000c64 <LCD_WriteReg>
		LCD_WriteReg(0x01, 0x0100);	//Driver Output Contral.
 80043e2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80043e6:	2001      	movs	r0, #1
 80043e8:	f7fc fc3c 	bl	8000c64 <LCD_WriteReg>
		LCD_WriteReg(0x02, 0x0700);	//LCD Driver Waveform Contral.
 80043ec:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 80043f0:	2002      	movs	r0, #2
 80043f2:	f7fc fc37 	bl	8000c64 <LCD_WriteReg>
		LCD_WriteReg(0x03, 0x1030);	//Entry Mode Set.
 80043f6:	f241 0130 	movw	r1, #4144	; 0x1030
 80043fa:	2003      	movs	r0, #3
 80043fc:	f7fc fc32 	bl	8000c64 <LCD_WriteReg>
		//LCD_WriteReg(0x03,0x1018);	//Entry Mode Set.

		LCD_WriteReg(0x04, 0x0000);	//Scalling Contral.
 8004400:	2100      	movs	r1, #0
 8004402:	2004      	movs	r0, #4
 8004404:	f7fc fc2e 	bl	8000c64 <LCD_WriteReg>
		LCD_WriteReg(0x08, 0x0202);	//Display Contral 2.(0x0207)
 8004408:	f240 2102 	movw	r1, #514	; 0x202
 800440c:	2008      	movs	r0, #8
 800440e:	f7fc fc29 	bl	8000c64 <LCD_WriteReg>
		LCD_WriteReg(0x09, 0x0000);	//Display Contral 3.(0x0000)
 8004412:	2100      	movs	r1, #0
 8004414:	2009      	movs	r0, #9
 8004416:	f7fc fc25 	bl	8000c64 <LCD_WriteReg>
		LCD_WriteReg(0x0a, 0x0000);	//Frame Cycle Contal.(0x0000)
 800441a:	2100      	movs	r1, #0
 800441c:	200a      	movs	r0, #10
 800441e:	f7fc fc21 	bl	8000c64 <LCD_WriteReg>
		LCD_WriteReg(0x0c, (1 << 0));	//Extern Display Interface Contral 1.(0x0000)
 8004422:	2101      	movs	r1, #1
 8004424:	200c      	movs	r0, #12
 8004426:	f7fc fc1d 	bl	8000c64 <LCD_WriteReg>
		LCD_WriteReg(0x0d, 0x0000);	//Frame Maker Position.
 800442a:	2100      	movs	r1, #0
 800442c:	200d      	movs	r0, #13
 800442e:	f7fc fc19 	bl	8000c64 <LCD_WriteReg>
		LCD_WriteReg(0x0f, 0x0000);	//Extern Display Interface Contral 2.
 8004432:	2100      	movs	r1, #0
 8004434:	200f      	movs	r0, #15
 8004436:	f7fc fc15 	bl	8000c64 <LCD_WriteReg>
		HAL_Delay(50);
 800443a:	2032      	movs	r0, #50	; 0x32
 800443c:	f001 fdc6 	bl	8005fcc <HAL_Delay>
		LCD_WriteReg(0x07, 0x0101);	//Display Contral.
 8004440:	f240 1101 	movw	r1, #257	; 0x101
 8004444:	2007      	movs	r0, #7
 8004446:	f7fc fc0d 	bl	8000c64 <LCD_WriteReg>
		HAL_Delay(50);
 800444a:	2032      	movs	r0, #50	; 0x32
 800444c:	f001 fdbe 	bl	8005fcc <HAL_Delay>
		LCD_WriteReg(0x10, (1 << 12) | (0 << 8) | (1 << 7) | (1 << 6) | (0 << 4));//Power Control 1.(0x16b0)
 8004450:	f44f 5186 	mov.w	r1, #4288	; 0x10c0
 8004454:	2010      	movs	r0, #16
 8004456:	f7fc fc05 	bl	8000c64 <LCD_WriteReg>
		LCD_WriteReg(0x11, 0x0007);								//Power Control 2.(0x0001)
 800445a:	2107      	movs	r1, #7
 800445c:	2011      	movs	r0, #17
 800445e:	f7fc fc01 	bl	8000c64 <LCD_WriteReg>
		LCD_WriteReg(0x12, (1 << 8) | (1 << 4) | (0 << 0));	//Power Control 3.(0x0138)
 8004462:	f44f 7188 	mov.w	r1, #272	; 0x110
 8004466:	2012      	movs	r0, #18
 8004468:	f7fc fbfc 	bl	8000c64 <LCD_WriteReg>
		LCD_WriteReg(0x13, 0x0b00);								//Power Control 4.
 800446c:	f44f 6130 	mov.w	r1, #2816	; 0xb00
 8004470:	2013      	movs	r0, #19
 8004472:	f7fc fbf7 	bl	8000c64 <LCD_WriteReg>
		LCD_WriteReg(0x29, 0x0000);								//Power Control 7.
 8004476:	2100      	movs	r1, #0
 8004478:	2029      	movs	r0, #41	; 0x29
 800447a:	f7fc fbf3 	bl	8000c64 <LCD_WriteReg>

		LCD_WriteReg(0x2b, (1 << 14) | (1 << 4));
 800447e:	f244 0110 	movw	r1, #16400	; 0x4010
 8004482:	202b      	movs	r0, #43	; 0x2b
 8004484:	f7fc fbee 	bl	8000c64 <LCD_WriteReg>
		LCD_WriteReg(0x50, 0);	//Set X Star
 8004488:	2100      	movs	r1, #0
 800448a:	2050      	movs	r0, #80	; 0x50
 800448c:	f7fc fbea 	bl	8000c64 <LCD_WriteReg>
		//水平GRAM终止位置Set X End.
		LCD_WriteReg(0x51, 239);	//Set Y Star
 8004490:	21ef      	movs	r1, #239	; 0xef
 8004492:	2051      	movs	r0, #81	; 0x51
 8004494:	f7fc fbe6 	bl	8000c64 <LCD_WriteReg>
		LCD_WriteReg(0x52, 0);	//Set Y End.t.
 8004498:	2100      	movs	r1, #0
 800449a:	2052      	movs	r0, #82	; 0x52
 800449c:	f7fc fbe2 	bl	8000c64 <LCD_WriteReg>
		LCD_WriteReg(0x53, 319);	//
 80044a0:	f240 113f 	movw	r1, #319	; 0x13f
 80044a4:	2053      	movs	r0, #83	; 0x53
 80044a6:	f7fc fbdd 	bl	8000c64 <LCD_WriteReg>

		LCD_WriteReg(0x60, 0x2700);	//Driver Output Control.
 80044aa:	f44f 511c 	mov.w	r1, #9984	; 0x2700
 80044ae:	2060      	movs	r0, #96	; 0x60
 80044b0:	f7fc fbd8 	bl	8000c64 <LCD_WriteReg>
		LCD_WriteReg(0x61, 0x0001);	//Driver Output Control.
 80044b4:	2101      	movs	r1, #1
 80044b6:	2061      	movs	r0, #97	; 0x61
 80044b8:	f7fc fbd4 	bl	8000c64 <LCD_WriteReg>
		LCD_WriteReg(0x6a, 0x0000);	//Vertical Srcoll Control.
 80044bc:	2100      	movs	r1, #0
 80044be:	206a      	movs	r0, #106	; 0x6a
 80044c0:	f7fc fbd0 	bl	8000c64 <LCD_WriteReg>

		LCD_WriteReg(0x80, 0x0000);	//Display Position? Partial Display 1.
 80044c4:	2100      	movs	r1, #0
 80044c6:	2080      	movs	r0, #128	; 0x80
 80044c8:	f7fc fbcc 	bl	8000c64 <LCD_WriteReg>
		LCD_WriteReg(0x81, 0x0000);	//RAM Address Start? Partial Display 1.
 80044cc:	2100      	movs	r1, #0
 80044ce:	2081      	movs	r0, #129	; 0x81
 80044d0:	f7fc fbc8 	bl	8000c64 <LCD_WriteReg>
		LCD_WriteReg(0x82, 0x0000);	//RAM Address End-Partial Display 1.
 80044d4:	2100      	movs	r1, #0
 80044d6:	2082      	movs	r0, #130	; 0x82
 80044d8:	f7fc fbc4 	bl	8000c64 <LCD_WriteReg>
		LCD_WriteReg(0x83, 0x0000);	//Displsy Position? Partial Display 2.
 80044dc:	2100      	movs	r1, #0
 80044de:	2083      	movs	r0, #131	; 0x83
 80044e0:	f7fc fbc0 	bl	8000c64 <LCD_WriteReg>
		LCD_WriteReg(0x84, 0x0000);	//RAM Address Start? Partial Display 2.
 80044e4:	2100      	movs	r1, #0
 80044e6:	2084      	movs	r0, #132	; 0x84
 80044e8:	f7fc fbbc 	bl	8000c64 <LCD_WriteReg>
		LCD_WriteReg(0x85, 0x0000);	//RAM Address End? Partial Display 2.
 80044ec:	2100      	movs	r1, #0
 80044ee:	2085      	movs	r0, #133	; 0x85
 80044f0:	f7fc fbb8 	bl	8000c64 <LCD_WriteReg>

		LCD_WriteReg(0x90, (0 << 7) | (16 << 0));	//Frame Cycle Contral.(0x0013)
 80044f4:	2110      	movs	r1, #16
 80044f6:	2090      	movs	r0, #144	; 0x90
 80044f8:	f7fc fbb4 	bl	8000c64 <LCD_WriteReg>
		LCD_WriteReg(0x92, 0x0000);	//Panel Interface Contral 2.(0x0000)
 80044fc:	2100      	movs	r1, #0
 80044fe:	2092      	movs	r0, #146	; 0x92
 8004500:	f7fc fbb0 	bl	8000c64 <LCD_WriteReg>
		LCD_WriteReg(0x93, 0x0001);	//Panel Interface Contral 3.
 8004504:	2101      	movs	r1, #1
 8004506:	2093      	movs	r0, #147	; 0x93
 8004508:	f7fc fbac 	bl	8000c64 <LCD_WriteReg>
		LCD_WriteReg(0x95, 0x0110);	//Frame Cycle Contral.(0x0110)
 800450c:	f44f 7188 	mov.w	r1, #272	; 0x110
 8004510:	2095      	movs	r0, #149	; 0x95
 8004512:	f7fc fba7 	bl	8000c64 <LCD_WriteReg>
		LCD_WriteReg(0x97, (0 << 8));	//
 8004516:	2100      	movs	r1, #0
 8004518:	2097      	movs	r0, #151	; 0x97
 800451a:	f7fc fba3 	bl	8000c64 <LCD_WriteReg>
		LCD_WriteReg(0x98, 0x0000);	//Frame Cycle Contral.
 800451e:	2100      	movs	r1, #0
 8004520:	2098      	movs	r0, #152	; 0x98
 8004522:	f7fc fb9f 	bl	8000c64 <LCD_WriteReg>
		LCD_WriteReg(0x07, 0x0173);	//(0x0173)
 8004526:	f240 1173 	movw	r1, #371	; 0x173
 800452a:	2007      	movs	r0, #7
 800452c:	f7fc fb9a 	bl	8000c64 <LCD_WriteReg>
 8004530:	f001 ba88 	b.w	8005a44 <LCD_Init+0x3e34>
	} else if (lcddev.id == 0X9331)	//OK |/|/|
 8004534:	4b74      	ldr	r3, [pc, #464]	; (8004708 <LCD_Init+0x2af8>)
 8004536:	889b      	ldrh	r3, [r3, #4]
 8004538:	f249 3231 	movw	r2, #37681	; 0x9331
 800453c:	4293      	cmp	r3, r2
 800453e:	f040 80e5 	bne.w	800470c <LCD_Init+0x2afc>
			{
		LCD_WriteReg(0x00E7, 0x1014);
 8004542:	f241 0114 	movw	r1, #4116	; 0x1014
 8004546:	20e7      	movs	r0, #231	; 0xe7
 8004548:	f7fc fb8c 	bl	8000c64 <LCD_WriteReg>
		LCD_WriteReg(0x0001, 0x0100); // set SS and SM bit
 800454c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004550:	2001      	movs	r0, #1
 8004552:	f7fc fb87 	bl	8000c64 <LCD_WriteReg>
		LCD_WriteReg(0x0002, 0x0200); // set 1 line inversion
 8004556:	f44f 7100 	mov.w	r1, #512	; 0x200
 800455a:	2002      	movs	r0, #2
 800455c:	f7fc fb82 	bl	8000c64 <LCD_WriteReg>
		LCD_WriteReg(0x0003, (1 << 12) | (3 << 4) | (1 << 3)); //65K
 8004560:	f241 0138 	movw	r1, #4152	; 0x1038
 8004564:	2003      	movs	r0, #3
 8004566:	f7fc fb7d 	bl	8000c64 <LCD_WriteReg>
		//LCD_WriteReg(0x0003, 0x1030); // set GRAM write direction and BGR=1.
		LCD_WriteReg(0x0008, 0x0202); // set the back porch and front porch
 800456a:	f240 2102 	movw	r1, #514	; 0x202
 800456e:	2008      	movs	r0, #8
 8004570:	f7fc fb78 	bl	8000c64 <LCD_WriteReg>
		LCD_WriteReg(0x0009, 0x0000); // set non-display area refresh cycle ISC[3:0]
 8004574:	2100      	movs	r1, #0
 8004576:	2009      	movs	r0, #9
 8004578:	f7fc fb74 	bl	8000c64 <LCD_WriteReg>
		LCD_WriteReg(0x000A, 0x0000); // FMARK function
 800457c:	2100      	movs	r1, #0
 800457e:	200a      	movs	r0, #10
 8004580:	f7fc fb70 	bl	8000c64 <LCD_WriteReg>
		LCD_WriteReg(0x000C, 0x0000); // RGB interface setting
 8004584:	2100      	movs	r1, #0
 8004586:	200c      	movs	r0, #12
 8004588:	f7fc fb6c 	bl	8000c64 <LCD_WriteReg>
		LCD_WriteReg(0x000D, 0x0000); // Frame marker Position
 800458c:	2100      	movs	r1, #0
 800458e:	200d      	movs	r0, #13
 8004590:	f7fc fb68 	bl	8000c64 <LCD_WriteReg>
		LCD_WriteReg(0x000F, 0x0000); // RGB interface polarity
 8004594:	2100      	movs	r1, #0
 8004596:	200f      	movs	r0, #15
 8004598:	f7fc fb64 	bl	8000c64 <LCD_WriteReg>
		//*************Power On sequence ****************//
		LCD_WriteReg(0x0010, 0x0000); // SAP, BT[3:0], AP, DSTB, SLP, STB
 800459c:	2100      	movs	r1, #0
 800459e:	2010      	movs	r0, #16
 80045a0:	f7fc fb60 	bl	8000c64 <LCD_WriteReg>
		LCD_WriteReg(0x0011, 0x0007); // DC1[2:0], DC0[2:0], VC[2:0]
 80045a4:	2107      	movs	r1, #7
 80045a6:	2011      	movs	r0, #17
 80045a8:	f7fc fb5c 	bl	8000c64 <LCD_WriteReg>
		LCD_WriteReg(0x0012, 0x0000); // VREG1OUT voltage
 80045ac:	2100      	movs	r1, #0
 80045ae:	2012      	movs	r0, #18
 80045b0:	f7fc fb58 	bl	8000c64 <LCD_WriteReg>
		LCD_WriteReg(0x0013, 0x0000); // VDV[4:0] for VCOM amplitude
 80045b4:	2100      	movs	r1, #0
 80045b6:	2013      	movs	r0, #19
 80045b8:	f7fc fb54 	bl	8000c64 <LCD_WriteReg>
		HAL_Delay(200); // Dis-charge capacitor power voltage
 80045bc:	20c8      	movs	r0, #200	; 0xc8
 80045be:	f001 fd05 	bl	8005fcc <HAL_Delay>
		LCD_WriteReg(0x0010, 0x1690); // SAP, BT[3:0], AP, DSTB, SLP, STB
 80045c2:	f241 6190 	movw	r1, #5776	; 0x1690
 80045c6:	2010      	movs	r0, #16
 80045c8:	f7fc fb4c 	bl	8000c64 <LCD_WriteReg>
		LCD_WriteReg(0x0011, 0x0227); // DC1[2:0], DC0[2:0], VC[2:0]
 80045cc:	f240 2127 	movw	r1, #551	; 0x227
 80045d0:	2011      	movs	r0, #17
 80045d2:	f7fc fb47 	bl	8000c64 <LCD_WriteReg>
		HAL_Delay(50); // Delay 50ms
 80045d6:	2032      	movs	r0, #50	; 0x32
 80045d8:	f001 fcf8 	bl	8005fcc <HAL_Delay>
		LCD_WriteReg(0x0012, 0x000C); // Internal reference voltage= Vci;
 80045dc:	210c      	movs	r1, #12
 80045de:	2012      	movs	r0, #18
 80045e0:	f7fc fb40 	bl	8000c64 <LCD_WriteReg>
		HAL_Delay(50); // Delay 50ms
 80045e4:	2032      	movs	r0, #50	; 0x32
 80045e6:	f001 fcf1 	bl	8005fcc <HAL_Delay>
		LCD_WriteReg(0x0013, 0x0800); // Set VDV[4:0] for VCOM amplitude
 80045ea:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80045ee:	2013      	movs	r0, #19
 80045f0:	f7fc fb38 	bl	8000c64 <LCD_WriteReg>
		LCD_WriteReg(0x0029, 0x0011); // Set VCM[5:0] for VCOMH
 80045f4:	2111      	movs	r1, #17
 80045f6:	2029      	movs	r0, #41	; 0x29
 80045f8:	f7fc fb34 	bl	8000c64 <LCD_WriteReg>
		LCD_WriteReg(0x002B, 0x000B); // Set Frame Rate
 80045fc:	210b      	movs	r1, #11
 80045fe:	202b      	movs	r0, #43	; 0x2b
 8004600:	f7fc fb30 	bl	8000c64 <LCD_WriteReg>
		HAL_Delay(50); // Delay 50ms
 8004604:	2032      	movs	r0, #50	; 0x32
 8004606:	f001 fce1 	bl	8005fcc <HAL_Delay>
		LCD_WriteReg(0x0020, 0x0000); // GRAM horizontal Address
 800460a:	2100      	movs	r1, #0
 800460c:	2020      	movs	r0, #32
 800460e:	f7fc fb29 	bl	8000c64 <LCD_WriteReg>
		LCD_WriteReg(0x0021, 0x013f); // GRAM Vertical Address
 8004612:	f240 113f 	movw	r1, #319	; 0x13f
 8004616:	2021      	movs	r0, #33	; 0x21
 8004618:	f7fc fb24 	bl	8000c64 <LCD_WriteReg>
		// ----------- Adjust the Gamma Curve ----------//
		LCD_WriteReg(0x0030, 0x0000);
 800461c:	2100      	movs	r1, #0
 800461e:	2030      	movs	r0, #48	; 0x30
 8004620:	f7fc fb20 	bl	8000c64 <LCD_WriteReg>
		LCD_WriteReg(0x0031, 0x0106);
 8004624:	f44f 7183 	mov.w	r1, #262	; 0x106
 8004628:	2031      	movs	r0, #49	; 0x31
 800462a:	f7fc fb1b 	bl	8000c64 <LCD_WriteReg>
		LCD_WriteReg(0x0032, 0x0000);
 800462e:	2100      	movs	r1, #0
 8004630:	2032      	movs	r0, #50	; 0x32
 8004632:	f7fc fb17 	bl	8000c64 <LCD_WriteReg>
		LCD_WriteReg(0x0035, 0x0204);
 8004636:	f44f 7101 	mov.w	r1, #516	; 0x204
 800463a:	2035      	movs	r0, #53	; 0x35
 800463c:	f7fc fb12 	bl	8000c64 <LCD_WriteReg>
		LCD_WriteReg(0x0036, 0x160A);
 8004640:	f241 610a 	movw	r1, #5642	; 0x160a
 8004644:	2036      	movs	r0, #54	; 0x36
 8004646:	f7fc fb0d 	bl	8000c64 <LCD_WriteReg>
		LCD_WriteReg(0x0037, 0x0707);
 800464a:	f240 7107 	movw	r1, #1799	; 0x707
 800464e:	2037      	movs	r0, #55	; 0x37
 8004650:	f7fc fb08 	bl	8000c64 <LCD_WriteReg>
		LCD_WriteReg(0x0038, 0x0106);
 8004654:	f44f 7183 	mov.w	r1, #262	; 0x106
 8004658:	2038      	movs	r0, #56	; 0x38
 800465a:	f7fc fb03 	bl	8000c64 <LCD_WriteReg>
		LCD_WriteReg(0x0039, 0x0707);
 800465e:	f240 7107 	movw	r1, #1799	; 0x707
 8004662:	2039      	movs	r0, #57	; 0x39
 8004664:	f7fc fafe 	bl	8000c64 <LCD_WriteReg>
		LCD_WriteReg(0x003C, 0x0402);
 8004668:	f240 4102 	movw	r1, #1026	; 0x402
 800466c:	203c      	movs	r0, #60	; 0x3c
 800466e:	f7fc faf9 	bl	8000c64 <LCD_WriteReg>
		LCD_WriteReg(0x003D, 0x0C0F);
 8004672:	f640 410f 	movw	r1, #3087	; 0xc0f
 8004676:	203d      	movs	r0, #61	; 0x3d
 8004678:	f7fc faf4 	bl	8000c64 <LCD_WriteReg>
		//------------------ Set GRAM area ---------------//
		LCD_WriteReg(0x0050, 0x0000); // Horizontal GRAM Start Address
 800467c:	2100      	movs	r1, #0
 800467e:	2050      	movs	r0, #80	; 0x50
 8004680:	f7fc faf0 	bl	8000c64 <LCD_WriteReg>
		LCD_WriteReg(0x0051, 0x00EF); // Horizontal GRAM End Address
 8004684:	21ef      	movs	r1, #239	; 0xef
 8004686:	2051      	movs	r0, #81	; 0x51
 8004688:	f7fc faec 	bl	8000c64 <LCD_WriteReg>
		LCD_WriteReg(0x0052, 0x0000); // Vertical GRAM Start Address
 800468c:	2100      	movs	r1, #0
 800468e:	2052      	movs	r0, #82	; 0x52
 8004690:	f7fc fae8 	bl	8000c64 <LCD_WriteReg>
		LCD_WriteReg(0x0053, 0x013F); // Vertical GRAM Start Address
 8004694:	f240 113f 	movw	r1, #319	; 0x13f
 8004698:	2053      	movs	r0, #83	; 0x53
 800469a:	f7fc fae3 	bl	8000c64 <LCD_WriteReg>
		LCD_WriteReg(0x0060, 0x2700); // Gate Scan Line
 800469e:	f44f 511c 	mov.w	r1, #9984	; 0x2700
 80046a2:	2060      	movs	r0, #96	; 0x60
 80046a4:	f7fc fade 	bl	8000c64 <LCD_WriteReg>
		LCD_WriteReg(0x0061, 0x0001); // NDL,VLE, REV 
 80046a8:	2101      	movs	r1, #1
 80046aa:	2061      	movs	r0, #97	; 0x61
 80046ac:	f7fc fada 	bl	8000c64 <LCD_WriteReg>
		LCD_WriteReg(0x006A, 0x0000); // set scrolling line
 80046b0:	2100      	movs	r1, #0
 80046b2:	206a      	movs	r0, #106	; 0x6a
 80046b4:	f7fc fad6 	bl	8000c64 <LCD_WriteReg>
		//-------------- Partial Display Control ---------//
		LCD_WriteReg(0x0080, 0x0000);
 80046b8:	2100      	movs	r1, #0
 80046ba:	2080      	movs	r0, #128	; 0x80
 80046bc:	f7fc fad2 	bl	8000c64 <LCD_WriteReg>
		LCD_WriteReg(0x0081, 0x0000);
 80046c0:	2100      	movs	r1, #0
 80046c2:	2081      	movs	r0, #129	; 0x81
 80046c4:	f7fc face 	bl	8000c64 <LCD_WriteReg>
		LCD_WriteReg(0x0082, 0x0000);
 80046c8:	2100      	movs	r1, #0
 80046ca:	2082      	movs	r0, #130	; 0x82
 80046cc:	f7fc faca 	bl	8000c64 <LCD_WriteReg>
		LCD_WriteReg(0x0083, 0x0000);
 80046d0:	2100      	movs	r1, #0
 80046d2:	2083      	movs	r0, #131	; 0x83
 80046d4:	f7fc fac6 	bl	8000c64 <LCD_WriteReg>
		LCD_WriteReg(0x0084, 0x0000);
 80046d8:	2100      	movs	r1, #0
 80046da:	2084      	movs	r0, #132	; 0x84
 80046dc:	f7fc fac2 	bl	8000c64 <LCD_WriteReg>
		LCD_WriteReg(0x0085, 0x0000);
 80046e0:	2100      	movs	r1, #0
 80046e2:	2085      	movs	r0, #133	; 0x85
 80046e4:	f7fc fabe 	bl	8000c64 <LCD_WriteReg>
		//-------------- Panel Control -------------------//
		LCD_WriteReg(0x0090, 0x0010);
 80046e8:	2110      	movs	r1, #16
 80046ea:	2090      	movs	r0, #144	; 0x90
 80046ec:	f7fc faba 	bl	8000c64 <LCD_WriteReg>
		LCD_WriteReg(0x0092, 0x0600);
 80046f0:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80046f4:	2092      	movs	r0, #146	; 0x92
 80046f6:	f7fc fab5 	bl	8000c64 <LCD_WriteReg>
		LCD_WriteReg(0x0007, 0x0133); // 262K color and display ON
 80046fa:	f240 1133 	movw	r1, #307	; 0x133
 80046fe:	2007      	movs	r0, #7
 8004700:	f7fc fab0 	bl	8000c64 <LCD_WriteReg>
 8004704:	f001 b99e 	b.w	8005a44 <LCD_Init+0x3e34>
 8004708:	20000028 	.word	0x20000028
	} else if (lcddev.id == 0x5408) {
 800470c:	4be2      	ldr	r3, [pc, #904]	; (8004a98 <LCD_Init+0x2e88>)
 800470e:	889b      	ldrh	r3, [r3, #4]
 8004710:	f245 4208 	movw	r2, #21512	; 0x5408
 8004714:	4293      	cmp	r3, r2
 8004716:	f040 80a3 	bne.w	8004860 <LCD_Init+0x2c50>
		LCD_WriteReg(0x01, 0x0100);
 800471a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800471e:	2001      	movs	r0, #1
 8004720:	f7fc faa0 	bl	8000c64 <LCD_WriteReg>
		LCD_WriteReg(0x02, 0x0700); //LCD Driving Waveform Contral
 8004724:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 8004728:	2002      	movs	r0, #2
 800472a:	f7fc fa9b 	bl	8000c64 <LCD_WriteReg>
		LCD_WriteReg(0x03, 0x1030); //Entry Mode设置
 800472e:	f241 0130 	movw	r1, #4144	; 0x1030
 8004732:	2003      	movs	r0, #3
 8004734:	f7fc fa96 	bl	8000c64 <LCD_WriteReg>
		//指针从左至右自上而下的自动增模式
		//Normal Mode(Window Mode disable)
		//RGB格式
		//16位数据2次传输的8总线设置
		LCD_WriteReg(0x04, 0x0000); //Scalling Control register
 8004738:	2100      	movs	r1, #0
 800473a:	2004      	movs	r0, #4
 800473c:	f7fc fa92 	bl	8000c64 <LCD_WriteReg>
		LCD_WriteReg(0x08, 0x0207); //Display Control 2
 8004740:	f240 2107 	movw	r1, #519	; 0x207
 8004744:	2008      	movs	r0, #8
 8004746:	f7fc fa8d 	bl	8000c64 <LCD_WriteReg>
		LCD_WriteReg(0x09, 0x0000); //Display Control 3
 800474a:	2100      	movs	r1, #0
 800474c:	2009      	movs	r0, #9
 800474e:	f7fc fa89 	bl	8000c64 <LCD_WriteReg>
		LCD_WriteReg(0x0A, 0x0000); //Frame Cycle Control
 8004752:	2100      	movs	r1, #0
 8004754:	200a      	movs	r0, #10
 8004756:	f7fc fa85 	bl	8000c64 <LCD_WriteReg>
		LCD_WriteReg(0x0C, 0x0000); //External Display Interface Control 1
 800475a:	2100      	movs	r1, #0
 800475c:	200c      	movs	r0, #12
 800475e:	f7fc fa81 	bl	8000c64 <LCD_WriteReg>
		LCD_WriteReg(0x0D, 0x0000); //Frame Maker Position
 8004762:	2100      	movs	r1, #0
 8004764:	200d      	movs	r0, #13
 8004766:	f7fc fa7d 	bl	8000c64 <LCD_WriteReg>
		LCD_WriteReg(0x0F, 0x0000); //External Display Interface Control 2
 800476a:	2100      	movs	r1, #0
 800476c:	200f      	movs	r0, #15
 800476e:	f7fc fa79 	bl	8000c64 <LCD_WriteReg>
		HAL_Delay(20);
 8004772:	2014      	movs	r0, #20
 8004774:	f001 fc2a 	bl	8005fcc <HAL_Delay>
		//TFT 液晶彩色图像显示方法14
		LCD_WriteReg(0x10, 0x16B0); //0x14B0 //Power Control 1
 8004778:	f241 61b0 	movw	r1, #5808	; 0x16b0
 800477c:	2010      	movs	r0, #16
 800477e:	f7fc fa71 	bl	8000c64 <LCD_WriteReg>
		LCD_WriteReg(0x11, 0x0001); //0x0007 //Power Control 2
 8004782:	2101      	movs	r1, #1
 8004784:	2011      	movs	r0, #17
 8004786:	f7fc fa6d 	bl	8000c64 <LCD_WriteReg>
		LCD_WriteReg(0x17, 0x0001); //0x0000 //Power Control 3
 800478a:	2101      	movs	r1, #1
 800478c:	2017      	movs	r0, #23
 800478e:	f7fc fa69 	bl	8000c64 <LCD_WriteReg>
		LCD_WriteReg(0x12, 0x0138); //0x013B //Power Control 4
 8004792:	f44f 719c 	mov.w	r1, #312	; 0x138
 8004796:	2012      	movs	r0, #18
 8004798:	f7fc fa64 	bl	8000c64 <LCD_WriteReg>
		LCD_WriteReg(0x13, 0x0800); //0x0800 //Power Control 5
 800479c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80047a0:	2013      	movs	r0, #19
 80047a2:	f7fc fa5f 	bl	8000c64 <LCD_WriteReg>
		LCD_WriteReg(0x29, 0x0009); //NVM read data 2
 80047a6:	2109      	movs	r1, #9
 80047a8:	2029      	movs	r0, #41	; 0x29
 80047aa:	f7fc fa5b 	bl	8000c64 <LCD_WriteReg>
		LCD_WriteReg(0x2a, 0x0009); //NVM read data 3
 80047ae:	2109      	movs	r1, #9
 80047b0:	202a      	movs	r0, #42	; 0x2a
 80047b2:	f7fc fa57 	bl	8000c64 <LCD_WriteReg>
		LCD_WriteReg(0xa4, 0x0000);
 80047b6:	2100      	movs	r1, #0
 80047b8:	20a4      	movs	r0, #164	; 0xa4
 80047ba:	f7fc fa53 	bl	8000c64 <LCD_WriteReg>
		LCD_WriteReg(0x50, 0x0000); //设置操作窗口的X轴开始列
 80047be:	2100      	movs	r1, #0
 80047c0:	2050      	movs	r0, #80	; 0x50
 80047c2:	f7fc fa4f 	bl	8000c64 <LCD_WriteReg>
		LCD_WriteReg(0x51, 0x00EF); //设置操作窗口的X轴结束列
 80047c6:	21ef      	movs	r1, #239	; 0xef
 80047c8:	2051      	movs	r0, #81	; 0x51
 80047ca:	f7fc fa4b 	bl	8000c64 <LCD_WriteReg>
		LCD_WriteReg(0x52, 0x0000); //设置操作窗口的Y轴开始行
 80047ce:	2100      	movs	r1, #0
 80047d0:	2052      	movs	r0, #82	; 0x52
 80047d2:	f7fc fa47 	bl	8000c64 <LCD_WriteReg>
		LCD_WriteReg(0x53, 0x013F); //设置操作窗口的Y轴结束行
 80047d6:	f240 113f 	movw	r1, #319	; 0x13f
 80047da:	2053      	movs	r0, #83	; 0x53
 80047dc:	f7fc fa42 	bl	8000c64 <LCD_WriteReg>
		LCD_WriteReg(0x60, 0x2700); //Driver Output Control
 80047e0:	f44f 511c 	mov.w	r1, #9984	; 0x2700
 80047e4:	2060      	movs	r0, #96	; 0x60
 80047e6:	f7fc fa3d 	bl	8000c64 <LCD_WriteReg>
		//设置屏幕的点数以及扫描的起始行
		LCD_WriteReg(0x61, 0x0001); //Driver Output Control
 80047ea:	2101      	movs	r1, #1
 80047ec:	2061      	movs	r0, #97	; 0x61
 80047ee:	f7fc fa39 	bl	8000c64 <LCD_WriteReg>
		LCD_WriteReg(0x6A, 0x0000); //Vertical Scroll Control
 80047f2:	2100      	movs	r1, #0
 80047f4:	206a      	movs	r0, #106	; 0x6a
 80047f6:	f7fc fa35 	bl	8000c64 <LCD_WriteReg>
		LCD_WriteReg(0x80, 0x0000); //Display Position – Partial Display 1
 80047fa:	2100      	movs	r1, #0
 80047fc:	2080      	movs	r0, #128	; 0x80
 80047fe:	f7fc fa31 	bl	8000c64 <LCD_WriteReg>
		LCD_WriteReg(0x81, 0x0000); //RAM Address Start – Partial Display 1
 8004802:	2100      	movs	r1, #0
 8004804:	2081      	movs	r0, #129	; 0x81
 8004806:	f7fc fa2d 	bl	8000c64 <LCD_WriteReg>
		LCD_WriteReg(0x82, 0x0000); //RAM address End - Partial Display 1
 800480a:	2100      	movs	r1, #0
 800480c:	2082      	movs	r0, #130	; 0x82
 800480e:	f7fc fa29 	bl	8000c64 <LCD_WriteReg>
		LCD_WriteReg(0x83, 0x0000); //Display Position – Partial Display 2
 8004812:	2100      	movs	r1, #0
 8004814:	2083      	movs	r0, #131	; 0x83
 8004816:	f7fc fa25 	bl	8000c64 <LCD_WriteReg>
		LCD_WriteReg(0x84, 0x0000); //RAM Address Start – Partial Display 2
 800481a:	2100      	movs	r1, #0
 800481c:	2084      	movs	r0, #132	; 0x84
 800481e:	f7fc fa21 	bl	8000c64 <LCD_WriteReg>
		LCD_WriteReg(0x85, 0x0000); //RAM address End – Partail Display2
 8004822:	2100      	movs	r1, #0
 8004824:	2085      	movs	r0, #133	; 0x85
 8004826:	f7fc fa1d 	bl	8000c64 <LCD_WriteReg>
		LCD_WriteReg(0x90, 0x0013); //Frame Cycle Control
 800482a:	2113      	movs	r1, #19
 800482c:	2090      	movs	r0, #144	; 0x90
 800482e:	f7fc fa19 	bl	8000c64 <LCD_WriteReg>
		LCD_WriteReg(0x92, 0x0000);  //Panel Interface Control 2
 8004832:	2100      	movs	r1, #0
 8004834:	2092      	movs	r0, #146	; 0x92
 8004836:	f7fc fa15 	bl	8000c64 <LCD_WriteReg>
		LCD_WriteReg(0x93, 0x0003); //Panel Interface control 3
 800483a:	2103      	movs	r1, #3
 800483c:	2093      	movs	r0, #147	; 0x93
 800483e:	f7fc fa11 	bl	8000c64 <LCD_WriteReg>
		LCD_WriteReg(0x95, 0x0110);  //Frame Cycle Control
 8004842:	f44f 7188 	mov.w	r1, #272	; 0x110
 8004846:	2095      	movs	r0, #149	; 0x95
 8004848:	f7fc fa0c 	bl	8000c64 <LCD_WriteReg>
		LCD_WriteReg(0x07, 0x0173);
 800484c:	f240 1173 	movw	r1, #371	; 0x173
 8004850:	2007      	movs	r0, #7
 8004852:	f7fc fa07 	bl	8000c64 <LCD_WriteReg>
		HAL_Delay(50);
 8004856:	2032      	movs	r0, #50	; 0x32
 8004858:	f001 fbb8 	bl	8005fcc <HAL_Delay>
 800485c:	f001 b8f2 	b.w	8005a44 <LCD_Init+0x3e34>
	} else if (lcddev.id == 0x1505)  //OK
 8004860:	4b8d      	ldr	r3, [pc, #564]	; (8004a98 <LCD_Init+0x2e88>)
 8004862:	889b      	ldrh	r3, [r3, #4]
 8004864:	f241 5205 	movw	r2, #5381	; 0x1505
 8004868:	4293      	cmp	r3, r2
 800486a:	f040 8117 	bne.w	8004a9c <LCD_Init+0x2e8c>
			{
		// second release on 3/5  ,luminance is acceptable,water wave appear during camera preview
		LCD_WriteReg(0x0007, 0x0000);
 800486e:	2100      	movs	r1, #0
 8004870:	2007      	movs	r0, #7
 8004872:	f7fc f9f7 	bl	8000c64 <LCD_WriteReg>
		HAL_Delay(50);
 8004876:	2032      	movs	r0, #50	; 0x32
 8004878:	f001 fba8 	bl	8005fcc <HAL_Delay>
		LCD_WriteReg(0x0012, 0x011C);  //0x011A   why need to set several times?
 800487c:	f44f 718e 	mov.w	r1, #284	; 0x11c
 8004880:	2012      	movs	r0, #18
 8004882:	f7fc f9ef 	bl	8000c64 <LCD_WriteReg>
		LCD_WriteReg(0x00A4, 0x0001);  //NVM
 8004886:	2101      	movs	r1, #1
 8004888:	20a4      	movs	r0, #164	; 0xa4
 800488a:	f7fc f9eb 	bl	8000c64 <LCD_WriteReg>
		LCD_WriteReg(0x0008, 0x000F);
 800488e:	210f      	movs	r1, #15
 8004890:	2008      	movs	r0, #8
 8004892:	f7fc f9e7 	bl	8000c64 <LCD_WriteReg>
		LCD_WriteReg(0x000A, 0x0008);
 8004896:	2108      	movs	r1, #8
 8004898:	200a      	movs	r0, #10
 800489a:	f7fc f9e3 	bl	8000c64 <LCD_WriteReg>
		LCD_WriteReg(0x000D, 0x0008);
 800489e:	2108      	movs	r1, #8
 80048a0:	200d      	movs	r0, #13
 80048a2:	f7fc f9df 	bl	8000c64 <LCD_WriteReg>
		//伽马校正
		LCD_WriteReg(0x0030, 0x0707);
 80048a6:	f240 7107 	movw	r1, #1799	; 0x707
 80048aa:	2030      	movs	r0, #48	; 0x30
 80048ac:	f7fc f9da 	bl	8000c64 <LCD_WriteReg>
		LCD_WriteReg(0x0031, 0x0007); //0x0707
 80048b0:	2107      	movs	r1, #7
 80048b2:	2031      	movs	r0, #49	; 0x31
 80048b4:	f7fc f9d6 	bl	8000c64 <LCD_WriteReg>
		LCD_WriteReg(0x0032, 0x0603);
 80048b8:	f240 6103 	movw	r1, #1539	; 0x603
 80048bc:	2032      	movs	r0, #50	; 0x32
 80048be:	f7fc f9d1 	bl	8000c64 <LCD_WriteReg>
		LCD_WriteReg(0x0033, 0x0700);
 80048c2:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 80048c6:	2033      	movs	r0, #51	; 0x33
 80048c8:	f7fc f9cc 	bl	8000c64 <LCD_WriteReg>
		LCD_WriteReg(0x0034, 0x0202);
 80048cc:	f240 2102 	movw	r1, #514	; 0x202
 80048d0:	2034      	movs	r0, #52	; 0x34
 80048d2:	f7fc f9c7 	bl	8000c64 <LCD_WriteReg>
		LCD_WriteReg(0x0035, 0x0002); //?0x0606
 80048d6:	2102      	movs	r1, #2
 80048d8:	2035      	movs	r0, #53	; 0x35
 80048da:	f7fc f9c3 	bl	8000c64 <LCD_WriteReg>
		LCD_WriteReg(0x0036, 0x1F0F);
 80048de:	f641 710f 	movw	r1, #7951	; 0x1f0f
 80048e2:	2036      	movs	r0, #54	; 0x36
 80048e4:	f7fc f9be 	bl	8000c64 <LCD_WriteReg>
		LCD_WriteReg(0x0037, 0x0707); //0x0f0f  0x0105
 80048e8:	f240 7107 	movw	r1, #1799	; 0x707
 80048ec:	2037      	movs	r0, #55	; 0x37
 80048ee:	f7fc f9b9 	bl	8000c64 <LCD_WriteReg>
		LCD_WriteReg(0x0038, 0x0000);
 80048f2:	2100      	movs	r1, #0
 80048f4:	2038      	movs	r0, #56	; 0x38
 80048f6:	f7fc f9b5 	bl	8000c64 <LCD_WriteReg>
		LCD_WriteReg(0x0039, 0x0000);
 80048fa:	2100      	movs	r1, #0
 80048fc:	2039      	movs	r0, #57	; 0x39
 80048fe:	f7fc f9b1 	bl	8000c64 <LCD_WriteReg>
		LCD_WriteReg(0x003A, 0x0707);
 8004902:	f240 7107 	movw	r1, #1799	; 0x707
 8004906:	203a      	movs	r0, #58	; 0x3a
 8004908:	f7fc f9ac 	bl	8000c64 <LCD_WriteReg>
		LCD_WriteReg(0x003B, 0x0000); //0x0303
 800490c:	2100      	movs	r1, #0
 800490e:	203b      	movs	r0, #59	; 0x3b
 8004910:	f7fc f9a8 	bl	8000c64 <LCD_WriteReg>
		LCD_WriteReg(0x003C, 0x0007); //?0x0707
 8004914:	2107      	movs	r1, #7
 8004916:	203c      	movs	r0, #60	; 0x3c
 8004918:	f7fc f9a4 	bl	8000c64 <LCD_WriteReg>
		LCD_WriteReg(0x003D, 0x0000); //0x1313//0x1f08
 800491c:	2100      	movs	r1, #0
 800491e:	203d      	movs	r0, #61	; 0x3d
 8004920:	f7fc f9a0 	bl	8000c64 <LCD_WriteReg>
		HAL_Delay(50);
 8004924:	2032      	movs	r0, #50	; 0x32
 8004926:	f001 fb51 	bl	8005fcc <HAL_Delay>
		LCD_WriteReg(0x0007, 0x0001);
 800492a:	2101      	movs	r1, #1
 800492c:	2007      	movs	r0, #7
 800492e:	f7fc f999 	bl	8000c64 <LCD_WriteReg>
		LCD_WriteReg(0x0017, 0x0001); //开启电源
 8004932:	2101      	movs	r1, #1
 8004934:	2017      	movs	r0, #23
 8004936:	f7fc f995 	bl	8000c64 <LCD_WriteReg>
		HAL_Delay(50);
 800493a:	2032      	movs	r0, #50	; 0x32
 800493c:	f001 fb46 	bl	8005fcc <HAL_Delay>
		//电源配置
		LCD_WriteReg(0x0010, 0x17A0);
 8004940:	f44f 51bd 	mov.w	r1, #6048	; 0x17a0
 8004944:	2010      	movs	r0, #16
 8004946:	f7fc f98d 	bl	8000c64 <LCD_WriteReg>
		LCD_WriteReg(0x0011, 0x0217); //reference voltage VC[2:0]   Vciout = 1.00*Vcivl
 800494a:	f240 2117 	movw	r1, #535	; 0x217
 800494e:	2011      	movs	r0, #17
 8004950:	f7fc f988 	bl	8000c64 <LCD_WriteReg>
		LCD_WriteReg(0x0012, 0x011E); //0x011c  //Vreg1out = Vcilvl*1.80   is it the same as Vgama1out ?
 8004954:	f44f 718f 	mov.w	r1, #286	; 0x11e
 8004958:	2012      	movs	r0, #18
 800495a:	f7fc f983 	bl	8000c64 <LCD_WriteReg>
		LCD_WriteReg(0x0013, 0x0F00); //VDV[4:0]-->VCOM Amplitude VcomL = VcomH - Vcom Ampl
 800495e:	f44f 6170 	mov.w	r1, #3840	; 0xf00
 8004962:	2013      	movs	r0, #19
 8004964:	f7fc f97e 	bl	8000c64 <LCD_WriteReg>
		LCD_WriteReg(0x002A, 0x0000);
 8004968:	2100      	movs	r1, #0
 800496a:	202a      	movs	r0, #42	; 0x2a
 800496c:	f7fc f97a 	bl	8000c64 <LCD_WriteReg>
		LCD_WriteReg(0x0029, 0x000A); //0x0001F  Vcomh = VCM1[4:0]*Vreg1out    gate source voltage??
 8004970:	210a      	movs	r1, #10
 8004972:	2029      	movs	r0, #41	; 0x29
 8004974:	f7fc f976 	bl	8000c64 <LCD_WriteReg>
		LCD_WriteReg(0x0012, 0x013E); // 0x013C  power supply on
 8004978:	f44f 719f 	mov.w	r1, #318	; 0x13e
 800497c:	2012      	movs	r0, #18
 800497e:	f7fc f971 	bl	8000c64 <LCD_WriteReg>
		//Coordinates Control//
		LCD_WriteReg(0x0050, 0x0000);        //0x0e00
 8004982:	2100      	movs	r1, #0
 8004984:	2050      	movs	r0, #80	; 0x50
 8004986:	f7fc f96d 	bl	8000c64 <LCD_WriteReg>
		LCD_WriteReg(0x0051, 0x00EF);
 800498a:	21ef      	movs	r1, #239	; 0xef
 800498c:	2051      	movs	r0, #81	; 0x51
 800498e:	f7fc f969 	bl	8000c64 <LCD_WriteReg>
		LCD_WriteReg(0x0052, 0x0000);
 8004992:	2100      	movs	r1, #0
 8004994:	2052      	movs	r0, #82	; 0x52
 8004996:	f7fc f965 	bl	8000c64 <LCD_WriteReg>
		LCD_WriteReg(0x0053, 0x013F);
 800499a:	f240 113f 	movw	r1, #319	; 0x13f
 800499e:	2053      	movs	r0, #83	; 0x53
 80049a0:	f7fc f960 	bl	8000c64 <LCD_WriteReg>
		//Pannel Image Control//
		LCD_WriteReg(0x0060, 0x2700);
 80049a4:	f44f 511c 	mov.w	r1, #9984	; 0x2700
 80049a8:	2060      	movs	r0, #96	; 0x60
 80049aa:	f7fc f95b 	bl	8000c64 <LCD_WriteReg>
		LCD_WriteReg(0x0061, 0x0001);
 80049ae:	2101      	movs	r1, #1
 80049b0:	2061      	movs	r0, #97	; 0x61
 80049b2:	f7fc f957 	bl	8000c64 <LCD_WriteReg>
		LCD_WriteReg(0x006A, 0x0000);
 80049b6:	2100      	movs	r1, #0
 80049b8:	206a      	movs	r0, #106	; 0x6a
 80049ba:	f7fc f953 	bl	8000c64 <LCD_WriteReg>
		LCD_WriteReg(0x0080, 0x0000);
 80049be:	2100      	movs	r1, #0
 80049c0:	2080      	movs	r0, #128	; 0x80
 80049c2:	f7fc f94f 	bl	8000c64 <LCD_WriteReg>
		//Partial Image Control//
		LCD_WriteReg(0x0081, 0x0000);
 80049c6:	2100      	movs	r1, #0
 80049c8:	2081      	movs	r0, #129	; 0x81
 80049ca:	f7fc f94b 	bl	8000c64 <LCD_WriteReg>
		LCD_WriteReg(0x0082, 0x0000);
 80049ce:	2100      	movs	r1, #0
 80049d0:	2082      	movs	r0, #130	; 0x82
 80049d2:	f7fc f947 	bl	8000c64 <LCD_WriteReg>
		LCD_WriteReg(0x0083, 0x0000);
 80049d6:	2100      	movs	r1, #0
 80049d8:	2083      	movs	r0, #131	; 0x83
 80049da:	f7fc f943 	bl	8000c64 <LCD_WriteReg>
		LCD_WriteReg(0x0084, 0x0000);
 80049de:	2100      	movs	r1, #0
 80049e0:	2084      	movs	r0, #132	; 0x84
 80049e2:	f7fc f93f 	bl	8000c64 <LCD_WriteReg>
		LCD_WriteReg(0x0085, 0x0000);
 80049e6:	2100      	movs	r1, #0
 80049e8:	2085      	movs	r0, #133	; 0x85
 80049ea:	f7fc f93b 	bl	8000c64 <LCD_WriteReg>
		//Panel Interface Control//
		LCD_WriteReg(0x0090, 0x0013);        //0x0010 frenqucy
 80049ee:	2113      	movs	r1, #19
 80049f0:	2090      	movs	r0, #144	; 0x90
 80049f2:	f7fc f937 	bl	8000c64 <LCD_WriteReg>
		LCD_WriteReg(0x0092, 0x0300);
 80049f6:	f44f 7140 	mov.w	r1, #768	; 0x300
 80049fa:	2092      	movs	r0, #146	; 0x92
 80049fc:	f7fc f932 	bl	8000c64 <LCD_WriteReg>
		LCD_WriteReg(0x0093, 0x0005);
 8004a00:	2105      	movs	r1, #5
 8004a02:	2093      	movs	r0, #147	; 0x93
 8004a04:	f7fc f92e 	bl	8000c64 <LCD_WriteReg>
		LCD_WriteReg(0x0095, 0x0000);
 8004a08:	2100      	movs	r1, #0
 8004a0a:	2095      	movs	r0, #149	; 0x95
 8004a0c:	f7fc f92a 	bl	8000c64 <LCD_WriteReg>
		LCD_WriteReg(0x0097, 0x0000);
 8004a10:	2100      	movs	r1, #0
 8004a12:	2097      	movs	r0, #151	; 0x97
 8004a14:	f7fc f926 	bl	8000c64 <LCD_WriteReg>
		LCD_WriteReg(0x0098, 0x0000);
 8004a18:	2100      	movs	r1, #0
 8004a1a:	2098      	movs	r0, #152	; 0x98
 8004a1c:	f7fc f922 	bl	8000c64 <LCD_WriteReg>

		LCD_WriteReg(0x0001, 0x0100);
 8004a20:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004a24:	2001      	movs	r0, #1
 8004a26:	f7fc f91d 	bl	8000c64 <LCD_WriteReg>
		LCD_WriteReg(0x0002, 0x0700);
 8004a2a:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 8004a2e:	2002      	movs	r0, #2
 8004a30:	f7fc f918 	bl	8000c64 <LCD_WriteReg>
		LCD_WriteReg(0x0003, 0x1038);        //扫描方向 上->下  左->右
 8004a34:	f241 0138 	movw	r1, #4152	; 0x1038
 8004a38:	2003      	movs	r0, #3
 8004a3a:	f7fc f913 	bl	8000c64 <LCD_WriteReg>
		LCD_WriteReg(0x0004, 0x0000);
 8004a3e:	2100      	movs	r1, #0
 8004a40:	2004      	movs	r0, #4
 8004a42:	f7fc f90f 	bl	8000c64 <LCD_WriteReg>
		LCD_WriteReg(0x000C, 0x0000);
 8004a46:	2100      	movs	r1, #0
 8004a48:	200c      	movs	r0, #12
 8004a4a:	f7fc f90b 	bl	8000c64 <LCD_WriteReg>
		LCD_WriteReg(0x000F, 0x0000);
 8004a4e:	2100      	movs	r1, #0
 8004a50:	200f      	movs	r0, #15
 8004a52:	f7fc f907 	bl	8000c64 <LCD_WriteReg>
		LCD_WriteReg(0x0020, 0x0000);
 8004a56:	2100      	movs	r1, #0
 8004a58:	2020      	movs	r0, #32
 8004a5a:	f7fc f903 	bl	8000c64 <LCD_WriteReg>
		LCD_WriteReg(0x0021, 0x0000);
 8004a5e:	2100      	movs	r1, #0
 8004a60:	2021      	movs	r0, #33	; 0x21
 8004a62:	f7fc f8ff 	bl	8000c64 <LCD_WriteReg>
		LCD_WriteReg(0x0007, 0x0021);
 8004a66:	2121      	movs	r1, #33	; 0x21
 8004a68:	2007      	movs	r0, #7
 8004a6a:	f7fc f8fb 	bl	8000c64 <LCD_WriteReg>
		HAL_Delay(20);
 8004a6e:	2014      	movs	r0, #20
 8004a70:	f001 faac 	bl	8005fcc <HAL_Delay>
		LCD_WriteReg(0x0007, 0x0061);
 8004a74:	2161      	movs	r1, #97	; 0x61
 8004a76:	2007      	movs	r0, #7
 8004a78:	f7fc f8f4 	bl	8000c64 <LCD_WriteReg>
		HAL_Delay(20);
 8004a7c:	2014      	movs	r0, #20
 8004a7e:	f001 faa5 	bl	8005fcc <HAL_Delay>
		LCD_WriteReg(0x0007, 0x0173);
 8004a82:	f240 1173 	movw	r1, #371	; 0x173
 8004a86:	2007      	movs	r0, #7
 8004a88:	f7fc f8ec 	bl	8000c64 <LCD_WriteReg>
		HAL_Delay(20);
 8004a8c:	2014      	movs	r0, #20
 8004a8e:	f001 fa9d 	bl	8005fcc <HAL_Delay>
 8004a92:	f000 bfd7 	b.w	8005a44 <LCD_Init+0x3e34>
 8004a96:	bf00      	nop
 8004a98:	20000028 	.word	0x20000028
	} else if (lcddev.id == 0xB505) {
 8004a9c:	4bf0      	ldr	r3, [pc, #960]	; (8004e60 <LCD_Init+0x3250>)
 8004a9e:	889b      	ldrh	r3, [r3, #4]
 8004aa0:	f24b 5205 	movw	r2, #46341	; 0xb505
 8004aa4:	4293      	cmp	r3, r2
 8004aa6:	f040 8103 	bne.w	8004cb0 <LCD_Init+0x30a0>
		LCD_WriteReg(0x0000, 0x0000);
 8004aaa:	2100      	movs	r1, #0
 8004aac:	2000      	movs	r0, #0
 8004aae:	f7fc f8d9 	bl	8000c64 <LCD_WriteReg>
		LCD_WriteReg(0x0000, 0x0000);
 8004ab2:	2100      	movs	r1, #0
 8004ab4:	2000      	movs	r0, #0
 8004ab6:	f7fc f8d5 	bl	8000c64 <LCD_WriteReg>
		LCD_WriteReg(0x0000, 0x0000);
 8004aba:	2100      	movs	r1, #0
 8004abc:	2000      	movs	r0, #0
 8004abe:	f7fc f8d1 	bl	8000c64 <LCD_WriteReg>
		LCD_WriteReg(0x0000, 0x0000);
 8004ac2:	2100      	movs	r1, #0
 8004ac4:	2000      	movs	r0, #0
 8004ac6:	f7fc f8cd 	bl	8000c64 <LCD_WriteReg>

		LCD_WriteReg(0x00a4, 0x0001);
 8004aca:	2101      	movs	r1, #1
 8004acc:	20a4      	movs	r0, #164	; 0xa4
 8004ace:	f7fc f8c9 	bl	8000c64 <LCD_WriteReg>
		HAL_Delay(20);
 8004ad2:	2014      	movs	r0, #20
 8004ad4:	f001 fa7a 	bl	8005fcc <HAL_Delay>
		LCD_WriteReg(0x0060, 0x2700);
 8004ad8:	f44f 511c 	mov.w	r1, #9984	; 0x2700
 8004adc:	2060      	movs	r0, #96	; 0x60
 8004ade:	f7fc f8c1 	bl	8000c64 <LCD_WriteReg>
		LCD_WriteReg(0x0008, 0x0202);
 8004ae2:	f240 2102 	movw	r1, #514	; 0x202
 8004ae6:	2008      	movs	r0, #8
 8004ae8:	f7fc f8bc 	bl	8000c64 <LCD_WriteReg>

		LCD_WriteReg(0x0030, 0x0214);
 8004aec:	f44f 7105 	mov.w	r1, #532	; 0x214
 8004af0:	2030      	movs	r0, #48	; 0x30
 8004af2:	f7fc f8b7 	bl	8000c64 <LCD_WriteReg>
		LCD_WriteReg(0x0031, 0x3715);
 8004af6:	f243 7115 	movw	r1, #14101	; 0x3715
 8004afa:	2031      	movs	r0, #49	; 0x31
 8004afc:	f7fc f8b2 	bl	8000c64 <LCD_WriteReg>
		LCD_WriteReg(0x0032, 0x0604);
 8004b00:	f240 6104 	movw	r1, #1540	; 0x604
 8004b04:	2032      	movs	r0, #50	; 0x32
 8004b06:	f7fc f8ad 	bl	8000c64 <LCD_WriteReg>
		LCD_WriteReg(0x0033, 0x0e16);
 8004b0a:	f640 6116 	movw	r1, #3606	; 0xe16
 8004b0e:	2033      	movs	r0, #51	; 0x33
 8004b10:	f7fc f8a8 	bl	8000c64 <LCD_WriteReg>
		LCD_WriteReg(0x0034, 0x2211);
 8004b14:	f242 2111 	movw	r1, #8721	; 0x2211
 8004b18:	2034      	movs	r0, #52	; 0x34
 8004b1a:	f7fc f8a3 	bl	8000c64 <LCD_WriteReg>
		LCD_WriteReg(0x0035, 0x1500);
 8004b1e:	f44f 51a8 	mov.w	r1, #5376	; 0x1500
 8004b22:	2035      	movs	r0, #53	; 0x35
 8004b24:	f7fc f89e 	bl	8000c64 <LCD_WriteReg>
		LCD_WriteReg(0x0036, 0x8507);
 8004b28:	f248 5107 	movw	r1, #34055	; 0x8507
 8004b2c:	2036      	movs	r0, #54	; 0x36
 8004b2e:	f7fc f899 	bl	8000c64 <LCD_WriteReg>
		LCD_WriteReg(0x0037, 0x1407);
 8004b32:	f241 4107 	movw	r1, #5127	; 0x1407
 8004b36:	2037      	movs	r0, #55	; 0x37
 8004b38:	f7fc f894 	bl	8000c64 <LCD_WriteReg>
		LCD_WriteReg(0x0038, 0x1403);
 8004b3c:	f241 4103 	movw	r1, #5123	; 0x1403
 8004b40:	2038      	movs	r0, #56	; 0x38
 8004b42:	f7fc f88f 	bl	8000c64 <LCD_WriteReg>
		LCD_WriteReg(0x0039, 0x0020);
 8004b46:	2120      	movs	r1, #32
 8004b48:	2039      	movs	r0, #57	; 0x39
 8004b4a:	f7fc f88b 	bl	8000c64 <LCD_WriteReg>

		LCD_WriteReg(0x0090, 0x001a);
 8004b4e:	211a      	movs	r1, #26
 8004b50:	2090      	movs	r0, #144	; 0x90
 8004b52:	f7fc f887 	bl	8000c64 <LCD_WriteReg>
		LCD_WriteReg(0x0010, 0x0000);
 8004b56:	2100      	movs	r1, #0
 8004b58:	2010      	movs	r0, #16
 8004b5a:	f7fc f883 	bl	8000c64 <LCD_WriteReg>
		LCD_WriteReg(0x0011, 0x0007);
 8004b5e:	2107      	movs	r1, #7
 8004b60:	2011      	movs	r0, #17
 8004b62:	f7fc f87f 	bl	8000c64 <LCD_WriteReg>
		LCD_WriteReg(0x0012, 0x0000);
 8004b66:	2100      	movs	r1, #0
 8004b68:	2012      	movs	r0, #18
 8004b6a:	f7fc f87b 	bl	8000c64 <LCD_WriteReg>
		LCD_WriteReg(0x0013, 0x0000);
 8004b6e:	2100      	movs	r1, #0
 8004b70:	2013      	movs	r0, #19
 8004b72:	f7fc f877 	bl	8000c64 <LCD_WriteReg>
		HAL_Delay(20);
 8004b76:	2014      	movs	r0, #20
 8004b78:	f001 fa28 	bl	8005fcc <HAL_Delay>

		LCD_WriteReg(0x0010, 0x0730);
 8004b7c:	f44f 61e6 	mov.w	r1, #1840	; 0x730
 8004b80:	2010      	movs	r0, #16
 8004b82:	f7fc f86f 	bl	8000c64 <LCD_WriteReg>
		LCD_WriteReg(0x0011, 0x0137);
 8004b86:	f240 1137 	movw	r1, #311	; 0x137
 8004b8a:	2011      	movs	r0, #17
 8004b8c:	f7fc f86a 	bl	8000c64 <LCD_WriteReg>
		HAL_Delay(20);
 8004b90:	2014      	movs	r0, #20
 8004b92:	f001 fa1b 	bl	8005fcc <HAL_Delay>

		LCD_WriteReg(0x0012, 0x01b8);
 8004b96:	f44f 71dc 	mov.w	r1, #440	; 0x1b8
 8004b9a:	2012      	movs	r0, #18
 8004b9c:	f7fc f862 	bl	8000c64 <LCD_WriteReg>
		HAL_Delay(20);
 8004ba0:	2014      	movs	r0, #20
 8004ba2:	f001 fa13 	bl	8005fcc <HAL_Delay>

		LCD_WriteReg(0x0013, 0x0f00);
 8004ba6:	f44f 6170 	mov.w	r1, #3840	; 0xf00
 8004baa:	2013      	movs	r0, #19
 8004bac:	f7fc f85a 	bl	8000c64 <LCD_WriteReg>
		LCD_WriteReg(0x002a, 0x0080);
 8004bb0:	2180      	movs	r1, #128	; 0x80
 8004bb2:	202a      	movs	r0, #42	; 0x2a
 8004bb4:	f7fc f856 	bl	8000c64 <LCD_WriteReg>
		LCD_WriteReg(0x0029, 0x0048);
 8004bb8:	2148      	movs	r1, #72	; 0x48
 8004bba:	2029      	movs	r0, #41	; 0x29
 8004bbc:	f7fc f852 	bl	8000c64 <LCD_WriteReg>
		HAL_Delay(20);
 8004bc0:	2014      	movs	r0, #20
 8004bc2:	f001 fa03 	bl	8005fcc <HAL_Delay>

		LCD_WriteReg(0x0001, 0x0100);
 8004bc6:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004bca:	2001      	movs	r0, #1
 8004bcc:	f7fc f84a 	bl	8000c64 <LCD_WriteReg>
		LCD_WriteReg(0x0002, 0x0700);
 8004bd0:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 8004bd4:	2002      	movs	r0, #2
 8004bd6:	f7fc f845 	bl	8000c64 <LCD_WriteReg>
		LCD_WriteReg(0x0003, 0x1038);        //扫描方向 上->下  左->右
 8004bda:	f241 0138 	movw	r1, #4152	; 0x1038
 8004bde:	2003      	movs	r0, #3
 8004be0:	f7fc f840 	bl	8000c64 <LCD_WriteReg>
		LCD_WriteReg(0x0008, 0x0202);
 8004be4:	f240 2102 	movw	r1, #514	; 0x202
 8004be8:	2008      	movs	r0, #8
 8004bea:	f7fc f83b 	bl	8000c64 <LCD_WriteReg>
		LCD_WriteReg(0x000a, 0x0000);
 8004bee:	2100      	movs	r1, #0
 8004bf0:	200a      	movs	r0, #10
 8004bf2:	f7fc f837 	bl	8000c64 <LCD_WriteReg>
		LCD_WriteReg(0x000c, 0x0000);
 8004bf6:	2100      	movs	r1, #0
 8004bf8:	200c      	movs	r0, #12
 8004bfa:	f7fc f833 	bl	8000c64 <LCD_WriteReg>
		LCD_WriteReg(0x000d, 0x0000);
 8004bfe:	2100      	movs	r1, #0
 8004c00:	200d      	movs	r0, #13
 8004c02:	f7fc f82f 	bl	8000c64 <LCD_WriteReg>
		LCD_WriteReg(0x000e, 0x0030);
 8004c06:	2130      	movs	r1, #48	; 0x30
 8004c08:	200e      	movs	r0, #14
 8004c0a:	f7fc f82b 	bl	8000c64 <LCD_WriteReg>
		LCD_WriteReg(0x0050, 0x0000);
 8004c0e:	2100      	movs	r1, #0
 8004c10:	2050      	movs	r0, #80	; 0x50
 8004c12:	f7fc f827 	bl	8000c64 <LCD_WriteReg>
		LCD_WriteReg(0x0051, 0x00ef);
 8004c16:	21ef      	movs	r1, #239	; 0xef
 8004c18:	2051      	movs	r0, #81	; 0x51
 8004c1a:	f7fc f823 	bl	8000c64 <LCD_WriteReg>
		LCD_WriteReg(0x0052, 0x0000);
 8004c1e:	2100      	movs	r1, #0
 8004c20:	2052      	movs	r0, #82	; 0x52
 8004c22:	f7fc f81f 	bl	8000c64 <LCD_WriteReg>
		LCD_WriteReg(0x0053, 0x013f);
 8004c26:	f240 113f 	movw	r1, #319	; 0x13f
 8004c2a:	2053      	movs	r0, #83	; 0x53
 8004c2c:	f7fc f81a 	bl	8000c64 <LCD_WriteReg>
		LCD_WriteReg(0x0060, 0x2700);
 8004c30:	f44f 511c 	mov.w	r1, #9984	; 0x2700
 8004c34:	2060      	movs	r0, #96	; 0x60
 8004c36:	f7fc f815 	bl	8000c64 <LCD_WriteReg>
		LCD_WriteReg(0x0061, 0x0001);
 8004c3a:	2101      	movs	r1, #1
 8004c3c:	2061      	movs	r0, #97	; 0x61
 8004c3e:	f7fc f811 	bl	8000c64 <LCD_WriteReg>
		LCD_WriteReg(0x006a, 0x0000);
 8004c42:	2100      	movs	r1, #0
 8004c44:	206a      	movs	r0, #106	; 0x6a
 8004c46:	f7fc f80d 	bl	8000c64 <LCD_WriteReg>
		//LCD_WriteReg(0x0080,0x0000);
		//LCD_WriteReg(0x0081,0x0000);
		LCD_WriteReg(0x0090, 0X0011);
 8004c4a:	2111      	movs	r1, #17
 8004c4c:	2090      	movs	r0, #144	; 0x90
 8004c4e:	f7fc f809 	bl	8000c64 <LCD_WriteReg>
		LCD_WriteReg(0x0092, 0x0600);
 8004c52:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8004c56:	2092      	movs	r0, #146	; 0x92
 8004c58:	f7fc f804 	bl	8000c64 <LCD_WriteReg>
		LCD_WriteReg(0x0093, 0x0402);
 8004c5c:	f240 4102 	movw	r1, #1026	; 0x402
 8004c60:	2093      	movs	r0, #147	; 0x93
 8004c62:	f7fb ffff 	bl	8000c64 <LCD_WriteReg>
		LCD_WriteReg(0x0094, 0x0002);
 8004c66:	2102      	movs	r1, #2
 8004c68:	2094      	movs	r0, #148	; 0x94
 8004c6a:	f7fb fffb 	bl	8000c64 <LCD_WriteReg>
		HAL_Delay(20);
 8004c6e:	2014      	movs	r0, #20
 8004c70:	f001 f9ac 	bl	8005fcc <HAL_Delay>

		LCD_WriteReg(0x0007, 0x0001);
 8004c74:	2101      	movs	r1, #1
 8004c76:	2007      	movs	r0, #7
 8004c78:	f7fb fff4 	bl	8000c64 <LCD_WriteReg>
		HAL_Delay(20);
 8004c7c:	2014      	movs	r0, #20
 8004c7e:	f001 f9a5 	bl	8005fcc <HAL_Delay>
		LCD_WriteReg(0x0007, 0x0061);
 8004c82:	2161      	movs	r1, #97	; 0x61
 8004c84:	2007      	movs	r0, #7
 8004c86:	f7fb ffed 	bl	8000c64 <LCD_WriteReg>
		LCD_WriteReg(0x0007, 0x0173);
 8004c8a:	f240 1173 	movw	r1, #371	; 0x173
 8004c8e:	2007      	movs	r0, #7
 8004c90:	f7fb ffe8 	bl	8000c64 <LCD_WriteReg>

		LCD_WriteReg(0x0020, 0x0000);
 8004c94:	2100      	movs	r1, #0
 8004c96:	2020      	movs	r0, #32
 8004c98:	f7fb ffe4 	bl	8000c64 <LCD_WriteReg>
		LCD_WriteReg(0x0021, 0x0000);
 8004c9c:	2100      	movs	r1, #0
 8004c9e:	2021      	movs	r0, #33	; 0x21
 8004ca0:	f7fb ffe0 	bl	8000c64 <LCD_WriteReg>
		LCD_WriteReg(0x00, 0x22);
 8004ca4:	2122      	movs	r1, #34	; 0x22
 8004ca6:	2000      	movs	r0, #0
 8004ca8:	f7fb ffdc 	bl	8000c64 <LCD_WriteReg>
 8004cac:	f000 beca 	b.w	8005a44 <LCD_Init+0x3e34>
	} else if (lcddev.id == 0xC505) {
 8004cb0:	4b6b      	ldr	r3, [pc, #428]	; (8004e60 <LCD_Init+0x3250>)
 8004cb2:	889b      	ldrh	r3, [r3, #4]
 8004cb4:	f24c 5205 	movw	r2, #50437	; 0xc505
 8004cb8:	4293      	cmp	r3, r2
 8004cba:	f040 80d3 	bne.w	8004e64 <LCD_Init+0x3254>
		LCD_WriteReg(0x0000, 0x0000);
 8004cbe:	2100      	movs	r1, #0
 8004cc0:	2000      	movs	r0, #0
 8004cc2:	f7fb ffcf 	bl	8000c64 <LCD_WriteReg>
		LCD_WriteReg(0x0000, 0x0000);
 8004cc6:	2100      	movs	r1, #0
 8004cc8:	2000      	movs	r0, #0
 8004cca:	f7fb ffcb 	bl	8000c64 <LCD_WriteReg>
		HAL_Delay(20);
 8004cce:	2014      	movs	r0, #20
 8004cd0:	f001 f97c 	bl	8005fcc <HAL_Delay>
		LCD_WriteReg(0x0000, 0x0000);
 8004cd4:	2100      	movs	r1, #0
 8004cd6:	2000      	movs	r0, #0
 8004cd8:	f7fb ffc4 	bl	8000c64 <LCD_WriteReg>
		LCD_WriteReg(0x0000, 0x0000);
 8004cdc:	2100      	movs	r1, #0
 8004cde:	2000      	movs	r0, #0
 8004ce0:	f7fb ffc0 	bl	8000c64 <LCD_WriteReg>
		LCD_WriteReg(0x0000, 0x0000);
 8004ce4:	2100      	movs	r1, #0
 8004ce6:	2000      	movs	r0, #0
 8004ce8:	f7fb ffbc 	bl	8000c64 <LCD_WriteReg>
		LCD_WriteReg(0x0000, 0x0000);
 8004cec:	2100      	movs	r1, #0
 8004cee:	2000      	movs	r0, #0
 8004cf0:	f7fb ffb8 	bl	8000c64 <LCD_WriteReg>
		LCD_WriteReg(0x00a4, 0x0001);
 8004cf4:	2101      	movs	r1, #1
 8004cf6:	20a4      	movs	r0, #164	; 0xa4
 8004cf8:	f7fb ffb4 	bl	8000c64 <LCD_WriteReg>
		HAL_Delay(20);
 8004cfc:	2014      	movs	r0, #20
 8004cfe:	f001 f965 	bl	8005fcc <HAL_Delay>
		LCD_WriteReg(0x0060, 0x2700);
 8004d02:	f44f 511c 	mov.w	r1, #9984	; 0x2700
 8004d06:	2060      	movs	r0, #96	; 0x60
 8004d08:	f7fb ffac 	bl	8000c64 <LCD_WriteReg>
		LCD_WriteReg(0x0008, 0x0806);
 8004d0c:	f640 0106 	movw	r1, #2054	; 0x806
 8004d10:	2008      	movs	r0, #8
 8004d12:	f7fb ffa7 	bl	8000c64 <LCD_WriteReg>

		LCD_WriteReg(0x0030, 0x0703);		//gamma setting
 8004d16:	f240 7103 	movw	r1, #1795	; 0x703
 8004d1a:	2030      	movs	r0, #48	; 0x30
 8004d1c:	f7fb ffa2 	bl	8000c64 <LCD_WriteReg>
		LCD_WriteReg(0x0031, 0x0001);
 8004d20:	2101      	movs	r1, #1
 8004d22:	2031      	movs	r0, #49	; 0x31
 8004d24:	f7fb ff9e 	bl	8000c64 <LCD_WriteReg>
		LCD_WriteReg(0x0032, 0x0004);
 8004d28:	2104      	movs	r1, #4
 8004d2a:	2032      	movs	r0, #50	; 0x32
 8004d2c:	f7fb ff9a 	bl	8000c64 <LCD_WriteReg>
		LCD_WriteReg(0x0033, 0x0102);
 8004d30:	f44f 7181 	mov.w	r1, #258	; 0x102
 8004d34:	2033      	movs	r0, #51	; 0x33
 8004d36:	f7fb ff95 	bl	8000c64 <LCD_WriteReg>
		LCD_WriteReg(0x0034, 0x0300);
 8004d3a:	f44f 7140 	mov.w	r1, #768	; 0x300
 8004d3e:	2034      	movs	r0, #52	; 0x34
 8004d40:	f7fb ff90 	bl	8000c64 <LCD_WriteReg>
		LCD_WriteReg(0x0035, 0x0103);
 8004d44:	f240 1103 	movw	r1, #259	; 0x103
 8004d48:	2035      	movs	r0, #53	; 0x35
 8004d4a:	f7fb ff8b 	bl	8000c64 <LCD_WriteReg>
		LCD_WriteReg(0x0036, 0x001F);
 8004d4e:	211f      	movs	r1, #31
 8004d50:	2036      	movs	r0, #54	; 0x36
 8004d52:	f7fb ff87 	bl	8000c64 <LCD_WriteReg>
		LCD_WriteReg(0x0037, 0x0703);
 8004d56:	f240 7103 	movw	r1, #1795	; 0x703
 8004d5a:	2037      	movs	r0, #55	; 0x37
 8004d5c:	f7fb ff82 	bl	8000c64 <LCD_WriteReg>
		LCD_WriteReg(0x0038, 0x0001);
 8004d60:	2101      	movs	r1, #1
 8004d62:	2038      	movs	r0, #56	; 0x38
 8004d64:	f7fb ff7e 	bl	8000c64 <LCD_WriteReg>
		LCD_WriteReg(0x0039, 0x0004);
 8004d68:	2104      	movs	r1, #4
 8004d6a:	2039      	movs	r0, #57	; 0x39
 8004d6c:	f7fb ff7a 	bl	8000c64 <LCD_WriteReg>

		LCD_WriteReg(0x0090, 0x0015);	//80Hz
 8004d70:	2115      	movs	r1, #21
 8004d72:	2090      	movs	r0, #144	; 0x90
 8004d74:	f7fb ff76 	bl	8000c64 <LCD_WriteReg>
		LCD_WriteReg(0x0010, 0X0410);	//BT,AP
 8004d78:	f44f 6182 	mov.w	r1, #1040	; 0x410
 8004d7c:	2010      	movs	r0, #16
 8004d7e:	f7fb ff71 	bl	8000c64 <LCD_WriteReg>
		LCD_WriteReg(0x0011, 0x0247);	//DC1,DC0,VC
 8004d82:	f240 2147 	movw	r1, #583	; 0x247
 8004d86:	2011      	movs	r0, #17
 8004d88:	f7fb ff6c 	bl	8000c64 <LCD_WriteReg>
		LCD_WriteReg(0x0012, 0x01BC);
 8004d8c:	f44f 71de 	mov.w	r1, #444	; 0x1bc
 8004d90:	2012      	movs	r0, #18
 8004d92:	f7fb ff67 	bl	8000c64 <LCD_WriteReg>
		LCD_WriteReg(0x0013, 0x0e00);
 8004d96:	f44f 6160 	mov.w	r1, #3584	; 0xe00
 8004d9a:	2013      	movs	r0, #19
 8004d9c:	f7fb ff62 	bl	8000c64 <LCD_WriteReg>
		HAL_Delay(120);
 8004da0:	2078      	movs	r0, #120	; 0x78
 8004da2:	f001 f913 	bl	8005fcc <HAL_Delay>
		LCD_WriteReg(0x0001, 0x0100);
 8004da6:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004daa:	2001      	movs	r0, #1
 8004dac:	f7fb ff5a 	bl	8000c64 <LCD_WriteReg>
		LCD_WriteReg(0x0002, 0x0200);
 8004db0:	f44f 7100 	mov.w	r1, #512	; 0x200
 8004db4:	2002      	movs	r0, #2
 8004db6:	f7fb ff55 	bl	8000c64 <LCD_WriteReg>
		LCD_WriteReg(0x0003, 0x1030);
 8004dba:	f241 0130 	movw	r1, #4144	; 0x1030
 8004dbe:	2003      	movs	r0, #3
 8004dc0:	f7fb ff50 	bl	8000c64 <LCD_WriteReg>

		LCD_WriteReg(0x000A, 0x0008);
 8004dc4:	2108      	movs	r1, #8
 8004dc6:	200a      	movs	r0, #10
 8004dc8:	f7fb ff4c 	bl	8000c64 <LCD_WriteReg>
		LCD_WriteReg(0x000C, 0x0000);
 8004dcc:	2100      	movs	r1, #0
 8004dce:	200c      	movs	r0, #12
 8004dd0:	f7fb ff48 	bl	8000c64 <LCD_WriteReg>

		LCD_WriteReg(0x000E, 0x0020);
 8004dd4:	2120      	movs	r1, #32
 8004dd6:	200e      	movs	r0, #14
 8004dd8:	f7fb ff44 	bl	8000c64 <LCD_WriteReg>
		LCD_WriteReg(0x000F, 0x0000);
 8004ddc:	2100      	movs	r1, #0
 8004dde:	200f      	movs	r0, #15
 8004de0:	f7fb ff40 	bl	8000c64 <LCD_WriteReg>
		LCD_WriteReg(0x0020, 0x0000);	//H Start
 8004de4:	2100      	movs	r1, #0
 8004de6:	2020      	movs	r0, #32
 8004de8:	f7fb ff3c 	bl	8000c64 <LCD_WriteReg>
		LCD_WriteReg(0x0021, 0x0000);	//V Start
 8004dec:	2100      	movs	r1, #0
 8004dee:	2021      	movs	r0, #33	; 0x21
 8004df0:	f7fb ff38 	bl	8000c64 <LCD_WriteReg>
		LCD_WriteReg(0x002A, 0x003D);	//vcom2
 8004df4:	213d      	movs	r1, #61	; 0x3d
 8004df6:	202a      	movs	r0, #42	; 0x2a
 8004df8:	f7fb ff34 	bl	8000c64 <LCD_WriteReg>
		HAL_Delay(20);
 8004dfc:	2014      	movs	r0, #20
 8004dfe:	f001 f8e5 	bl	8005fcc <HAL_Delay>
		LCD_WriteReg(0x0029, 0x002d);
 8004e02:	212d      	movs	r1, #45	; 0x2d
 8004e04:	2029      	movs	r0, #41	; 0x29
 8004e06:	f7fb ff2d 	bl	8000c64 <LCD_WriteReg>
		LCD_WriteReg(0x0050, 0x0000);
 8004e0a:	2100      	movs	r1, #0
 8004e0c:	2050      	movs	r0, #80	; 0x50
 8004e0e:	f7fb ff29 	bl	8000c64 <LCD_WriteReg>
		LCD_WriteReg(0x0051, 0xD0EF);
 8004e12:	f24d 01ef 	movw	r1, #53487	; 0xd0ef
 8004e16:	2051      	movs	r0, #81	; 0x51
 8004e18:	f7fb ff24 	bl	8000c64 <LCD_WriteReg>
		LCD_WriteReg(0x0052, 0x0000);
 8004e1c:	2100      	movs	r1, #0
 8004e1e:	2052      	movs	r0, #82	; 0x52
 8004e20:	f7fb ff20 	bl	8000c64 <LCD_WriteReg>
		LCD_WriteReg(0x0053, 0x013F);
 8004e24:	f240 113f 	movw	r1, #319	; 0x13f
 8004e28:	2053      	movs	r0, #83	; 0x53
 8004e2a:	f7fb ff1b 	bl	8000c64 <LCD_WriteReg>
		LCD_WriteReg(0x0061, 0x0000);
 8004e2e:	2100      	movs	r1, #0
 8004e30:	2061      	movs	r0, #97	; 0x61
 8004e32:	f7fb ff17 	bl	8000c64 <LCD_WriteReg>
		LCD_WriteReg(0x006A, 0x0000);
 8004e36:	2100      	movs	r1, #0
 8004e38:	206a      	movs	r0, #106	; 0x6a
 8004e3a:	f7fb ff13 	bl	8000c64 <LCD_WriteReg>
		LCD_WriteReg(0x0092, 0x0300);
 8004e3e:	f44f 7140 	mov.w	r1, #768	; 0x300
 8004e42:	2092      	movs	r0, #146	; 0x92
 8004e44:	f7fb ff0e 	bl	8000c64 <LCD_WriteReg>

		LCD_WriteReg(0x0093, 0x0005);
 8004e48:	2105      	movs	r1, #5
 8004e4a:	2093      	movs	r0, #147	; 0x93
 8004e4c:	f7fb ff0a 	bl	8000c64 <LCD_WriteReg>
		LCD_WriteReg(0x0007, 0x0100);
 8004e50:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004e54:	2007      	movs	r0, #7
 8004e56:	f7fb ff05 	bl	8000c64 <LCD_WriteReg>
 8004e5a:	f000 bdf3 	b.w	8005a44 <LCD_Init+0x3e34>
 8004e5e:	bf00      	nop
 8004e60:	20000028 	.word	0x20000028
	} else if (lcddev.id == 0x8989)	//OK |/|/|
 8004e64:	4bc2      	ldr	r3, [pc, #776]	; (8005170 <LCD_Init+0x3560>)
 8004e66:	889b      	ldrh	r3, [r3, #4]
 8004e68:	f648 1289 	movw	r2, #35209	; 0x8989
 8004e6c:	4293      	cmp	r3, r2
 8004e6e:	f040 80bc 	bne.w	8004fea <LCD_Init+0x33da>
			{
		LCD_WriteReg(0x0000, 0x0001);	//打开晶振
 8004e72:	2101      	movs	r1, #1
 8004e74:	2000      	movs	r0, #0
 8004e76:	f7fb fef5 	bl	8000c64 <LCD_WriteReg>
		LCD_WriteReg(0x0003, 0xA8A4);	//0xA8A4
 8004e7a:	f64a 01a4 	movw	r1, #43172	; 0xa8a4
 8004e7e:	2003      	movs	r0, #3
 8004e80:	f7fb fef0 	bl	8000c64 <LCD_WriteReg>
		LCD_WriteReg(0x000C, 0x0000);
 8004e84:	2100      	movs	r1, #0
 8004e86:	200c      	movs	r0, #12
 8004e88:	f7fb feec 	bl	8000c64 <LCD_WriteReg>
		LCD_WriteReg(0x000D, 0x080C);
 8004e8c:	f640 010c 	movw	r1, #2060	; 0x80c
 8004e90:	200d      	movs	r0, #13
 8004e92:	f7fb fee7 	bl	8000c64 <LCD_WriteReg>
		LCD_WriteReg(0x000E, 0x2B00);
 8004e96:	f44f 512c 	mov.w	r1, #11008	; 0x2b00
 8004e9a:	200e      	movs	r0, #14
 8004e9c:	f7fb fee2 	bl	8000c64 <LCD_WriteReg>
		LCD_WriteReg(0x001E, 0x00B0);
 8004ea0:	21b0      	movs	r1, #176	; 0xb0
 8004ea2:	201e      	movs	r0, #30
 8004ea4:	f7fb fede 	bl	8000c64 <LCD_WriteReg>
		LCD_WriteReg(0x0001, 0x2B3F);	//驱动输出控制320*240  0x6B3F
 8004ea8:	f642 313f 	movw	r1, #11071	; 0x2b3f
 8004eac:	2001      	movs	r0, #1
 8004eae:	f7fb fed9 	bl	8000c64 <LCD_WriteReg>
		LCD_WriteReg(0x0002, 0x0600);
 8004eb2:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8004eb6:	2002      	movs	r0, #2
 8004eb8:	f7fb fed4 	bl	8000c64 <LCD_WriteReg>
		LCD_WriteReg(0x0010, 0x0000);
 8004ebc:	2100      	movs	r1, #0
 8004ebe:	2010      	movs	r0, #16
 8004ec0:	f7fb fed0 	bl	8000c64 <LCD_WriteReg>
		LCD_WriteReg(0x0011, 0x6078); //定义数据格式  16位色 		横屏 0x6058
 8004ec4:	f246 0178 	movw	r1, #24696	; 0x6078
 8004ec8:	2011      	movs	r0, #17
 8004eca:	f7fb fecb 	bl	8000c64 <LCD_WriteReg>
		LCD_WriteReg(0x0005, 0x0000);
 8004ece:	2100      	movs	r1, #0
 8004ed0:	2005      	movs	r0, #5
 8004ed2:	f7fb fec7 	bl	8000c64 <LCD_WriteReg>
		LCD_WriteReg(0x0006, 0x0000);
 8004ed6:	2100      	movs	r1, #0
 8004ed8:	2006      	movs	r0, #6
 8004eda:	f7fb fec3 	bl	8000c64 <LCD_WriteReg>
		LCD_WriteReg(0x0016, 0xEF1C);
 8004ede:	f64e 711c 	movw	r1, #61212	; 0xef1c
 8004ee2:	2016      	movs	r0, #22
 8004ee4:	f7fb febe 	bl	8000c64 <LCD_WriteReg>
		LCD_WriteReg(0x0017, 0x0003);
 8004ee8:	2103      	movs	r1, #3
 8004eea:	2017      	movs	r0, #23
 8004eec:	f7fb feba 	bl	8000c64 <LCD_WriteReg>
		LCD_WriteReg(0x0007, 0x0233); //0x0233
 8004ef0:	f240 2133 	movw	r1, #563	; 0x233
 8004ef4:	2007      	movs	r0, #7
 8004ef6:	f7fb feb5 	bl	8000c64 <LCD_WriteReg>
		LCD_WriteReg(0x000B, 0x0000);
 8004efa:	2100      	movs	r1, #0
 8004efc:	200b      	movs	r0, #11
 8004efe:	f7fb feb1 	bl	8000c64 <LCD_WriteReg>
		LCD_WriteReg(0x000F, 0x0000); //扫描开始地址
 8004f02:	2100      	movs	r1, #0
 8004f04:	200f      	movs	r0, #15
 8004f06:	f7fb fead 	bl	8000c64 <LCD_WriteReg>
		LCD_WriteReg(0x0041, 0x0000);
 8004f0a:	2100      	movs	r1, #0
 8004f0c:	2041      	movs	r0, #65	; 0x41
 8004f0e:	f7fb fea9 	bl	8000c64 <LCD_WriteReg>
		LCD_WriteReg(0x0042, 0x0000);
 8004f12:	2100      	movs	r1, #0
 8004f14:	2042      	movs	r0, #66	; 0x42
 8004f16:	f7fb fea5 	bl	8000c64 <LCD_WriteReg>
		LCD_WriteReg(0x0048, 0x0000);
 8004f1a:	2100      	movs	r1, #0
 8004f1c:	2048      	movs	r0, #72	; 0x48
 8004f1e:	f7fb fea1 	bl	8000c64 <LCD_WriteReg>
		LCD_WriteReg(0x0049, 0x013F);
 8004f22:	f240 113f 	movw	r1, #319	; 0x13f
 8004f26:	2049      	movs	r0, #73	; 0x49
 8004f28:	f7fb fe9c 	bl	8000c64 <LCD_WriteReg>
		LCD_WriteReg(0x004A, 0x0000);
 8004f2c:	2100      	movs	r1, #0
 8004f2e:	204a      	movs	r0, #74	; 0x4a
 8004f30:	f7fb fe98 	bl	8000c64 <LCD_WriteReg>
		LCD_WriteReg(0x004B, 0x0000);
 8004f34:	2100      	movs	r1, #0
 8004f36:	204b      	movs	r0, #75	; 0x4b
 8004f38:	f7fb fe94 	bl	8000c64 <LCD_WriteReg>
		LCD_WriteReg(0x0044, 0xEF00);
 8004f3c:	f44f 416f 	mov.w	r1, #61184	; 0xef00
 8004f40:	2044      	movs	r0, #68	; 0x44
 8004f42:	f7fb fe8f 	bl	8000c64 <LCD_WriteReg>
		LCD_WriteReg(0x0045, 0x0000);
 8004f46:	2100      	movs	r1, #0
 8004f48:	2045      	movs	r0, #69	; 0x45
 8004f4a:	f7fb fe8b 	bl	8000c64 <LCD_WriteReg>
		LCD_WriteReg(0x0046, 0x013F);
 8004f4e:	f240 113f 	movw	r1, #319	; 0x13f
 8004f52:	2046      	movs	r0, #70	; 0x46
 8004f54:	f7fb fe86 	bl	8000c64 <LCD_WriteReg>
		LCD_WriteReg(0x0030, 0x0707);
 8004f58:	f240 7107 	movw	r1, #1799	; 0x707
 8004f5c:	2030      	movs	r0, #48	; 0x30
 8004f5e:	f7fb fe81 	bl	8000c64 <LCD_WriteReg>
		LCD_WriteReg(0x0031, 0x0204);
 8004f62:	f44f 7101 	mov.w	r1, #516	; 0x204
 8004f66:	2031      	movs	r0, #49	; 0x31
 8004f68:	f7fb fe7c 	bl	8000c64 <LCD_WriteReg>
		LCD_WriteReg(0x0032, 0x0204);
 8004f6c:	f44f 7101 	mov.w	r1, #516	; 0x204
 8004f70:	2032      	movs	r0, #50	; 0x32
 8004f72:	f7fb fe77 	bl	8000c64 <LCD_WriteReg>
		LCD_WriteReg(0x0033, 0x0502);
 8004f76:	f240 5102 	movw	r1, #1282	; 0x502
 8004f7a:	2033      	movs	r0, #51	; 0x33
 8004f7c:	f7fb fe72 	bl	8000c64 <LCD_WriteReg>
		LCD_WriteReg(0x0034, 0x0507);
 8004f80:	f240 5107 	movw	r1, #1287	; 0x507
 8004f84:	2034      	movs	r0, #52	; 0x34
 8004f86:	f7fb fe6d 	bl	8000c64 <LCD_WriteReg>
		LCD_WriteReg(0x0035, 0x0204);
 8004f8a:	f44f 7101 	mov.w	r1, #516	; 0x204
 8004f8e:	2035      	movs	r0, #53	; 0x35
 8004f90:	f7fb fe68 	bl	8000c64 <LCD_WriteReg>
		LCD_WriteReg(0x0036, 0x0204);
 8004f94:	f44f 7101 	mov.w	r1, #516	; 0x204
 8004f98:	2036      	movs	r0, #54	; 0x36
 8004f9a:	f7fb fe63 	bl	8000c64 <LCD_WriteReg>
		LCD_WriteReg(0x0037, 0x0502);
 8004f9e:	f240 5102 	movw	r1, #1282	; 0x502
 8004fa2:	2037      	movs	r0, #55	; 0x37
 8004fa4:	f7fb fe5e 	bl	8000c64 <LCD_WriteReg>
		LCD_WriteReg(0x003A, 0x0302);
 8004fa8:	f240 3102 	movw	r1, #770	; 0x302
 8004fac:	203a      	movs	r0, #58	; 0x3a
 8004fae:	f7fb fe59 	bl	8000c64 <LCD_WriteReg>
		LCD_WriteReg(0x003B, 0x0302);
 8004fb2:	f240 3102 	movw	r1, #770	; 0x302
 8004fb6:	203b      	movs	r0, #59	; 0x3b
 8004fb8:	f7fb fe54 	bl	8000c64 <LCD_WriteReg>
		LCD_WriteReg(0x0023, 0x0000);
 8004fbc:	2100      	movs	r1, #0
 8004fbe:	2023      	movs	r0, #35	; 0x23
 8004fc0:	f7fb fe50 	bl	8000c64 <LCD_WriteReg>
		LCD_WriteReg(0x0024, 0x0000);
 8004fc4:	2100      	movs	r1, #0
 8004fc6:	2024      	movs	r0, #36	; 0x24
 8004fc8:	f7fb fe4c 	bl	8000c64 <LCD_WriteReg>
		LCD_WriteReg(0x0025, 0x8000);
 8004fcc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004fd0:	2025      	movs	r0, #37	; 0x25
 8004fd2:	f7fb fe47 	bl	8000c64 <LCD_WriteReg>
		LCD_WriteReg(0x004f, 0);        //行首址0
 8004fd6:	2100      	movs	r1, #0
 8004fd8:	204f      	movs	r0, #79	; 0x4f
 8004fda:	f7fb fe43 	bl	8000c64 <LCD_WriteReg>
		LCD_WriteReg(0x004e, 0);        //列首址0
 8004fde:	2100      	movs	r1, #0
 8004fe0:	204e      	movs	r0, #78	; 0x4e
 8004fe2:	f7fb fe3f 	bl	8000c64 <LCD_WriteReg>
 8004fe6:	f000 bd2d 	b.w	8005a44 <LCD_Init+0x3e34>
	} else if (lcddev.id == 0x4531)        //OK |/|/|
 8004fea:	4b61      	ldr	r3, [pc, #388]	; (8005170 <LCD_Init+0x3560>)
 8004fec:	889b      	ldrh	r3, [r3, #4]
 8004fee:	f244 5231 	movw	r2, #17713	; 0x4531
 8004ff2:	4293      	cmp	r3, r2
 8004ff4:	f040 80be 	bne.w	8005174 <LCD_Init+0x3564>
			{
		LCD_WriteReg(0X00, 0X0001);
 8004ff8:	2101      	movs	r1, #1
 8004ffa:	2000      	movs	r0, #0
 8004ffc:	f7fb fe32 	bl	8000c64 <LCD_WriteReg>
		HAL_Delay(10);
 8005000:	200a      	movs	r0, #10
 8005002:	f000 ffe3 	bl	8005fcc <HAL_Delay>
		LCD_WriteReg(0X10, 0X1628);
 8005006:	f241 6128 	movw	r1, #5672	; 0x1628
 800500a:	2010      	movs	r0, #16
 800500c:	f7fb fe2a 	bl	8000c64 <LCD_WriteReg>
		LCD_WriteReg(0X12, 0X000e);        //0x0006
 8005010:	210e      	movs	r1, #14
 8005012:	2012      	movs	r0, #18
 8005014:	f7fb fe26 	bl	8000c64 <LCD_WriteReg>
		LCD_WriteReg(0X13, 0X0A39);
 8005018:	f640 2139 	movw	r1, #2617	; 0xa39
 800501c:	2013      	movs	r0, #19
 800501e:	f7fb fe21 	bl	8000c64 <LCD_WriteReg>
		HAL_Delay(10);
 8005022:	200a      	movs	r0, #10
 8005024:	f000 ffd2 	bl	8005fcc <HAL_Delay>
		LCD_WriteReg(0X11, 0X0040);
 8005028:	2140      	movs	r1, #64	; 0x40
 800502a:	2011      	movs	r0, #17
 800502c:	f7fb fe1a 	bl	8000c64 <LCD_WriteReg>
		LCD_WriteReg(0X15, 0X0050);
 8005030:	2150      	movs	r1, #80	; 0x50
 8005032:	2015      	movs	r0, #21
 8005034:	f7fb fe16 	bl	8000c64 <LCD_WriteReg>
		HAL_Delay(10);
 8005038:	200a      	movs	r0, #10
 800503a:	f000 ffc7 	bl	8005fcc <HAL_Delay>
		LCD_WriteReg(0X12, 0X001e);        //16
 800503e:	211e      	movs	r1, #30
 8005040:	2012      	movs	r0, #18
 8005042:	f7fb fe0f 	bl	8000c64 <LCD_WriteReg>
		HAL_Delay(10);
 8005046:	200a      	movs	r0, #10
 8005048:	f000 ffc0 	bl	8005fcc <HAL_Delay>
		LCD_WriteReg(0X10, 0X1620);
 800504c:	f44f 51b1 	mov.w	r1, #5664	; 0x1620
 8005050:	2010      	movs	r0, #16
 8005052:	f7fb fe07 	bl	8000c64 <LCD_WriteReg>
		LCD_WriteReg(0X13, 0X2A39);
 8005056:	f642 2139 	movw	r1, #10809	; 0x2a39
 800505a:	2013      	movs	r0, #19
 800505c:	f7fb fe02 	bl	8000c64 <LCD_WriteReg>
		HAL_Delay(10);
 8005060:	200a      	movs	r0, #10
 8005062:	f000 ffb3 	bl	8005fcc <HAL_Delay>
		LCD_WriteReg(0X01, 0X0100);
 8005066:	f44f 7180 	mov.w	r1, #256	; 0x100
 800506a:	2001      	movs	r0, #1
 800506c:	f7fb fdfa 	bl	8000c64 <LCD_WriteReg>
		LCD_WriteReg(0X02, 0X0300);
 8005070:	f44f 7140 	mov.w	r1, #768	; 0x300
 8005074:	2002      	movs	r0, #2
 8005076:	f7fb fdf5 	bl	8000c64 <LCD_WriteReg>
		LCD_WriteReg(0X03, 0X1038);        //改变方向的
 800507a:	f241 0138 	movw	r1, #4152	; 0x1038
 800507e:	2003      	movs	r0, #3
 8005080:	f7fb fdf0 	bl	8000c64 <LCD_WriteReg>
		LCD_WriteReg(0X08, 0X0202);
 8005084:	f240 2102 	movw	r1, #514	; 0x202
 8005088:	2008      	movs	r0, #8
 800508a:	f7fb fdeb 	bl	8000c64 <LCD_WriteReg>
		LCD_WriteReg(0X0A, 0X0008);
 800508e:	2108      	movs	r1, #8
 8005090:	200a      	movs	r0, #10
 8005092:	f7fb fde7 	bl	8000c64 <LCD_WriteReg>
		LCD_WriteReg(0X30, 0X0000);
 8005096:	2100      	movs	r1, #0
 8005098:	2030      	movs	r0, #48	; 0x30
 800509a:	f7fb fde3 	bl	8000c64 <LCD_WriteReg>
		LCD_WriteReg(0X31, 0X0402);
 800509e:	f240 4102 	movw	r1, #1026	; 0x402
 80050a2:	2031      	movs	r0, #49	; 0x31
 80050a4:	f7fb fdde 	bl	8000c64 <LCD_WriteReg>
		LCD_WriteReg(0X32, 0X0106);
 80050a8:	f44f 7183 	mov.w	r1, #262	; 0x106
 80050ac:	2032      	movs	r0, #50	; 0x32
 80050ae:	f7fb fdd9 	bl	8000c64 <LCD_WriteReg>
		LCD_WriteReg(0X33, 0X0503);
 80050b2:	f240 5103 	movw	r1, #1283	; 0x503
 80050b6:	2033      	movs	r0, #51	; 0x33
 80050b8:	f7fb fdd4 	bl	8000c64 <LCD_WriteReg>
		LCD_WriteReg(0X34, 0X0104);
 80050bc:	f44f 7182 	mov.w	r1, #260	; 0x104
 80050c0:	2034      	movs	r0, #52	; 0x34
 80050c2:	f7fb fdcf 	bl	8000c64 <LCD_WriteReg>
		LCD_WriteReg(0X35, 0X0301);
 80050c6:	f240 3101 	movw	r1, #769	; 0x301
 80050ca:	2035      	movs	r0, #53	; 0x35
 80050cc:	f7fb fdca 	bl	8000c64 <LCD_WriteReg>
		LCD_WriteReg(0X36, 0X0707);
 80050d0:	f240 7107 	movw	r1, #1799	; 0x707
 80050d4:	2036      	movs	r0, #54	; 0x36
 80050d6:	f7fb fdc5 	bl	8000c64 <LCD_WriteReg>
		LCD_WriteReg(0X37, 0X0305);
 80050da:	f240 3105 	movw	r1, #773	; 0x305
 80050de:	2037      	movs	r0, #55	; 0x37
 80050e0:	f7fb fdc0 	bl	8000c64 <LCD_WriteReg>
		LCD_WriteReg(0X38, 0X0208);
 80050e4:	f44f 7102 	mov.w	r1, #520	; 0x208
 80050e8:	2038      	movs	r0, #56	; 0x38
 80050ea:	f7fb fdbb 	bl	8000c64 <LCD_WriteReg>
		LCD_WriteReg(0X39, 0X0F0B);
 80050ee:	f640 710b 	movw	r1, #3851	; 0xf0b
 80050f2:	2039      	movs	r0, #57	; 0x39
 80050f4:	f7fb fdb6 	bl	8000c64 <LCD_WriteReg>
		LCD_WriteReg(0X41, 0X0002);
 80050f8:	2102      	movs	r1, #2
 80050fa:	2041      	movs	r0, #65	; 0x41
 80050fc:	f7fb fdb2 	bl	8000c64 <LCD_WriteReg>
		LCD_WriteReg(0X60, 0X2700);
 8005100:	f44f 511c 	mov.w	r1, #9984	; 0x2700
 8005104:	2060      	movs	r0, #96	; 0x60
 8005106:	f7fb fdad 	bl	8000c64 <LCD_WriteReg>
		LCD_WriteReg(0X61, 0X0001);
 800510a:	2101      	movs	r1, #1
 800510c:	2061      	movs	r0, #97	; 0x61
 800510e:	f7fb fda9 	bl	8000c64 <LCD_WriteReg>
		LCD_WriteReg(0X90, 0X0210);
 8005112:	f44f 7104 	mov.w	r1, #528	; 0x210
 8005116:	2090      	movs	r0, #144	; 0x90
 8005118:	f7fb fda4 	bl	8000c64 <LCD_WriteReg>
		LCD_WriteReg(0X92, 0X010A);
 800511c:	f44f 7185 	mov.w	r1, #266	; 0x10a
 8005120:	2092      	movs	r0, #146	; 0x92
 8005122:	f7fb fd9f 	bl	8000c64 <LCD_WriteReg>
		LCD_WriteReg(0X93, 0X0004);
 8005126:	2104      	movs	r1, #4
 8005128:	2093      	movs	r0, #147	; 0x93
 800512a:	f7fb fd9b 	bl	8000c64 <LCD_WriteReg>
		LCD_WriteReg(0XA0, 0X0100);
 800512e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8005132:	20a0      	movs	r0, #160	; 0xa0
 8005134:	f7fb fd96 	bl	8000c64 <LCD_WriteReg>
		LCD_WriteReg(0X07, 0X0001);
 8005138:	2101      	movs	r1, #1
 800513a:	2007      	movs	r0, #7
 800513c:	f7fb fd92 	bl	8000c64 <LCD_WriteReg>
		LCD_WriteReg(0X07, 0X0021);
 8005140:	2121      	movs	r1, #33	; 0x21
 8005142:	2007      	movs	r0, #7
 8005144:	f7fb fd8e 	bl	8000c64 <LCD_WriteReg>
		LCD_WriteReg(0X07, 0X0023);
 8005148:	2123      	movs	r1, #35	; 0x23
 800514a:	2007      	movs	r0, #7
 800514c:	f7fb fd8a 	bl	8000c64 <LCD_WriteReg>
		LCD_WriteReg(0X07, 0X0033);
 8005150:	2133      	movs	r1, #51	; 0x33
 8005152:	2007      	movs	r0, #7
 8005154:	f7fb fd86 	bl	8000c64 <LCD_WriteReg>
		LCD_WriteReg(0X07, 0X0133);
 8005158:	f240 1133 	movw	r1, #307	; 0x133
 800515c:	2007      	movs	r0, #7
 800515e:	f7fb fd81 	bl	8000c64 <LCD_WriteReg>
		LCD_WriteReg(0XA0, 0X0000);
 8005162:	2100      	movs	r1, #0
 8005164:	20a0      	movs	r0, #160	; 0xa0
 8005166:	f7fb fd7d 	bl	8000c64 <LCD_WriteReg>
 800516a:	f000 bc6b 	b.w	8005a44 <LCD_Init+0x3e34>
 800516e:	bf00      	nop
 8005170:	20000028 	.word	0x20000028
	} else if (lcddev.id == 0x4535) {
 8005174:	4b5b      	ldr	r3, [pc, #364]	; (80052e4 <LCD_Init+0x36d4>)
 8005176:	889b      	ldrh	r3, [r3, #4]
 8005178:	f244 5235 	movw	r2, #17717	; 0x4535
 800517c:	4293      	cmp	r3, r2
 800517e:	f040 80b3 	bne.w	80052e8 <LCD_Init+0x36d8>
		LCD_WriteReg(0X15, 0X0030);
 8005182:	2130      	movs	r1, #48	; 0x30
 8005184:	2015      	movs	r0, #21
 8005186:	f7fb fd6d 	bl	8000c64 <LCD_WriteReg>
		LCD_WriteReg(0X9A, 0X0010);
 800518a:	2110      	movs	r1, #16
 800518c:	209a      	movs	r0, #154	; 0x9a
 800518e:	f7fb fd69 	bl	8000c64 <LCD_WriteReg>
		LCD_WriteReg(0X11, 0X0020);
 8005192:	2120      	movs	r1, #32
 8005194:	2011      	movs	r0, #17
 8005196:	f7fb fd65 	bl	8000c64 <LCD_WriteReg>
		LCD_WriteReg(0X10, 0X3428);
 800519a:	f243 4128 	movw	r1, #13352	; 0x3428
 800519e:	2010      	movs	r0, #16
 80051a0:	f7fb fd60 	bl	8000c64 <LCD_WriteReg>
		LCD_WriteReg(0X12, 0X0002);        //16
 80051a4:	2102      	movs	r1, #2
 80051a6:	2012      	movs	r0, #18
 80051a8:	f7fb fd5c 	bl	8000c64 <LCD_WriteReg>
		LCD_WriteReg(0X13, 0X1038);
 80051ac:	f241 0138 	movw	r1, #4152	; 0x1038
 80051b0:	2013      	movs	r0, #19
 80051b2:	f7fb fd57 	bl	8000c64 <LCD_WriteReg>
		HAL_Delay(40);
 80051b6:	2028      	movs	r0, #40	; 0x28
 80051b8:	f000 ff08 	bl	8005fcc <HAL_Delay>
		LCD_WriteReg(0X12, 0X0012);        //16
 80051bc:	2112      	movs	r1, #18
 80051be:	2012      	movs	r0, #18
 80051c0:	f7fb fd50 	bl	8000c64 <LCD_WriteReg>
		HAL_Delay(40);
 80051c4:	2028      	movs	r0, #40	; 0x28
 80051c6:	f000 ff01 	bl	8005fcc <HAL_Delay>
		LCD_WriteReg(0X10, 0X3420);
 80051ca:	f243 4120 	movw	r1, #13344	; 0x3420
 80051ce:	2010      	movs	r0, #16
 80051d0:	f7fb fd48 	bl	8000c64 <LCD_WriteReg>
		LCD_WriteReg(0X13, 0X3038);
 80051d4:	f243 0138 	movw	r1, #12344	; 0x3038
 80051d8:	2013      	movs	r0, #19
 80051da:	f7fb fd43 	bl	8000c64 <LCD_WriteReg>
		HAL_Delay(70);
 80051de:	2046      	movs	r0, #70	; 0x46
 80051e0:	f000 fef4 	bl	8005fcc <HAL_Delay>
		LCD_WriteReg(0X30, 0X0000);
 80051e4:	2100      	movs	r1, #0
 80051e6:	2030      	movs	r0, #48	; 0x30
 80051e8:	f7fb fd3c 	bl	8000c64 <LCD_WriteReg>
		LCD_WriteReg(0X31, 0X0402);
 80051ec:	f240 4102 	movw	r1, #1026	; 0x402
 80051f0:	2031      	movs	r0, #49	; 0x31
 80051f2:	f7fb fd37 	bl	8000c64 <LCD_WriteReg>
		LCD_WriteReg(0X32, 0X0307);
 80051f6:	f240 3107 	movw	r1, #775	; 0x307
 80051fa:	2032      	movs	r0, #50	; 0x32
 80051fc:	f7fb fd32 	bl	8000c64 <LCD_WriteReg>
		LCD_WriteReg(0X33, 0X0304);
 8005200:	f44f 7141 	mov.w	r1, #772	; 0x304
 8005204:	2033      	movs	r0, #51	; 0x33
 8005206:	f7fb fd2d 	bl	8000c64 <LCD_WriteReg>
		LCD_WriteReg(0X34, 0X0004);
 800520a:	2104      	movs	r1, #4
 800520c:	2034      	movs	r0, #52	; 0x34
 800520e:	f7fb fd29 	bl	8000c64 <LCD_WriteReg>
		LCD_WriteReg(0X35, 0X0401);
 8005212:	f240 4101 	movw	r1, #1025	; 0x401
 8005216:	2035      	movs	r0, #53	; 0x35
 8005218:	f7fb fd24 	bl	8000c64 <LCD_WriteReg>
		LCD_WriteReg(0X36, 0X0707);
 800521c:	f240 7107 	movw	r1, #1799	; 0x707
 8005220:	2036      	movs	r0, #54	; 0x36
 8005222:	f7fb fd1f 	bl	8000c64 <LCD_WriteReg>
		LCD_WriteReg(0X37, 0X0305);
 8005226:	f240 3105 	movw	r1, #773	; 0x305
 800522a:	2037      	movs	r0, #55	; 0x37
 800522c:	f7fb fd1a 	bl	8000c64 <LCD_WriteReg>
		LCD_WriteReg(0X38, 0X0610);
 8005230:	f44f 61c2 	mov.w	r1, #1552	; 0x610
 8005234:	2038      	movs	r0, #56	; 0x38
 8005236:	f7fb fd15 	bl	8000c64 <LCD_WriteReg>
		LCD_WriteReg(0X39, 0X0610);
 800523a:	f44f 61c2 	mov.w	r1, #1552	; 0x610
 800523e:	2039      	movs	r0, #57	; 0x39
 8005240:	f7fb fd10 	bl	8000c64 <LCD_WriteReg>

		LCD_WriteReg(0X01, 0X0100);
 8005244:	f44f 7180 	mov.w	r1, #256	; 0x100
 8005248:	2001      	movs	r0, #1
 800524a:	f7fb fd0b 	bl	8000c64 <LCD_WriteReg>
		LCD_WriteReg(0X02, 0X0300);
 800524e:	f44f 7140 	mov.w	r1, #768	; 0x300
 8005252:	2002      	movs	r0, #2
 8005254:	f7fb fd06 	bl	8000c64 <LCD_WriteReg>
		LCD_WriteReg(0X03, 0X1030);        //改变方向的
 8005258:	f241 0130 	movw	r1, #4144	; 0x1030
 800525c:	2003      	movs	r0, #3
 800525e:	f7fb fd01 	bl	8000c64 <LCD_WriteReg>
		LCD_WriteReg(0X08, 0X0808);
 8005262:	f640 0108 	movw	r1, #2056	; 0x808
 8005266:	2008      	movs	r0, #8
 8005268:	f7fb fcfc 	bl	8000c64 <LCD_WriteReg>
		LCD_WriteReg(0X0A, 0X0008);
 800526c:	2108      	movs	r1, #8
 800526e:	200a      	movs	r0, #10
 8005270:	f7fb fcf8 	bl	8000c64 <LCD_WriteReg>
		LCD_WriteReg(0X60, 0X2700);
 8005274:	f44f 511c 	mov.w	r1, #9984	; 0x2700
 8005278:	2060      	movs	r0, #96	; 0x60
 800527a:	f7fb fcf3 	bl	8000c64 <LCD_WriteReg>
		LCD_WriteReg(0X61, 0X0001);
 800527e:	2101      	movs	r1, #1
 8005280:	2061      	movs	r0, #97	; 0x61
 8005282:	f7fb fcef 	bl	8000c64 <LCD_WriteReg>
		LCD_WriteReg(0X90, 0X013E);
 8005286:	f44f 719f 	mov.w	r1, #318	; 0x13e
 800528a:	2090      	movs	r0, #144	; 0x90
 800528c:	f7fb fcea 	bl	8000c64 <LCD_WriteReg>
		LCD_WriteReg(0X92, 0X0100);
 8005290:	f44f 7180 	mov.w	r1, #256	; 0x100
 8005294:	2092      	movs	r0, #146	; 0x92
 8005296:	f7fb fce5 	bl	8000c64 <LCD_WriteReg>
		LCD_WriteReg(0X93, 0X0100);
 800529a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800529e:	2093      	movs	r0, #147	; 0x93
 80052a0:	f7fb fce0 	bl	8000c64 <LCD_WriteReg>
		LCD_WriteReg(0XA0, 0X3000);
 80052a4:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 80052a8:	20a0      	movs	r0, #160	; 0xa0
 80052aa:	f7fb fcdb 	bl	8000c64 <LCD_WriteReg>
		LCD_WriteReg(0XA3, 0X0010);
 80052ae:	2110      	movs	r1, #16
 80052b0:	20a3      	movs	r0, #163	; 0xa3
 80052b2:	f7fb fcd7 	bl	8000c64 <LCD_WriteReg>
		LCD_WriteReg(0X07, 0X0001);
 80052b6:	2101      	movs	r1, #1
 80052b8:	2007      	movs	r0, #7
 80052ba:	f7fb fcd3 	bl	8000c64 <LCD_WriteReg>
		LCD_WriteReg(0X07, 0X0021);
 80052be:	2121      	movs	r1, #33	; 0x21
 80052c0:	2007      	movs	r0, #7
 80052c2:	f7fb fccf 	bl	8000c64 <LCD_WriteReg>
		LCD_WriteReg(0X07, 0X0023);
 80052c6:	2123      	movs	r1, #35	; 0x23
 80052c8:	2007      	movs	r0, #7
 80052ca:	f7fb fccb 	bl	8000c64 <LCD_WriteReg>
		LCD_WriteReg(0X07, 0X0033);
 80052ce:	2133      	movs	r1, #51	; 0x33
 80052d0:	2007      	movs	r0, #7
 80052d2:	f7fb fcc7 	bl	8000c64 <LCD_WriteReg>
		LCD_WriteReg(0X07, 0X0133);
 80052d6:	f240 1133 	movw	r1, #307	; 0x133
 80052da:	2007      	movs	r0, #7
 80052dc:	f7fb fcc2 	bl	8000c64 <LCD_WriteReg>
 80052e0:	e3b0      	b.n	8005a44 <LCD_Init+0x3e34>
 80052e2:	bf00      	nop
 80052e4:	20000028 	.word	0x20000028
	} else if (lcddev.id == 0X1963) {
 80052e8:	4ba8      	ldr	r3, [pc, #672]	; (800558c <LCD_Init+0x397c>)
 80052ea:	889b      	ldrh	r3, [r3, #4]
 80052ec:	f641 1263 	movw	r2, #6499	; 0x1963
 80052f0:	4293      	cmp	r3, r2
 80052f2:	f040 83a7 	bne.w	8005a44 <LCD_Init+0x3e34>
		LCD_WR_REG(0xE2);	//Set PLL with OSC = 10MHz (hardware),	Multiplier N = 35, 250MHz < VCO < 800MHz = OSC*(N+1), VCO = 300MHz
 80052f6:	20e2      	movs	r0, #226	; 0xe2
 80052f8:	f7fb fc28 	bl	8000b4c <LCD_WR_REG>
		LCD_WR_DATA(0x1D);		//参数1 
 80052fc:	4ba4      	ldr	r3, [pc, #656]	; (8005590 <LCD_Init+0x3980>)
 80052fe:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005302:	611a      	str	r2, [r3, #16]
 8005304:	4ba2      	ldr	r3, [pc, #648]	; (8005590 <LCD_Init+0x3980>)
 8005306:	f44f 7200 	mov.w	r2, #512	; 0x200
 800530a:	615a      	str	r2, [r3, #20]
 800530c:	4ba1      	ldr	r3, [pc, #644]	; (8005594 <LCD_Init+0x3984>)
 800530e:	221d      	movs	r2, #29
 8005310:	60da      	str	r2, [r3, #12]
 8005312:	4b9f      	ldr	r3, [pc, #636]	; (8005590 <LCD_Init+0x3980>)
 8005314:	2280      	movs	r2, #128	; 0x80
 8005316:	615a      	str	r2, [r3, #20]
 8005318:	4b9d      	ldr	r3, [pc, #628]	; (8005590 <LCD_Init+0x3980>)
 800531a:	2280      	movs	r2, #128	; 0x80
 800531c:	611a      	str	r2, [r3, #16]
 800531e:	4b9c      	ldr	r3, [pc, #624]	; (8005590 <LCD_Init+0x3980>)
 8005320:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005324:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(0x02);		//参数2 Divider M = 2, PLL = 300/(M+1) = 100MHz
 8005326:	4b9a      	ldr	r3, [pc, #616]	; (8005590 <LCD_Init+0x3980>)
 8005328:	f44f 7280 	mov.w	r2, #256	; 0x100
 800532c:	611a      	str	r2, [r3, #16]
 800532e:	4b98      	ldr	r3, [pc, #608]	; (8005590 <LCD_Init+0x3980>)
 8005330:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005334:	615a      	str	r2, [r3, #20]
 8005336:	4b97      	ldr	r3, [pc, #604]	; (8005594 <LCD_Init+0x3984>)
 8005338:	2202      	movs	r2, #2
 800533a:	60da      	str	r2, [r3, #12]
 800533c:	4b94      	ldr	r3, [pc, #592]	; (8005590 <LCD_Init+0x3980>)
 800533e:	2280      	movs	r2, #128	; 0x80
 8005340:	615a      	str	r2, [r3, #20]
 8005342:	4b93      	ldr	r3, [pc, #588]	; (8005590 <LCD_Init+0x3980>)
 8005344:	2280      	movs	r2, #128	; 0x80
 8005346:	611a      	str	r2, [r3, #16]
 8005348:	4b91      	ldr	r3, [pc, #580]	; (8005590 <LCD_Init+0x3980>)
 800534a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800534e:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(0x04);		//参数3 Validate M and N values   
 8005350:	4b8f      	ldr	r3, [pc, #572]	; (8005590 <LCD_Init+0x3980>)
 8005352:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005356:	611a      	str	r2, [r3, #16]
 8005358:	4b8d      	ldr	r3, [pc, #564]	; (8005590 <LCD_Init+0x3980>)
 800535a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800535e:	615a      	str	r2, [r3, #20]
 8005360:	4b8c      	ldr	r3, [pc, #560]	; (8005594 <LCD_Init+0x3984>)
 8005362:	2204      	movs	r2, #4
 8005364:	60da      	str	r2, [r3, #12]
 8005366:	4b8a      	ldr	r3, [pc, #552]	; (8005590 <LCD_Init+0x3980>)
 8005368:	2280      	movs	r2, #128	; 0x80
 800536a:	615a      	str	r2, [r3, #20]
 800536c:	4b88      	ldr	r3, [pc, #544]	; (8005590 <LCD_Init+0x3980>)
 800536e:	2280      	movs	r2, #128	; 0x80
 8005370:	611a      	str	r2, [r3, #16]
 8005372:	4b87      	ldr	r3, [pc, #540]	; (8005590 <LCD_Init+0x3980>)
 8005374:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005378:	611a      	str	r2, [r3, #16]
//		delay_us(100);
		HAL_Delay(1);
 800537a:	2001      	movs	r0, #1
 800537c:	f000 fe26 	bl	8005fcc <HAL_Delay>
		LCD_WR_REG(0xE0);		// Start PLL command
 8005380:	20e0      	movs	r0, #224	; 0xe0
 8005382:	f7fb fbe3 	bl	8000b4c <LCD_WR_REG>
		LCD_WR_DATA(0x01);		// enable PLL
 8005386:	4b82      	ldr	r3, [pc, #520]	; (8005590 <LCD_Init+0x3980>)
 8005388:	f44f 7280 	mov.w	r2, #256	; 0x100
 800538c:	611a      	str	r2, [r3, #16]
 800538e:	4b80      	ldr	r3, [pc, #512]	; (8005590 <LCD_Init+0x3980>)
 8005390:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005394:	615a      	str	r2, [r3, #20]
 8005396:	4b7f      	ldr	r3, [pc, #508]	; (8005594 <LCD_Init+0x3984>)
 8005398:	2201      	movs	r2, #1
 800539a:	60da      	str	r2, [r3, #12]
 800539c:	4b7c      	ldr	r3, [pc, #496]	; (8005590 <LCD_Init+0x3980>)
 800539e:	2280      	movs	r2, #128	; 0x80
 80053a0:	615a      	str	r2, [r3, #20]
 80053a2:	4b7b      	ldr	r3, [pc, #492]	; (8005590 <LCD_Init+0x3980>)
 80053a4:	2280      	movs	r2, #128	; 0x80
 80053a6:	611a      	str	r2, [r3, #16]
 80053a8:	4b79      	ldr	r3, [pc, #484]	; (8005590 <LCD_Init+0x3980>)
 80053aa:	f44f 7200 	mov.w	r2, #512	; 0x200
 80053ae:	611a      	str	r2, [r3, #16]
		HAL_Delay(10);
 80053b0:	200a      	movs	r0, #10
 80053b2:	f000 fe0b 	bl	8005fcc <HAL_Delay>
		LCD_WR_REG(0xE0);		// Start PLL command again
 80053b6:	20e0      	movs	r0, #224	; 0xe0
 80053b8:	f7fb fbc8 	bl	8000b4c <LCD_WR_REG>
		LCD_WR_DATA(0x03);		// now, use PLL output as system clock	
 80053bc:	4b74      	ldr	r3, [pc, #464]	; (8005590 <LCD_Init+0x3980>)
 80053be:	f44f 7280 	mov.w	r2, #256	; 0x100
 80053c2:	611a      	str	r2, [r3, #16]
 80053c4:	4b72      	ldr	r3, [pc, #456]	; (8005590 <LCD_Init+0x3980>)
 80053c6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80053ca:	615a      	str	r2, [r3, #20]
 80053cc:	4b71      	ldr	r3, [pc, #452]	; (8005594 <LCD_Init+0x3984>)
 80053ce:	2203      	movs	r2, #3
 80053d0:	60da      	str	r2, [r3, #12]
 80053d2:	4b6f      	ldr	r3, [pc, #444]	; (8005590 <LCD_Init+0x3980>)
 80053d4:	2280      	movs	r2, #128	; 0x80
 80053d6:	615a      	str	r2, [r3, #20]
 80053d8:	4b6d      	ldr	r3, [pc, #436]	; (8005590 <LCD_Init+0x3980>)
 80053da:	2280      	movs	r2, #128	; 0x80
 80053dc:	611a      	str	r2, [r3, #16]
 80053de:	4b6c      	ldr	r3, [pc, #432]	; (8005590 <LCD_Init+0x3980>)
 80053e0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80053e4:	611a      	str	r2, [r3, #16]
		HAL_Delay(12);
 80053e6:	200c      	movs	r0, #12
 80053e8:	f000 fdf0 	bl	8005fcc <HAL_Delay>
		LCD_WR_REG(0x01);		//软复位
 80053ec:	2001      	movs	r0, #1
 80053ee:	f7fb fbad 	bl	8000b4c <LCD_WR_REG>
		HAL_Delay(10);
 80053f2:	200a      	movs	r0, #10
 80053f4:	f000 fdea 	bl	8005fcc <HAL_Delay>

		LCD_WR_REG(0xE6);		//设置像素频率,33Mhz
 80053f8:	20e6      	movs	r0, #230	; 0xe6
 80053fa:	f7fb fba7 	bl	8000b4c <LCD_WR_REG>
		LCD_WR_DATA(0x2F);
 80053fe:	4b64      	ldr	r3, [pc, #400]	; (8005590 <LCD_Init+0x3980>)
 8005400:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005404:	611a      	str	r2, [r3, #16]
 8005406:	4b62      	ldr	r3, [pc, #392]	; (8005590 <LCD_Init+0x3980>)
 8005408:	f44f 7200 	mov.w	r2, #512	; 0x200
 800540c:	615a      	str	r2, [r3, #20]
 800540e:	4b61      	ldr	r3, [pc, #388]	; (8005594 <LCD_Init+0x3984>)
 8005410:	222f      	movs	r2, #47	; 0x2f
 8005412:	60da      	str	r2, [r3, #12]
 8005414:	4b5e      	ldr	r3, [pc, #376]	; (8005590 <LCD_Init+0x3980>)
 8005416:	2280      	movs	r2, #128	; 0x80
 8005418:	615a      	str	r2, [r3, #20]
 800541a:	4b5d      	ldr	r3, [pc, #372]	; (8005590 <LCD_Init+0x3980>)
 800541c:	2280      	movs	r2, #128	; 0x80
 800541e:	611a      	str	r2, [r3, #16]
 8005420:	4b5b      	ldr	r3, [pc, #364]	; (8005590 <LCD_Init+0x3980>)
 8005422:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005426:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(0xFF);
 8005428:	4b59      	ldr	r3, [pc, #356]	; (8005590 <LCD_Init+0x3980>)
 800542a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800542e:	611a      	str	r2, [r3, #16]
 8005430:	4b57      	ldr	r3, [pc, #348]	; (8005590 <LCD_Init+0x3980>)
 8005432:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005436:	615a      	str	r2, [r3, #20]
 8005438:	4b56      	ldr	r3, [pc, #344]	; (8005594 <LCD_Init+0x3984>)
 800543a:	22ff      	movs	r2, #255	; 0xff
 800543c:	60da      	str	r2, [r3, #12]
 800543e:	4b54      	ldr	r3, [pc, #336]	; (8005590 <LCD_Init+0x3980>)
 8005440:	2280      	movs	r2, #128	; 0x80
 8005442:	615a      	str	r2, [r3, #20]
 8005444:	4b52      	ldr	r3, [pc, #328]	; (8005590 <LCD_Init+0x3980>)
 8005446:	2280      	movs	r2, #128	; 0x80
 8005448:	611a      	str	r2, [r3, #16]
 800544a:	4b51      	ldr	r3, [pc, #324]	; (8005590 <LCD_Init+0x3980>)
 800544c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005450:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(0xFF);
 8005452:	4b4f      	ldr	r3, [pc, #316]	; (8005590 <LCD_Init+0x3980>)
 8005454:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005458:	611a      	str	r2, [r3, #16]
 800545a:	4b4d      	ldr	r3, [pc, #308]	; (8005590 <LCD_Init+0x3980>)
 800545c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005460:	615a      	str	r2, [r3, #20]
 8005462:	4b4c      	ldr	r3, [pc, #304]	; (8005594 <LCD_Init+0x3984>)
 8005464:	22ff      	movs	r2, #255	; 0xff
 8005466:	60da      	str	r2, [r3, #12]
 8005468:	4b49      	ldr	r3, [pc, #292]	; (8005590 <LCD_Init+0x3980>)
 800546a:	2280      	movs	r2, #128	; 0x80
 800546c:	615a      	str	r2, [r3, #20]
 800546e:	4b48      	ldr	r3, [pc, #288]	; (8005590 <LCD_Init+0x3980>)
 8005470:	2280      	movs	r2, #128	; 0x80
 8005472:	611a      	str	r2, [r3, #16]
 8005474:	4b46      	ldr	r3, [pc, #280]	; (8005590 <LCD_Init+0x3980>)
 8005476:	f44f 7200 	mov.w	r2, #512	; 0x200
 800547a:	611a      	str	r2, [r3, #16]

		LCD_WR_REG(0xB0);		//设置LCD模式
 800547c:	20b0      	movs	r0, #176	; 0xb0
 800547e:	f7fb fb65 	bl	8000b4c <LCD_WR_REG>
		LCD_WR_DATA(0x20);		//24位模式
 8005482:	4b43      	ldr	r3, [pc, #268]	; (8005590 <LCD_Init+0x3980>)
 8005484:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005488:	611a      	str	r2, [r3, #16]
 800548a:	4b41      	ldr	r3, [pc, #260]	; (8005590 <LCD_Init+0x3980>)
 800548c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005490:	615a      	str	r2, [r3, #20]
 8005492:	4b40      	ldr	r3, [pc, #256]	; (8005594 <LCD_Init+0x3984>)
 8005494:	2220      	movs	r2, #32
 8005496:	60da      	str	r2, [r3, #12]
 8005498:	4b3d      	ldr	r3, [pc, #244]	; (8005590 <LCD_Init+0x3980>)
 800549a:	2280      	movs	r2, #128	; 0x80
 800549c:	615a      	str	r2, [r3, #20]
 800549e:	4b3c      	ldr	r3, [pc, #240]	; (8005590 <LCD_Init+0x3980>)
 80054a0:	2280      	movs	r2, #128	; 0x80
 80054a2:	611a      	str	r2, [r3, #16]
 80054a4:	4b3a      	ldr	r3, [pc, #232]	; (8005590 <LCD_Init+0x3980>)
 80054a6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80054aa:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(0x00);		//TFT 模式 
 80054ac:	4b38      	ldr	r3, [pc, #224]	; (8005590 <LCD_Init+0x3980>)
 80054ae:	f44f 7280 	mov.w	r2, #256	; 0x100
 80054b2:	611a      	str	r2, [r3, #16]
 80054b4:	4b36      	ldr	r3, [pc, #216]	; (8005590 <LCD_Init+0x3980>)
 80054b6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80054ba:	615a      	str	r2, [r3, #20]
 80054bc:	4b35      	ldr	r3, [pc, #212]	; (8005594 <LCD_Init+0x3984>)
 80054be:	2200      	movs	r2, #0
 80054c0:	60da      	str	r2, [r3, #12]
 80054c2:	4b33      	ldr	r3, [pc, #204]	; (8005590 <LCD_Init+0x3980>)
 80054c4:	2280      	movs	r2, #128	; 0x80
 80054c6:	615a      	str	r2, [r3, #20]
 80054c8:	4b31      	ldr	r3, [pc, #196]	; (8005590 <LCD_Init+0x3980>)
 80054ca:	2280      	movs	r2, #128	; 0x80
 80054cc:	611a      	str	r2, [r3, #16]
 80054ce:	4b30      	ldr	r3, [pc, #192]	; (8005590 <LCD_Init+0x3980>)
 80054d0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80054d4:	611a      	str	r2, [r3, #16]

		LCD_WR_DATA((SSD_HOR_RESOLUTION-1)>>8);		//设置LCD水平像素
 80054d6:	4b2e      	ldr	r3, [pc, #184]	; (8005590 <LCD_Init+0x3980>)
 80054d8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80054dc:	611a      	str	r2, [r3, #16]
 80054de:	4b2c      	ldr	r3, [pc, #176]	; (8005590 <LCD_Init+0x3980>)
 80054e0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80054e4:	615a      	str	r2, [r3, #20]
 80054e6:	4b2b      	ldr	r3, [pc, #172]	; (8005594 <LCD_Init+0x3984>)
 80054e8:	2203      	movs	r2, #3
 80054ea:	60da      	str	r2, [r3, #12]
 80054ec:	4b28      	ldr	r3, [pc, #160]	; (8005590 <LCD_Init+0x3980>)
 80054ee:	2280      	movs	r2, #128	; 0x80
 80054f0:	615a      	str	r2, [r3, #20]
 80054f2:	4b27      	ldr	r3, [pc, #156]	; (8005590 <LCD_Init+0x3980>)
 80054f4:	2280      	movs	r2, #128	; 0x80
 80054f6:	611a      	str	r2, [r3, #16]
 80054f8:	4b25      	ldr	r3, [pc, #148]	; (8005590 <LCD_Init+0x3980>)
 80054fa:	f44f 7200 	mov.w	r2, #512	; 0x200
 80054fe:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(SSD_HOR_RESOLUTION-1);
 8005500:	4b23      	ldr	r3, [pc, #140]	; (8005590 <LCD_Init+0x3980>)
 8005502:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005506:	611a      	str	r2, [r3, #16]
 8005508:	4b21      	ldr	r3, [pc, #132]	; (8005590 <LCD_Init+0x3980>)
 800550a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800550e:	615a      	str	r2, [r3, #20]
 8005510:	4b20      	ldr	r3, [pc, #128]	; (8005594 <LCD_Init+0x3984>)
 8005512:	f240 321f 	movw	r2, #799	; 0x31f
 8005516:	60da      	str	r2, [r3, #12]
 8005518:	4b1d      	ldr	r3, [pc, #116]	; (8005590 <LCD_Init+0x3980>)
 800551a:	2280      	movs	r2, #128	; 0x80
 800551c:	615a      	str	r2, [r3, #20]
 800551e:	4b1c      	ldr	r3, [pc, #112]	; (8005590 <LCD_Init+0x3980>)
 8005520:	2280      	movs	r2, #128	; 0x80
 8005522:	611a      	str	r2, [r3, #16]
 8005524:	4b1a      	ldr	r3, [pc, #104]	; (8005590 <LCD_Init+0x3980>)
 8005526:	f44f 7200 	mov.w	r2, #512	; 0x200
 800552a:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA((SSD_VER_RESOLUTION-1)>>8);		//设置LCD垂直像素
 800552c:	4b18      	ldr	r3, [pc, #96]	; (8005590 <LCD_Init+0x3980>)
 800552e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005532:	611a      	str	r2, [r3, #16]
 8005534:	4b16      	ldr	r3, [pc, #88]	; (8005590 <LCD_Init+0x3980>)
 8005536:	f44f 7200 	mov.w	r2, #512	; 0x200
 800553a:	615a      	str	r2, [r3, #20]
 800553c:	4b15      	ldr	r3, [pc, #84]	; (8005594 <LCD_Init+0x3984>)
 800553e:	2201      	movs	r2, #1
 8005540:	60da      	str	r2, [r3, #12]
 8005542:	4b13      	ldr	r3, [pc, #76]	; (8005590 <LCD_Init+0x3980>)
 8005544:	2280      	movs	r2, #128	; 0x80
 8005546:	615a      	str	r2, [r3, #20]
 8005548:	4b11      	ldr	r3, [pc, #68]	; (8005590 <LCD_Init+0x3980>)
 800554a:	2280      	movs	r2, #128	; 0x80
 800554c:	611a      	str	r2, [r3, #16]
 800554e:	4b10      	ldr	r3, [pc, #64]	; (8005590 <LCD_Init+0x3980>)
 8005550:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005554:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(SSD_VER_RESOLUTION-1);
 8005556:	4b0e      	ldr	r3, [pc, #56]	; (8005590 <LCD_Init+0x3980>)
 8005558:	f44f 7280 	mov.w	r2, #256	; 0x100
 800555c:	611a      	str	r2, [r3, #16]
 800555e:	4b0c      	ldr	r3, [pc, #48]	; (8005590 <LCD_Init+0x3980>)
 8005560:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005564:	615a      	str	r2, [r3, #20]
 8005566:	4b0b      	ldr	r3, [pc, #44]	; (8005594 <LCD_Init+0x3984>)
 8005568:	f240 12df 	movw	r2, #479	; 0x1df
 800556c:	60da      	str	r2, [r3, #12]
 800556e:	4b08      	ldr	r3, [pc, #32]	; (8005590 <LCD_Init+0x3980>)
 8005570:	2280      	movs	r2, #128	; 0x80
 8005572:	615a      	str	r2, [r3, #20]
 8005574:	4b06      	ldr	r3, [pc, #24]	; (8005590 <LCD_Init+0x3980>)
 8005576:	2280      	movs	r2, #128	; 0x80
 8005578:	611a      	str	r2, [r3, #16]
 800557a:	4b05      	ldr	r3, [pc, #20]	; (8005590 <LCD_Init+0x3980>)
 800557c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005580:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(0x00);		//RGB序列 
 8005582:	4b03      	ldr	r3, [pc, #12]	; (8005590 <LCD_Init+0x3980>)
 8005584:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005588:	e006      	b.n	8005598 <LCD_Init+0x3988>
 800558a:	bf00      	nop
 800558c:	20000028 	.word	0x20000028
 8005590:	40011000 	.word	0x40011000
 8005594:	40010c00 	.word	0x40010c00
 8005598:	611a      	str	r2, [r3, #16]
 800559a:	4ba3      	ldr	r3, [pc, #652]	; (8005828 <LCD_Init+0x3c18>)
 800559c:	f44f 7200 	mov.w	r2, #512	; 0x200
 80055a0:	615a      	str	r2, [r3, #20]
 80055a2:	4ba2      	ldr	r3, [pc, #648]	; (800582c <LCD_Init+0x3c1c>)
 80055a4:	2200      	movs	r2, #0
 80055a6:	60da      	str	r2, [r3, #12]
 80055a8:	4b9f      	ldr	r3, [pc, #636]	; (8005828 <LCD_Init+0x3c18>)
 80055aa:	2280      	movs	r2, #128	; 0x80
 80055ac:	615a      	str	r2, [r3, #20]
 80055ae:	4b9e      	ldr	r3, [pc, #632]	; (8005828 <LCD_Init+0x3c18>)
 80055b0:	2280      	movs	r2, #128	; 0x80
 80055b2:	611a      	str	r2, [r3, #16]
 80055b4:	4b9c      	ldr	r3, [pc, #624]	; (8005828 <LCD_Init+0x3c18>)
 80055b6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80055ba:	611a      	str	r2, [r3, #16]

		LCD_WR_REG(0xB4);		//Set horizontal period
 80055bc:	20b4      	movs	r0, #180	; 0xb4
 80055be:	f7fb fac5 	bl	8000b4c <LCD_WR_REG>
		LCD_WR_DATA((SSD_HT-1)>>8);
 80055c2:	4b99      	ldr	r3, [pc, #612]	; (8005828 <LCD_Init+0x3c18>)
 80055c4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80055c8:	611a      	str	r2, [r3, #16]
 80055ca:	4b97      	ldr	r3, [pc, #604]	; (8005828 <LCD_Init+0x3c18>)
 80055cc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80055d0:	615a      	str	r2, [r3, #20]
 80055d2:	4b96      	ldr	r3, [pc, #600]	; (800582c <LCD_Init+0x3c1c>)
 80055d4:	2204      	movs	r2, #4
 80055d6:	60da      	str	r2, [r3, #12]
 80055d8:	4b93      	ldr	r3, [pc, #588]	; (8005828 <LCD_Init+0x3c18>)
 80055da:	2280      	movs	r2, #128	; 0x80
 80055dc:	615a      	str	r2, [r3, #20]
 80055de:	4b92      	ldr	r3, [pc, #584]	; (8005828 <LCD_Init+0x3c18>)
 80055e0:	2280      	movs	r2, #128	; 0x80
 80055e2:	611a      	str	r2, [r3, #16]
 80055e4:	4b90      	ldr	r3, [pc, #576]	; (8005828 <LCD_Init+0x3c18>)
 80055e6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80055ea:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(SSD_HT-1);
 80055ec:	4b8e      	ldr	r3, [pc, #568]	; (8005828 <LCD_Init+0x3c18>)
 80055ee:	f44f 7280 	mov.w	r2, #256	; 0x100
 80055f2:	611a      	str	r2, [r3, #16]
 80055f4:	4b8c      	ldr	r3, [pc, #560]	; (8005828 <LCD_Init+0x3c18>)
 80055f6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80055fa:	615a      	str	r2, [r3, #20]
 80055fc:	4b8b      	ldr	r3, [pc, #556]	; (800582c <LCD_Init+0x3c1c>)
 80055fe:	f240 421f 	movw	r2, #1055	; 0x41f
 8005602:	60da      	str	r2, [r3, #12]
 8005604:	4b88      	ldr	r3, [pc, #544]	; (8005828 <LCD_Init+0x3c18>)
 8005606:	2280      	movs	r2, #128	; 0x80
 8005608:	615a      	str	r2, [r3, #20]
 800560a:	4b87      	ldr	r3, [pc, #540]	; (8005828 <LCD_Init+0x3c18>)
 800560c:	2280      	movs	r2, #128	; 0x80
 800560e:	611a      	str	r2, [r3, #16]
 8005610:	4b85      	ldr	r3, [pc, #532]	; (8005828 <LCD_Init+0x3c18>)
 8005612:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005616:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(SSD_HPS>>8);
 8005618:	4b83      	ldr	r3, [pc, #524]	; (8005828 <LCD_Init+0x3c18>)
 800561a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800561e:	611a      	str	r2, [r3, #16]
 8005620:	4b81      	ldr	r3, [pc, #516]	; (8005828 <LCD_Init+0x3c18>)
 8005622:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005626:	615a      	str	r2, [r3, #20]
 8005628:	4b80      	ldr	r3, [pc, #512]	; (800582c <LCD_Init+0x3c1c>)
 800562a:	2200      	movs	r2, #0
 800562c:	60da      	str	r2, [r3, #12]
 800562e:	4b7e      	ldr	r3, [pc, #504]	; (8005828 <LCD_Init+0x3c18>)
 8005630:	2280      	movs	r2, #128	; 0x80
 8005632:	615a      	str	r2, [r3, #20]
 8005634:	4b7c      	ldr	r3, [pc, #496]	; (8005828 <LCD_Init+0x3c18>)
 8005636:	2280      	movs	r2, #128	; 0x80
 8005638:	611a      	str	r2, [r3, #16]
 800563a:	4b7b      	ldr	r3, [pc, #492]	; (8005828 <LCD_Init+0x3c18>)
 800563c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005640:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(SSD_HPS);
 8005642:	4b79      	ldr	r3, [pc, #484]	; (8005828 <LCD_Init+0x3c18>)
 8005644:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005648:	611a      	str	r2, [r3, #16]
 800564a:	4b77      	ldr	r3, [pc, #476]	; (8005828 <LCD_Init+0x3c18>)
 800564c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005650:	615a      	str	r2, [r3, #20]
 8005652:	4b76      	ldr	r3, [pc, #472]	; (800582c <LCD_Init+0x3c1c>)
 8005654:	222e      	movs	r2, #46	; 0x2e
 8005656:	60da      	str	r2, [r3, #12]
 8005658:	4b73      	ldr	r3, [pc, #460]	; (8005828 <LCD_Init+0x3c18>)
 800565a:	2280      	movs	r2, #128	; 0x80
 800565c:	615a      	str	r2, [r3, #20]
 800565e:	4b72      	ldr	r3, [pc, #456]	; (8005828 <LCD_Init+0x3c18>)
 8005660:	2280      	movs	r2, #128	; 0x80
 8005662:	611a      	str	r2, [r3, #16]
 8005664:	4b70      	ldr	r3, [pc, #448]	; (8005828 <LCD_Init+0x3c18>)
 8005666:	f44f 7200 	mov.w	r2, #512	; 0x200
 800566a:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(SSD_HOR_PULSE_WIDTH-1);
 800566c:	4b6e      	ldr	r3, [pc, #440]	; (8005828 <LCD_Init+0x3c18>)
 800566e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005672:	611a      	str	r2, [r3, #16]
 8005674:	4b6c      	ldr	r3, [pc, #432]	; (8005828 <LCD_Init+0x3c18>)
 8005676:	f44f 7200 	mov.w	r2, #512	; 0x200
 800567a:	615a      	str	r2, [r3, #20]
 800567c:	4b6b      	ldr	r3, [pc, #428]	; (800582c <LCD_Init+0x3c1c>)
 800567e:	2200      	movs	r2, #0
 8005680:	60da      	str	r2, [r3, #12]
 8005682:	4b69      	ldr	r3, [pc, #420]	; (8005828 <LCD_Init+0x3c18>)
 8005684:	2280      	movs	r2, #128	; 0x80
 8005686:	615a      	str	r2, [r3, #20]
 8005688:	4b67      	ldr	r3, [pc, #412]	; (8005828 <LCD_Init+0x3c18>)
 800568a:	2280      	movs	r2, #128	; 0x80
 800568c:	611a      	str	r2, [r3, #16]
 800568e:	4b66      	ldr	r3, [pc, #408]	; (8005828 <LCD_Init+0x3c18>)
 8005690:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005694:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(0x00);
 8005696:	4b64      	ldr	r3, [pc, #400]	; (8005828 <LCD_Init+0x3c18>)
 8005698:	f44f 7280 	mov.w	r2, #256	; 0x100
 800569c:	611a      	str	r2, [r3, #16]
 800569e:	4b62      	ldr	r3, [pc, #392]	; (8005828 <LCD_Init+0x3c18>)
 80056a0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80056a4:	615a      	str	r2, [r3, #20]
 80056a6:	4b61      	ldr	r3, [pc, #388]	; (800582c <LCD_Init+0x3c1c>)
 80056a8:	2200      	movs	r2, #0
 80056aa:	60da      	str	r2, [r3, #12]
 80056ac:	4b5e      	ldr	r3, [pc, #376]	; (8005828 <LCD_Init+0x3c18>)
 80056ae:	2280      	movs	r2, #128	; 0x80
 80056b0:	615a      	str	r2, [r3, #20]
 80056b2:	4b5d      	ldr	r3, [pc, #372]	; (8005828 <LCD_Init+0x3c18>)
 80056b4:	2280      	movs	r2, #128	; 0x80
 80056b6:	611a      	str	r2, [r3, #16]
 80056b8:	4b5b      	ldr	r3, [pc, #364]	; (8005828 <LCD_Init+0x3c18>)
 80056ba:	f44f 7200 	mov.w	r2, #512	; 0x200
 80056be:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(0x00);
 80056c0:	4b59      	ldr	r3, [pc, #356]	; (8005828 <LCD_Init+0x3c18>)
 80056c2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80056c6:	611a      	str	r2, [r3, #16]
 80056c8:	4b57      	ldr	r3, [pc, #348]	; (8005828 <LCD_Init+0x3c18>)
 80056ca:	f44f 7200 	mov.w	r2, #512	; 0x200
 80056ce:	615a      	str	r2, [r3, #20]
 80056d0:	4b56      	ldr	r3, [pc, #344]	; (800582c <LCD_Init+0x3c1c>)
 80056d2:	2200      	movs	r2, #0
 80056d4:	60da      	str	r2, [r3, #12]
 80056d6:	4b54      	ldr	r3, [pc, #336]	; (8005828 <LCD_Init+0x3c18>)
 80056d8:	2280      	movs	r2, #128	; 0x80
 80056da:	615a      	str	r2, [r3, #20]
 80056dc:	4b52      	ldr	r3, [pc, #328]	; (8005828 <LCD_Init+0x3c18>)
 80056de:	2280      	movs	r2, #128	; 0x80
 80056e0:	611a      	str	r2, [r3, #16]
 80056e2:	4b51      	ldr	r3, [pc, #324]	; (8005828 <LCD_Init+0x3c18>)
 80056e4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80056e8:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(0x00);
 80056ea:	4b4f      	ldr	r3, [pc, #316]	; (8005828 <LCD_Init+0x3c18>)
 80056ec:	f44f 7280 	mov.w	r2, #256	; 0x100
 80056f0:	611a      	str	r2, [r3, #16]
 80056f2:	4b4d      	ldr	r3, [pc, #308]	; (8005828 <LCD_Init+0x3c18>)
 80056f4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80056f8:	615a      	str	r2, [r3, #20]
 80056fa:	4b4c      	ldr	r3, [pc, #304]	; (800582c <LCD_Init+0x3c1c>)
 80056fc:	2200      	movs	r2, #0
 80056fe:	60da      	str	r2, [r3, #12]
 8005700:	4b49      	ldr	r3, [pc, #292]	; (8005828 <LCD_Init+0x3c18>)
 8005702:	2280      	movs	r2, #128	; 0x80
 8005704:	615a      	str	r2, [r3, #20]
 8005706:	4b48      	ldr	r3, [pc, #288]	; (8005828 <LCD_Init+0x3c18>)
 8005708:	2280      	movs	r2, #128	; 0x80
 800570a:	611a      	str	r2, [r3, #16]
 800570c:	4b46      	ldr	r3, [pc, #280]	; (8005828 <LCD_Init+0x3c18>)
 800570e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005712:	611a      	str	r2, [r3, #16]
		LCD_WR_REG(0xB6);		//Set vertical period
 8005714:	20b6      	movs	r0, #182	; 0xb6
 8005716:	f7fb fa19 	bl	8000b4c <LCD_WR_REG>
		LCD_WR_DATA((SSD_VT-1)>>8);
 800571a:	4b43      	ldr	r3, [pc, #268]	; (8005828 <LCD_Init+0x3c18>)
 800571c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005720:	611a      	str	r2, [r3, #16]
 8005722:	4b41      	ldr	r3, [pc, #260]	; (8005828 <LCD_Init+0x3c18>)
 8005724:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005728:	615a      	str	r2, [r3, #20]
 800572a:	4b40      	ldr	r3, [pc, #256]	; (800582c <LCD_Init+0x3c1c>)
 800572c:	2202      	movs	r2, #2
 800572e:	60da      	str	r2, [r3, #12]
 8005730:	4b3d      	ldr	r3, [pc, #244]	; (8005828 <LCD_Init+0x3c18>)
 8005732:	2280      	movs	r2, #128	; 0x80
 8005734:	615a      	str	r2, [r3, #20]
 8005736:	4b3c      	ldr	r3, [pc, #240]	; (8005828 <LCD_Init+0x3c18>)
 8005738:	2280      	movs	r2, #128	; 0x80
 800573a:	611a      	str	r2, [r3, #16]
 800573c:	4b3a      	ldr	r3, [pc, #232]	; (8005828 <LCD_Init+0x3c18>)
 800573e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005742:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(SSD_VT-1);
 8005744:	4b38      	ldr	r3, [pc, #224]	; (8005828 <LCD_Init+0x3c18>)
 8005746:	f44f 7280 	mov.w	r2, #256	; 0x100
 800574a:	611a      	str	r2, [r3, #16]
 800574c:	4b36      	ldr	r3, [pc, #216]	; (8005828 <LCD_Init+0x3c18>)
 800574e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005752:	615a      	str	r2, [r3, #20]
 8005754:	4b35      	ldr	r3, [pc, #212]	; (800582c <LCD_Init+0x3c1c>)
 8005756:	f44f 7203 	mov.w	r2, #524	; 0x20c
 800575a:	60da      	str	r2, [r3, #12]
 800575c:	4b32      	ldr	r3, [pc, #200]	; (8005828 <LCD_Init+0x3c18>)
 800575e:	2280      	movs	r2, #128	; 0x80
 8005760:	615a      	str	r2, [r3, #20]
 8005762:	4b31      	ldr	r3, [pc, #196]	; (8005828 <LCD_Init+0x3c18>)
 8005764:	2280      	movs	r2, #128	; 0x80
 8005766:	611a      	str	r2, [r3, #16]
 8005768:	4b2f      	ldr	r3, [pc, #188]	; (8005828 <LCD_Init+0x3c18>)
 800576a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800576e:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(SSD_VPS>>8);
 8005770:	4b2d      	ldr	r3, [pc, #180]	; (8005828 <LCD_Init+0x3c18>)
 8005772:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005776:	611a      	str	r2, [r3, #16]
 8005778:	4b2b      	ldr	r3, [pc, #172]	; (8005828 <LCD_Init+0x3c18>)
 800577a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800577e:	615a      	str	r2, [r3, #20]
 8005780:	4b2a      	ldr	r3, [pc, #168]	; (800582c <LCD_Init+0x3c1c>)
 8005782:	2200      	movs	r2, #0
 8005784:	60da      	str	r2, [r3, #12]
 8005786:	4b28      	ldr	r3, [pc, #160]	; (8005828 <LCD_Init+0x3c18>)
 8005788:	2280      	movs	r2, #128	; 0x80
 800578a:	615a      	str	r2, [r3, #20]
 800578c:	4b26      	ldr	r3, [pc, #152]	; (8005828 <LCD_Init+0x3c18>)
 800578e:	2280      	movs	r2, #128	; 0x80
 8005790:	611a      	str	r2, [r3, #16]
 8005792:	4b25      	ldr	r3, [pc, #148]	; (8005828 <LCD_Init+0x3c18>)
 8005794:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005798:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(SSD_VPS);
 800579a:	4b23      	ldr	r3, [pc, #140]	; (8005828 <LCD_Init+0x3c18>)
 800579c:	f44f 7280 	mov.w	r2, #256	; 0x100
 80057a0:	611a      	str	r2, [r3, #16]
 80057a2:	4b21      	ldr	r3, [pc, #132]	; (8005828 <LCD_Init+0x3c18>)
 80057a4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80057a8:	615a      	str	r2, [r3, #20]
 80057aa:	4b20      	ldr	r3, [pc, #128]	; (800582c <LCD_Init+0x3c1c>)
 80057ac:	2217      	movs	r2, #23
 80057ae:	60da      	str	r2, [r3, #12]
 80057b0:	4b1d      	ldr	r3, [pc, #116]	; (8005828 <LCD_Init+0x3c18>)
 80057b2:	2280      	movs	r2, #128	; 0x80
 80057b4:	615a      	str	r2, [r3, #20]
 80057b6:	4b1c      	ldr	r3, [pc, #112]	; (8005828 <LCD_Init+0x3c18>)
 80057b8:	2280      	movs	r2, #128	; 0x80
 80057ba:	611a      	str	r2, [r3, #16]
 80057bc:	4b1a      	ldr	r3, [pc, #104]	; (8005828 <LCD_Init+0x3c18>)
 80057be:	f44f 7200 	mov.w	r2, #512	; 0x200
 80057c2:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(SSD_VER_FRONT_PORCH-1);
 80057c4:	4b18      	ldr	r3, [pc, #96]	; (8005828 <LCD_Init+0x3c18>)
 80057c6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80057ca:	611a      	str	r2, [r3, #16]
 80057cc:	4b16      	ldr	r3, [pc, #88]	; (8005828 <LCD_Init+0x3c18>)
 80057ce:	f44f 7200 	mov.w	r2, #512	; 0x200
 80057d2:	615a      	str	r2, [r3, #20]
 80057d4:	4b15      	ldr	r3, [pc, #84]	; (800582c <LCD_Init+0x3c1c>)
 80057d6:	2215      	movs	r2, #21
 80057d8:	60da      	str	r2, [r3, #12]
 80057da:	4b13      	ldr	r3, [pc, #76]	; (8005828 <LCD_Init+0x3c18>)
 80057dc:	2280      	movs	r2, #128	; 0x80
 80057de:	615a      	str	r2, [r3, #20]
 80057e0:	4b11      	ldr	r3, [pc, #68]	; (8005828 <LCD_Init+0x3c18>)
 80057e2:	2280      	movs	r2, #128	; 0x80
 80057e4:	611a      	str	r2, [r3, #16]
 80057e6:	4b10      	ldr	r3, [pc, #64]	; (8005828 <LCD_Init+0x3c18>)
 80057e8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80057ec:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(0x00);
 80057ee:	4b0e      	ldr	r3, [pc, #56]	; (8005828 <LCD_Init+0x3c18>)
 80057f0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80057f4:	611a      	str	r2, [r3, #16]
 80057f6:	4b0c      	ldr	r3, [pc, #48]	; (8005828 <LCD_Init+0x3c18>)
 80057f8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80057fc:	615a      	str	r2, [r3, #20]
 80057fe:	4b0b      	ldr	r3, [pc, #44]	; (800582c <LCD_Init+0x3c1c>)
 8005800:	2200      	movs	r2, #0
 8005802:	60da      	str	r2, [r3, #12]
 8005804:	4b08      	ldr	r3, [pc, #32]	; (8005828 <LCD_Init+0x3c18>)
 8005806:	2280      	movs	r2, #128	; 0x80
 8005808:	615a      	str	r2, [r3, #20]
 800580a:	4b07      	ldr	r3, [pc, #28]	; (8005828 <LCD_Init+0x3c18>)
 800580c:	2280      	movs	r2, #128	; 0x80
 800580e:	611a      	str	r2, [r3, #16]
 8005810:	4b05      	ldr	r3, [pc, #20]	; (8005828 <LCD_Init+0x3c18>)
 8005812:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005816:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(0x00);
 8005818:	4b03      	ldr	r3, [pc, #12]	; (8005828 <LCD_Init+0x3c18>)
 800581a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800581e:	611a      	str	r2, [r3, #16]
 8005820:	4b01      	ldr	r3, [pc, #4]	; (8005828 <LCD_Init+0x3c18>)
 8005822:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005826:	e003      	b.n	8005830 <LCD_Init+0x3c20>
 8005828:	40011000 	.word	0x40011000
 800582c:	40010c00 	.word	0x40010c00
 8005830:	615a      	str	r2, [r3, #20]
 8005832:	4b8b      	ldr	r3, [pc, #556]	; (8005a60 <LCD_Init+0x3e50>)
 8005834:	2200      	movs	r2, #0
 8005836:	60da      	str	r2, [r3, #12]
 8005838:	4b8a      	ldr	r3, [pc, #552]	; (8005a64 <LCD_Init+0x3e54>)
 800583a:	2280      	movs	r2, #128	; 0x80
 800583c:	615a      	str	r2, [r3, #20]
 800583e:	4b89      	ldr	r3, [pc, #548]	; (8005a64 <LCD_Init+0x3e54>)
 8005840:	2280      	movs	r2, #128	; 0x80
 8005842:	611a      	str	r2, [r3, #16]
 8005844:	4b87      	ldr	r3, [pc, #540]	; (8005a64 <LCD_Init+0x3e54>)
 8005846:	f44f 7200 	mov.w	r2, #512	; 0x200
 800584a:	611a      	str	r2, [r3, #16]

		LCD_WR_REG(0xF0);	//设置SSD1963与CPU接口为16bit  
 800584c:	20f0      	movs	r0, #240	; 0xf0
 800584e:	f7fb f97d 	bl	8000b4c <LCD_WR_REG>
		LCD_WR_DATA(0x03);	//16-bit(565 format) data for 16bpp 
 8005852:	4b84      	ldr	r3, [pc, #528]	; (8005a64 <LCD_Init+0x3e54>)
 8005854:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005858:	611a      	str	r2, [r3, #16]
 800585a:	4b82      	ldr	r3, [pc, #520]	; (8005a64 <LCD_Init+0x3e54>)
 800585c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005860:	615a      	str	r2, [r3, #20]
 8005862:	4b7f      	ldr	r3, [pc, #508]	; (8005a60 <LCD_Init+0x3e50>)
 8005864:	2203      	movs	r2, #3
 8005866:	60da      	str	r2, [r3, #12]
 8005868:	4b7e      	ldr	r3, [pc, #504]	; (8005a64 <LCD_Init+0x3e54>)
 800586a:	2280      	movs	r2, #128	; 0x80
 800586c:	615a      	str	r2, [r3, #20]
 800586e:	4b7d      	ldr	r3, [pc, #500]	; (8005a64 <LCD_Init+0x3e54>)
 8005870:	2280      	movs	r2, #128	; 0x80
 8005872:	611a      	str	r2, [r3, #16]
 8005874:	4b7b      	ldr	r3, [pc, #492]	; (8005a64 <LCD_Init+0x3e54>)
 8005876:	f44f 7200 	mov.w	r2, #512	; 0x200
 800587a:	611a      	str	r2, [r3, #16]

		LCD_WR_REG(0x29);	//开启显示
 800587c:	2029      	movs	r0, #41	; 0x29
 800587e:	f7fb f965 	bl	8000b4c <LCD_WR_REG>
		//设置PWM输出  背光通过占空比可调 
		LCD_WR_REG(0xD0);	//设置自动白平衡DBC
 8005882:	20d0      	movs	r0, #208	; 0xd0
 8005884:	f7fb f962 	bl	8000b4c <LCD_WR_REG>
		LCD_WR_DATA(0x00);	//disable
 8005888:	4b76      	ldr	r3, [pc, #472]	; (8005a64 <LCD_Init+0x3e54>)
 800588a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800588e:	611a      	str	r2, [r3, #16]
 8005890:	4b74      	ldr	r3, [pc, #464]	; (8005a64 <LCD_Init+0x3e54>)
 8005892:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005896:	615a      	str	r2, [r3, #20]
 8005898:	4b71      	ldr	r3, [pc, #452]	; (8005a60 <LCD_Init+0x3e50>)
 800589a:	2200      	movs	r2, #0
 800589c:	60da      	str	r2, [r3, #12]
 800589e:	4b71      	ldr	r3, [pc, #452]	; (8005a64 <LCD_Init+0x3e54>)
 80058a0:	2280      	movs	r2, #128	; 0x80
 80058a2:	615a      	str	r2, [r3, #20]
 80058a4:	4b6f      	ldr	r3, [pc, #444]	; (8005a64 <LCD_Init+0x3e54>)
 80058a6:	2280      	movs	r2, #128	; 0x80
 80058a8:	611a      	str	r2, [r3, #16]
 80058aa:	4b6e      	ldr	r3, [pc, #440]	; (8005a64 <LCD_Init+0x3e54>)
 80058ac:	f44f 7200 	mov.w	r2, #512	; 0x200
 80058b0:	611a      	str	r2, [r3, #16]

		LCD_WR_REG(0xBE);	//配置PWM输出
 80058b2:	20be      	movs	r0, #190	; 0xbe
 80058b4:	f7fb f94a 	bl	8000b4c <LCD_WR_REG>
		LCD_WR_DATA(0x05);	//1设置PWM频率
 80058b8:	4b6a      	ldr	r3, [pc, #424]	; (8005a64 <LCD_Init+0x3e54>)
 80058ba:	f44f 7280 	mov.w	r2, #256	; 0x100
 80058be:	611a      	str	r2, [r3, #16]
 80058c0:	4b68      	ldr	r3, [pc, #416]	; (8005a64 <LCD_Init+0x3e54>)
 80058c2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80058c6:	615a      	str	r2, [r3, #20]
 80058c8:	4b65      	ldr	r3, [pc, #404]	; (8005a60 <LCD_Init+0x3e50>)
 80058ca:	2205      	movs	r2, #5
 80058cc:	60da      	str	r2, [r3, #12]
 80058ce:	4b65      	ldr	r3, [pc, #404]	; (8005a64 <LCD_Init+0x3e54>)
 80058d0:	2280      	movs	r2, #128	; 0x80
 80058d2:	615a      	str	r2, [r3, #20]
 80058d4:	4b63      	ldr	r3, [pc, #396]	; (8005a64 <LCD_Init+0x3e54>)
 80058d6:	2280      	movs	r2, #128	; 0x80
 80058d8:	611a      	str	r2, [r3, #16]
 80058da:	4b62      	ldr	r3, [pc, #392]	; (8005a64 <LCD_Init+0x3e54>)
 80058dc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80058e0:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(0xFE);	//2设置PWM占空比
 80058e2:	4b60      	ldr	r3, [pc, #384]	; (8005a64 <LCD_Init+0x3e54>)
 80058e4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80058e8:	611a      	str	r2, [r3, #16]
 80058ea:	4b5e      	ldr	r3, [pc, #376]	; (8005a64 <LCD_Init+0x3e54>)
 80058ec:	f44f 7200 	mov.w	r2, #512	; 0x200
 80058f0:	615a      	str	r2, [r3, #20]
 80058f2:	4b5b      	ldr	r3, [pc, #364]	; (8005a60 <LCD_Init+0x3e50>)
 80058f4:	22fe      	movs	r2, #254	; 0xfe
 80058f6:	60da      	str	r2, [r3, #12]
 80058f8:	4b5a      	ldr	r3, [pc, #360]	; (8005a64 <LCD_Init+0x3e54>)
 80058fa:	2280      	movs	r2, #128	; 0x80
 80058fc:	615a      	str	r2, [r3, #20]
 80058fe:	4b59      	ldr	r3, [pc, #356]	; (8005a64 <LCD_Init+0x3e54>)
 8005900:	2280      	movs	r2, #128	; 0x80
 8005902:	611a      	str	r2, [r3, #16]
 8005904:	4b57      	ldr	r3, [pc, #348]	; (8005a64 <LCD_Init+0x3e54>)
 8005906:	f44f 7200 	mov.w	r2, #512	; 0x200
 800590a:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(0x01);	//3设置C
 800590c:	4b55      	ldr	r3, [pc, #340]	; (8005a64 <LCD_Init+0x3e54>)
 800590e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005912:	611a      	str	r2, [r3, #16]
 8005914:	4b53      	ldr	r3, [pc, #332]	; (8005a64 <LCD_Init+0x3e54>)
 8005916:	f44f 7200 	mov.w	r2, #512	; 0x200
 800591a:	615a      	str	r2, [r3, #20]
 800591c:	4b50      	ldr	r3, [pc, #320]	; (8005a60 <LCD_Init+0x3e50>)
 800591e:	2201      	movs	r2, #1
 8005920:	60da      	str	r2, [r3, #12]
 8005922:	4b50      	ldr	r3, [pc, #320]	; (8005a64 <LCD_Init+0x3e54>)
 8005924:	2280      	movs	r2, #128	; 0x80
 8005926:	615a      	str	r2, [r3, #20]
 8005928:	4b4e      	ldr	r3, [pc, #312]	; (8005a64 <LCD_Init+0x3e54>)
 800592a:	2280      	movs	r2, #128	; 0x80
 800592c:	611a      	str	r2, [r3, #16]
 800592e:	4b4d      	ldr	r3, [pc, #308]	; (8005a64 <LCD_Init+0x3e54>)
 8005930:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005934:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(0x00);	//4设置D
 8005936:	4b4b      	ldr	r3, [pc, #300]	; (8005a64 <LCD_Init+0x3e54>)
 8005938:	f44f 7280 	mov.w	r2, #256	; 0x100
 800593c:	611a      	str	r2, [r3, #16]
 800593e:	4b49      	ldr	r3, [pc, #292]	; (8005a64 <LCD_Init+0x3e54>)
 8005940:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005944:	615a      	str	r2, [r3, #20]
 8005946:	4b46      	ldr	r3, [pc, #280]	; (8005a60 <LCD_Init+0x3e50>)
 8005948:	2200      	movs	r2, #0
 800594a:	60da      	str	r2, [r3, #12]
 800594c:	4b45      	ldr	r3, [pc, #276]	; (8005a64 <LCD_Init+0x3e54>)
 800594e:	2280      	movs	r2, #128	; 0x80
 8005950:	615a      	str	r2, [r3, #20]
 8005952:	4b44      	ldr	r3, [pc, #272]	; (8005a64 <LCD_Init+0x3e54>)
 8005954:	2280      	movs	r2, #128	; 0x80
 8005956:	611a      	str	r2, [r3, #16]
 8005958:	4b42      	ldr	r3, [pc, #264]	; (8005a64 <LCD_Init+0x3e54>)
 800595a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800595e:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(0x00);	//5设置E 
 8005960:	4b40      	ldr	r3, [pc, #256]	; (8005a64 <LCD_Init+0x3e54>)
 8005962:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005966:	611a      	str	r2, [r3, #16]
 8005968:	4b3e      	ldr	r3, [pc, #248]	; (8005a64 <LCD_Init+0x3e54>)
 800596a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800596e:	615a      	str	r2, [r3, #20]
 8005970:	4b3b      	ldr	r3, [pc, #236]	; (8005a60 <LCD_Init+0x3e50>)
 8005972:	2200      	movs	r2, #0
 8005974:	60da      	str	r2, [r3, #12]
 8005976:	4b3b      	ldr	r3, [pc, #236]	; (8005a64 <LCD_Init+0x3e54>)
 8005978:	2280      	movs	r2, #128	; 0x80
 800597a:	615a      	str	r2, [r3, #20]
 800597c:	4b39      	ldr	r3, [pc, #228]	; (8005a64 <LCD_Init+0x3e54>)
 800597e:	2280      	movs	r2, #128	; 0x80
 8005980:	611a      	str	r2, [r3, #16]
 8005982:	4b38      	ldr	r3, [pc, #224]	; (8005a64 <LCD_Init+0x3e54>)
 8005984:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005988:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(0x00);	//6设置F 
 800598a:	4b36      	ldr	r3, [pc, #216]	; (8005a64 <LCD_Init+0x3e54>)
 800598c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005990:	611a      	str	r2, [r3, #16]
 8005992:	4b34      	ldr	r3, [pc, #208]	; (8005a64 <LCD_Init+0x3e54>)
 8005994:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005998:	615a      	str	r2, [r3, #20]
 800599a:	4b31      	ldr	r3, [pc, #196]	; (8005a60 <LCD_Init+0x3e50>)
 800599c:	2200      	movs	r2, #0
 800599e:	60da      	str	r2, [r3, #12]
 80059a0:	4b30      	ldr	r3, [pc, #192]	; (8005a64 <LCD_Init+0x3e54>)
 80059a2:	2280      	movs	r2, #128	; 0x80
 80059a4:	615a      	str	r2, [r3, #20]
 80059a6:	4b2f      	ldr	r3, [pc, #188]	; (8005a64 <LCD_Init+0x3e54>)
 80059a8:	2280      	movs	r2, #128	; 0x80
 80059aa:	611a      	str	r2, [r3, #16]
 80059ac:	4b2d      	ldr	r3, [pc, #180]	; (8005a64 <LCD_Init+0x3e54>)
 80059ae:	f44f 7200 	mov.w	r2, #512	; 0x200
 80059b2:	611a      	str	r2, [r3, #16]

		LCD_WR_REG(0xB8);	//设置GPIO配置
 80059b4:	20b8      	movs	r0, #184	; 0xb8
 80059b6:	f7fb f8c9 	bl	8000b4c <LCD_WR_REG>
		LCD_WR_DATA(0x03);	//2个IO口设置成输出
 80059ba:	4b2a      	ldr	r3, [pc, #168]	; (8005a64 <LCD_Init+0x3e54>)
 80059bc:	f44f 7280 	mov.w	r2, #256	; 0x100
 80059c0:	611a      	str	r2, [r3, #16]
 80059c2:	4b28      	ldr	r3, [pc, #160]	; (8005a64 <LCD_Init+0x3e54>)
 80059c4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80059c8:	615a      	str	r2, [r3, #20]
 80059ca:	4b25      	ldr	r3, [pc, #148]	; (8005a60 <LCD_Init+0x3e50>)
 80059cc:	2203      	movs	r2, #3
 80059ce:	60da      	str	r2, [r3, #12]
 80059d0:	4b24      	ldr	r3, [pc, #144]	; (8005a64 <LCD_Init+0x3e54>)
 80059d2:	2280      	movs	r2, #128	; 0x80
 80059d4:	615a      	str	r2, [r3, #20]
 80059d6:	4b23      	ldr	r3, [pc, #140]	; (8005a64 <LCD_Init+0x3e54>)
 80059d8:	2280      	movs	r2, #128	; 0x80
 80059da:	611a      	str	r2, [r3, #16]
 80059dc:	4b21      	ldr	r3, [pc, #132]	; (8005a64 <LCD_Init+0x3e54>)
 80059de:	f44f 7200 	mov.w	r2, #512	; 0x200
 80059e2:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(0x01);	//GPIO使用正常的IO功能 
 80059e4:	4b1f      	ldr	r3, [pc, #124]	; (8005a64 <LCD_Init+0x3e54>)
 80059e6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80059ea:	611a      	str	r2, [r3, #16]
 80059ec:	4b1d      	ldr	r3, [pc, #116]	; (8005a64 <LCD_Init+0x3e54>)
 80059ee:	f44f 7200 	mov.w	r2, #512	; 0x200
 80059f2:	615a      	str	r2, [r3, #20]
 80059f4:	4b1a      	ldr	r3, [pc, #104]	; (8005a60 <LCD_Init+0x3e50>)
 80059f6:	2201      	movs	r2, #1
 80059f8:	60da      	str	r2, [r3, #12]
 80059fa:	4b1a      	ldr	r3, [pc, #104]	; (8005a64 <LCD_Init+0x3e54>)
 80059fc:	2280      	movs	r2, #128	; 0x80
 80059fe:	615a      	str	r2, [r3, #20]
 8005a00:	4b18      	ldr	r3, [pc, #96]	; (8005a64 <LCD_Init+0x3e54>)
 8005a02:	2280      	movs	r2, #128	; 0x80
 8005a04:	611a      	str	r2, [r3, #16]
 8005a06:	4b17      	ldr	r3, [pc, #92]	; (8005a64 <LCD_Init+0x3e54>)
 8005a08:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005a0c:	611a      	str	r2, [r3, #16]
		LCD_WR_REG(0xBA);
 8005a0e:	20ba      	movs	r0, #186	; 0xba
 8005a10:	f7fb f89c 	bl	8000b4c <LCD_WR_REG>
		LCD_WR_DATA(0X01);	//GPIO[1:0]=01,控制LCD方向
 8005a14:	4b13      	ldr	r3, [pc, #76]	; (8005a64 <LCD_Init+0x3e54>)
 8005a16:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005a1a:	611a      	str	r2, [r3, #16]
 8005a1c:	4b11      	ldr	r3, [pc, #68]	; (8005a64 <LCD_Init+0x3e54>)
 8005a1e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005a22:	615a      	str	r2, [r3, #20]
 8005a24:	4b0e      	ldr	r3, [pc, #56]	; (8005a60 <LCD_Init+0x3e50>)
 8005a26:	2201      	movs	r2, #1
 8005a28:	60da      	str	r2, [r3, #12]
 8005a2a:	4b0e      	ldr	r3, [pc, #56]	; (8005a64 <LCD_Init+0x3e54>)
 8005a2c:	2280      	movs	r2, #128	; 0x80
 8005a2e:	615a      	str	r2, [r3, #20]
 8005a30:	4b0c      	ldr	r3, [pc, #48]	; (8005a64 <LCD_Init+0x3e54>)
 8005a32:	2280      	movs	r2, #128	; 0x80
 8005a34:	611a      	str	r2, [r3, #16]
 8005a36:	4b0b      	ldr	r3, [pc, #44]	; (8005a64 <LCD_Init+0x3e54>)
 8005a38:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005a3c:	611a      	str	r2, [r3, #16]

		LCD_SSD_BackLightSet(100);	//背光设置为最亮
 8005a3e:	2064      	movs	r0, #100	; 0x64
 8005a40:	f7fb ff36 	bl	80018b0 <LCD_SSD_BackLightSet>
	}
	LCD_Display_Dir(0);		 	//默认为竖屏
 8005a44:	2000      	movs	r0, #0
 8005a46:	f7fb ffd7 	bl	80019f8 <LCD_Display_Dir>
	LCD_LED = 1;					//点亮背光
 8005a4a:	4b07      	ldr	r3, [pc, #28]	; (8005a68 <LCD_Init+0x3e58>)
 8005a4c:	2201      	movs	r2, #1
 8005a4e:	601a      	str	r2, [r3, #0]
	LCD_Clear(WHITE);
 8005a50:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8005a54:	f000 f80a 	bl	8005a6c <LCD_Clear>
}
 8005a58:	bf00      	nop
 8005a5a:	3718      	adds	r7, #24
 8005a5c:	46bd      	mov	sp, r7
 8005a5e:	bd80      	pop	{r7, pc}
 8005a60:	40010c00 	.word	0x40010c00
 8005a64:	40011000 	.word	0x40011000
 8005a68:	422201a8 	.word	0x422201a8

08005a6c <LCD_Clear>:

// Clear the screen with specific color
void LCD_Clear(uint16_t color) {
 8005a6c:	b580      	push	{r7, lr}
 8005a6e:	b084      	sub	sp, #16
 8005a70:	af00      	add	r7, sp, #0
 8005a72:	4603      	mov	r3, r0
 8005a74:	80fb      	strh	r3, [r7, #6]
	uint32_t index = 0;
 8005a76:	2300      	movs	r3, #0
 8005a78:	60fb      	str	r3, [r7, #12]
	uint32_t totalpoint = lcddev.width;
 8005a7a:	4b2a      	ldr	r3, [pc, #168]	; (8005b24 <LCD_Clear+0xb8>)
 8005a7c:	881b      	ldrh	r3, [r3, #0]
 8005a7e:	60bb      	str	r3, [r7, #8]
	totalpoint *= lcddev.height; 			//得到总点数
 8005a80:	4b28      	ldr	r3, [pc, #160]	; (8005b24 <LCD_Clear+0xb8>)
 8005a82:	885b      	ldrh	r3, [r3, #2]
 8005a84:	461a      	mov	r2, r3
 8005a86:	68bb      	ldr	r3, [r7, #8]
 8005a88:	fb02 f303 	mul.w	r3, r2, r3
 8005a8c:	60bb      	str	r3, [r7, #8]
	if ((lcddev.id == 0X6804) && (lcddev.dir == 1)) 			//6804横屏的时候特殊处理
 8005a8e:	4b25      	ldr	r3, [pc, #148]	; (8005b24 <LCD_Clear+0xb8>)
 8005a90:	889b      	ldrh	r3, [r3, #4]
 8005a92:	f646 0204 	movw	r2, #26628	; 0x6804
 8005a96:	4293      	cmp	r3, r2
 8005a98:	d11a      	bne.n	8005ad0 <LCD_Clear+0x64>
 8005a9a:	4b22      	ldr	r3, [pc, #136]	; (8005b24 <LCD_Clear+0xb8>)
 8005a9c:	799b      	ldrb	r3, [r3, #6]
 8005a9e:	2b01      	cmp	r3, #1
 8005aa0:	d116      	bne.n	8005ad0 <LCD_Clear+0x64>
			{
		lcddev.dir = 0;
 8005aa2:	4b20      	ldr	r3, [pc, #128]	; (8005b24 <LCD_Clear+0xb8>)
 8005aa4:	2200      	movs	r2, #0
 8005aa6:	719a      	strb	r2, [r3, #6]
		lcddev.setxcmd = 0X2A;
 8005aa8:	4b1e      	ldr	r3, [pc, #120]	; (8005b24 <LCD_Clear+0xb8>)
 8005aaa:	222a      	movs	r2, #42	; 0x2a
 8005aac:	815a      	strh	r2, [r3, #10]
		lcddev.setycmd = 0X2B;
 8005aae:	4b1d      	ldr	r3, [pc, #116]	; (8005b24 <LCD_Clear+0xb8>)
 8005ab0:	222b      	movs	r2, #43	; 0x2b
 8005ab2:	819a      	strh	r2, [r3, #12]
		LCD_SetCursor(0x00, 0x0000);		//设置光标位置
 8005ab4:	2100      	movs	r1, #0
 8005ab6:	2000      	movs	r0, #0
 8005ab8:	f7fb f91a 	bl	8000cf0 <LCD_SetCursor>
		lcddev.dir = 1;
 8005abc:	4b19      	ldr	r3, [pc, #100]	; (8005b24 <LCD_Clear+0xb8>)
 8005abe:	2201      	movs	r2, #1
 8005ac0:	719a      	strb	r2, [r3, #6]
		lcddev.setxcmd = 0X2B;
 8005ac2:	4b18      	ldr	r3, [pc, #96]	; (8005b24 <LCD_Clear+0xb8>)
 8005ac4:	222b      	movs	r2, #43	; 0x2b
 8005ac6:	815a      	strh	r2, [r3, #10]
		lcddev.setycmd = 0X2A;
 8005ac8:	4b16      	ldr	r3, [pc, #88]	; (8005b24 <LCD_Clear+0xb8>)
 8005aca:	222a      	movs	r2, #42	; 0x2a
 8005acc:	819a      	strh	r2, [r3, #12]
 8005ace:	e003      	b.n	8005ad8 <LCD_Clear+0x6c>
	} else
		LCD_SetCursor(0x00, 0x0000);	//设置光标位置
 8005ad0:	2100      	movs	r1, #0
 8005ad2:	2000      	movs	r0, #0
 8005ad4:	f7fb f90c 	bl	8000cf0 <LCD_SetCursor>
	LCD_WriteRAM_Prepare();     		//开始写入GRAM	  	  
 8005ad8:	f7fb f8fe 	bl	8000cd8 <LCD_WriteRAM_Prepare>
	for (index = 0; index < totalpoint; index++)
 8005adc:	2300      	movs	r3, #0
 8005ade:	60fb      	str	r3, [r7, #12]
 8005ae0:	e017      	b.n	8005b12 <LCD_Clear+0xa6>
		LCD_WR_DATA(color);
 8005ae2:	4b11      	ldr	r3, [pc, #68]	; (8005b28 <LCD_Clear+0xbc>)
 8005ae4:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005ae8:	611a      	str	r2, [r3, #16]
 8005aea:	4b0f      	ldr	r3, [pc, #60]	; (8005b28 <LCD_Clear+0xbc>)
 8005aec:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005af0:	615a      	str	r2, [r3, #20]
 8005af2:	4a0e      	ldr	r2, [pc, #56]	; (8005b2c <LCD_Clear+0xc0>)
 8005af4:	88fb      	ldrh	r3, [r7, #6]
 8005af6:	60d3      	str	r3, [r2, #12]
 8005af8:	4b0b      	ldr	r3, [pc, #44]	; (8005b28 <LCD_Clear+0xbc>)
 8005afa:	2280      	movs	r2, #128	; 0x80
 8005afc:	615a      	str	r2, [r3, #20]
 8005afe:	4b0a      	ldr	r3, [pc, #40]	; (8005b28 <LCD_Clear+0xbc>)
 8005b00:	2280      	movs	r2, #128	; 0x80
 8005b02:	611a      	str	r2, [r3, #16]
 8005b04:	4b08      	ldr	r3, [pc, #32]	; (8005b28 <LCD_Clear+0xbc>)
 8005b06:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005b0a:	611a      	str	r2, [r3, #16]
	for (index = 0; index < totalpoint; index++)
 8005b0c:	68fb      	ldr	r3, [r7, #12]
 8005b0e:	3301      	adds	r3, #1
 8005b10:	60fb      	str	r3, [r7, #12]
 8005b12:	68fa      	ldr	r2, [r7, #12]
 8005b14:	68bb      	ldr	r3, [r7, #8]
 8005b16:	429a      	cmp	r2, r3
 8005b18:	d3e3      	bcc.n	8005ae2 <LCD_Clear+0x76>
}
 8005b1a:	bf00      	nop
 8005b1c:	bf00      	nop
 8005b1e:	3710      	adds	r7, #16
 8005b20:	46bd      	mov	sp, r7
 8005b22:	bd80      	pop	{r7, pc}
 8005b24:	20000028 	.word	0x20000028
 8005b28:	40011000 	.word	0x40011000
 8005b2c:	40010c00 	.word	0x40010c00

08005b30 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8005b30:	b580      	push	{r7, lr}
 8005b32:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8005b34:	f000 f9e8 	bl	8005f08 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8005b38:	f000 f810 	bl	8005b5c <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  LCD_Init();
 8005b3c:	f7fc f868 	bl	8001c10 <LCD_Init>
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8005b40:	f7fa ff60 	bl	8000a04 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8005b44:	f000 f93c 	bl	8005dc0 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_UART_Receive_IT(&huart1, (uint8_t *)rxBuffer, 1);
 8005b48:	2201      	movs	r2, #1
 8005b4a:	4902      	ldr	r1, [pc, #8]	; (8005b54 <main+0x24>)
 8005b4c:	4802      	ldr	r0, [pc, #8]	; (8005b58 <main+0x28>)
 8005b4e:	f001 fb70 	bl	8007232 <HAL_UART_Receive_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8005b52:	e7fe      	b.n	8005b52 <main+0x22>
 8005b54:	20000038 	.word	0x20000038
 8005b58:	20000c0c 	.word	0x20000c0c

08005b5c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8005b5c:	b580      	push	{r7, lr}
 8005b5e:	b090      	sub	sp, #64	; 0x40
 8005b60:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8005b62:	f107 0318 	add.w	r3, r7, #24
 8005b66:	2228      	movs	r2, #40	; 0x28
 8005b68:	2100      	movs	r1, #0
 8005b6a:	4618      	mov	r0, r3
 8005b6c:	f002 f906 	bl	8007d7c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8005b70:	1d3b      	adds	r3, r7, #4
 8005b72:	2200      	movs	r2, #0
 8005b74:	601a      	str	r2, [r3, #0]
 8005b76:	605a      	str	r2, [r3, #4]
 8005b78:	609a      	str	r2, [r3, #8]
 8005b7a:	60da      	str	r2, [r3, #12]
 8005b7c:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8005b7e:	2301      	movs	r3, #1
 8005b80:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8005b82:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8005b86:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8005b88:	2300      	movs	r3, #0
 8005b8a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8005b8c:	2301      	movs	r3, #1
 8005b8e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8005b90:	2302      	movs	r3, #2
 8005b92:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8005b94:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8005b98:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8005b9a:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8005b9e:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8005ba0:	f107 0318 	add.w	r3, r7, #24
 8005ba4:	4618      	mov	r0, r3
 8005ba6:	f000 fe61 	bl	800686c <HAL_RCC_OscConfig>
 8005baa:	4603      	mov	r3, r0
 8005bac:	2b00      	cmp	r3, #0
 8005bae:	d001      	beq.n	8005bb4 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8005bb0:	f000 f819 	bl	8005be6 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8005bb4:	230f      	movs	r3, #15
 8005bb6:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8005bb8:	2302      	movs	r3, #2
 8005bba:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8005bbc:	2300      	movs	r3, #0
 8005bbe:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8005bc0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005bc4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8005bc6:	2300      	movs	r3, #0
 8005bc8:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8005bca:	1d3b      	adds	r3, r7, #4
 8005bcc:	2102      	movs	r1, #2
 8005bce:	4618      	mov	r0, r3
 8005bd0:	f001 f8ce 	bl	8006d70 <HAL_RCC_ClockConfig>
 8005bd4:	4603      	mov	r3, r0
 8005bd6:	2b00      	cmp	r3, #0
 8005bd8:	d001      	beq.n	8005bde <SystemClock_Config+0x82>
  {
    Error_Handler();
 8005bda:	f000 f804 	bl	8005be6 <Error_Handler>
  }
}
 8005bde:	bf00      	nop
 8005be0:	3740      	adds	r7, #64	; 0x40
 8005be2:	46bd      	mov	sp, r7
 8005be4:	bd80      	pop	{r7, pc}

08005be6 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8005be6:	b480      	push	{r7}
 8005be8:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8005bea:	b672      	cpsid	i
}
 8005bec:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8005bee:	e7fe      	b.n	8005bee <Error_Handler+0x8>

08005bf0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8005bf0:	b580      	push	{r7, lr}
 8005bf2:	b084      	sub	sp, #16
 8005bf4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8005bf6:	4b16      	ldr	r3, [pc, #88]	; (8005c50 <HAL_MspInit+0x60>)
 8005bf8:	699b      	ldr	r3, [r3, #24]
 8005bfa:	4a15      	ldr	r2, [pc, #84]	; (8005c50 <HAL_MspInit+0x60>)
 8005bfc:	f043 0301 	orr.w	r3, r3, #1
 8005c00:	6193      	str	r3, [r2, #24]
 8005c02:	4b13      	ldr	r3, [pc, #76]	; (8005c50 <HAL_MspInit+0x60>)
 8005c04:	699b      	ldr	r3, [r3, #24]
 8005c06:	f003 0301 	and.w	r3, r3, #1
 8005c0a:	60bb      	str	r3, [r7, #8]
 8005c0c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8005c0e:	4b10      	ldr	r3, [pc, #64]	; (8005c50 <HAL_MspInit+0x60>)
 8005c10:	69db      	ldr	r3, [r3, #28]
 8005c12:	4a0f      	ldr	r2, [pc, #60]	; (8005c50 <HAL_MspInit+0x60>)
 8005c14:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005c18:	61d3      	str	r3, [r2, #28]
 8005c1a:	4b0d      	ldr	r3, [pc, #52]	; (8005c50 <HAL_MspInit+0x60>)
 8005c1c:	69db      	ldr	r3, [r3, #28]
 8005c1e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005c22:	607b      	str	r3, [r7, #4]
 8005c24:	687b      	ldr	r3, [r7, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_2);
 8005c26:	2005      	movs	r0, #5
 8005c28:	f000 fac0 	bl	80061ac <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8005c2c:	4b09      	ldr	r3, [pc, #36]	; (8005c54 <HAL_MspInit+0x64>)
 8005c2e:	685b      	ldr	r3, [r3, #4]
 8005c30:	60fb      	str	r3, [r7, #12]
 8005c32:	68fb      	ldr	r3, [r7, #12]
 8005c34:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8005c38:	60fb      	str	r3, [r7, #12]
 8005c3a:	68fb      	ldr	r3, [r7, #12]
 8005c3c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8005c40:	60fb      	str	r3, [r7, #12]
 8005c42:	4a04      	ldr	r2, [pc, #16]	; (8005c54 <HAL_MspInit+0x64>)
 8005c44:	68fb      	ldr	r3, [r7, #12]
 8005c46:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8005c48:	bf00      	nop
 8005c4a:	3710      	adds	r7, #16
 8005c4c:	46bd      	mov	sp, r7
 8005c4e:	bd80      	pop	{r7, pc}
 8005c50:	40021000 	.word	0x40021000
 8005c54:	40010000 	.word	0x40010000

08005c58 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8005c58:	b480      	push	{r7}
 8005c5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8005c5c:	e7fe      	b.n	8005c5c <NMI_Handler+0x4>

08005c5e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8005c5e:	b480      	push	{r7}
 8005c60:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8005c62:	e7fe      	b.n	8005c62 <HardFault_Handler+0x4>

08005c64 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8005c64:	b480      	push	{r7}
 8005c66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8005c68:	e7fe      	b.n	8005c68 <MemManage_Handler+0x4>

08005c6a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8005c6a:	b480      	push	{r7}
 8005c6c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8005c6e:	e7fe      	b.n	8005c6e <BusFault_Handler+0x4>

08005c70 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8005c70:	b480      	push	{r7}
 8005c72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8005c74:	e7fe      	b.n	8005c74 <UsageFault_Handler+0x4>

08005c76 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8005c76:	b480      	push	{r7}
 8005c78:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8005c7a:	bf00      	nop
 8005c7c:	46bd      	mov	sp, r7
 8005c7e:	bc80      	pop	{r7}
 8005c80:	4770      	bx	lr

08005c82 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8005c82:	b480      	push	{r7}
 8005c84:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8005c86:	bf00      	nop
 8005c88:	46bd      	mov	sp, r7
 8005c8a:	bc80      	pop	{r7}
 8005c8c:	4770      	bx	lr

08005c8e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8005c8e:	b480      	push	{r7}
 8005c90:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8005c92:	bf00      	nop
 8005c94:	46bd      	mov	sp, r7
 8005c96:	bc80      	pop	{r7}
 8005c98:	4770      	bx	lr

08005c9a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8005c9a:	b580      	push	{r7, lr}
 8005c9c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8005c9e:	f000 f979 	bl	8005f94 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8005ca2:	bf00      	nop
 8005ca4:	bd80      	pop	{r7, pc}

08005ca6 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8005ca6:	b580      	push	{r7, lr}
 8005ca8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(KEY_WK_Pin);
 8005caa:	2001      	movs	r0, #1
 8005cac:	f000 fdc6 	bl	800683c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8005cb0:	bf00      	nop
 8005cb2:	bd80      	pop	{r7, pc}

08005cb4 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8005cb4:	b580      	push	{r7, lr}
 8005cb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(KEY0_Pin);
 8005cb8:	2020      	movs	r0, #32
 8005cba:	f000 fdbf 	bl	800683c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8005cbe:	bf00      	nop
 8005cc0:	bd80      	pop	{r7, pc}
	...

08005cc4 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8005cc4:	b580      	push	{r7, lr}
 8005cc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8005cc8:	4804      	ldr	r0, [pc, #16]	; (8005cdc <USART1_IRQHandler+0x18>)
 8005cca:	f001 fad7 	bl	800727c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */
  HAL_UART_Receive_IT(&huart1,(uint8_t*)rxBuffer,1);
 8005cce:	2201      	movs	r2, #1
 8005cd0:	4903      	ldr	r1, [pc, #12]	; (8005ce0 <USART1_IRQHandler+0x1c>)
 8005cd2:	4802      	ldr	r0, [pc, #8]	; (8005cdc <USART1_IRQHandler+0x18>)
 8005cd4:	f001 faad 	bl	8007232 <HAL_UART_Receive_IT>
  /* USER CODE END USART1_IRQn 1 */
}
 8005cd8:	bf00      	nop
 8005cda:	bd80      	pop	{r7, pc}
 8005cdc:	20000c0c 	.word	0x20000c0c
 8005ce0:	20000038 	.word	0x20000038

08005ce4 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8005ce4:	b580      	push	{r7, lr}
 8005ce6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(KEY1_Pin);
 8005ce8:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8005cec:	f000 fda6 	bl	800683c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8005cf0:	bf00      	nop
 8005cf2:	bd80      	pop	{r7, pc}

08005cf4 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 1 */

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8005cf4:	b580      	push	{r7, lr}
 8005cf6:	b082      	sub	sp, #8
 8005cf8:	af00      	add	r7, sp, #0
 8005cfa:	6078      	str	r0, [r7, #4]
	if(huart->Instance==USART1){
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	4a11      	ldr	r2, [pc, #68]	; (8005d48 <HAL_UART_RxCpltCallback+0x54>)
 8005d02:	4293      	cmp	r3, r2
 8005d04:	d11b      	bne.n	8005d3e <HAL_UART_RxCpltCallback+0x4a>
		static unsigned char uRx_Data[1024] = {0};
		static unsigned char uLength = 0;
		if(rxBuffer[0] == '\n'){
 8005d06:	4b11      	ldr	r3, [pc, #68]	; (8005d4c <HAL_UART_RxCpltCallback+0x58>)
 8005d08:	781b      	ldrb	r3, [r3, #0]
 8005d0a:	2b0a      	cmp	r3, #10
 8005d0c:	d10c      	bne.n	8005d28 <HAL_UART_RxCpltCallback+0x34>
			HAL_UART_Transmit(&huart1, uRx_Data, uLength, 0xffff);
 8005d0e:	4b10      	ldr	r3, [pc, #64]	; (8005d50 <HAL_UART_RxCpltCallback+0x5c>)
 8005d10:	781b      	ldrb	r3, [r3, #0]
 8005d12:	b29a      	uxth	r2, r3
 8005d14:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8005d18:	490e      	ldr	r1, [pc, #56]	; (8005d54 <HAL_UART_RxCpltCallback+0x60>)
 8005d1a:	480f      	ldr	r0, [pc, #60]	; (8005d58 <HAL_UART_RxCpltCallback+0x64>)
 8005d1c:	f001 fa06 	bl	800712c <HAL_UART_Transmit>
			//LCD_ShowString(30, 40, 200, 24, 24, (uint8_t*) uRx_Data);
			uLength = 0;
 8005d20:	4b0b      	ldr	r3, [pc, #44]	; (8005d50 <HAL_UART_RxCpltCallback+0x5c>)
 8005d22:	2200      	movs	r2, #0
 8005d24:	701a      	strb	r2, [r3, #0]
		}
		else{
			uRx_Data[uLength++] = rxBuffer[0];
		}
	}
}
 8005d26:	e00a      	b.n	8005d3e <HAL_UART_RxCpltCallback+0x4a>
			uRx_Data[uLength++] = rxBuffer[0];
 8005d28:	4b09      	ldr	r3, [pc, #36]	; (8005d50 <HAL_UART_RxCpltCallback+0x5c>)
 8005d2a:	781b      	ldrb	r3, [r3, #0]
 8005d2c:	1c5a      	adds	r2, r3, #1
 8005d2e:	b2d1      	uxtb	r1, r2
 8005d30:	4a07      	ldr	r2, [pc, #28]	; (8005d50 <HAL_UART_RxCpltCallback+0x5c>)
 8005d32:	7011      	strb	r1, [r2, #0]
 8005d34:	461a      	mov	r2, r3
 8005d36:	4b05      	ldr	r3, [pc, #20]	; (8005d4c <HAL_UART_RxCpltCallback+0x58>)
 8005d38:	7819      	ldrb	r1, [r3, #0]
 8005d3a:	4b06      	ldr	r3, [pc, #24]	; (8005d54 <HAL_UART_RxCpltCallback+0x60>)
 8005d3c:	5499      	strb	r1, [r3, r2]
}
 8005d3e:	bf00      	nop
 8005d40:	3708      	adds	r7, #8
 8005d42:	46bd      	mov	sp, r7
 8005d44:	bd80      	pop	{r7, pc}
 8005d46:	bf00      	nop
 8005d48:	40013800 	.word	0x40013800
 8005d4c:	20000038 	.word	0x20000038
 8005d50:	20000808 	.word	0x20000808
 8005d54:	2000080c 	.word	0x2000080c
 8005d58:	20000c0c 	.word	0x20000c0c

08005d5c <HAL_GPIO_EXTI_Callback>:

int text_cnt = 0;
char str[100];

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8005d5c:	b580      	push	{r7, lr}
 8005d5e:	b082      	sub	sp, #8
 8005d60:	af00      	add	r7, sp, #0
 8005d62:	4603      	mov	r3, r0
 8005d64:	80fb      	strh	r3, [r7, #6]
	HAL_Delay(100);
 8005d66:	2064      	movs	r0, #100	; 0x64
 8005d68:	f000 f930 	bl	8005fcc <HAL_Delay>
	switch(GPIO_Pin){
 8005d6c:	88fb      	ldrh	r3, [r7, #6]
 8005d6e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005d72:	d00b      	beq.n	8005d8c <HAL_GPIO_EXTI_Callback+0x30>
 8005d74:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005d78:	dc13      	bgt.n	8005da2 <HAL_GPIO_EXTI_Callback+0x46>
 8005d7a:	2b01      	cmp	r3, #1
 8005d7c:	d00c      	beq.n	8005d98 <HAL_GPIO_EXTI_Callback+0x3c>
 8005d7e:	2b20      	cmp	r3, #32
 8005d80:	d10f      	bne.n	8005da2 <HAL_GPIO_EXTI_Callback+0x46>
		case KEY0_Pin:
			if (HAL_GPIO_ReadPin(KEY0_GPIO_Port, KEY0_Pin) == GPIO_PIN_RESET){
 8005d82:	2120      	movs	r1, #32
 8005d84:	4809      	ldr	r0, [pc, #36]	; (8005dac <HAL_GPIO_EXTI_Callback+0x50>)
 8005d86:	f000 fd29 	bl	80067dc <HAL_GPIO_ReadPin>
			}
			break;
 8005d8a:	e00b      	b.n	8005da4 <HAL_GPIO_EXTI_Callback+0x48>
		case KEY1_Pin:
			if (HAL_GPIO_ReadPin(KEY1_GPIO_Port, KEY1_Pin) == GPIO_PIN_RESET){
 8005d8c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005d90:	4807      	ldr	r0, [pc, #28]	; (8005db0 <HAL_GPIO_EXTI_Callback+0x54>)
 8005d92:	f000 fd23 	bl	80067dc <HAL_GPIO_ReadPin>
			}
			break;
 8005d96:	e005      	b.n	8005da4 <HAL_GPIO_EXTI_Callback+0x48>
		case KEY_WK_Pin:
			if (HAL_GPIO_ReadPin(KEY_WK_GPIO_Port, KEY_WK_Pin) == GPIO_PIN_RESET){
 8005d98:	2101      	movs	r1, #1
 8005d9a:	4805      	ldr	r0, [pc, #20]	; (8005db0 <HAL_GPIO_EXTI_Callback+0x54>)
 8005d9c:	f000 fd1e 	bl	80067dc <HAL_GPIO_ReadPin>
			}
			break;
 8005da0:	e000      	b.n	8005da4 <HAL_GPIO_EXTI_Callback+0x48>
		default:
			break;
 8005da2:	bf00      	nop
	}

}
 8005da4:	bf00      	nop
 8005da6:	3708      	adds	r7, #8
 8005da8:	46bd      	mov	sp, r7
 8005daa:	bd80      	pop	{r7, pc}
 8005dac:	40011000 	.word	0x40011000
 8005db0:	40010800 	.word	0x40010800

08005db4 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8005db4:	b480      	push	{r7}
 8005db6:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8005db8:	bf00      	nop
 8005dba:	46bd      	mov	sp, r7
 8005dbc:	bc80      	pop	{r7}
 8005dbe:	4770      	bx	lr

08005dc0 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8005dc0:	b580      	push	{r7, lr}
 8005dc2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8005dc4:	4b11      	ldr	r3, [pc, #68]	; (8005e0c <MX_USART1_UART_Init+0x4c>)
 8005dc6:	4a12      	ldr	r2, [pc, #72]	; (8005e10 <MX_USART1_UART_Init+0x50>)
 8005dc8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8005dca:	4b10      	ldr	r3, [pc, #64]	; (8005e0c <MX_USART1_UART_Init+0x4c>)
 8005dcc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8005dd0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8005dd2:	4b0e      	ldr	r3, [pc, #56]	; (8005e0c <MX_USART1_UART_Init+0x4c>)
 8005dd4:	2200      	movs	r2, #0
 8005dd6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8005dd8:	4b0c      	ldr	r3, [pc, #48]	; (8005e0c <MX_USART1_UART_Init+0x4c>)
 8005dda:	2200      	movs	r2, #0
 8005ddc:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8005dde:	4b0b      	ldr	r3, [pc, #44]	; (8005e0c <MX_USART1_UART_Init+0x4c>)
 8005de0:	2200      	movs	r2, #0
 8005de2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8005de4:	4b09      	ldr	r3, [pc, #36]	; (8005e0c <MX_USART1_UART_Init+0x4c>)
 8005de6:	220c      	movs	r2, #12
 8005de8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8005dea:	4b08      	ldr	r3, [pc, #32]	; (8005e0c <MX_USART1_UART_Init+0x4c>)
 8005dec:	2200      	movs	r2, #0
 8005dee:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8005df0:	4b06      	ldr	r3, [pc, #24]	; (8005e0c <MX_USART1_UART_Init+0x4c>)
 8005df2:	2200      	movs	r2, #0
 8005df4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8005df6:	4805      	ldr	r0, [pc, #20]	; (8005e0c <MX_USART1_UART_Init+0x4c>)
 8005df8:	f001 f948 	bl	800708c <HAL_UART_Init>
 8005dfc:	4603      	mov	r3, r0
 8005dfe:	2b00      	cmp	r3, #0
 8005e00:	d001      	beq.n	8005e06 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8005e02:	f7ff fef0 	bl	8005be6 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8005e06:	bf00      	nop
 8005e08:	bd80      	pop	{r7, pc}
 8005e0a:	bf00      	nop
 8005e0c:	20000c0c 	.word	0x20000c0c
 8005e10:	40013800 	.word	0x40013800

08005e14 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8005e14:	b580      	push	{r7, lr}
 8005e16:	b088      	sub	sp, #32
 8005e18:	af00      	add	r7, sp, #0
 8005e1a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005e1c:	f107 0310 	add.w	r3, r7, #16
 8005e20:	2200      	movs	r2, #0
 8005e22:	601a      	str	r2, [r3, #0]
 8005e24:	605a      	str	r2, [r3, #4]
 8005e26:	609a      	str	r2, [r3, #8]
 8005e28:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	4a20      	ldr	r2, [pc, #128]	; (8005eb0 <HAL_UART_MspInit+0x9c>)
 8005e30:	4293      	cmp	r3, r2
 8005e32:	d139      	bne.n	8005ea8 <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8005e34:	4b1f      	ldr	r3, [pc, #124]	; (8005eb4 <HAL_UART_MspInit+0xa0>)
 8005e36:	699b      	ldr	r3, [r3, #24]
 8005e38:	4a1e      	ldr	r2, [pc, #120]	; (8005eb4 <HAL_UART_MspInit+0xa0>)
 8005e3a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005e3e:	6193      	str	r3, [r2, #24]
 8005e40:	4b1c      	ldr	r3, [pc, #112]	; (8005eb4 <HAL_UART_MspInit+0xa0>)
 8005e42:	699b      	ldr	r3, [r3, #24]
 8005e44:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005e48:	60fb      	str	r3, [r7, #12]
 8005e4a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005e4c:	4b19      	ldr	r3, [pc, #100]	; (8005eb4 <HAL_UART_MspInit+0xa0>)
 8005e4e:	699b      	ldr	r3, [r3, #24]
 8005e50:	4a18      	ldr	r2, [pc, #96]	; (8005eb4 <HAL_UART_MspInit+0xa0>)
 8005e52:	f043 0304 	orr.w	r3, r3, #4
 8005e56:	6193      	str	r3, [r2, #24]
 8005e58:	4b16      	ldr	r3, [pc, #88]	; (8005eb4 <HAL_UART_MspInit+0xa0>)
 8005e5a:	699b      	ldr	r3, [r3, #24]
 8005e5c:	f003 0304 	and.w	r3, r3, #4
 8005e60:	60bb      	str	r3, [r7, #8]
 8005e62:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8005e64:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005e68:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005e6a:	2302      	movs	r3, #2
 8005e6c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8005e6e:	2303      	movs	r3, #3
 8005e70:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005e72:	f107 0310 	add.w	r3, r7, #16
 8005e76:	4619      	mov	r1, r3
 8005e78:	480f      	ldr	r0, [pc, #60]	; (8005eb8 <HAL_UART_MspInit+0xa4>)
 8005e7a:	f000 fb1b 	bl	80064b4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8005e7e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005e82:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8005e84:	2300      	movs	r3, #0
 8005e86:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005e88:	2300      	movs	r3, #0
 8005e8a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005e8c:	f107 0310 	add.w	r3, r7, #16
 8005e90:	4619      	mov	r1, r3
 8005e92:	4809      	ldr	r0, [pc, #36]	; (8005eb8 <HAL_UART_MspInit+0xa4>)
 8005e94:	f000 fb0e 	bl	80064b4 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 1, 0);
 8005e98:	2200      	movs	r2, #0
 8005e9a:	2101      	movs	r1, #1
 8005e9c:	2025      	movs	r0, #37	; 0x25
 8005e9e:	f000 f990 	bl	80061c2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8005ea2:	2025      	movs	r0, #37	; 0x25
 8005ea4:	f000 f9a9 	bl	80061fa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8005ea8:	bf00      	nop
 8005eaa:	3720      	adds	r7, #32
 8005eac:	46bd      	mov	sp, r7
 8005eae:	bd80      	pop	{r7, pc}
 8005eb0:	40013800 	.word	0x40013800
 8005eb4:	40021000 	.word	0x40021000
 8005eb8:	40010800 	.word	0x40010800

08005ebc <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8005ebc:	f7ff ff7a 	bl	8005db4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8005ec0:	480b      	ldr	r0, [pc, #44]	; (8005ef0 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8005ec2:	490c      	ldr	r1, [pc, #48]	; (8005ef4 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8005ec4:	4a0c      	ldr	r2, [pc, #48]	; (8005ef8 <LoopFillZerobss+0x16>)
  movs r3, #0
 8005ec6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8005ec8:	e002      	b.n	8005ed0 <LoopCopyDataInit>

08005eca <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8005eca:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8005ecc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8005ece:	3304      	adds	r3, #4

08005ed0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8005ed0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8005ed2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8005ed4:	d3f9      	bcc.n	8005eca <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8005ed6:	4a09      	ldr	r2, [pc, #36]	; (8005efc <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8005ed8:	4c09      	ldr	r4, [pc, #36]	; (8005f00 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8005eda:	2300      	movs	r3, #0
  b LoopFillZerobss
 8005edc:	e001      	b.n	8005ee2 <LoopFillZerobss>

08005ede <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8005ede:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8005ee0:	3204      	adds	r2, #4

08005ee2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8005ee2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8005ee4:	d3fb      	bcc.n	8005ede <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8005ee6:	f001 ff51 	bl	8007d8c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8005eea:	f7ff fe21 	bl	8005b30 <main>
  bx lr
 8005eee:	4770      	bx	lr
  ldr r0, =_sdata
 8005ef0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8005ef4:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8005ef8:	08007e20 	.word	0x08007e20
  ldr r2, =_sbss
 8005efc:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8005f00:	20000c58 	.word	0x20000c58

08005f04 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8005f04:	e7fe      	b.n	8005f04 <ADC1_2_IRQHandler>
	...

08005f08 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8005f08:	b580      	push	{r7, lr}
 8005f0a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8005f0c:	4b08      	ldr	r3, [pc, #32]	; (8005f30 <HAL_Init+0x28>)
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	4a07      	ldr	r2, [pc, #28]	; (8005f30 <HAL_Init+0x28>)
 8005f12:	f043 0310 	orr.w	r3, r3, #16
 8005f16:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8005f18:	2003      	movs	r0, #3
 8005f1a:	f000 f947 	bl	80061ac <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8005f1e:	2000      	movs	r0, #0
 8005f20:	f000 f808 	bl	8005f34 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8005f24:	f7ff fe64 	bl	8005bf0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8005f28:	2300      	movs	r3, #0
}
 8005f2a:	4618      	mov	r0, r3
 8005f2c:	bd80      	pop	{r7, pc}
 8005f2e:	bf00      	nop
 8005f30:	40022000 	.word	0x40022000

08005f34 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8005f34:	b580      	push	{r7, lr}
 8005f36:	b082      	sub	sp, #8
 8005f38:	af00      	add	r7, sp, #0
 8005f3a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8005f3c:	4b12      	ldr	r3, [pc, #72]	; (8005f88 <HAL_InitTick+0x54>)
 8005f3e:	681a      	ldr	r2, [r3, #0]
 8005f40:	4b12      	ldr	r3, [pc, #72]	; (8005f8c <HAL_InitTick+0x58>)
 8005f42:	781b      	ldrb	r3, [r3, #0]
 8005f44:	4619      	mov	r1, r3
 8005f46:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8005f4a:	fbb3 f3f1 	udiv	r3, r3, r1
 8005f4e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005f52:	4618      	mov	r0, r3
 8005f54:	f000 f95f 	bl	8006216 <HAL_SYSTICK_Config>
 8005f58:	4603      	mov	r3, r0
 8005f5a:	2b00      	cmp	r3, #0
 8005f5c:	d001      	beq.n	8005f62 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8005f5e:	2301      	movs	r3, #1
 8005f60:	e00e      	b.n	8005f80 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	2b0f      	cmp	r3, #15
 8005f66:	d80a      	bhi.n	8005f7e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8005f68:	2200      	movs	r2, #0
 8005f6a:	6879      	ldr	r1, [r7, #4]
 8005f6c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005f70:	f000 f927 	bl	80061c2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8005f74:	4a06      	ldr	r2, [pc, #24]	; (8005f90 <HAL_InitTick+0x5c>)
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8005f7a:	2300      	movs	r3, #0
 8005f7c:	e000      	b.n	8005f80 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8005f7e:	2301      	movs	r3, #1
}
 8005f80:	4618      	mov	r0, r3
 8005f82:	3708      	adds	r7, #8
 8005f84:	46bd      	mov	sp, r7
 8005f86:	bd80      	pop	{r7, pc}
 8005f88:	20000000 	.word	0x20000000
 8005f8c:	20000008 	.word	0x20000008
 8005f90:	20000004 	.word	0x20000004

08005f94 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8005f94:	b480      	push	{r7}
 8005f96:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8005f98:	4b05      	ldr	r3, [pc, #20]	; (8005fb0 <HAL_IncTick+0x1c>)
 8005f9a:	781b      	ldrb	r3, [r3, #0]
 8005f9c:	461a      	mov	r2, r3
 8005f9e:	4b05      	ldr	r3, [pc, #20]	; (8005fb4 <HAL_IncTick+0x20>)
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	4413      	add	r3, r2
 8005fa4:	4a03      	ldr	r2, [pc, #12]	; (8005fb4 <HAL_IncTick+0x20>)
 8005fa6:	6013      	str	r3, [r2, #0]
}
 8005fa8:	bf00      	nop
 8005faa:	46bd      	mov	sp, r7
 8005fac:	bc80      	pop	{r7}
 8005fae:	4770      	bx	lr
 8005fb0:	20000008 	.word	0x20000008
 8005fb4:	20000c54 	.word	0x20000c54

08005fb8 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8005fb8:	b480      	push	{r7}
 8005fba:	af00      	add	r7, sp, #0
  return uwTick;
 8005fbc:	4b02      	ldr	r3, [pc, #8]	; (8005fc8 <HAL_GetTick+0x10>)
 8005fbe:	681b      	ldr	r3, [r3, #0]
}
 8005fc0:	4618      	mov	r0, r3
 8005fc2:	46bd      	mov	sp, r7
 8005fc4:	bc80      	pop	{r7}
 8005fc6:	4770      	bx	lr
 8005fc8:	20000c54 	.word	0x20000c54

08005fcc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8005fcc:	b580      	push	{r7, lr}
 8005fce:	b084      	sub	sp, #16
 8005fd0:	af00      	add	r7, sp, #0
 8005fd2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8005fd4:	f7ff fff0 	bl	8005fb8 <HAL_GetTick>
 8005fd8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8005fde:	68fb      	ldr	r3, [r7, #12]
 8005fe0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005fe4:	d005      	beq.n	8005ff2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8005fe6:	4b0a      	ldr	r3, [pc, #40]	; (8006010 <HAL_Delay+0x44>)
 8005fe8:	781b      	ldrb	r3, [r3, #0]
 8005fea:	461a      	mov	r2, r3
 8005fec:	68fb      	ldr	r3, [r7, #12]
 8005fee:	4413      	add	r3, r2
 8005ff0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8005ff2:	bf00      	nop
 8005ff4:	f7ff ffe0 	bl	8005fb8 <HAL_GetTick>
 8005ff8:	4602      	mov	r2, r0
 8005ffa:	68bb      	ldr	r3, [r7, #8]
 8005ffc:	1ad3      	subs	r3, r2, r3
 8005ffe:	68fa      	ldr	r2, [r7, #12]
 8006000:	429a      	cmp	r2, r3
 8006002:	d8f7      	bhi.n	8005ff4 <HAL_Delay+0x28>
  {
  }
}
 8006004:	bf00      	nop
 8006006:	bf00      	nop
 8006008:	3710      	adds	r7, #16
 800600a:	46bd      	mov	sp, r7
 800600c:	bd80      	pop	{r7, pc}
 800600e:	bf00      	nop
 8006010:	20000008 	.word	0x20000008

08006014 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006014:	b480      	push	{r7}
 8006016:	b085      	sub	sp, #20
 8006018:	af00      	add	r7, sp, #0
 800601a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	f003 0307 	and.w	r3, r3, #7
 8006022:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8006024:	4b0c      	ldr	r3, [pc, #48]	; (8006058 <__NVIC_SetPriorityGrouping+0x44>)
 8006026:	68db      	ldr	r3, [r3, #12]
 8006028:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800602a:	68ba      	ldr	r2, [r7, #8]
 800602c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8006030:	4013      	ands	r3, r2
 8006032:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8006034:	68fb      	ldr	r3, [r7, #12]
 8006036:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8006038:	68bb      	ldr	r3, [r7, #8]
 800603a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800603c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8006040:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006044:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8006046:	4a04      	ldr	r2, [pc, #16]	; (8006058 <__NVIC_SetPriorityGrouping+0x44>)
 8006048:	68bb      	ldr	r3, [r7, #8]
 800604a:	60d3      	str	r3, [r2, #12]
}
 800604c:	bf00      	nop
 800604e:	3714      	adds	r7, #20
 8006050:	46bd      	mov	sp, r7
 8006052:	bc80      	pop	{r7}
 8006054:	4770      	bx	lr
 8006056:	bf00      	nop
 8006058:	e000ed00 	.word	0xe000ed00

0800605c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800605c:	b480      	push	{r7}
 800605e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8006060:	4b04      	ldr	r3, [pc, #16]	; (8006074 <__NVIC_GetPriorityGrouping+0x18>)
 8006062:	68db      	ldr	r3, [r3, #12]
 8006064:	0a1b      	lsrs	r3, r3, #8
 8006066:	f003 0307 	and.w	r3, r3, #7
}
 800606a:	4618      	mov	r0, r3
 800606c:	46bd      	mov	sp, r7
 800606e:	bc80      	pop	{r7}
 8006070:	4770      	bx	lr
 8006072:	bf00      	nop
 8006074:	e000ed00 	.word	0xe000ed00

08006078 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006078:	b480      	push	{r7}
 800607a:	b083      	sub	sp, #12
 800607c:	af00      	add	r7, sp, #0
 800607e:	4603      	mov	r3, r0
 8006080:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006082:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006086:	2b00      	cmp	r3, #0
 8006088:	db0b      	blt.n	80060a2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800608a:	79fb      	ldrb	r3, [r7, #7]
 800608c:	f003 021f 	and.w	r2, r3, #31
 8006090:	4906      	ldr	r1, [pc, #24]	; (80060ac <__NVIC_EnableIRQ+0x34>)
 8006092:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006096:	095b      	lsrs	r3, r3, #5
 8006098:	2001      	movs	r0, #1
 800609a:	fa00 f202 	lsl.w	r2, r0, r2
 800609e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80060a2:	bf00      	nop
 80060a4:	370c      	adds	r7, #12
 80060a6:	46bd      	mov	sp, r7
 80060a8:	bc80      	pop	{r7}
 80060aa:	4770      	bx	lr
 80060ac:	e000e100 	.word	0xe000e100

080060b0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80060b0:	b480      	push	{r7}
 80060b2:	b083      	sub	sp, #12
 80060b4:	af00      	add	r7, sp, #0
 80060b6:	4603      	mov	r3, r0
 80060b8:	6039      	str	r1, [r7, #0]
 80060ba:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80060bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80060c0:	2b00      	cmp	r3, #0
 80060c2:	db0a      	blt.n	80060da <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80060c4:	683b      	ldr	r3, [r7, #0]
 80060c6:	b2da      	uxtb	r2, r3
 80060c8:	490c      	ldr	r1, [pc, #48]	; (80060fc <__NVIC_SetPriority+0x4c>)
 80060ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80060ce:	0112      	lsls	r2, r2, #4
 80060d0:	b2d2      	uxtb	r2, r2
 80060d2:	440b      	add	r3, r1
 80060d4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80060d8:	e00a      	b.n	80060f0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80060da:	683b      	ldr	r3, [r7, #0]
 80060dc:	b2da      	uxtb	r2, r3
 80060de:	4908      	ldr	r1, [pc, #32]	; (8006100 <__NVIC_SetPriority+0x50>)
 80060e0:	79fb      	ldrb	r3, [r7, #7]
 80060e2:	f003 030f 	and.w	r3, r3, #15
 80060e6:	3b04      	subs	r3, #4
 80060e8:	0112      	lsls	r2, r2, #4
 80060ea:	b2d2      	uxtb	r2, r2
 80060ec:	440b      	add	r3, r1
 80060ee:	761a      	strb	r2, [r3, #24]
}
 80060f0:	bf00      	nop
 80060f2:	370c      	adds	r7, #12
 80060f4:	46bd      	mov	sp, r7
 80060f6:	bc80      	pop	{r7}
 80060f8:	4770      	bx	lr
 80060fa:	bf00      	nop
 80060fc:	e000e100 	.word	0xe000e100
 8006100:	e000ed00 	.word	0xe000ed00

08006104 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8006104:	b480      	push	{r7}
 8006106:	b089      	sub	sp, #36	; 0x24
 8006108:	af00      	add	r7, sp, #0
 800610a:	60f8      	str	r0, [r7, #12]
 800610c:	60b9      	str	r1, [r7, #8]
 800610e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8006110:	68fb      	ldr	r3, [r7, #12]
 8006112:	f003 0307 	and.w	r3, r3, #7
 8006116:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8006118:	69fb      	ldr	r3, [r7, #28]
 800611a:	f1c3 0307 	rsb	r3, r3, #7
 800611e:	2b04      	cmp	r3, #4
 8006120:	bf28      	it	cs
 8006122:	2304      	movcs	r3, #4
 8006124:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8006126:	69fb      	ldr	r3, [r7, #28]
 8006128:	3304      	adds	r3, #4
 800612a:	2b06      	cmp	r3, #6
 800612c:	d902      	bls.n	8006134 <NVIC_EncodePriority+0x30>
 800612e:	69fb      	ldr	r3, [r7, #28]
 8006130:	3b03      	subs	r3, #3
 8006132:	e000      	b.n	8006136 <NVIC_EncodePriority+0x32>
 8006134:	2300      	movs	r3, #0
 8006136:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006138:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800613c:	69bb      	ldr	r3, [r7, #24]
 800613e:	fa02 f303 	lsl.w	r3, r2, r3
 8006142:	43da      	mvns	r2, r3
 8006144:	68bb      	ldr	r3, [r7, #8]
 8006146:	401a      	ands	r2, r3
 8006148:	697b      	ldr	r3, [r7, #20]
 800614a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800614c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8006150:	697b      	ldr	r3, [r7, #20]
 8006152:	fa01 f303 	lsl.w	r3, r1, r3
 8006156:	43d9      	mvns	r1, r3
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800615c:	4313      	orrs	r3, r2
         );
}
 800615e:	4618      	mov	r0, r3
 8006160:	3724      	adds	r7, #36	; 0x24
 8006162:	46bd      	mov	sp, r7
 8006164:	bc80      	pop	{r7}
 8006166:	4770      	bx	lr

08006168 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8006168:	b580      	push	{r7, lr}
 800616a:	b082      	sub	sp, #8
 800616c:	af00      	add	r7, sp, #0
 800616e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	3b01      	subs	r3, #1
 8006174:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006178:	d301      	bcc.n	800617e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800617a:	2301      	movs	r3, #1
 800617c:	e00f      	b.n	800619e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800617e:	4a0a      	ldr	r2, [pc, #40]	; (80061a8 <SysTick_Config+0x40>)
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	3b01      	subs	r3, #1
 8006184:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8006186:	210f      	movs	r1, #15
 8006188:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800618c:	f7ff ff90 	bl	80060b0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8006190:	4b05      	ldr	r3, [pc, #20]	; (80061a8 <SysTick_Config+0x40>)
 8006192:	2200      	movs	r2, #0
 8006194:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8006196:	4b04      	ldr	r3, [pc, #16]	; (80061a8 <SysTick_Config+0x40>)
 8006198:	2207      	movs	r2, #7
 800619a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800619c:	2300      	movs	r3, #0
}
 800619e:	4618      	mov	r0, r3
 80061a0:	3708      	adds	r7, #8
 80061a2:	46bd      	mov	sp, r7
 80061a4:	bd80      	pop	{r7, pc}
 80061a6:	bf00      	nop
 80061a8:	e000e010 	.word	0xe000e010

080061ac <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80061ac:	b580      	push	{r7, lr}
 80061ae:	b082      	sub	sp, #8
 80061b0:	af00      	add	r7, sp, #0
 80061b2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80061b4:	6878      	ldr	r0, [r7, #4]
 80061b6:	f7ff ff2d 	bl	8006014 <__NVIC_SetPriorityGrouping>
}
 80061ba:	bf00      	nop
 80061bc:	3708      	adds	r7, #8
 80061be:	46bd      	mov	sp, r7
 80061c0:	bd80      	pop	{r7, pc}

080061c2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80061c2:	b580      	push	{r7, lr}
 80061c4:	b086      	sub	sp, #24
 80061c6:	af00      	add	r7, sp, #0
 80061c8:	4603      	mov	r3, r0
 80061ca:	60b9      	str	r1, [r7, #8]
 80061cc:	607a      	str	r2, [r7, #4]
 80061ce:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80061d0:	2300      	movs	r3, #0
 80061d2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80061d4:	f7ff ff42 	bl	800605c <__NVIC_GetPriorityGrouping>
 80061d8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80061da:	687a      	ldr	r2, [r7, #4]
 80061dc:	68b9      	ldr	r1, [r7, #8]
 80061de:	6978      	ldr	r0, [r7, #20]
 80061e0:	f7ff ff90 	bl	8006104 <NVIC_EncodePriority>
 80061e4:	4602      	mov	r2, r0
 80061e6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80061ea:	4611      	mov	r1, r2
 80061ec:	4618      	mov	r0, r3
 80061ee:	f7ff ff5f 	bl	80060b0 <__NVIC_SetPriority>
}
 80061f2:	bf00      	nop
 80061f4:	3718      	adds	r7, #24
 80061f6:	46bd      	mov	sp, r7
 80061f8:	bd80      	pop	{r7, pc}

080061fa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80061fa:	b580      	push	{r7, lr}
 80061fc:	b082      	sub	sp, #8
 80061fe:	af00      	add	r7, sp, #0
 8006200:	4603      	mov	r3, r0
 8006202:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8006204:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006208:	4618      	mov	r0, r3
 800620a:	f7ff ff35 	bl	8006078 <__NVIC_EnableIRQ>
}
 800620e:	bf00      	nop
 8006210:	3708      	adds	r7, #8
 8006212:	46bd      	mov	sp, r7
 8006214:	bd80      	pop	{r7, pc}

08006216 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8006216:	b580      	push	{r7, lr}
 8006218:	b082      	sub	sp, #8
 800621a:	af00      	add	r7, sp, #0
 800621c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800621e:	6878      	ldr	r0, [r7, #4]
 8006220:	f7ff ffa2 	bl	8006168 <SysTick_Config>
 8006224:	4603      	mov	r3, r0
}
 8006226:	4618      	mov	r0, r3
 8006228:	3708      	adds	r7, #8
 800622a:	46bd      	mov	sp, r7
 800622c:	bd80      	pop	{r7, pc}

0800622e <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800622e:	b480      	push	{r7}
 8006230:	b085      	sub	sp, #20
 8006232:	af00      	add	r7, sp, #0
 8006234:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006236:	2300      	movs	r3, #0
 8006238:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8006240:	b2db      	uxtb	r3, r3
 8006242:	2b02      	cmp	r3, #2
 8006244:	d008      	beq.n	8006258 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	2204      	movs	r2, #4
 800624a:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	2200      	movs	r2, #0
 8006250:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8006254:	2301      	movs	r3, #1
 8006256:	e020      	b.n	800629a <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	681a      	ldr	r2, [r3, #0]
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	f022 020e 	bic.w	r2, r2, #14
 8006266:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	681a      	ldr	r2, [r3, #0]
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	f022 0201 	bic.w	r2, r2, #1
 8006276:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006280:	2101      	movs	r1, #1
 8006282:	fa01 f202 	lsl.w	r2, r1, r2
 8006286:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	2201      	movs	r2, #1
 800628c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	2200      	movs	r2, #0
 8006294:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8006298:	7bfb      	ldrb	r3, [r7, #15]
}
 800629a:	4618      	mov	r0, r3
 800629c:	3714      	adds	r7, #20
 800629e:	46bd      	mov	sp, r7
 80062a0:	bc80      	pop	{r7}
 80062a2:	4770      	bx	lr

080062a4 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80062a4:	b580      	push	{r7, lr}
 80062a6:	b084      	sub	sp, #16
 80062a8:	af00      	add	r7, sp, #0
 80062aa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80062ac:	2300      	movs	r3, #0
 80062ae:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80062b6:	b2db      	uxtb	r3, r3
 80062b8:	2b02      	cmp	r3, #2
 80062ba:	d005      	beq.n	80062c8 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	2204      	movs	r2, #4
 80062c0:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 80062c2:	2301      	movs	r3, #1
 80062c4:	73fb      	strb	r3, [r7, #15]
 80062c6:	e0d6      	b.n	8006476 <HAL_DMA_Abort_IT+0x1d2>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	681a      	ldr	r2, [r3, #0]
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	f022 020e 	bic.w	r2, r2, #14
 80062d6:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	681a      	ldr	r2, [r3, #0]
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	f022 0201 	bic.w	r2, r2, #1
 80062e6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	461a      	mov	r2, r3
 80062ee:	4b64      	ldr	r3, [pc, #400]	; (8006480 <HAL_DMA_Abort_IT+0x1dc>)
 80062f0:	429a      	cmp	r2, r3
 80062f2:	d958      	bls.n	80063a6 <HAL_DMA_Abort_IT+0x102>
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	4a62      	ldr	r2, [pc, #392]	; (8006484 <HAL_DMA_Abort_IT+0x1e0>)
 80062fa:	4293      	cmp	r3, r2
 80062fc:	d04f      	beq.n	800639e <HAL_DMA_Abort_IT+0xfa>
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	4a61      	ldr	r2, [pc, #388]	; (8006488 <HAL_DMA_Abort_IT+0x1e4>)
 8006304:	4293      	cmp	r3, r2
 8006306:	d048      	beq.n	800639a <HAL_DMA_Abort_IT+0xf6>
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	4a5f      	ldr	r2, [pc, #380]	; (800648c <HAL_DMA_Abort_IT+0x1e8>)
 800630e:	4293      	cmp	r3, r2
 8006310:	d040      	beq.n	8006394 <HAL_DMA_Abort_IT+0xf0>
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	4a5e      	ldr	r2, [pc, #376]	; (8006490 <HAL_DMA_Abort_IT+0x1ec>)
 8006318:	4293      	cmp	r3, r2
 800631a:	d038      	beq.n	800638e <HAL_DMA_Abort_IT+0xea>
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	4a5c      	ldr	r2, [pc, #368]	; (8006494 <HAL_DMA_Abort_IT+0x1f0>)
 8006322:	4293      	cmp	r3, r2
 8006324:	d030      	beq.n	8006388 <HAL_DMA_Abort_IT+0xe4>
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	4a5b      	ldr	r2, [pc, #364]	; (8006498 <HAL_DMA_Abort_IT+0x1f4>)
 800632c:	4293      	cmp	r3, r2
 800632e:	d028      	beq.n	8006382 <HAL_DMA_Abort_IT+0xde>
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	4a52      	ldr	r2, [pc, #328]	; (8006480 <HAL_DMA_Abort_IT+0x1dc>)
 8006336:	4293      	cmp	r3, r2
 8006338:	d020      	beq.n	800637c <HAL_DMA_Abort_IT+0xd8>
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	4a57      	ldr	r2, [pc, #348]	; (800649c <HAL_DMA_Abort_IT+0x1f8>)
 8006340:	4293      	cmp	r3, r2
 8006342:	d019      	beq.n	8006378 <HAL_DMA_Abort_IT+0xd4>
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	4a55      	ldr	r2, [pc, #340]	; (80064a0 <HAL_DMA_Abort_IT+0x1fc>)
 800634a:	4293      	cmp	r3, r2
 800634c:	d012      	beq.n	8006374 <HAL_DMA_Abort_IT+0xd0>
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	4a54      	ldr	r2, [pc, #336]	; (80064a4 <HAL_DMA_Abort_IT+0x200>)
 8006354:	4293      	cmp	r3, r2
 8006356:	d00a      	beq.n	800636e <HAL_DMA_Abort_IT+0xca>
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	4a52      	ldr	r2, [pc, #328]	; (80064a8 <HAL_DMA_Abort_IT+0x204>)
 800635e:	4293      	cmp	r3, r2
 8006360:	d102      	bne.n	8006368 <HAL_DMA_Abort_IT+0xc4>
 8006362:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006366:	e01b      	b.n	80063a0 <HAL_DMA_Abort_IT+0xfc>
 8006368:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800636c:	e018      	b.n	80063a0 <HAL_DMA_Abort_IT+0xfc>
 800636e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006372:	e015      	b.n	80063a0 <HAL_DMA_Abort_IT+0xfc>
 8006374:	2310      	movs	r3, #16
 8006376:	e013      	b.n	80063a0 <HAL_DMA_Abort_IT+0xfc>
 8006378:	2301      	movs	r3, #1
 800637a:	e011      	b.n	80063a0 <HAL_DMA_Abort_IT+0xfc>
 800637c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006380:	e00e      	b.n	80063a0 <HAL_DMA_Abort_IT+0xfc>
 8006382:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8006386:	e00b      	b.n	80063a0 <HAL_DMA_Abort_IT+0xfc>
 8006388:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800638c:	e008      	b.n	80063a0 <HAL_DMA_Abort_IT+0xfc>
 800638e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006392:	e005      	b.n	80063a0 <HAL_DMA_Abort_IT+0xfc>
 8006394:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006398:	e002      	b.n	80063a0 <HAL_DMA_Abort_IT+0xfc>
 800639a:	2310      	movs	r3, #16
 800639c:	e000      	b.n	80063a0 <HAL_DMA_Abort_IT+0xfc>
 800639e:	2301      	movs	r3, #1
 80063a0:	4a42      	ldr	r2, [pc, #264]	; (80064ac <HAL_DMA_Abort_IT+0x208>)
 80063a2:	6053      	str	r3, [r2, #4]
 80063a4:	e057      	b.n	8006456 <HAL_DMA_Abort_IT+0x1b2>
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	4a36      	ldr	r2, [pc, #216]	; (8006484 <HAL_DMA_Abort_IT+0x1e0>)
 80063ac:	4293      	cmp	r3, r2
 80063ae:	d04f      	beq.n	8006450 <HAL_DMA_Abort_IT+0x1ac>
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	4a34      	ldr	r2, [pc, #208]	; (8006488 <HAL_DMA_Abort_IT+0x1e4>)
 80063b6:	4293      	cmp	r3, r2
 80063b8:	d048      	beq.n	800644c <HAL_DMA_Abort_IT+0x1a8>
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	4a33      	ldr	r2, [pc, #204]	; (800648c <HAL_DMA_Abort_IT+0x1e8>)
 80063c0:	4293      	cmp	r3, r2
 80063c2:	d040      	beq.n	8006446 <HAL_DMA_Abort_IT+0x1a2>
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	4a31      	ldr	r2, [pc, #196]	; (8006490 <HAL_DMA_Abort_IT+0x1ec>)
 80063ca:	4293      	cmp	r3, r2
 80063cc:	d038      	beq.n	8006440 <HAL_DMA_Abort_IT+0x19c>
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	4a30      	ldr	r2, [pc, #192]	; (8006494 <HAL_DMA_Abort_IT+0x1f0>)
 80063d4:	4293      	cmp	r3, r2
 80063d6:	d030      	beq.n	800643a <HAL_DMA_Abort_IT+0x196>
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	4a2e      	ldr	r2, [pc, #184]	; (8006498 <HAL_DMA_Abort_IT+0x1f4>)
 80063de:	4293      	cmp	r3, r2
 80063e0:	d028      	beq.n	8006434 <HAL_DMA_Abort_IT+0x190>
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	4a26      	ldr	r2, [pc, #152]	; (8006480 <HAL_DMA_Abort_IT+0x1dc>)
 80063e8:	4293      	cmp	r3, r2
 80063ea:	d020      	beq.n	800642e <HAL_DMA_Abort_IT+0x18a>
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	4a2a      	ldr	r2, [pc, #168]	; (800649c <HAL_DMA_Abort_IT+0x1f8>)
 80063f2:	4293      	cmp	r3, r2
 80063f4:	d019      	beq.n	800642a <HAL_DMA_Abort_IT+0x186>
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	4a29      	ldr	r2, [pc, #164]	; (80064a0 <HAL_DMA_Abort_IT+0x1fc>)
 80063fc:	4293      	cmp	r3, r2
 80063fe:	d012      	beq.n	8006426 <HAL_DMA_Abort_IT+0x182>
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	4a27      	ldr	r2, [pc, #156]	; (80064a4 <HAL_DMA_Abort_IT+0x200>)
 8006406:	4293      	cmp	r3, r2
 8006408:	d00a      	beq.n	8006420 <HAL_DMA_Abort_IT+0x17c>
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	4a26      	ldr	r2, [pc, #152]	; (80064a8 <HAL_DMA_Abort_IT+0x204>)
 8006410:	4293      	cmp	r3, r2
 8006412:	d102      	bne.n	800641a <HAL_DMA_Abort_IT+0x176>
 8006414:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006418:	e01b      	b.n	8006452 <HAL_DMA_Abort_IT+0x1ae>
 800641a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800641e:	e018      	b.n	8006452 <HAL_DMA_Abort_IT+0x1ae>
 8006420:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006424:	e015      	b.n	8006452 <HAL_DMA_Abort_IT+0x1ae>
 8006426:	2310      	movs	r3, #16
 8006428:	e013      	b.n	8006452 <HAL_DMA_Abort_IT+0x1ae>
 800642a:	2301      	movs	r3, #1
 800642c:	e011      	b.n	8006452 <HAL_DMA_Abort_IT+0x1ae>
 800642e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006432:	e00e      	b.n	8006452 <HAL_DMA_Abort_IT+0x1ae>
 8006434:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8006438:	e00b      	b.n	8006452 <HAL_DMA_Abort_IT+0x1ae>
 800643a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800643e:	e008      	b.n	8006452 <HAL_DMA_Abort_IT+0x1ae>
 8006440:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006444:	e005      	b.n	8006452 <HAL_DMA_Abort_IT+0x1ae>
 8006446:	f44f 7380 	mov.w	r3, #256	; 0x100
 800644a:	e002      	b.n	8006452 <HAL_DMA_Abort_IT+0x1ae>
 800644c:	2310      	movs	r3, #16
 800644e:	e000      	b.n	8006452 <HAL_DMA_Abort_IT+0x1ae>
 8006450:	2301      	movs	r3, #1
 8006452:	4a17      	ldr	r2, [pc, #92]	; (80064b0 <HAL_DMA_Abort_IT+0x20c>)
 8006454:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	2201      	movs	r2, #1
 800645a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	2200      	movs	r2, #0
 8006462:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800646a:	2b00      	cmp	r3, #0
 800646c:	d003      	beq.n	8006476 <HAL_DMA_Abort_IT+0x1d2>
    {
      hdma->XferAbortCallback(hdma);
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006472:	6878      	ldr	r0, [r7, #4]
 8006474:	4798      	blx	r3
    } 
  }
  return status;
 8006476:	7bfb      	ldrb	r3, [r7, #15]
}
 8006478:	4618      	mov	r0, r3
 800647a:	3710      	adds	r7, #16
 800647c:	46bd      	mov	sp, r7
 800647e:	bd80      	pop	{r7, pc}
 8006480:	40020080 	.word	0x40020080
 8006484:	40020008 	.word	0x40020008
 8006488:	4002001c 	.word	0x4002001c
 800648c:	40020030 	.word	0x40020030
 8006490:	40020044 	.word	0x40020044
 8006494:	40020058 	.word	0x40020058
 8006498:	4002006c 	.word	0x4002006c
 800649c:	40020408 	.word	0x40020408
 80064a0:	4002041c 	.word	0x4002041c
 80064a4:	40020430 	.word	0x40020430
 80064a8:	40020444 	.word	0x40020444
 80064ac:	40020400 	.word	0x40020400
 80064b0:	40020000 	.word	0x40020000

080064b4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80064b4:	b480      	push	{r7}
 80064b6:	b08b      	sub	sp, #44	; 0x2c
 80064b8:	af00      	add	r7, sp, #0
 80064ba:	6078      	str	r0, [r7, #4]
 80064bc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80064be:	2300      	movs	r3, #0
 80064c0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80064c2:	2300      	movs	r3, #0
 80064c4:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80064c6:	e179      	b.n	80067bc <HAL_GPIO_Init+0x308>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80064c8:	2201      	movs	r2, #1
 80064ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064cc:	fa02 f303 	lsl.w	r3, r2, r3
 80064d0:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80064d2:	683b      	ldr	r3, [r7, #0]
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	69fa      	ldr	r2, [r7, #28]
 80064d8:	4013      	ands	r3, r2
 80064da:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80064dc:	69ba      	ldr	r2, [r7, #24]
 80064de:	69fb      	ldr	r3, [r7, #28]
 80064e0:	429a      	cmp	r2, r3
 80064e2:	f040 8168 	bne.w	80067b6 <HAL_GPIO_Init+0x302>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80064e6:	683b      	ldr	r3, [r7, #0]
 80064e8:	685b      	ldr	r3, [r3, #4]
 80064ea:	4a96      	ldr	r2, [pc, #600]	; (8006744 <HAL_GPIO_Init+0x290>)
 80064ec:	4293      	cmp	r3, r2
 80064ee:	d05e      	beq.n	80065ae <HAL_GPIO_Init+0xfa>
 80064f0:	4a94      	ldr	r2, [pc, #592]	; (8006744 <HAL_GPIO_Init+0x290>)
 80064f2:	4293      	cmp	r3, r2
 80064f4:	d875      	bhi.n	80065e2 <HAL_GPIO_Init+0x12e>
 80064f6:	4a94      	ldr	r2, [pc, #592]	; (8006748 <HAL_GPIO_Init+0x294>)
 80064f8:	4293      	cmp	r3, r2
 80064fa:	d058      	beq.n	80065ae <HAL_GPIO_Init+0xfa>
 80064fc:	4a92      	ldr	r2, [pc, #584]	; (8006748 <HAL_GPIO_Init+0x294>)
 80064fe:	4293      	cmp	r3, r2
 8006500:	d86f      	bhi.n	80065e2 <HAL_GPIO_Init+0x12e>
 8006502:	4a92      	ldr	r2, [pc, #584]	; (800674c <HAL_GPIO_Init+0x298>)
 8006504:	4293      	cmp	r3, r2
 8006506:	d052      	beq.n	80065ae <HAL_GPIO_Init+0xfa>
 8006508:	4a90      	ldr	r2, [pc, #576]	; (800674c <HAL_GPIO_Init+0x298>)
 800650a:	4293      	cmp	r3, r2
 800650c:	d869      	bhi.n	80065e2 <HAL_GPIO_Init+0x12e>
 800650e:	4a90      	ldr	r2, [pc, #576]	; (8006750 <HAL_GPIO_Init+0x29c>)
 8006510:	4293      	cmp	r3, r2
 8006512:	d04c      	beq.n	80065ae <HAL_GPIO_Init+0xfa>
 8006514:	4a8e      	ldr	r2, [pc, #568]	; (8006750 <HAL_GPIO_Init+0x29c>)
 8006516:	4293      	cmp	r3, r2
 8006518:	d863      	bhi.n	80065e2 <HAL_GPIO_Init+0x12e>
 800651a:	4a8e      	ldr	r2, [pc, #568]	; (8006754 <HAL_GPIO_Init+0x2a0>)
 800651c:	4293      	cmp	r3, r2
 800651e:	d046      	beq.n	80065ae <HAL_GPIO_Init+0xfa>
 8006520:	4a8c      	ldr	r2, [pc, #560]	; (8006754 <HAL_GPIO_Init+0x2a0>)
 8006522:	4293      	cmp	r3, r2
 8006524:	d85d      	bhi.n	80065e2 <HAL_GPIO_Init+0x12e>
 8006526:	2b12      	cmp	r3, #18
 8006528:	d82a      	bhi.n	8006580 <HAL_GPIO_Init+0xcc>
 800652a:	2b12      	cmp	r3, #18
 800652c:	d859      	bhi.n	80065e2 <HAL_GPIO_Init+0x12e>
 800652e:	a201      	add	r2, pc, #4	; (adr r2, 8006534 <HAL_GPIO_Init+0x80>)
 8006530:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006534:	080065af 	.word	0x080065af
 8006538:	08006589 	.word	0x08006589
 800653c:	0800659b 	.word	0x0800659b
 8006540:	080065dd 	.word	0x080065dd
 8006544:	080065e3 	.word	0x080065e3
 8006548:	080065e3 	.word	0x080065e3
 800654c:	080065e3 	.word	0x080065e3
 8006550:	080065e3 	.word	0x080065e3
 8006554:	080065e3 	.word	0x080065e3
 8006558:	080065e3 	.word	0x080065e3
 800655c:	080065e3 	.word	0x080065e3
 8006560:	080065e3 	.word	0x080065e3
 8006564:	080065e3 	.word	0x080065e3
 8006568:	080065e3 	.word	0x080065e3
 800656c:	080065e3 	.word	0x080065e3
 8006570:	080065e3 	.word	0x080065e3
 8006574:	080065e3 	.word	0x080065e3
 8006578:	08006591 	.word	0x08006591
 800657c:	080065a5 	.word	0x080065a5
 8006580:	4a75      	ldr	r2, [pc, #468]	; (8006758 <HAL_GPIO_Init+0x2a4>)
 8006582:	4293      	cmp	r3, r2
 8006584:	d013      	beq.n	80065ae <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8006586:	e02c      	b.n	80065e2 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8006588:	683b      	ldr	r3, [r7, #0]
 800658a:	68db      	ldr	r3, [r3, #12]
 800658c:	623b      	str	r3, [r7, #32]
          break;
 800658e:	e029      	b.n	80065e4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8006590:	683b      	ldr	r3, [r7, #0]
 8006592:	68db      	ldr	r3, [r3, #12]
 8006594:	3304      	adds	r3, #4
 8006596:	623b      	str	r3, [r7, #32]
          break;
 8006598:	e024      	b.n	80065e4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800659a:	683b      	ldr	r3, [r7, #0]
 800659c:	68db      	ldr	r3, [r3, #12]
 800659e:	3308      	adds	r3, #8
 80065a0:	623b      	str	r3, [r7, #32]
          break;
 80065a2:	e01f      	b.n	80065e4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80065a4:	683b      	ldr	r3, [r7, #0]
 80065a6:	68db      	ldr	r3, [r3, #12]
 80065a8:	330c      	adds	r3, #12
 80065aa:	623b      	str	r3, [r7, #32]
          break;
 80065ac:	e01a      	b.n	80065e4 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80065ae:	683b      	ldr	r3, [r7, #0]
 80065b0:	689b      	ldr	r3, [r3, #8]
 80065b2:	2b00      	cmp	r3, #0
 80065b4:	d102      	bne.n	80065bc <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80065b6:	2304      	movs	r3, #4
 80065b8:	623b      	str	r3, [r7, #32]
          break;
 80065ba:	e013      	b.n	80065e4 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80065bc:	683b      	ldr	r3, [r7, #0]
 80065be:	689b      	ldr	r3, [r3, #8]
 80065c0:	2b01      	cmp	r3, #1
 80065c2:	d105      	bne.n	80065d0 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80065c4:	2308      	movs	r3, #8
 80065c6:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	69fa      	ldr	r2, [r7, #28]
 80065cc:	611a      	str	r2, [r3, #16]
          break;
 80065ce:	e009      	b.n	80065e4 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80065d0:	2308      	movs	r3, #8
 80065d2:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	69fa      	ldr	r2, [r7, #28]
 80065d8:	615a      	str	r2, [r3, #20]
          break;
 80065da:	e003      	b.n	80065e4 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80065dc:	2300      	movs	r3, #0
 80065de:	623b      	str	r3, [r7, #32]
          break;
 80065e0:	e000      	b.n	80065e4 <HAL_GPIO_Init+0x130>
          break;
 80065e2:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80065e4:	69bb      	ldr	r3, [r7, #24]
 80065e6:	2bff      	cmp	r3, #255	; 0xff
 80065e8:	d801      	bhi.n	80065ee <HAL_GPIO_Init+0x13a>
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	e001      	b.n	80065f2 <HAL_GPIO_Init+0x13e>
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	3304      	adds	r3, #4
 80065f2:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80065f4:	69bb      	ldr	r3, [r7, #24]
 80065f6:	2bff      	cmp	r3, #255	; 0xff
 80065f8:	d802      	bhi.n	8006600 <HAL_GPIO_Init+0x14c>
 80065fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065fc:	009b      	lsls	r3, r3, #2
 80065fe:	e002      	b.n	8006606 <HAL_GPIO_Init+0x152>
 8006600:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006602:	3b08      	subs	r3, #8
 8006604:	009b      	lsls	r3, r3, #2
 8006606:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8006608:	697b      	ldr	r3, [r7, #20]
 800660a:	681a      	ldr	r2, [r3, #0]
 800660c:	210f      	movs	r1, #15
 800660e:	693b      	ldr	r3, [r7, #16]
 8006610:	fa01 f303 	lsl.w	r3, r1, r3
 8006614:	43db      	mvns	r3, r3
 8006616:	401a      	ands	r2, r3
 8006618:	6a39      	ldr	r1, [r7, #32]
 800661a:	693b      	ldr	r3, [r7, #16]
 800661c:	fa01 f303 	lsl.w	r3, r1, r3
 8006620:	431a      	orrs	r2, r3
 8006622:	697b      	ldr	r3, [r7, #20]
 8006624:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8006626:	683b      	ldr	r3, [r7, #0]
 8006628:	685b      	ldr	r3, [r3, #4]
 800662a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800662e:	2b00      	cmp	r3, #0
 8006630:	f000 80c1 	beq.w	80067b6 <HAL_GPIO_Init+0x302>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8006634:	4b49      	ldr	r3, [pc, #292]	; (800675c <HAL_GPIO_Init+0x2a8>)
 8006636:	699b      	ldr	r3, [r3, #24]
 8006638:	4a48      	ldr	r2, [pc, #288]	; (800675c <HAL_GPIO_Init+0x2a8>)
 800663a:	f043 0301 	orr.w	r3, r3, #1
 800663e:	6193      	str	r3, [r2, #24]
 8006640:	4b46      	ldr	r3, [pc, #280]	; (800675c <HAL_GPIO_Init+0x2a8>)
 8006642:	699b      	ldr	r3, [r3, #24]
 8006644:	f003 0301 	and.w	r3, r3, #1
 8006648:	60bb      	str	r3, [r7, #8]
 800664a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800664c:	4a44      	ldr	r2, [pc, #272]	; (8006760 <HAL_GPIO_Init+0x2ac>)
 800664e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006650:	089b      	lsrs	r3, r3, #2
 8006652:	3302      	adds	r3, #2
 8006654:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006658:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800665a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800665c:	f003 0303 	and.w	r3, r3, #3
 8006660:	009b      	lsls	r3, r3, #2
 8006662:	220f      	movs	r2, #15
 8006664:	fa02 f303 	lsl.w	r3, r2, r3
 8006668:	43db      	mvns	r3, r3
 800666a:	68fa      	ldr	r2, [r7, #12]
 800666c:	4013      	ands	r3, r2
 800666e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	4a3c      	ldr	r2, [pc, #240]	; (8006764 <HAL_GPIO_Init+0x2b0>)
 8006674:	4293      	cmp	r3, r2
 8006676:	d01f      	beq.n	80066b8 <HAL_GPIO_Init+0x204>
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	4a3b      	ldr	r2, [pc, #236]	; (8006768 <HAL_GPIO_Init+0x2b4>)
 800667c:	4293      	cmp	r3, r2
 800667e:	d019      	beq.n	80066b4 <HAL_GPIO_Init+0x200>
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	4a3a      	ldr	r2, [pc, #232]	; (800676c <HAL_GPIO_Init+0x2b8>)
 8006684:	4293      	cmp	r3, r2
 8006686:	d013      	beq.n	80066b0 <HAL_GPIO_Init+0x1fc>
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	4a39      	ldr	r2, [pc, #228]	; (8006770 <HAL_GPIO_Init+0x2bc>)
 800668c:	4293      	cmp	r3, r2
 800668e:	d00d      	beq.n	80066ac <HAL_GPIO_Init+0x1f8>
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	4a38      	ldr	r2, [pc, #224]	; (8006774 <HAL_GPIO_Init+0x2c0>)
 8006694:	4293      	cmp	r3, r2
 8006696:	d007      	beq.n	80066a8 <HAL_GPIO_Init+0x1f4>
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	4a37      	ldr	r2, [pc, #220]	; (8006778 <HAL_GPIO_Init+0x2c4>)
 800669c:	4293      	cmp	r3, r2
 800669e:	d101      	bne.n	80066a4 <HAL_GPIO_Init+0x1f0>
 80066a0:	2305      	movs	r3, #5
 80066a2:	e00a      	b.n	80066ba <HAL_GPIO_Init+0x206>
 80066a4:	2306      	movs	r3, #6
 80066a6:	e008      	b.n	80066ba <HAL_GPIO_Init+0x206>
 80066a8:	2304      	movs	r3, #4
 80066aa:	e006      	b.n	80066ba <HAL_GPIO_Init+0x206>
 80066ac:	2303      	movs	r3, #3
 80066ae:	e004      	b.n	80066ba <HAL_GPIO_Init+0x206>
 80066b0:	2302      	movs	r3, #2
 80066b2:	e002      	b.n	80066ba <HAL_GPIO_Init+0x206>
 80066b4:	2301      	movs	r3, #1
 80066b6:	e000      	b.n	80066ba <HAL_GPIO_Init+0x206>
 80066b8:	2300      	movs	r3, #0
 80066ba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80066bc:	f002 0203 	and.w	r2, r2, #3
 80066c0:	0092      	lsls	r2, r2, #2
 80066c2:	4093      	lsls	r3, r2
 80066c4:	68fa      	ldr	r2, [r7, #12]
 80066c6:	4313      	orrs	r3, r2
 80066c8:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80066ca:	4925      	ldr	r1, [pc, #148]	; (8006760 <HAL_GPIO_Init+0x2ac>)
 80066cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066ce:	089b      	lsrs	r3, r3, #2
 80066d0:	3302      	adds	r3, #2
 80066d2:	68fa      	ldr	r2, [r7, #12]
 80066d4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80066d8:	683b      	ldr	r3, [r7, #0]
 80066da:	685b      	ldr	r3, [r3, #4]
 80066dc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80066e0:	2b00      	cmp	r3, #0
 80066e2:	d006      	beq.n	80066f2 <HAL_GPIO_Init+0x23e>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80066e4:	4b25      	ldr	r3, [pc, #148]	; (800677c <HAL_GPIO_Init+0x2c8>)
 80066e6:	689a      	ldr	r2, [r3, #8]
 80066e8:	4924      	ldr	r1, [pc, #144]	; (800677c <HAL_GPIO_Init+0x2c8>)
 80066ea:	69bb      	ldr	r3, [r7, #24]
 80066ec:	4313      	orrs	r3, r2
 80066ee:	608b      	str	r3, [r1, #8]
 80066f0:	e006      	b.n	8006700 <HAL_GPIO_Init+0x24c>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80066f2:	4b22      	ldr	r3, [pc, #136]	; (800677c <HAL_GPIO_Init+0x2c8>)
 80066f4:	689a      	ldr	r2, [r3, #8]
 80066f6:	69bb      	ldr	r3, [r7, #24]
 80066f8:	43db      	mvns	r3, r3
 80066fa:	4920      	ldr	r1, [pc, #128]	; (800677c <HAL_GPIO_Init+0x2c8>)
 80066fc:	4013      	ands	r3, r2
 80066fe:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8006700:	683b      	ldr	r3, [r7, #0]
 8006702:	685b      	ldr	r3, [r3, #4]
 8006704:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006708:	2b00      	cmp	r3, #0
 800670a:	d006      	beq.n	800671a <HAL_GPIO_Init+0x266>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800670c:	4b1b      	ldr	r3, [pc, #108]	; (800677c <HAL_GPIO_Init+0x2c8>)
 800670e:	68da      	ldr	r2, [r3, #12]
 8006710:	491a      	ldr	r1, [pc, #104]	; (800677c <HAL_GPIO_Init+0x2c8>)
 8006712:	69bb      	ldr	r3, [r7, #24]
 8006714:	4313      	orrs	r3, r2
 8006716:	60cb      	str	r3, [r1, #12]
 8006718:	e006      	b.n	8006728 <HAL_GPIO_Init+0x274>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800671a:	4b18      	ldr	r3, [pc, #96]	; (800677c <HAL_GPIO_Init+0x2c8>)
 800671c:	68da      	ldr	r2, [r3, #12]
 800671e:	69bb      	ldr	r3, [r7, #24]
 8006720:	43db      	mvns	r3, r3
 8006722:	4916      	ldr	r1, [pc, #88]	; (800677c <HAL_GPIO_Init+0x2c8>)
 8006724:	4013      	ands	r3, r2
 8006726:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8006728:	683b      	ldr	r3, [r7, #0]
 800672a:	685b      	ldr	r3, [r3, #4]
 800672c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006730:	2b00      	cmp	r3, #0
 8006732:	d025      	beq.n	8006780 <HAL_GPIO_Init+0x2cc>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8006734:	4b11      	ldr	r3, [pc, #68]	; (800677c <HAL_GPIO_Init+0x2c8>)
 8006736:	685a      	ldr	r2, [r3, #4]
 8006738:	4910      	ldr	r1, [pc, #64]	; (800677c <HAL_GPIO_Init+0x2c8>)
 800673a:	69bb      	ldr	r3, [r7, #24]
 800673c:	4313      	orrs	r3, r2
 800673e:	604b      	str	r3, [r1, #4]
 8006740:	e025      	b.n	800678e <HAL_GPIO_Init+0x2da>
 8006742:	bf00      	nop
 8006744:	10320000 	.word	0x10320000
 8006748:	10310000 	.word	0x10310000
 800674c:	10220000 	.word	0x10220000
 8006750:	10210000 	.word	0x10210000
 8006754:	10120000 	.word	0x10120000
 8006758:	10110000 	.word	0x10110000
 800675c:	40021000 	.word	0x40021000
 8006760:	40010000 	.word	0x40010000
 8006764:	40010800 	.word	0x40010800
 8006768:	40010c00 	.word	0x40010c00
 800676c:	40011000 	.word	0x40011000
 8006770:	40011400 	.word	0x40011400
 8006774:	40011800 	.word	0x40011800
 8006778:	40011c00 	.word	0x40011c00
 800677c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8006780:	4b15      	ldr	r3, [pc, #84]	; (80067d8 <HAL_GPIO_Init+0x324>)
 8006782:	685a      	ldr	r2, [r3, #4]
 8006784:	69bb      	ldr	r3, [r7, #24]
 8006786:	43db      	mvns	r3, r3
 8006788:	4913      	ldr	r1, [pc, #76]	; (80067d8 <HAL_GPIO_Init+0x324>)
 800678a:	4013      	ands	r3, r2
 800678c:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800678e:	683b      	ldr	r3, [r7, #0]
 8006790:	685b      	ldr	r3, [r3, #4]
 8006792:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006796:	2b00      	cmp	r3, #0
 8006798:	d006      	beq.n	80067a8 <HAL_GPIO_Init+0x2f4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800679a:	4b0f      	ldr	r3, [pc, #60]	; (80067d8 <HAL_GPIO_Init+0x324>)
 800679c:	681a      	ldr	r2, [r3, #0]
 800679e:	490e      	ldr	r1, [pc, #56]	; (80067d8 <HAL_GPIO_Init+0x324>)
 80067a0:	69bb      	ldr	r3, [r7, #24]
 80067a2:	4313      	orrs	r3, r2
 80067a4:	600b      	str	r3, [r1, #0]
 80067a6:	e006      	b.n	80067b6 <HAL_GPIO_Init+0x302>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80067a8:	4b0b      	ldr	r3, [pc, #44]	; (80067d8 <HAL_GPIO_Init+0x324>)
 80067aa:	681a      	ldr	r2, [r3, #0]
 80067ac:	69bb      	ldr	r3, [r7, #24]
 80067ae:	43db      	mvns	r3, r3
 80067b0:	4909      	ldr	r1, [pc, #36]	; (80067d8 <HAL_GPIO_Init+0x324>)
 80067b2:	4013      	ands	r3, r2
 80067b4:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80067b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067b8:	3301      	adds	r3, #1
 80067ba:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80067bc:	683b      	ldr	r3, [r7, #0]
 80067be:	681a      	ldr	r2, [r3, #0]
 80067c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067c2:	fa22 f303 	lsr.w	r3, r2, r3
 80067c6:	2b00      	cmp	r3, #0
 80067c8:	f47f ae7e 	bne.w	80064c8 <HAL_GPIO_Init+0x14>
  }
}
 80067cc:	bf00      	nop
 80067ce:	bf00      	nop
 80067d0:	372c      	adds	r7, #44	; 0x2c
 80067d2:	46bd      	mov	sp, r7
 80067d4:	bc80      	pop	{r7}
 80067d6:	4770      	bx	lr
 80067d8:	40010400 	.word	0x40010400

080067dc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80067dc:	b480      	push	{r7}
 80067de:	b085      	sub	sp, #20
 80067e0:	af00      	add	r7, sp, #0
 80067e2:	6078      	str	r0, [r7, #4]
 80067e4:	460b      	mov	r3, r1
 80067e6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	689a      	ldr	r2, [r3, #8]
 80067ec:	887b      	ldrh	r3, [r7, #2]
 80067ee:	4013      	ands	r3, r2
 80067f0:	2b00      	cmp	r3, #0
 80067f2:	d002      	beq.n	80067fa <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80067f4:	2301      	movs	r3, #1
 80067f6:	73fb      	strb	r3, [r7, #15]
 80067f8:	e001      	b.n	80067fe <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80067fa:	2300      	movs	r3, #0
 80067fc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80067fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8006800:	4618      	mov	r0, r3
 8006802:	3714      	adds	r7, #20
 8006804:	46bd      	mov	sp, r7
 8006806:	bc80      	pop	{r7}
 8006808:	4770      	bx	lr

0800680a <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800680a:	b480      	push	{r7}
 800680c:	b083      	sub	sp, #12
 800680e:	af00      	add	r7, sp, #0
 8006810:	6078      	str	r0, [r7, #4]
 8006812:	460b      	mov	r3, r1
 8006814:	807b      	strh	r3, [r7, #2]
 8006816:	4613      	mov	r3, r2
 8006818:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800681a:	787b      	ldrb	r3, [r7, #1]
 800681c:	2b00      	cmp	r3, #0
 800681e:	d003      	beq.n	8006828 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8006820:	887a      	ldrh	r2, [r7, #2]
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8006826:	e003      	b.n	8006830 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8006828:	887b      	ldrh	r3, [r7, #2]
 800682a:	041a      	lsls	r2, r3, #16
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	611a      	str	r2, [r3, #16]
}
 8006830:	bf00      	nop
 8006832:	370c      	adds	r7, #12
 8006834:	46bd      	mov	sp, r7
 8006836:	bc80      	pop	{r7}
 8006838:	4770      	bx	lr
	...

0800683c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800683c:	b580      	push	{r7, lr}
 800683e:	b082      	sub	sp, #8
 8006840:	af00      	add	r7, sp, #0
 8006842:	4603      	mov	r3, r0
 8006844:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8006846:	4b08      	ldr	r3, [pc, #32]	; (8006868 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8006848:	695a      	ldr	r2, [r3, #20]
 800684a:	88fb      	ldrh	r3, [r7, #6]
 800684c:	4013      	ands	r3, r2
 800684e:	2b00      	cmp	r3, #0
 8006850:	d006      	beq.n	8006860 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8006852:	4a05      	ldr	r2, [pc, #20]	; (8006868 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8006854:	88fb      	ldrh	r3, [r7, #6]
 8006856:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8006858:	88fb      	ldrh	r3, [r7, #6]
 800685a:	4618      	mov	r0, r3
 800685c:	f7ff fa7e 	bl	8005d5c <HAL_GPIO_EXTI_Callback>
  }
}
 8006860:	bf00      	nop
 8006862:	3708      	adds	r7, #8
 8006864:	46bd      	mov	sp, r7
 8006866:	bd80      	pop	{r7, pc}
 8006868:	40010400 	.word	0x40010400

0800686c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800686c:	b580      	push	{r7, lr}
 800686e:	b086      	sub	sp, #24
 8006870:	af00      	add	r7, sp, #0
 8006872:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	2b00      	cmp	r3, #0
 8006878:	d101      	bne.n	800687e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800687a:	2301      	movs	r3, #1
 800687c:	e272      	b.n	8006d64 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	681b      	ldr	r3, [r3, #0]
 8006882:	f003 0301 	and.w	r3, r3, #1
 8006886:	2b00      	cmp	r3, #0
 8006888:	f000 8087 	beq.w	800699a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800688c:	4b92      	ldr	r3, [pc, #584]	; (8006ad8 <HAL_RCC_OscConfig+0x26c>)
 800688e:	685b      	ldr	r3, [r3, #4]
 8006890:	f003 030c 	and.w	r3, r3, #12
 8006894:	2b04      	cmp	r3, #4
 8006896:	d00c      	beq.n	80068b2 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8006898:	4b8f      	ldr	r3, [pc, #572]	; (8006ad8 <HAL_RCC_OscConfig+0x26c>)
 800689a:	685b      	ldr	r3, [r3, #4]
 800689c:	f003 030c 	and.w	r3, r3, #12
 80068a0:	2b08      	cmp	r3, #8
 80068a2:	d112      	bne.n	80068ca <HAL_RCC_OscConfig+0x5e>
 80068a4:	4b8c      	ldr	r3, [pc, #560]	; (8006ad8 <HAL_RCC_OscConfig+0x26c>)
 80068a6:	685b      	ldr	r3, [r3, #4]
 80068a8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80068ac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80068b0:	d10b      	bne.n	80068ca <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80068b2:	4b89      	ldr	r3, [pc, #548]	; (8006ad8 <HAL_RCC_OscConfig+0x26c>)
 80068b4:	681b      	ldr	r3, [r3, #0]
 80068b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80068ba:	2b00      	cmp	r3, #0
 80068bc:	d06c      	beq.n	8006998 <HAL_RCC_OscConfig+0x12c>
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	685b      	ldr	r3, [r3, #4]
 80068c2:	2b00      	cmp	r3, #0
 80068c4:	d168      	bne.n	8006998 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80068c6:	2301      	movs	r3, #1
 80068c8:	e24c      	b.n	8006d64 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	685b      	ldr	r3, [r3, #4]
 80068ce:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80068d2:	d106      	bne.n	80068e2 <HAL_RCC_OscConfig+0x76>
 80068d4:	4b80      	ldr	r3, [pc, #512]	; (8006ad8 <HAL_RCC_OscConfig+0x26c>)
 80068d6:	681b      	ldr	r3, [r3, #0]
 80068d8:	4a7f      	ldr	r2, [pc, #508]	; (8006ad8 <HAL_RCC_OscConfig+0x26c>)
 80068da:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80068de:	6013      	str	r3, [r2, #0]
 80068e0:	e02e      	b.n	8006940 <HAL_RCC_OscConfig+0xd4>
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	685b      	ldr	r3, [r3, #4]
 80068e6:	2b00      	cmp	r3, #0
 80068e8:	d10c      	bne.n	8006904 <HAL_RCC_OscConfig+0x98>
 80068ea:	4b7b      	ldr	r3, [pc, #492]	; (8006ad8 <HAL_RCC_OscConfig+0x26c>)
 80068ec:	681b      	ldr	r3, [r3, #0]
 80068ee:	4a7a      	ldr	r2, [pc, #488]	; (8006ad8 <HAL_RCC_OscConfig+0x26c>)
 80068f0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80068f4:	6013      	str	r3, [r2, #0]
 80068f6:	4b78      	ldr	r3, [pc, #480]	; (8006ad8 <HAL_RCC_OscConfig+0x26c>)
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	4a77      	ldr	r2, [pc, #476]	; (8006ad8 <HAL_RCC_OscConfig+0x26c>)
 80068fc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006900:	6013      	str	r3, [r2, #0]
 8006902:	e01d      	b.n	8006940 <HAL_RCC_OscConfig+0xd4>
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	685b      	ldr	r3, [r3, #4]
 8006908:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800690c:	d10c      	bne.n	8006928 <HAL_RCC_OscConfig+0xbc>
 800690e:	4b72      	ldr	r3, [pc, #456]	; (8006ad8 <HAL_RCC_OscConfig+0x26c>)
 8006910:	681b      	ldr	r3, [r3, #0]
 8006912:	4a71      	ldr	r2, [pc, #452]	; (8006ad8 <HAL_RCC_OscConfig+0x26c>)
 8006914:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006918:	6013      	str	r3, [r2, #0]
 800691a:	4b6f      	ldr	r3, [pc, #444]	; (8006ad8 <HAL_RCC_OscConfig+0x26c>)
 800691c:	681b      	ldr	r3, [r3, #0]
 800691e:	4a6e      	ldr	r2, [pc, #440]	; (8006ad8 <HAL_RCC_OscConfig+0x26c>)
 8006920:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006924:	6013      	str	r3, [r2, #0]
 8006926:	e00b      	b.n	8006940 <HAL_RCC_OscConfig+0xd4>
 8006928:	4b6b      	ldr	r3, [pc, #428]	; (8006ad8 <HAL_RCC_OscConfig+0x26c>)
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	4a6a      	ldr	r2, [pc, #424]	; (8006ad8 <HAL_RCC_OscConfig+0x26c>)
 800692e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006932:	6013      	str	r3, [r2, #0]
 8006934:	4b68      	ldr	r3, [pc, #416]	; (8006ad8 <HAL_RCC_OscConfig+0x26c>)
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	4a67      	ldr	r2, [pc, #412]	; (8006ad8 <HAL_RCC_OscConfig+0x26c>)
 800693a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800693e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	685b      	ldr	r3, [r3, #4]
 8006944:	2b00      	cmp	r3, #0
 8006946:	d013      	beq.n	8006970 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006948:	f7ff fb36 	bl	8005fb8 <HAL_GetTick>
 800694c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800694e:	e008      	b.n	8006962 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006950:	f7ff fb32 	bl	8005fb8 <HAL_GetTick>
 8006954:	4602      	mov	r2, r0
 8006956:	693b      	ldr	r3, [r7, #16]
 8006958:	1ad3      	subs	r3, r2, r3
 800695a:	2b64      	cmp	r3, #100	; 0x64
 800695c:	d901      	bls.n	8006962 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800695e:	2303      	movs	r3, #3
 8006960:	e200      	b.n	8006d64 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006962:	4b5d      	ldr	r3, [pc, #372]	; (8006ad8 <HAL_RCC_OscConfig+0x26c>)
 8006964:	681b      	ldr	r3, [r3, #0]
 8006966:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800696a:	2b00      	cmp	r3, #0
 800696c:	d0f0      	beq.n	8006950 <HAL_RCC_OscConfig+0xe4>
 800696e:	e014      	b.n	800699a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006970:	f7ff fb22 	bl	8005fb8 <HAL_GetTick>
 8006974:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006976:	e008      	b.n	800698a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006978:	f7ff fb1e 	bl	8005fb8 <HAL_GetTick>
 800697c:	4602      	mov	r2, r0
 800697e:	693b      	ldr	r3, [r7, #16]
 8006980:	1ad3      	subs	r3, r2, r3
 8006982:	2b64      	cmp	r3, #100	; 0x64
 8006984:	d901      	bls.n	800698a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8006986:	2303      	movs	r3, #3
 8006988:	e1ec      	b.n	8006d64 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800698a:	4b53      	ldr	r3, [pc, #332]	; (8006ad8 <HAL_RCC_OscConfig+0x26c>)
 800698c:	681b      	ldr	r3, [r3, #0]
 800698e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006992:	2b00      	cmp	r3, #0
 8006994:	d1f0      	bne.n	8006978 <HAL_RCC_OscConfig+0x10c>
 8006996:	e000      	b.n	800699a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006998:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	681b      	ldr	r3, [r3, #0]
 800699e:	f003 0302 	and.w	r3, r3, #2
 80069a2:	2b00      	cmp	r3, #0
 80069a4:	d063      	beq.n	8006a6e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80069a6:	4b4c      	ldr	r3, [pc, #304]	; (8006ad8 <HAL_RCC_OscConfig+0x26c>)
 80069a8:	685b      	ldr	r3, [r3, #4]
 80069aa:	f003 030c 	and.w	r3, r3, #12
 80069ae:	2b00      	cmp	r3, #0
 80069b0:	d00b      	beq.n	80069ca <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80069b2:	4b49      	ldr	r3, [pc, #292]	; (8006ad8 <HAL_RCC_OscConfig+0x26c>)
 80069b4:	685b      	ldr	r3, [r3, #4]
 80069b6:	f003 030c 	and.w	r3, r3, #12
 80069ba:	2b08      	cmp	r3, #8
 80069bc:	d11c      	bne.n	80069f8 <HAL_RCC_OscConfig+0x18c>
 80069be:	4b46      	ldr	r3, [pc, #280]	; (8006ad8 <HAL_RCC_OscConfig+0x26c>)
 80069c0:	685b      	ldr	r3, [r3, #4]
 80069c2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80069c6:	2b00      	cmp	r3, #0
 80069c8:	d116      	bne.n	80069f8 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80069ca:	4b43      	ldr	r3, [pc, #268]	; (8006ad8 <HAL_RCC_OscConfig+0x26c>)
 80069cc:	681b      	ldr	r3, [r3, #0]
 80069ce:	f003 0302 	and.w	r3, r3, #2
 80069d2:	2b00      	cmp	r3, #0
 80069d4:	d005      	beq.n	80069e2 <HAL_RCC_OscConfig+0x176>
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	691b      	ldr	r3, [r3, #16]
 80069da:	2b01      	cmp	r3, #1
 80069dc:	d001      	beq.n	80069e2 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80069de:	2301      	movs	r3, #1
 80069e0:	e1c0      	b.n	8006d64 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80069e2:	4b3d      	ldr	r3, [pc, #244]	; (8006ad8 <HAL_RCC_OscConfig+0x26c>)
 80069e4:	681b      	ldr	r3, [r3, #0]
 80069e6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	695b      	ldr	r3, [r3, #20]
 80069ee:	00db      	lsls	r3, r3, #3
 80069f0:	4939      	ldr	r1, [pc, #228]	; (8006ad8 <HAL_RCC_OscConfig+0x26c>)
 80069f2:	4313      	orrs	r3, r2
 80069f4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80069f6:	e03a      	b.n	8006a6e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	691b      	ldr	r3, [r3, #16]
 80069fc:	2b00      	cmp	r3, #0
 80069fe:	d020      	beq.n	8006a42 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006a00:	4b36      	ldr	r3, [pc, #216]	; (8006adc <HAL_RCC_OscConfig+0x270>)
 8006a02:	2201      	movs	r2, #1
 8006a04:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006a06:	f7ff fad7 	bl	8005fb8 <HAL_GetTick>
 8006a0a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006a0c:	e008      	b.n	8006a20 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006a0e:	f7ff fad3 	bl	8005fb8 <HAL_GetTick>
 8006a12:	4602      	mov	r2, r0
 8006a14:	693b      	ldr	r3, [r7, #16]
 8006a16:	1ad3      	subs	r3, r2, r3
 8006a18:	2b02      	cmp	r3, #2
 8006a1a:	d901      	bls.n	8006a20 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8006a1c:	2303      	movs	r3, #3
 8006a1e:	e1a1      	b.n	8006d64 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006a20:	4b2d      	ldr	r3, [pc, #180]	; (8006ad8 <HAL_RCC_OscConfig+0x26c>)
 8006a22:	681b      	ldr	r3, [r3, #0]
 8006a24:	f003 0302 	and.w	r3, r3, #2
 8006a28:	2b00      	cmp	r3, #0
 8006a2a:	d0f0      	beq.n	8006a0e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006a2c:	4b2a      	ldr	r3, [pc, #168]	; (8006ad8 <HAL_RCC_OscConfig+0x26c>)
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	695b      	ldr	r3, [r3, #20]
 8006a38:	00db      	lsls	r3, r3, #3
 8006a3a:	4927      	ldr	r1, [pc, #156]	; (8006ad8 <HAL_RCC_OscConfig+0x26c>)
 8006a3c:	4313      	orrs	r3, r2
 8006a3e:	600b      	str	r3, [r1, #0]
 8006a40:	e015      	b.n	8006a6e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006a42:	4b26      	ldr	r3, [pc, #152]	; (8006adc <HAL_RCC_OscConfig+0x270>)
 8006a44:	2200      	movs	r2, #0
 8006a46:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006a48:	f7ff fab6 	bl	8005fb8 <HAL_GetTick>
 8006a4c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006a4e:	e008      	b.n	8006a62 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006a50:	f7ff fab2 	bl	8005fb8 <HAL_GetTick>
 8006a54:	4602      	mov	r2, r0
 8006a56:	693b      	ldr	r3, [r7, #16]
 8006a58:	1ad3      	subs	r3, r2, r3
 8006a5a:	2b02      	cmp	r3, #2
 8006a5c:	d901      	bls.n	8006a62 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8006a5e:	2303      	movs	r3, #3
 8006a60:	e180      	b.n	8006d64 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006a62:	4b1d      	ldr	r3, [pc, #116]	; (8006ad8 <HAL_RCC_OscConfig+0x26c>)
 8006a64:	681b      	ldr	r3, [r3, #0]
 8006a66:	f003 0302 	and.w	r3, r3, #2
 8006a6a:	2b00      	cmp	r3, #0
 8006a6c:	d1f0      	bne.n	8006a50 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	681b      	ldr	r3, [r3, #0]
 8006a72:	f003 0308 	and.w	r3, r3, #8
 8006a76:	2b00      	cmp	r3, #0
 8006a78:	d03a      	beq.n	8006af0 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	699b      	ldr	r3, [r3, #24]
 8006a7e:	2b00      	cmp	r3, #0
 8006a80:	d019      	beq.n	8006ab6 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006a82:	4b17      	ldr	r3, [pc, #92]	; (8006ae0 <HAL_RCC_OscConfig+0x274>)
 8006a84:	2201      	movs	r2, #1
 8006a86:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006a88:	f7ff fa96 	bl	8005fb8 <HAL_GetTick>
 8006a8c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006a8e:	e008      	b.n	8006aa2 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006a90:	f7ff fa92 	bl	8005fb8 <HAL_GetTick>
 8006a94:	4602      	mov	r2, r0
 8006a96:	693b      	ldr	r3, [r7, #16]
 8006a98:	1ad3      	subs	r3, r2, r3
 8006a9a:	2b02      	cmp	r3, #2
 8006a9c:	d901      	bls.n	8006aa2 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8006a9e:	2303      	movs	r3, #3
 8006aa0:	e160      	b.n	8006d64 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006aa2:	4b0d      	ldr	r3, [pc, #52]	; (8006ad8 <HAL_RCC_OscConfig+0x26c>)
 8006aa4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006aa6:	f003 0302 	and.w	r3, r3, #2
 8006aaa:	2b00      	cmp	r3, #0
 8006aac:	d0f0      	beq.n	8006a90 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8006aae:	2001      	movs	r0, #1
 8006ab0:	f000 face 	bl	8007050 <RCC_Delay>
 8006ab4:	e01c      	b.n	8006af0 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006ab6:	4b0a      	ldr	r3, [pc, #40]	; (8006ae0 <HAL_RCC_OscConfig+0x274>)
 8006ab8:	2200      	movs	r2, #0
 8006aba:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006abc:	f7ff fa7c 	bl	8005fb8 <HAL_GetTick>
 8006ac0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006ac2:	e00f      	b.n	8006ae4 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006ac4:	f7ff fa78 	bl	8005fb8 <HAL_GetTick>
 8006ac8:	4602      	mov	r2, r0
 8006aca:	693b      	ldr	r3, [r7, #16]
 8006acc:	1ad3      	subs	r3, r2, r3
 8006ace:	2b02      	cmp	r3, #2
 8006ad0:	d908      	bls.n	8006ae4 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8006ad2:	2303      	movs	r3, #3
 8006ad4:	e146      	b.n	8006d64 <HAL_RCC_OscConfig+0x4f8>
 8006ad6:	bf00      	nop
 8006ad8:	40021000 	.word	0x40021000
 8006adc:	42420000 	.word	0x42420000
 8006ae0:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006ae4:	4b92      	ldr	r3, [pc, #584]	; (8006d30 <HAL_RCC_OscConfig+0x4c4>)
 8006ae6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ae8:	f003 0302 	and.w	r3, r3, #2
 8006aec:	2b00      	cmp	r3, #0
 8006aee:	d1e9      	bne.n	8006ac4 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	681b      	ldr	r3, [r3, #0]
 8006af4:	f003 0304 	and.w	r3, r3, #4
 8006af8:	2b00      	cmp	r3, #0
 8006afa:	f000 80a6 	beq.w	8006c4a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006afe:	2300      	movs	r3, #0
 8006b00:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006b02:	4b8b      	ldr	r3, [pc, #556]	; (8006d30 <HAL_RCC_OscConfig+0x4c4>)
 8006b04:	69db      	ldr	r3, [r3, #28]
 8006b06:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006b0a:	2b00      	cmp	r3, #0
 8006b0c:	d10d      	bne.n	8006b2a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006b0e:	4b88      	ldr	r3, [pc, #544]	; (8006d30 <HAL_RCC_OscConfig+0x4c4>)
 8006b10:	69db      	ldr	r3, [r3, #28]
 8006b12:	4a87      	ldr	r2, [pc, #540]	; (8006d30 <HAL_RCC_OscConfig+0x4c4>)
 8006b14:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006b18:	61d3      	str	r3, [r2, #28]
 8006b1a:	4b85      	ldr	r3, [pc, #532]	; (8006d30 <HAL_RCC_OscConfig+0x4c4>)
 8006b1c:	69db      	ldr	r3, [r3, #28]
 8006b1e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006b22:	60bb      	str	r3, [r7, #8]
 8006b24:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006b26:	2301      	movs	r3, #1
 8006b28:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006b2a:	4b82      	ldr	r3, [pc, #520]	; (8006d34 <HAL_RCC_OscConfig+0x4c8>)
 8006b2c:	681b      	ldr	r3, [r3, #0]
 8006b2e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006b32:	2b00      	cmp	r3, #0
 8006b34:	d118      	bne.n	8006b68 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006b36:	4b7f      	ldr	r3, [pc, #508]	; (8006d34 <HAL_RCC_OscConfig+0x4c8>)
 8006b38:	681b      	ldr	r3, [r3, #0]
 8006b3a:	4a7e      	ldr	r2, [pc, #504]	; (8006d34 <HAL_RCC_OscConfig+0x4c8>)
 8006b3c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006b40:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006b42:	f7ff fa39 	bl	8005fb8 <HAL_GetTick>
 8006b46:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006b48:	e008      	b.n	8006b5c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006b4a:	f7ff fa35 	bl	8005fb8 <HAL_GetTick>
 8006b4e:	4602      	mov	r2, r0
 8006b50:	693b      	ldr	r3, [r7, #16]
 8006b52:	1ad3      	subs	r3, r2, r3
 8006b54:	2b64      	cmp	r3, #100	; 0x64
 8006b56:	d901      	bls.n	8006b5c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8006b58:	2303      	movs	r3, #3
 8006b5a:	e103      	b.n	8006d64 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006b5c:	4b75      	ldr	r3, [pc, #468]	; (8006d34 <HAL_RCC_OscConfig+0x4c8>)
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006b64:	2b00      	cmp	r3, #0
 8006b66:	d0f0      	beq.n	8006b4a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	68db      	ldr	r3, [r3, #12]
 8006b6c:	2b01      	cmp	r3, #1
 8006b6e:	d106      	bne.n	8006b7e <HAL_RCC_OscConfig+0x312>
 8006b70:	4b6f      	ldr	r3, [pc, #444]	; (8006d30 <HAL_RCC_OscConfig+0x4c4>)
 8006b72:	6a1b      	ldr	r3, [r3, #32]
 8006b74:	4a6e      	ldr	r2, [pc, #440]	; (8006d30 <HAL_RCC_OscConfig+0x4c4>)
 8006b76:	f043 0301 	orr.w	r3, r3, #1
 8006b7a:	6213      	str	r3, [r2, #32]
 8006b7c:	e02d      	b.n	8006bda <HAL_RCC_OscConfig+0x36e>
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	68db      	ldr	r3, [r3, #12]
 8006b82:	2b00      	cmp	r3, #0
 8006b84:	d10c      	bne.n	8006ba0 <HAL_RCC_OscConfig+0x334>
 8006b86:	4b6a      	ldr	r3, [pc, #424]	; (8006d30 <HAL_RCC_OscConfig+0x4c4>)
 8006b88:	6a1b      	ldr	r3, [r3, #32]
 8006b8a:	4a69      	ldr	r2, [pc, #420]	; (8006d30 <HAL_RCC_OscConfig+0x4c4>)
 8006b8c:	f023 0301 	bic.w	r3, r3, #1
 8006b90:	6213      	str	r3, [r2, #32]
 8006b92:	4b67      	ldr	r3, [pc, #412]	; (8006d30 <HAL_RCC_OscConfig+0x4c4>)
 8006b94:	6a1b      	ldr	r3, [r3, #32]
 8006b96:	4a66      	ldr	r2, [pc, #408]	; (8006d30 <HAL_RCC_OscConfig+0x4c4>)
 8006b98:	f023 0304 	bic.w	r3, r3, #4
 8006b9c:	6213      	str	r3, [r2, #32]
 8006b9e:	e01c      	b.n	8006bda <HAL_RCC_OscConfig+0x36e>
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	68db      	ldr	r3, [r3, #12]
 8006ba4:	2b05      	cmp	r3, #5
 8006ba6:	d10c      	bne.n	8006bc2 <HAL_RCC_OscConfig+0x356>
 8006ba8:	4b61      	ldr	r3, [pc, #388]	; (8006d30 <HAL_RCC_OscConfig+0x4c4>)
 8006baa:	6a1b      	ldr	r3, [r3, #32]
 8006bac:	4a60      	ldr	r2, [pc, #384]	; (8006d30 <HAL_RCC_OscConfig+0x4c4>)
 8006bae:	f043 0304 	orr.w	r3, r3, #4
 8006bb2:	6213      	str	r3, [r2, #32]
 8006bb4:	4b5e      	ldr	r3, [pc, #376]	; (8006d30 <HAL_RCC_OscConfig+0x4c4>)
 8006bb6:	6a1b      	ldr	r3, [r3, #32]
 8006bb8:	4a5d      	ldr	r2, [pc, #372]	; (8006d30 <HAL_RCC_OscConfig+0x4c4>)
 8006bba:	f043 0301 	orr.w	r3, r3, #1
 8006bbe:	6213      	str	r3, [r2, #32]
 8006bc0:	e00b      	b.n	8006bda <HAL_RCC_OscConfig+0x36e>
 8006bc2:	4b5b      	ldr	r3, [pc, #364]	; (8006d30 <HAL_RCC_OscConfig+0x4c4>)
 8006bc4:	6a1b      	ldr	r3, [r3, #32]
 8006bc6:	4a5a      	ldr	r2, [pc, #360]	; (8006d30 <HAL_RCC_OscConfig+0x4c4>)
 8006bc8:	f023 0301 	bic.w	r3, r3, #1
 8006bcc:	6213      	str	r3, [r2, #32]
 8006bce:	4b58      	ldr	r3, [pc, #352]	; (8006d30 <HAL_RCC_OscConfig+0x4c4>)
 8006bd0:	6a1b      	ldr	r3, [r3, #32]
 8006bd2:	4a57      	ldr	r2, [pc, #348]	; (8006d30 <HAL_RCC_OscConfig+0x4c4>)
 8006bd4:	f023 0304 	bic.w	r3, r3, #4
 8006bd8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	68db      	ldr	r3, [r3, #12]
 8006bde:	2b00      	cmp	r3, #0
 8006be0:	d015      	beq.n	8006c0e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006be2:	f7ff f9e9 	bl	8005fb8 <HAL_GetTick>
 8006be6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006be8:	e00a      	b.n	8006c00 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006bea:	f7ff f9e5 	bl	8005fb8 <HAL_GetTick>
 8006bee:	4602      	mov	r2, r0
 8006bf0:	693b      	ldr	r3, [r7, #16]
 8006bf2:	1ad3      	subs	r3, r2, r3
 8006bf4:	f241 3288 	movw	r2, #5000	; 0x1388
 8006bf8:	4293      	cmp	r3, r2
 8006bfa:	d901      	bls.n	8006c00 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8006bfc:	2303      	movs	r3, #3
 8006bfe:	e0b1      	b.n	8006d64 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006c00:	4b4b      	ldr	r3, [pc, #300]	; (8006d30 <HAL_RCC_OscConfig+0x4c4>)
 8006c02:	6a1b      	ldr	r3, [r3, #32]
 8006c04:	f003 0302 	and.w	r3, r3, #2
 8006c08:	2b00      	cmp	r3, #0
 8006c0a:	d0ee      	beq.n	8006bea <HAL_RCC_OscConfig+0x37e>
 8006c0c:	e014      	b.n	8006c38 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006c0e:	f7ff f9d3 	bl	8005fb8 <HAL_GetTick>
 8006c12:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006c14:	e00a      	b.n	8006c2c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006c16:	f7ff f9cf 	bl	8005fb8 <HAL_GetTick>
 8006c1a:	4602      	mov	r2, r0
 8006c1c:	693b      	ldr	r3, [r7, #16]
 8006c1e:	1ad3      	subs	r3, r2, r3
 8006c20:	f241 3288 	movw	r2, #5000	; 0x1388
 8006c24:	4293      	cmp	r3, r2
 8006c26:	d901      	bls.n	8006c2c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8006c28:	2303      	movs	r3, #3
 8006c2a:	e09b      	b.n	8006d64 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006c2c:	4b40      	ldr	r3, [pc, #256]	; (8006d30 <HAL_RCC_OscConfig+0x4c4>)
 8006c2e:	6a1b      	ldr	r3, [r3, #32]
 8006c30:	f003 0302 	and.w	r3, r3, #2
 8006c34:	2b00      	cmp	r3, #0
 8006c36:	d1ee      	bne.n	8006c16 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8006c38:	7dfb      	ldrb	r3, [r7, #23]
 8006c3a:	2b01      	cmp	r3, #1
 8006c3c:	d105      	bne.n	8006c4a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006c3e:	4b3c      	ldr	r3, [pc, #240]	; (8006d30 <HAL_RCC_OscConfig+0x4c4>)
 8006c40:	69db      	ldr	r3, [r3, #28]
 8006c42:	4a3b      	ldr	r2, [pc, #236]	; (8006d30 <HAL_RCC_OscConfig+0x4c4>)
 8006c44:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006c48:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	69db      	ldr	r3, [r3, #28]
 8006c4e:	2b00      	cmp	r3, #0
 8006c50:	f000 8087 	beq.w	8006d62 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006c54:	4b36      	ldr	r3, [pc, #216]	; (8006d30 <HAL_RCC_OscConfig+0x4c4>)
 8006c56:	685b      	ldr	r3, [r3, #4]
 8006c58:	f003 030c 	and.w	r3, r3, #12
 8006c5c:	2b08      	cmp	r3, #8
 8006c5e:	d061      	beq.n	8006d24 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	69db      	ldr	r3, [r3, #28]
 8006c64:	2b02      	cmp	r3, #2
 8006c66:	d146      	bne.n	8006cf6 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006c68:	4b33      	ldr	r3, [pc, #204]	; (8006d38 <HAL_RCC_OscConfig+0x4cc>)
 8006c6a:	2200      	movs	r2, #0
 8006c6c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006c6e:	f7ff f9a3 	bl	8005fb8 <HAL_GetTick>
 8006c72:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006c74:	e008      	b.n	8006c88 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006c76:	f7ff f99f 	bl	8005fb8 <HAL_GetTick>
 8006c7a:	4602      	mov	r2, r0
 8006c7c:	693b      	ldr	r3, [r7, #16]
 8006c7e:	1ad3      	subs	r3, r2, r3
 8006c80:	2b02      	cmp	r3, #2
 8006c82:	d901      	bls.n	8006c88 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8006c84:	2303      	movs	r3, #3
 8006c86:	e06d      	b.n	8006d64 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006c88:	4b29      	ldr	r3, [pc, #164]	; (8006d30 <HAL_RCC_OscConfig+0x4c4>)
 8006c8a:	681b      	ldr	r3, [r3, #0]
 8006c8c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006c90:	2b00      	cmp	r3, #0
 8006c92:	d1f0      	bne.n	8006c76 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	6a1b      	ldr	r3, [r3, #32]
 8006c98:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006c9c:	d108      	bne.n	8006cb0 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8006c9e:	4b24      	ldr	r3, [pc, #144]	; (8006d30 <HAL_RCC_OscConfig+0x4c4>)
 8006ca0:	685b      	ldr	r3, [r3, #4]
 8006ca2:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	689b      	ldr	r3, [r3, #8]
 8006caa:	4921      	ldr	r1, [pc, #132]	; (8006d30 <HAL_RCC_OscConfig+0x4c4>)
 8006cac:	4313      	orrs	r3, r2
 8006cae:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006cb0:	4b1f      	ldr	r3, [pc, #124]	; (8006d30 <HAL_RCC_OscConfig+0x4c4>)
 8006cb2:	685b      	ldr	r3, [r3, #4]
 8006cb4:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	6a19      	ldr	r1, [r3, #32]
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006cc0:	430b      	orrs	r3, r1
 8006cc2:	491b      	ldr	r1, [pc, #108]	; (8006d30 <HAL_RCC_OscConfig+0x4c4>)
 8006cc4:	4313      	orrs	r3, r2
 8006cc6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006cc8:	4b1b      	ldr	r3, [pc, #108]	; (8006d38 <HAL_RCC_OscConfig+0x4cc>)
 8006cca:	2201      	movs	r2, #1
 8006ccc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006cce:	f7ff f973 	bl	8005fb8 <HAL_GetTick>
 8006cd2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8006cd4:	e008      	b.n	8006ce8 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006cd6:	f7ff f96f 	bl	8005fb8 <HAL_GetTick>
 8006cda:	4602      	mov	r2, r0
 8006cdc:	693b      	ldr	r3, [r7, #16]
 8006cde:	1ad3      	subs	r3, r2, r3
 8006ce0:	2b02      	cmp	r3, #2
 8006ce2:	d901      	bls.n	8006ce8 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8006ce4:	2303      	movs	r3, #3
 8006ce6:	e03d      	b.n	8006d64 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8006ce8:	4b11      	ldr	r3, [pc, #68]	; (8006d30 <HAL_RCC_OscConfig+0x4c4>)
 8006cea:	681b      	ldr	r3, [r3, #0]
 8006cec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006cf0:	2b00      	cmp	r3, #0
 8006cf2:	d0f0      	beq.n	8006cd6 <HAL_RCC_OscConfig+0x46a>
 8006cf4:	e035      	b.n	8006d62 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006cf6:	4b10      	ldr	r3, [pc, #64]	; (8006d38 <HAL_RCC_OscConfig+0x4cc>)
 8006cf8:	2200      	movs	r2, #0
 8006cfa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006cfc:	f7ff f95c 	bl	8005fb8 <HAL_GetTick>
 8006d00:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006d02:	e008      	b.n	8006d16 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006d04:	f7ff f958 	bl	8005fb8 <HAL_GetTick>
 8006d08:	4602      	mov	r2, r0
 8006d0a:	693b      	ldr	r3, [r7, #16]
 8006d0c:	1ad3      	subs	r3, r2, r3
 8006d0e:	2b02      	cmp	r3, #2
 8006d10:	d901      	bls.n	8006d16 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8006d12:	2303      	movs	r3, #3
 8006d14:	e026      	b.n	8006d64 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006d16:	4b06      	ldr	r3, [pc, #24]	; (8006d30 <HAL_RCC_OscConfig+0x4c4>)
 8006d18:	681b      	ldr	r3, [r3, #0]
 8006d1a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006d1e:	2b00      	cmp	r3, #0
 8006d20:	d1f0      	bne.n	8006d04 <HAL_RCC_OscConfig+0x498>
 8006d22:	e01e      	b.n	8006d62 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	69db      	ldr	r3, [r3, #28]
 8006d28:	2b01      	cmp	r3, #1
 8006d2a:	d107      	bne.n	8006d3c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8006d2c:	2301      	movs	r3, #1
 8006d2e:	e019      	b.n	8006d64 <HAL_RCC_OscConfig+0x4f8>
 8006d30:	40021000 	.word	0x40021000
 8006d34:	40007000 	.word	0x40007000
 8006d38:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8006d3c:	4b0b      	ldr	r3, [pc, #44]	; (8006d6c <HAL_RCC_OscConfig+0x500>)
 8006d3e:	685b      	ldr	r3, [r3, #4]
 8006d40:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006d42:	68fb      	ldr	r3, [r7, #12]
 8006d44:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	6a1b      	ldr	r3, [r3, #32]
 8006d4c:	429a      	cmp	r2, r3
 8006d4e:	d106      	bne.n	8006d5e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8006d50:	68fb      	ldr	r3, [r7, #12]
 8006d52:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006d5a:	429a      	cmp	r2, r3
 8006d5c:	d001      	beq.n	8006d62 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8006d5e:	2301      	movs	r3, #1
 8006d60:	e000      	b.n	8006d64 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8006d62:	2300      	movs	r3, #0
}
 8006d64:	4618      	mov	r0, r3
 8006d66:	3718      	adds	r7, #24
 8006d68:	46bd      	mov	sp, r7
 8006d6a:	bd80      	pop	{r7, pc}
 8006d6c:	40021000 	.word	0x40021000

08006d70 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006d70:	b580      	push	{r7, lr}
 8006d72:	b084      	sub	sp, #16
 8006d74:	af00      	add	r7, sp, #0
 8006d76:	6078      	str	r0, [r7, #4]
 8006d78:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	2b00      	cmp	r3, #0
 8006d7e:	d101      	bne.n	8006d84 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006d80:	2301      	movs	r3, #1
 8006d82:	e0d0      	b.n	8006f26 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006d84:	4b6a      	ldr	r3, [pc, #424]	; (8006f30 <HAL_RCC_ClockConfig+0x1c0>)
 8006d86:	681b      	ldr	r3, [r3, #0]
 8006d88:	f003 0307 	and.w	r3, r3, #7
 8006d8c:	683a      	ldr	r2, [r7, #0]
 8006d8e:	429a      	cmp	r2, r3
 8006d90:	d910      	bls.n	8006db4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006d92:	4b67      	ldr	r3, [pc, #412]	; (8006f30 <HAL_RCC_ClockConfig+0x1c0>)
 8006d94:	681b      	ldr	r3, [r3, #0]
 8006d96:	f023 0207 	bic.w	r2, r3, #7
 8006d9a:	4965      	ldr	r1, [pc, #404]	; (8006f30 <HAL_RCC_ClockConfig+0x1c0>)
 8006d9c:	683b      	ldr	r3, [r7, #0]
 8006d9e:	4313      	orrs	r3, r2
 8006da0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006da2:	4b63      	ldr	r3, [pc, #396]	; (8006f30 <HAL_RCC_ClockConfig+0x1c0>)
 8006da4:	681b      	ldr	r3, [r3, #0]
 8006da6:	f003 0307 	and.w	r3, r3, #7
 8006daa:	683a      	ldr	r2, [r7, #0]
 8006dac:	429a      	cmp	r2, r3
 8006dae:	d001      	beq.n	8006db4 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8006db0:	2301      	movs	r3, #1
 8006db2:	e0b8      	b.n	8006f26 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	681b      	ldr	r3, [r3, #0]
 8006db8:	f003 0302 	and.w	r3, r3, #2
 8006dbc:	2b00      	cmp	r3, #0
 8006dbe:	d020      	beq.n	8006e02 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	681b      	ldr	r3, [r3, #0]
 8006dc4:	f003 0304 	and.w	r3, r3, #4
 8006dc8:	2b00      	cmp	r3, #0
 8006dca:	d005      	beq.n	8006dd8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006dcc:	4b59      	ldr	r3, [pc, #356]	; (8006f34 <HAL_RCC_ClockConfig+0x1c4>)
 8006dce:	685b      	ldr	r3, [r3, #4]
 8006dd0:	4a58      	ldr	r2, [pc, #352]	; (8006f34 <HAL_RCC_ClockConfig+0x1c4>)
 8006dd2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8006dd6:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	681b      	ldr	r3, [r3, #0]
 8006ddc:	f003 0308 	and.w	r3, r3, #8
 8006de0:	2b00      	cmp	r3, #0
 8006de2:	d005      	beq.n	8006df0 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006de4:	4b53      	ldr	r3, [pc, #332]	; (8006f34 <HAL_RCC_ClockConfig+0x1c4>)
 8006de6:	685b      	ldr	r3, [r3, #4]
 8006de8:	4a52      	ldr	r2, [pc, #328]	; (8006f34 <HAL_RCC_ClockConfig+0x1c4>)
 8006dea:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8006dee:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006df0:	4b50      	ldr	r3, [pc, #320]	; (8006f34 <HAL_RCC_ClockConfig+0x1c4>)
 8006df2:	685b      	ldr	r3, [r3, #4]
 8006df4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	689b      	ldr	r3, [r3, #8]
 8006dfc:	494d      	ldr	r1, [pc, #308]	; (8006f34 <HAL_RCC_ClockConfig+0x1c4>)
 8006dfe:	4313      	orrs	r3, r2
 8006e00:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	681b      	ldr	r3, [r3, #0]
 8006e06:	f003 0301 	and.w	r3, r3, #1
 8006e0a:	2b00      	cmp	r3, #0
 8006e0c:	d040      	beq.n	8006e90 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	685b      	ldr	r3, [r3, #4]
 8006e12:	2b01      	cmp	r3, #1
 8006e14:	d107      	bne.n	8006e26 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006e16:	4b47      	ldr	r3, [pc, #284]	; (8006f34 <HAL_RCC_ClockConfig+0x1c4>)
 8006e18:	681b      	ldr	r3, [r3, #0]
 8006e1a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006e1e:	2b00      	cmp	r3, #0
 8006e20:	d115      	bne.n	8006e4e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006e22:	2301      	movs	r3, #1
 8006e24:	e07f      	b.n	8006f26 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	685b      	ldr	r3, [r3, #4]
 8006e2a:	2b02      	cmp	r3, #2
 8006e2c:	d107      	bne.n	8006e3e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006e2e:	4b41      	ldr	r3, [pc, #260]	; (8006f34 <HAL_RCC_ClockConfig+0x1c4>)
 8006e30:	681b      	ldr	r3, [r3, #0]
 8006e32:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006e36:	2b00      	cmp	r3, #0
 8006e38:	d109      	bne.n	8006e4e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006e3a:	2301      	movs	r3, #1
 8006e3c:	e073      	b.n	8006f26 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006e3e:	4b3d      	ldr	r3, [pc, #244]	; (8006f34 <HAL_RCC_ClockConfig+0x1c4>)
 8006e40:	681b      	ldr	r3, [r3, #0]
 8006e42:	f003 0302 	and.w	r3, r3, #2
 8006e46:	2b00      	cmp	r3, #0
 8006e48:	d101      	bne.n	8006e4e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006e4a:	2301      	movs	r3, #1
 8006e4c:	e06b      	b.n	8006f26 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006e4e:	4b39      	ldr	r3, [pc, #228]	; (8006f34 <HAL_RCC_ClockConfig+0x1c4>)
 8006e50:	685b      	ldr	r3, [r3, #4]
 8006e52:	f023 0203 	bic.w	r2, r3, #3
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	685b      	ldr	r3, [r3, #4]
 8006e5a:	4936      	ldr	r1, [pc, #216]	; (8006f34 <HAL_RCC_ClockConfig+0x1c4>)
 8006e5c:	4313      	orrs	r3, r2
 8006e5e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006e60:	f7ff f8aa 	bl	8005fb8 <HAL_GetTick>
 8006e64:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006e66:	e00a      	b.n	8006e7e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006e68:	f7ff f8a6 	bl	8005fb8 <HAL_GetTick>
 8006e6c:	4602      	mov	r2, r0
 8006e6e:	68fb      	ldr	r3, [r7, #12]
 8006e70:	1ad3      	subs	r3, r2, r3
 8006e72:	f241 3288 	movw	r2, #5000	; 0x1388
 8006e76:	4293      	cmp	r3, r2
 8006e78:	d901      	bls.n	8006e7e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8006e7a:	2303      	movs	r3, #3
 8006e7c:	e053      	b.n	8006f26 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006e7e:	4b2d      	ldr	r3, [pc, #180]	; (8006f34 <HAL_RCC_ClockConfig+0x1c4>)
 8006e80:	685b      	ldr	r3, [r3, #4]
 8006e82:	f003 020c 	and.w	r2, r3, #12
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	685b      	ldr	r3, [r3, #4]
 8006e8a:	009b      	lsls	r3, r3, #2
 8006e8c:	429a      	cmp	r2, r3
 8006e8e:	d1eb      	bne.n	8006e68 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006e90:	4b27      	ldr	r3, [pc, #156]	; (8006f30 <HAL_RCC_ClockConfig+0x1c0>)
 8006e92:	681b      	ldr	r3, [r3, #0]
 8006e94:	f003 0307 	and.w	r3, r3, #7
 8006e98:	683a      	ldr	r2, [r7, #0]
 8006e9a:	429a      	cmp	r2, r3
 8006e9c:	d210      	bcs.n	8006ec0 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006e9e:	4b24      	ldr	r3, [pc, #144]	; (8006f30 <HAL_RCC_ClockConfig+0x1c0>)
 8006ea0:	681b      	ldr	r3, [r3, #0]
 8006ea2:	f023 0207 	bic.w	r2, r3, #7
 8006ea6:	4922      	ldr	r1, [pc, #136]	; (8006f30 <HAL_RCC_ClockConfig+0x1c0>)
 8006ea8:	683b      	ldr	r3, [r7, #0]
 8006eaa:	4313      	orrs	r3, r2
 8006eac:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006eae:	4b20      	ldr	r3, [pc, #128]	; (8006f30 <HAL_RCC_ClockConfig+0x1c0>)
 8006eb0:	681b      	ldr	r3, [r3, #0]
 8006eb2:	f003 0307 	and.w	r3, r3, #7
 8006eb6:	683a      	ldr	r2, [r7, #0]
 8006eb8:	429a      	cmp	r2, r3
 8006eba:	d001      	beq.n	8006ec0 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8006ebc:	2301      	movs	r3, #1
 8006ebe:	e032      	b.n	8006f26 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	681b      	ldr	r3, [r3, #0]
 8006ec4:	f003 0304 	and.w	r3, r3, #4
 8006ec8:	2b00      	cmp	r3, #0
 8006eca:	d008      	beq.n	8006ede <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006ecc:	4b19      	ldr	r3, [pc, #100]	; (8006f34 <HAL_RCC_ClockConfig+0x1c4>)
 8006ece:	685b      	ldr	r3, [r3, #4]
 8006ed0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	68db      	ldr	r3, [r3, #12]
 8006ed8:	4916      	ldr	r1, [pc, #88]	; (8006f34 <HAL_RCC_ClockConfig+0x1c4>)
 8006eda:	4313      	orrs	r3, r2
 8006edc:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	681b      	ldr	r3, [r3, #0]
 8006ee2:	f003 0308 	and.w	r3, r3, #8
 8006ee6:	2b00      	cmp	r3, #0
 8006ee8:	d009      	beq.n	8006efe <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8006eea:	4b12      	ldr	r3, [pc, #72]	; (8006f34 <HAL_RCC_ClockConfig+0x1c4>)
 8006eec:	685b      	ldr	r3, [r3, #4]
 8006eee:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	691b      	ldr	r3, [r3, #16]
 8006ef6:	00db      	lsls	r3, r3, #3
 8006ef8:	490e      	ldr	r1, [pc, #56]	; (8006f34 <HAL_RCC_ClockConfig+0x1c4>)
 8006efa:	4313      	orrs	r3, r2
 8006efc:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8006efe:	f000 f821 	bl	8006f44 <HAL_RCC_GetSysClockFreq>
 8006f02:	4602      	mov	r2, r0
 8006f04:	4b0b      	ldr	r3, [pc, #44]	; (8006f34 <HAL_RCC_ClockConfig+0x1c4>)
 8006f06:	685b      	ldr	r3, [r3, #4]
 8006f08:	091b      	lsrs	r3, r3, #4
 8006f0a:	f003 030f 	and.w	r3, r3, #15
 8006f0e:	490a      	ldr	r1, [pc, #40]	; (8006f38 <HAL_RCC_ClockConfig+0x1c8>)
 8006f10:	5ccb      	ldrb	r3, [r1, r3]
 8006f12:	fa22 f303 	lsr.w	r3, r2, r3
 8006f16:	4a09      	ldr	r2, [pc, #36]	; (8006f3c <HAL_RCC_ClockConfig+0x1cc>)
 8006f18:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8006f1a:	4b09      	ldr	r3, [pc, #36]	; (8006f40 <HAL_RCC_ClockConfig+0x1d0>)
 8006f1c:	681b      	ldr	r3, [r3, #0]
 8006f1e:	4618      	mov	r0, r3
 8006f20:	f7ff f808 	bl	8005f34 <HAL_InitTick>

  return HAL_OK;
 8006f24:	2300      	movs	r3, #0
}
 8006f26:	4618      	mov	r0, r3
 8006f28:	3710      	adds	r7, #16
 8006f2a:	46bd      	mov	sp, r7
 8006f2c:	bd80      	pop	{r7, pc}
 8006f2e:	bf00      	nop
 8006f30:	40022000 	.word	0x40022000
 8006f34:	40021000 	.word	0x40021000
 8006f38:	08007dec 	.word	0x08007dec
 8006f3c:	20000000 	.word	0x20000000
 8006f40:	20000004 	.word	0x20000004

08006f44 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006f44:	b480      	push	{r7}
 8006f46:	b087      	sub	sp, #28
 8006f48:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8006f4a:	2300      	movs	r3, #0
 8006f4c:	60fb      	str	r3, [r7, #12]
 8006f4e:	2300      	movs	r3, #0
 8006f50:	60bb      	str	r3, [r7, #8]
 8006f52:	2300      	movs	r3, #0
 8006f54:	617b      	str	r3, [r7, #20]
 8006f56:	2300      	movs	r3, #0
 8006f58:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8006f5a:	2300      	movs	r3, #0
 8006f5c:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8006f5e:	4b1e      	ldr	r3, [pc, #120]	; (8006fd8 <HAL_RCC_GetSysClockFreq+0x94>)
 8006f60:	685b      	ldr	r3, [r3, #4]
 8006f62:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8006f64:	68fb      	ldr	r3, [r7, #12]
 8006f66:	f003 030c 	and.w	r3, r3, #12
 8006f6a:	2b04      	cmp	r3, #4
 8006f6c:	d002      	beq.n	8006f74 <HAL_RCC_GetSysClockFreq+0x30>
 8006f6e:	2b08      	cmp	r3, #8
 8006f70:	d003      	beq.n	8006f7a <HAL_RCC_GetSysClockFreq+0x36>
 8006f72:	e027      	b.n	8006fc4 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8006f74:	4b19      	ldr	r3, [pc, #100]	; (8006fdc <HAL_RCC_GetSysClockFreq+0x98>)
 8006f76:	613b      	str	r3, [r7, #16]
      break;
 8006f78:	e027      	b.n	8006fca <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8006f7a:	68fb      	ldr	r3, [r7, #12]
 8006f7c:	0c9b      	lsrs	r3, r3, #18
 8006f7e:	f003 030f 	and.w	r3, r3, #15
 8006f82:	4a17      	ldr	r2, [pc, #92]	; (8006fe0 <HAL_RCC_GetSysClockFreq+0x9c>)
 8006f84:	5cd3      	ldrb	r3, [r2, r3]
 8006f86:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8006f88:	68fb      	ldr	r3, [r7, #12]
 8006f8a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006f8e:	2b00      	cmp	r3, #0
 8006f90:	d010      	beq.n	8006fb4 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8006f92:	4b11      	ldr	r3, [pc, #68]	; (8006fd8 <HAL_RCC_GetSysClockFreq+0x94>)
 8006f94:	685b      	ldr	r3, [r3, #4]
 8006f96:	0c5b      	lsrs	r3, r3, #17
 8006f98:	f003 0301 	and.w	r3, r3, #1
 8006f9c:	4a11      	ldr	r2, [pc, #68]	; (8006fe4 <HAL_RCC_GetSysClockFreq+0xa0>)
 8006f9e:	5cd3      	ldrb	r3, [r2, r3]
 8006fa0:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	4a0d      	ldr	r2, [pc, #52]	; (8006fdc <HAL_RCC_GetSysClockFreq+0x98>)
 8006fa6:	fb03 f202 	mul.w	r2, r3, r2
 8006faa:	68bb      	ldr	r3, [r7, #8]
 8006fac:	fbb2 f3f3 	udiv	r3, r2, r3
 8006fb0:	617b      	str	r3, [r7, #20]
 8006fb2:	e004      	b.n	8006fbe <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	4a0c      	ldr	r2, [pc, #48]	; (8006fe8 <HAL_RCC_GetSysClockFreq+0xa4>)
 8006fb8:	fb02 f303 	mul.w	r3, r2, r3
 8006fbc:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8006fbe:	697b      	ldr	r3, [r7, #20]
 8006fc0:	613b      	str	r3, [r7, #16]
      break;
 8006fc2:	e002      	b.n	8006fca <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8006fc4:	4b05      	ldr	r3, [pc, #20]	; (8006fdc <HAL_RCC_GetSysClockFreq+0x98>)
 8006fc6:	613b      	str	r3, [r7, #16]
      break;
 8006fc8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006fca:	693b      	ldr	r3, [r7, #16]
}
 8006fcc:	4618      	mov	r0, r3
 8006fce:	371c      	adds	r7, #28
 8006fd0:	46bd      	mov	sp, r7
 8006fd2:	bc80      	pop	{r7}
 8006fd4:	4770      	bx	lr
 8006fd6:	bf00      	nop
 8006fd8:	40021000 	.word	0x40021000
 8006fdc:	007a1200 	.word	0x007a1200
 8006fe0:	08007e04 	.word	0x08007e04
 8006fe4:	08007e14 	.word	0x08007e14
 8006fe8:	003d0900 	.word	0x003d0900

08006fec <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006fec:	b480      	push	{r7}
 8006fee:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006ff0:	4b02      	ldr	r3, [pc, #8]	; (8006ffc <HAL_RCC_GetHCLKFreq+0x10>)
 8006ff2:	681b      	ldr	r3, [r3, #0]
}
 8006ff4:	4618      	mov	r0, r3
 8006ff6:	46bd      	mov	sp, r7
 8006ff8:	bc80      	pop	{r7}
 8006ffa:	4770      	bx	lr
 8006ffc:	20000000 	.word	0x20000000

08007000 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007000:	b580      	push	{r7, lr}
 8007002:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8007004:	f7ff fff2 	bl	8006fec <HAL_RCC_GetHCLKFreq>
 8007008:	4602      	mov	r2, r0
 800700a:	4b05      	ldr	r3, [pc, #20]	; (8007020 <HAL_RCC_GetPCLK1Freq+0x20>)
 800700c:	685b      	ldr	r3, [r3, #4]
 800700e:	0a1b      	lsrs	r3, r3, #8
 8007010:	f003 0307 	and.w	r3, r3, #7
 8007014:	4903      	ldr	r1, [pc, #12]	; (8007024 <HAL_RCC_GetPCLK1Freq+0x24>)
 8007016:	5ccb      	ldrb	r3, [r1, r3]
 8007018:	fa22 f303 	lsr.w	r3, r2, r3
}
 800701c:	4618      	mov	r0, r3
 800701e:	bd80      	pop	{r7, pc}
 8007020:	40021000 	.word	0x40021000
 8007024:	08007dfc 	.word	0x08007dfc

08007028 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007028:	b580      	push	{r7, lr}
 800702a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800702c:	f7ff ffde 	bl	8006fec <HAL_RCC_GetHCLKFreq>
 8007030:	4602      	mov	r2, r0
 8007032:	4b05      	ldr	r3, [pc, #20]	; (8007048 <HAL_RCC_GetPCLK2Freq+0x20>)
 8007034:	685b      	ldr	r3, [r3, #4]
 8007036:	0adb      	lsrs	r3, r3, #11
 8007038:	f003 0307 	and.w	r3, r3, #7
 800703c:	4903      	ldr	r1, [pc, #12]	; (800704c <HAL_RCC_GetPCLK2Freq+0x24>)
 800703e:	5ccb      	ldrb	r3, [r1, r3]
 8007040:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007044:	4618      	mov	r0, r3
 8007046:	bd80      	pop	{r7, pc}
 8007048:	40021000 	.word	0x40021000
 800704c:	08007dfc 	.word	0x08007dfc

08007050 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8007050:	b480      	push	{r7}
 8007052:	b085      	sub	sp, #20
 8007054:	af00      	add	r7, sp, #0
 8007056:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8007058:	4b0a      	ldr	r3, [pc, #40]	; (8007084 <RCC_Delay+0x34>)
 800705a:	681b      	ldr	r3, [r3, #0]
 800705c:	4a0a      	ldr	r2, [pc, #40]	; (8007088 <RCC_Delay+0x38>)
 800705e:	fba2 2303 	umull	r2, r3, r2, r3
 8007062:	0a5b      	lsrs	r3, r3, #9
 8007064:	687a      	ldr	r2, [r7, #4]
 8007066:	fb02 f303 	mul.w	r3, r2, r3
 800706a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800706c:	bf00      	nop
  }
  while (Delay --);
 800706e:	68fb      	ldr	r3, [r7, #12]
 8007070:	1e5a      	subs	r2, r3, #1
 8007072:	60fa      	str	r2, [r7, #12]
 8007074:	2b00      	cmp	r3, #0
 8007076:	d1f9      	bne.n	800706c <RCC_Delay+0x1c>
}
 8007078:	bf00      	nop
 800707a:	bf00      	nop
 800707c:	3714      	adds	r7, #20
 800707e:	46bd      	mov	sp, r7
 8007080:	bc80      	pop	{r7}
 8007082:	4770      	bx	lr
 8007084:	20000000 	.word	0x20000000
 8007088:	10624dd3 	.word	0x10624dd3

0800708c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800708c:	b580      	push	{r7, lr}
 800708e:	b082      	sub	sp, #8
 8007090:	af00      	add	r7, sp, #0
 8007092:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	2b00      	cmp	r3, #0
 8007098:	d101      	bne.n	800709e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800709a:	2301      	movs	r3, #1
 800709c:	e042      	b.n	8007124 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80070a4:	b2db      	uxtb	r3, r3
 80070a6:	2b00      	cmp	r3, #0
 80070a8:	d106      	bne.n	80070b8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	2200      	movs	r2, #0
 80070ae:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80070b2:	6878      	ldr	r0, [r7, #4]
 80070b4:	f7fe feae 	bl	8005e14 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	2224      	movs	r2, #36	; 0x24
 80070bc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	681b      	ldr	r3, [r3, #0]
 80070c4:	68da      	ldr	r2, [r3, #12]
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	681b      	ldr	r3, [r3, #0]
 80070ca:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80070ce:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80070d0:	6878      	ldr	r0, [r7, #4]
 80070d2:	f000 fdc5 	bl	8007c60 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	681b      	ldr	r3, [r3, #0]
 80070da:	691a      	ldr	r2, [r3, #16]
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	681b      	ldr	r3, [r3, #0]
 80070e0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80070e4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	681b      	ldr	r3, [r3, #0]
 80070ea:	695a      	ldr	r2, [r3, #20]
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	681b      	ldr	r3, [r3, #0]
 80070f0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80070f4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	681b      	ldr	r3, [r3, #0]
 80070fa:	68da      	ldr	r2, [r3, #12]
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	681b      	ldr	r3, [r3, #0]
 8007100:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007104:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	2200      	movs	r2, #0
 800710a:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	2220      	movs	r2, #32
 8007110:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	2220      	movs	r2, #32
 8007118:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	2200      	movs	r2, #0
 8007120:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8007122:	2300      	movs	r3, #0
}
 8007124:	4618      	mov	r0, r3
 8007126:	3708      	adds	r7, #8
 8007128:	46bd      	mov	sp, r7
 800712a:	bd80      	pop	{r7, pc}

0800712c <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800712c:	b580      	push	{r7, lr}
 800712e:	b08a      	sub	sp, #40	; 0x28
 8007130:	af02      	add	r7, sp, #8
 8007132:	60f8      	str	r0, [r7, #12]
 8007134:	60b9      	str	r1, [r7, #8]
 8007136:	603b      	str	r3, [r7, #0]
 8007138:	4613      	mov	r3, r2
 800713a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800713c:	2300      	movs	r3, #0
 800713e:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007140:	68fb      	ldr	r3, [r7, #12]
 8007142:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007146:	b2db      	uxtb	r3, r3
 8007148:	2b20      	cmp	r3, #32
 800714a:	d16d      	bne.n	8007228 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 800714c:	68bb      	ldr	r3, [r7, #8]
 800714e:	2b00      	cmp	r3, #0
 8007150:	d002      	beq.n	8007158 <HAL_UART_Transmit+0x2c>
 8007152:	88fb      	ldrh	r3, [r7, #6]
 8007154:	2b00      	cmp	r3, #0
 8007156:	d101      	bne.n	800715c <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8007158:	2301      	movs	r3, #1
 800715a:	e066      	b.n	800722a <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800715c:	68fb      	ldr	r3, [r7, #12]
 800715e:	2200      	movs	r2, #0
 8007160:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007162:	68fb      	ldr	r3, [r7, #12]
 8007164:	2221      	movs	r2, #33	; 0x21
 8007166:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800716a:	f7fe ff25 	bl	8005fb8 <HAL_GetTick>
 800716e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8007170:	68fb      	ldr	r3, [r7, #12]
 8007172:	88fa      	ldrh	r2, [r7, #6]
 8007174:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8007176:	68fb      	ldr	r3, [r7, #12]
 8007178:	88fa      	ldrh	r2, [r7, #6]
 800717a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800717c:	68fb      	ldr	r3, [r7, #12]
 800717e:	689b      	ldr	r3, [r3, #8]
 8007180:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007184:	d108      	bne.n	8007198 <HAL_UART_Transmit+0x6c>
 8007186:	68fb      	ldr	r3, [r7, #12]
 8007188:	691b      	ldr	r3, [r3, #16]
 800718a:	2b00      	cmp	r3, #0
 800718c:	d104      	bne.n	8007198 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800718e:	2300      	movs	r3, #0
 8007190:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8007192:	68bb      	ldr	r3, [r7, #8]
 8007194:	61bb      	str	r3, [r7, #24]
 8007196:	e003      	b.n	80071a0 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8007198:	68bb      	ldr	r3, [r7, #8]
 800719a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800719c:	2300      	movs	r3, #0
 800719e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80071a0:	e02a      	b.n	80071f8 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80071a2:	683b      	ldr	r3, [r7, #0]
 80071a4:	9300      	str	r3, [sp, #0]
 80071a6:	697b      	ldr	r3, [r7, #20]
 80071a8:	2200      	movs	r2, #0
 80071aa:	2180      	movs	r1, #128	; 0x80
 80071ac:	68f8      	ldr	r0, [r7, #12]
 80071ae:	f000 fb14 	bl	80077da <UART_WaitOnFlagUntilTimeout>
 80071b2:	4603      	mov	r3, r0
 80071b4:	2b00      	cmp	r3, #0
 80071b6:	d001      	beq.n	80071bc <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 80071b8:	2303      	movs	r3, #3
 80071ba:	e036      	b.n	800722a <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 80071bc:	69fb      	ldr	r3, [r7, #28]
 80071be:	2b00      	cmp	r3, #0
 80071c0:	d10b      	bne.n	80071da <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80071c2:	69bb      	ldr	r3, [r7, #24]
 80071c4:	881b      	ldrh	r3, [r3, #0]
 80071c6:	461a      	mov	r2, r3
 80071c8:	68fb      	ldr	r3, [r7, #12]
 80071ca:	681b      	ldr	r3, [r3, #0]
 80071cc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80071d0:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80071d2:	69bb      	ldr	r3, [r7, #24]
 80071d4:	3302      	adds	r3, #2
 80071d6:	61bb      	str	r3, [r7, #24]
 80071d8:	e007      	b.n	80071ea <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80071da:	69fb      	ldr	r3, [r7, #28]
 80071dc:	781a      	ldrb	r2, [r3, #0]
 80071de:	68fb      	ldr	r3, [r7, #12]
 80071e0:	681b      	ldr	r3, [r3, #0]
 80071e2:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80071e4:	69fb      	ldr	r3, [r7, #28]
 80071e6:	3301      	adds	r3, #1
 80071e8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80071ea:	68fb      	ldr	r3, [r7, #12]
 80071ec:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80071ee:	b29b      	uxth	r3, r3
 80071f0:	3b01      	subs	r3, #1
 80071f2:	b29a      	uxth	r2, r3
 80071f4:	68fb      	ldr	r3, [r7, #12]
 80071f6:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80071f8:	68fb      	ldr	r3, [r7, #12]
 80071fa:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80071fc:	b29b      	uxth	r3, r3
 80071fe:	2b00      	cmp	r3, #0
 8007200:	d1cf      	bne.n	80071a2 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007202:	683b      	ldr	r3, [r7, #0]
 8007204:	9300      	str	r3, [sp, #0]
 8007206:	697b      	ldr	r3, [r7, #20]
 8007208:	2200      	movs	r2, #0
 800720a:	2140      	movs	r1, #64	; 0x40
 800720c:	68f8      	ldr	r0, [r7, #12]
 800720e:	f000 fae4 	bl	80077da <UART_WaitOnFlagUntilTimeout>
 8007212:	4603      	mov	r3, r0
 8007214:	2b00      	cmp	r3, #0
 8007216:	d001      	beq.n	800721c <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 8007218:	2303      	movs	r3, #3
 800721a:	e006      	b.n	800722a <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800721c:	68fb      	ldr	r3, [r7, #12]
 800721e:	2220      	movs	r2, #32
 8007220:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8007224:	2300      	movs	r3, #0
 8007226:	e000      	b.n	800722a <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8007228:	2302      	movs	r3, #2
  }
}
 800722a:	4618      	mov	r0, r3
 800722c:	3720      	adds	r7, #32
 800722e:	46bd      	mov	sp, r7
 8007230:	bd80      	pop	{r7, pc}

08007232 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007232:	b580      	push	{r7, lr}
 8007234:	b084      	sub	sp, #16
 8007236:	af00      	add	r7, sp, #0
 8007238:	60f8      	str	r0, [r7, #12]
 800723a:	60b9      	str	r1, [r7, #8]
 800723c:	4613      	mov	r3, r2
 800723e:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8007240:	68fb      	ldr	r3, [r7, #12]
 8007242:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8007246:	b2db      	uxtb	r3, r3
 8007248:	2b20      	cmp	r3, #32
 800724a:	d112      	bne.n	8007272 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 800724c:	68bb      	ldr	r3, [r7, #8]
 800724e:	2b00      	cmp	r3, #0
 8007250:	d002      	beq.n	8007258 <HAL_UART_Receive_IT+0x26>
 8007252:	88fb      	ldrh	r3, [r7, #6]
 8007254:	2b00      	cmp	r3, #0
 8007256:	d101      	bne.n	800725c <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8007258:	2301      	movs	r3, #1
 800725a:	e00b      	b.n	8007274 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800725c:	68fb      	ldr	r3, [r7, #12]
 800725e:	2200      	movs	r2, #0
 8007260:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8007262:	88fb      	ldrh	r3, [r7, #6]
 8007264:	461a      	mov	r2, r3
 8007266:	68b9      	ldr	r1, [r7, #8]
 8007268:	68f8      	ldr	r0, [r7, #12]
 800726a:	f000 fb24 	bl	80078b6 <UART_Start_Receive_IT>
 800726e:	4603      	mov	r3, r0
 8007270:	e000      	b.n	8007274 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8007272:	2302      	movs	r3, #2
  }
}
 8007274:	4618      	mov	r0, r3
 8007276:	3710      	adds	r7, #16
 8007278:	46bd      	mov	sp, r7
 800727a:	bd80      	pop	{r7, pc}

0800727c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800727c:	b580      	push	{r7, lr}
 800727e:	b0ba      	sub	sp, #232	; 0xe8
 8007280:	af00      	add	r7, sp, #0
 8007282:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	681b      	ldr	r3, [r3, #0]
 8007288:	681b      	ldr	r3, [r3, #0]
 800728a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	681b      	ldr	r3, [r3, #0]
 8007292:	68db      	ldr	r3, [r3, #12]
 8007294:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	681b      	ldr	r3, [r3, #0]
 800729c:	695b      	ldr	r3, [r3, #20]
 800729e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80072a2:	2300      	movs	r3, #0
 80072a4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80072a8:	2300      	movs	r3, #0
 80072aa:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80072ae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80072b2:	f003 030f 	and.w	r3, r3, #15
 80072b6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 80072ba:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80072be:	2b00      	cmp	r3, #0
 80072c0:	d10f      	bne.n	80072e2 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80072c2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80072c6:	f003 0320 	and.w	r3, r3, #32
 80072ca:	2b00      	cmp	r3, #0
 80072cc:	d009      	beq.n	80072e2 <HAL_UART_IRQHandler+0x66>
 80072ce:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80072d2:	f003 0320 	and.w	r3, r3, #32
 80072d6:	2b00      	cmp	r3, #0
 80072d8:	d003      	beq.n	80072e2 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80072da:	6878      	ldr	r0, [r7, #4]
 80072dc:	f000 fc01 	bl	8007ae2 <UART_Receive_IT>
      return;
 80072e0:	e25b      	b.n	800779a <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80072e2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80072e6:	2b00      	cmp	r3, #0
 80072e8:	f000 80de 	beq.w	80074a8 <HAL_UART_IRQHandler+0x22c>
 80072ec:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80072f0:	f003 0301 	and.w	r3, r3, #1
 80072f4:	2b00      	cmp	r3, #0
 80072f6:	d106      	bne.n	8007306 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80072f8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80072fc:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8007300:	2b00      	cmp	r3, #0
 8007302:	f000 80d1 	beq.w	80074a8 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8007306:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800730a:	f003 0301 	and.w	r3, r3, #1
 800730e:	2b00      	cmp	r3, #0
 8007310:	d00b      	beq.n	800732a <HAL_UART_IRQHandler+0xae>
 8007312:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007316:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800731a:	2b00      	cmp	r3, #0
 800731c:	d005      	beq.n	800732a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007322:	f043 0201 	orr.w	r2, r3, #1
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800732a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800732e:	f003 0304 	and.w	r3, r3, #4
 8007332:	2b00      	cmp	r3, #0
 8007334:	d00b      	beq.n	800734e <HAL_UART_IRQHandler+0xd2>
 8007336:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800733a:	f003 0301 	and.w	r3, r3, #1
 800733e:	2b00      	cmp	r3, #0
 8007340:	d005      	beq.n	800734e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007346:	f043 0202 	orr.w	r2, r3, #2
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800734e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007352:	f003 0302 	and.w	r3, r3, #2
 8007356:	2b00      	cmp	r3, #0
 8007358:	d00b      	beq.n	8007372 <HAL_UART_IRQHandler+0xf6>
 800735a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800735e:	f003 0301 	and.w	r3, r3, #1
 8007362:	2b00      	cmp	r3, #0
 8007364:	d005      	beq.n	8007372 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800736a:	f043 0204 	orr.w	r2, r3, #4
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8007372:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007376:	f003 0308 	and.w	r3, r3, #8
 800737a:	2b00      	cmp	r3, #0
 800737c:	d011      	beq.n	80073a2 <HAL_UART_IRQHandler+0x126>
 800737e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007382:	f003 0320 	and.w	r3, r3, #32
 8007386:	2b00      	cmp	r3, #0
 8007388:	d105      	bne.n	8007396 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800738a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800738e:	f003 0301 	and.w	r3, r3, #1
 8007392:	2b00      	cmp	r3, #0
 8007394:	d005      	beq.n	80073a2 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800739a:	f043 0208 	orr.w	r2, r3, #8
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80073a6:	2b00      	cmp	r3, #0
 80073a8:	f000 81f2 	beq.w	8007790 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80073ac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80073b0:	f003 0320 	and.w	r3, r3, #32
 80073b4:	2b00      	cmp	r3, #0
 80073b6:	d008      	beq.n	80073ca <HAL_UART_IRQHandler+0x14e>
 80073b8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80073bc:	f003 0320 	and.w	r3, r3, #32
 80073c0:	2b00      	cmp	r3, #0
 80073c2:	d002      	beq.n	80073ca <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80073c4:	6878      	ldr	r0, [r7, #4]
 80073c6:	f000 fb8c 	bl	8007ae2 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	681b      	ldr	r3, [r3, #0]
 80073ce:	695b      	ldr	r3, [r3, #20]
 80073d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80073d4:	2b00      	cmp	r3, #0
 80073d6:	bf14      	ite	ne
 80073d8:	2301      	movne	r3, #1
 80073da:	2300      	moveq	r3, #0
 80073dc:	b2db      	uxtb	r3, r3
 80073de:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80073e6:	f003 0308 	and.w	r3, r3, #8
 80073ea:	2b00      	cmp	r3, #0
 80073ec:	d103      	bne.n	80073f6 <HAL_UART_IRQHandler+0x17a>
 80073ee:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80073f2:	2b00      	cmp	r3, #0
 80073f4:	d04f      	beq.n	8007496 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80073f6:	6878      	ldr	r0, [r7, #4]
 80073f8:	f000 fa96 	bl	8007928 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	681b      	ldr	r3, [r3, #0]
 8007400:	695b      	ldr	r3, [r3, #20]
 8007402:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007406:	2b00      	cmp	r3, #0
 8007408:	d041      	beq.n	800748e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	681b      	ldr	r3, [r3, #0]
 800740e:	3314      	adds	r3, #20
 8007410:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007414:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007418:	e853 3f00 	ldrex	r3, [r3]
 800741c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8007420:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007424:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007428:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	681b      	ldr	r3, [r3, #0]
 8007430:	3314      	adds	r3, #20
 8007432:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8007436:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800743a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800743e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8007442:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8007446:	e841 2300 	strex	r3, r2, [r1]
 800744a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800744e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8007452:	2b00      	cmp	r3, #0
 8007454:	d1d9      	bne.n	800740a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800745a:	2b00      	cmp	r3, #0
 800745c:	d013      	beq.n	8007486 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007462:	4a7e      	ldr	r2, [pc, #504]	; (800765c <HAL_UART_IRQHandler+0x3e0>)
 8007464:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800746a:	4618      	mov	r0, r3
 800746c:	f7fe ff1a 	bl	80062a4 <HAL_DMA_Abort_IT>
 8007470:	4603      	mov	r3, r0
 8007472:	2b00      	cmp	r3, #0
 8007474:	d016      	beq.n	80074a4 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800747a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800747c:	687a      	ldr	r2, [r7, #4]
 800747e:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8007480:	4610      	mov	r0, r2
 8007482:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007484:	e00e      	b.n	80074a4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8007486:	6878      	ldr	r0, [r7, #4]
 8007488:	f000 f993 	bl	80077b2 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800748c:	e00a      	b.n	80074a4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800748e:	6878      	ldr	r0, [r7, #4]
 8007490:	f000 f98f 	bl	80077b2 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007494:	e006      	b.n	80074a4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8007496:	6878      	ldr	r0, [r7, #4]
 8007498:	f000 f98b 	bl	80077b2 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	2200      	movs	r2, #0
 80074a0:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 80074a2:	e175      	b.n	8007790 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80074a4:	bf00      	nop
    return;
 80074a6:	e173      	b.n	8007790 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80074ac:	2b01      	cmp	r3, #1
 80074ae:	f040 814f 	bne.w	8007750 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80074b2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80074b6:	f003 0310 	and.w	r3, r3, #16
 80074ba:	2b00      	cmp	r3, #0
 80074bc:	f000 8148 	beq.w	8007750 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80074c0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80074c4:	f003 0310 	and.w	r3, r3, #16
 80074c8:	2b00      	cmp	r3, #0
 80074ca:	f000 8141 	beq.w	8007750 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80074ce:	2300      	movs	r3, #0
 80074d0:	60bb      	str	r3, [r7, #8]
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	681b      	ldr	r3, [r3, #0]
 80074d6:	681b      	ldr	r3, [r3, #0]
 80074d8:	60bb      	str	r3, [r7, #8]
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	681b      	ldr	r3, [r3, #0]
 80074de:	685b      	ldr	r3, [r3, #4]
 80074e0:	60bb      	str	r3, [r7, #8]
 80074e2:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	681b      	ldr	r3, [r3, #0]
 80074e8:	695b      	ldr	r3, [r3, #20]
 80074ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80074ee:	2b00      	cmp	r3, #0
 80074f0:	f000 80b6 	beq.w	8007660 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80074f8:	681b      	ldr	r3, [r3, #0]
 80074fa:	685b      	ldr	r3, [r3, #4]
 80074fc:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8007500:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8007504:	2b00      	cmp	r3, #0
 8007506:	f000 8145 	beq.w	8007794 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800750e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8007512:	429a      	cmp	r2, r3
 8007514:	f080 813e 	bcs.w	8007794 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800751e:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007524:	699b      	ldr	r3, [r3, #24]
 8007526:	2b20      	cmp	r3, #32
 8007528:	f000 8088 	beq.w	800763c <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	681b      	ldr	r3, [r3, #0]
 8007530:	330c      	adds	r3, #12
 8007532:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007536:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800753a:	e853 3f00 	ldrex	r3, [r3]
 800753e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8007542:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007546:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800754a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	681b      	ldr	r3, [r3, #0]
 8007552:	330c      	adds	r3, #12
 8007554:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8007558:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800755c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007560:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8007564:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8007568:	e841 2300 	strex	r3, r2, [r1]
 800756c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8007570:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007574:	2b00      	cmp	r3, #0
 8007576:	d1d9      	bne.n	800752c <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	681b      	ldr	r3, [r3, #0]
 800757c:	3314      	adds	r3, #20
 800757e:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007580:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007582:	e853 3f00 	ldrex	r3, [r3]
 8007586:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8007588:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800758a:	f023 0301 	bic.w	r3, r3, #1
 800758e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	681b      	ldr	r3, [r3, #0]
 8007596:	3314      	adds	r3, #20
 8007598:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800759c:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80075a0:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80075a2:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80075a4:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80075a8:	e841 2300 	strex	r3, r2, [r1]
 80075ac:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80075ae:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80075b0:	2b00      	cmp	r3, #0
 80075b2:	d1e1      	bne.n	8007578 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	681b      	ldr	r3, [r3, #0]
 80075b8:	3314      	adds	r3, #20
 80075ba:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80075bc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80075be:	e853 3f00 	ldrex	r3, [r3]
 80075c2:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80075c4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80075c6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80075ca:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	681b      	ldr	r3, [r3, #0]
 80075d2:	3314      	adds	r3, #20
 80075d4:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80075d8:	66fa      	str	r2, [r7, #108]	; 0x6c
 80075da:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80075dc:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80075de:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80075e0:	e841 2300 	strex	r3, r2, [r1]
 80075e4:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80075e6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80075e8:	2b00      	cmp	r3, #0
 80075ea:	d1e3      	bne.n	80075b4 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	2220      	movs	r2, #32
 80075f0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	2200      	movs	r2, #0
 80075f8:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	681b      	ldr	r3, [r3, #0]
 80075fe:	330c      	adds	r3, #12
 8007600:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007602:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007604:	e853 3f00 	ldrex	r3, [r3]
 8007608:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800760a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800760c:	f023 0310 	bic.w	r3, r3, #16
 8007610:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	681b      	ldr	r3, [r3, #0]
 8007618:	330c      	adds	r3, #12
 800761a:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800761e:	65ba      	str	r2, [r7, #88]	; 0x58
 8007620:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007622:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8007624:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007626:	e841 2300 	strex	r3, r2, [r1]
 800762a:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800762c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800762e:	2b00      	cmp	r3, #0
 8007630:	d1e3      	bne.n	80075fa <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007636:	4618      	mov	r0, r3
 8007638:	f7fe fdf9 	bl	800622e <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	2202      	movs	r2, #2
 8007640:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800764a:	b29b      	uxth	r3, r3
 800764c:	1ad3      	subs	r3, r2, r3
 800764e:	b29b      	uxth	r3, r3
 8007650:	4619      	mov	r1, r3
 8007652:	6878      	ldr	r0, [r7, #4]
 8007654:	f000 f8b6 	bl	80077c4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8007658:	e09c      	b.n	8007794 <HAL_UART_IRQHandler+0x518>
 800765a:	bf00      	nop
 800765c:	080079ed 	.word	0x080079ed
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007668:	b29b      	uxth	r3, r3
 800766a:	1ad3      	subs	r3, r2, r3
 800766c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007674:	b29b      	uxth	r3, r3
 8007676:	2b00      	cmp	r3, #0
 8007678:	f000 808e 	beq.w	8007798 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 800767c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007680:	2b00      	cmp	r3, #0
 8007682:	f000 8089 	beq.w	8007798 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	681b      	ldr	r3, [r3, #0]
 800768a:	330c      	adds	r3, #12
 800768c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800768e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007690:	e853 3f00 	ldrex	r3, [r3]
 8007694:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007696:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007698:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800769c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	681b      	ldr	r3, [r3, #0]
 80076a4:	330c      	adds	r3, #12
 80076a6:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80076aa:	647a      	str	r2, [r7, #68]	; 0x44
 80076ac:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80076ae:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80076b0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80076b2:	e841 2300 	strex	r3, r2, [r1]
 80076b6:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80076b8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80076ba:	2b00      	cmp	r3, #0
 80076bc:	d1e3      	bne.n	8007686 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	681b      	ldr	r3, [r3, #0]
 80076c2:	3314      	adds	r3, #20
 80076c4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80076c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076c8:	e853 3f00 	ldrex	r3, [r3]
 80076cc:	623b      	str	r3, [r7, #32]
   return(result);
 80076ce:	6a3b      	ldr	r3, [r7, #32]
 80076d0:	f023 0301 	bic.w	r3, r3, #1
 80076d4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	681b      	ldr	r3, [r3, #0]
 80076dc:	3314      	adds	r3, #20
 80076de:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80076e2:	633a      	str	r2, [r7, #48]	; 0x30
 80076e4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80076e6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80076e8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80076ea:	e841 2300 	strex	r3, r2, [r1]
 80076ee:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80076f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80076f2:	2b00      	cmp	r3, #0
 80076f4:	d1e3      	bne.n	80076be <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	2220      	movs	r2, #32
 80076fa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	2200      	movs	r2, #0
 8007702:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	681b      	ldr	r3, [r3, #0]
 8007708:	330c      	adds	r3, #12
 800770a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800770c:	693b      	ldr	r3, [r7, #16]
 800770e:	e853 3f00 	ldrex	r3, [r3]
 8007712:	60fb      	str	r3, [r7, #12]
   return(result);
 8007714:	68fb      	ldr	r3, [r7, #12]
 8007716:	f023 0310 	bic.w	r3, r3, #16
 800771a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	681b      	ldr	r3, [r3, #0]
 8007722:	330c      	adds	r3, #12
 8007724:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8007728:	61fa      	str	r2, [r7, #28]
 800772a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800772c:	69b9      	ldr	r1, [r7, #24]
 800772e:	69fa      	ldr	r2, [r7, #28]
 8007730:	e841 2300 	strex	r3, r2, [r1]
 8007734:	617b      	str	r3, [r7, #20]
   return(result);
 8007736:	697b      	ldr	r3, [r7, #20]
 8007738:	2b00      	cmp	r3, #0
 800773a:	d1e3      	bne.n	8007704 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	2202      	movs	r2, #2
 8007740:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007742:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007746:	4619      	mov	r1, r3
 8007748:	6878      	ldr	r0, [r7, #4]
 800774a:	f000 f83b 	bl	80077c4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800774e:	e023      	b.n	8007798 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8007750:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007754:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007758:	2b00      	cmp	r3, #0
 800775a:	d009      	beq.n	8007770 <HAL_UART_IRQHandler+0x4f4>
 800775c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007760:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007764:	2b00      	cmp	r3, #0
 8007766:	d003      	beq.n	8007770 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8007768:	6878      	ldr	r0, [r7, #4]
 800776a:	f000 f953 	bl	8007a14 <UART_Transmit_IT>
    return;
 800776e:	e014      	b.n	800779a <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8007770:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007774:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007778:	2b00      	cmp	r3, #0
 800777a:	d00e      	beq.n	800779a <HAL_UART_IRQHandler+0x51e>
 800777c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007780:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007784:	2b00      	cmp	r3, #0
 8007786:	d008      	beq.n	800779a <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8007788:	6878      	ldr	r0, [r7, #4]
 800778a:	f000 f992 	bl	8007ab2 <UART_EndTransmit_IT>
    return;
 800778e:	e004      	b.n	800779a <HAL_UART_IRQHandler+0x51e>
    return;
 8007790:	bf00      	nop
 8007792:	e002      	b.n	800779a <HAL_UART_IRQHandler+0x51e>
      return;
 8007794:	bf00      	nop
 8007796:	e000      	b.n	800779a <HAL_UART_IRQHandler+0x51e>
      return;
 8007798:	bf00      	nop
  }
}
 800779a:	37e8      	adds	r7, #232	; 0xe8
 800779c:	46bd      	mov	sp, r7
 800779e:	bd80      	pop	{r7, pc}

080077a0 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80077a0:	b480      	push	{r7}
 80077a2:	b083      	sub	sp, #12
 80077a4:	af00      	add	r7, sp, #0
 80077a6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80077a8:	bf00      	nop
 80077aa:	370c      	adds	r7, #12
 80077ac:	46bd      	mov	sp, r7
 80077ae:	bc80      	pop	{r7}
 80077b0:	4770      	bx	lr

080077b2 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80077b2:	b480      	push	{r7}
 80077b4:	b083      	sub	sp, #12
 80077b6:	af00      	add	r7, sp, #0
 80077b8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80077ba:	bf00      	nop
 80077bc:	370c      	adds	r7, #12
 80077be:	46bd      	mov	sp, r7
 80077c0:	bc80      	pop	{r7}
 80077c2:	4770      	bx	lr

080077c4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80077c4:	b480      	push	{r7}
 80077c6:	b083      	sub	sp, #12
 80077c8:	af00      	add	r7, sp, #0
 80077ca:	6078      	str	r0, [r7, #4]
 80077cc:	460b      	mov	r3, r1
 80077ce:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80077d0:	bf00      	nop
 80077d2:	370c      	adds	r7, #12
 80077d4:	46bd      	mov	sp, r7
 80077d6:	bc80      	pop	{r7}
 80077d8:	4770      	bx	lr

080077da <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80077da:	b580      	push	{r7, lr}
 80077dc:	b090      	sub	sp, #64	; 0x40
 80077de:	af00      	add	r7, sp, #0
 80077e0:	60f8      	str	r0, [r7, #12]
 80077e2:	60b9      	str	r1, [r7, #8]
 80077e4:	603b      	str	r3, [r7, #0]
 80077e6:	4613      	mov	r3, r2
 80077e8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80077ea:	e050      	b.n	800788e <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80077ec:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80077ee:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80077f2:	d04c      	beq.n	800788e <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80077f4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80077f6:	2b00      	cmp	r3, #0
 80077f8:	d007      	beq.n	800780a <UART_WaitOnFlagUntilTimeout+0x30>
 80077fa:	f7fe fbdd 	bl	8005fb8 <HAL_GetTick>
 80077fe:	4602      	mov	r2, r0
 8007800:	683b      	ldr	r3, [r7, #0]
 8007802:	1ad3      	subs	r3, r2, r3
 8007804:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007806:	429a      	cmp	r2, r3
 8007808:	d241      	bcs.n	800788e <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800780a:	68fb      	ldr	r3, [r7, #12]
 800780c:	681b      	ldr	r3, [r3, #0]
 800780e:	330c      	adds	r3, #12
 8007810:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007812:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007814:	e853 3f00 	ldrex	r3, [r3]
 8007818:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800781a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800781c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8007820:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007822:	68fb      	ldr	r3, [r7, #12]
 8007824:	681b      	ldr	r3, [r3, #0]
 8007826:	330c      	adds	r3, #12
 8007828:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800782a:	637a      	str	r2, [r7, #52]	; 0x34
 800782c:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800782e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007830:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007832:	e841 2300 	strex	r3, r2, [r1]
 8007836:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8007838:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800783a:	2b00      	cmp	r3, #0
 800783c:	d1e5      	bne.n	800780a <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800783e:	68fb      	ldr	r3, [r7, #12]
 8007840:	681b      	ldr	r3, [r3, #0]
 8007842:	3314      	adds	r3, #20
 8007844:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007846:	697b      	ldr	r3, [r7, #20]
 8007848:	e853 3f00 	ldrex	r3, [r3]
 800784c:	613b      	str	r3, [r7, #16]
   return(result);
 800784e:	693b      	ldr	r3, [r7, #16]
 8007850:	f023 0301 	bic.w	r3, r3, #1
 8007854:	63bb      	str	r3, [r7, #56]	; 0x38
 8007856:	68fb      	ldr	r3, [r7, #12]
 8007858:	681b      	ldr	r3, [r3, #0]
 800785a:	3314      	adds	r3, #20
 800785c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800785e:	623a      	str	r2, [r7, #32]
 8007860:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007862:	69f9      	ldr	r1, [r7, #28]
 8007864:	6a3a      	ldr	r2, [r7, #32]
 8007866:	e841 2300 	strex	r3, r2, [r1]
 800786a:	61bb      	str	r3, [r7, #24]
   return(result);
 800786c:	69bb      	ldr	r3, [r7, #24]
 800786e:	2b00      	cmp	r3, #0
 8007870:	d1e5      	bne.n	800783e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8007872:	68fb      	ldr	r3, [r7, #12]
 8007874:	2220      	movs	r2, #32
 8007876:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 800787a:	68fb      	ldr	r3, [r7, #12]
 800787c:	2220      	movs	r2, #32
 800787e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8007882:	68fb      	ldr	r3, [r7, #12]
 8007884:	2200      	movs	r2, #0
 8007886:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 800788a:	2303      	movs	r3, #3
 800788c:	e00f      	b.n	80078ae <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800788e:	68fb      	ldr	r3, [r7, #12]
 8007890:	681b      	ldr	r3, [r3, #0]
 8007892:	681a      	ldr	r2, [r3, #0]
 8007894:	68bb      	ldr	r3, [r7, #8]
 8007896:	4013      	ands	r3, r2
 8007898:	68ba      	ldr	r2, [r7, #8]
 800789a:	429a      	cmp	r2, r3
 800789c:	bf0c      	ite	eq
 800789e:	2301      	moveq	r3, #1
 80078a0:	2300      	movne	r3, #0
 80078a2:	b2db      	uxtb	r3, r3
 80078a4:	461a      	mov	r2, r3
 80078a6:	79fb      	ldrb	r3, [r7, #7]
 80078a8:	429a      	cmp	r2, r3
 80078aa:	d09f      	beq.n	80077ec <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80078ac:	2300      	movs	r3, #0
}
 80078ae:	4618      	mov	r0, r3
 80078b0:	3740      	adds	r7, #64	; 0x40
 80078b2:	46bd      	mov	sp, r7
 80078b4:	bd80      	pop	{r7, pc}

080078b6 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80078b6:	b480      	push	{r7}
 80078b8:	b085      	sub	sp, #20
 80078ba:	af00      	add	r7, sp, #0
 80078bc:	60f8      	str	r0, [r7, #12]
 80078be:	60b9      	str	r1, [r7, #8]
 80078c0:	4613      	mov	r3, r2
 80078c2:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80078c4:	68fb      	ldr	r3, [r7, #12]
 80078c6:	68ba      	ldr	r2, [r7, #8]
 80078c8:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 80078ca:	68fb      	ldr	r3, [r7, #12]
 80078cc:	88fa      	ldrh	r2, [r7, #6]
 80078ce:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 80078d0:	68fb      	ldr	r3, [r7, #12]
 80078d2:	88fa      	ldrh	r2, [r7, #6]
 80078d4:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80078d6:	68fb      	ldr	r3, [r7, #12]
 80078d8:	2200      	movs	r2, #0
 80078da:	645a      	str	r2, [r3, #68]	; 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80078dc:	68fb      	ldr	r3, [r7, #12]
 80078de:	2222      	movs	r2, #34	; 0x22
 80078e0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 80078e4:	68fb      	ldr	r3, [r7, #12]
 80078e6:	691b      	ldr	r3, [r3, #16]
 80078e8:	2b00      	cmp	r3, #0
 80078ea:	d007      	beq.n	80078fc <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80078ec:	68fb      	ldr	r3, [r7, #12]
 80078ee:	681b      	ldr	r3, [r3, #0]
 80078f0:	68da      	ldr	r2, [r3, #12]
 80078f2:	68fb      	ldr	r3, [r7, #12]
 80078f4:	681b      	ldr	r3, [r3, #0]
 80078f6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80078fa:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80078fc:	68fb      	ldr	r3, [r7, #12]
 80078fe:	681b      	ldr	r3, [r3, #0]
 8007900:	695a      	ldr	r2, [r3, #20]
 8007902:	68fb      	ldr	r3, [r7, #12]
 8007904:	681b      	ldr	r3, [r3, #0]
 8007906:	f042 0201 	orr.w	r2, r2, #1
 800790a:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800790c:	68fb      	ldr	r3, [r7, #12]
 800790e:	681b      	ldr	r3, [r3, #0]
 8007910:	68da      	ldr	r2, [r3, #12]
 8007912:	68fb      	ldr	r3, [r7, #12]
 8007914:	681b      	ldr	r3, [r3, #0]
 8007916:	f042 0220 	orr.w	r2, r2, #32
 800791a:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800791c:	2300      	movs	r3, #0
}
 800791e:	4618      	mov	r0, r3
 8007920:	3714      	adds	r7, #20
 8007922:	46bd      	mov	sp, r7
 8007924:	bc80      	pop	{r7}
 8007926:	4770      	bx	lr

08007928 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007928:	b480      	push	{r7}
 800792a:	b095      	sub	sp, #84	; 0x54
 800792c:	af00      	add	r7, sp, #0
 800792e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	681b      	ldr	r3, [r3, #0]
 8007934:	330c      	adds	r3, #12
 8007936:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007938:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800793a:	e853 3f00 	ldrex	r3, [r3]
 800793e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007940:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007942:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007946:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	681b      	ldr	r3, [r3, #0]
 800794c:	330c      	adds	r3, #12
 800794e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007950:	643a      	str	r2, [r7, #64]	; 0x40
 8007952:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007954:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007956:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007958:	e841 2300 	strex	r3, r2, [r1]
 800795c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800795e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007960:	2b00      	cmp	r3, #0
 8007962:	d1e5      	bne.n	8007930 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	681b      	ldr	r3, [r3, #0]
 8007968:	3314      	adds	r3, #20
 800796a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800796c:	6a3b      	ldr	r3, [r7, #32]
 800796e:	e853 3f00 	ldrex	r3, [r3]
 8007972:	61fb      	str	r3, [r7, #28]
   return(result);
 8007974:	69fb      	ldr	r3, [r7, #28]
 8007976:	f023 0301 	bic.w	r3, r3, #1
 800797a:	64bb      	str	r3, [r7, #72]	; 0x48
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	681b      	ldr	r3, [r3, #0]
 8007980:	3314      	adds	r3, #20
 8007982:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007984:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007986:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007988:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800798a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800798c:	e841 2300 	strex	r3, r2, [r1]
 8007990:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007992:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007994:	2b00      	cmp	r3, #0
 8007996:	d1e5      	bne.n	8007964 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800799c:	2b01      	cmp	r3, #1
 800799e:	d119      	bne.n	80079d4 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	681b      	ldr	r3, [r3, #0]
 80079a4:	330c      	adds	r3, #12
 80079a6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80079a8:	68fb      	ldr	r3, [r7, #12]
 80079aa:	e853 3f00 	ldrex	r3, [r3]
 80079ae:	60bb      	str	r3, [r7, #8]
   return(result);
 80079b0:	68bb      	ldr	r3, [r7, #8]
 80079b2:	f023 0310 	bic.w	r3, r3, #16
 80079b6:	647b      	str	r3, [r7, #68]	; 0x44
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	681b      	ldr	r3, [r3, #0]
 80079bc:	330c      	adds	r3, #12
 80079be:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80079c0:	61ba      	str	r2, [r7, #24]
 80079c2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80079c4:	6979      	ldr	r1, [r7, #20]
 80079c6:	69ba      	ldr	r2, [r7, #24]
 80079c8:	e841 2300 	strex	r3, r2, [r1]
 80079cc:	613b      	str	r3, [r7, #16]
   return(result);
 80079ce:	693b      	ldr	r3, [r7, #16]
 80079d0:	2b00      	cmp	r3, #0
 80079d2:	d1e5      	bne.n	80079a0 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	2220      	movs	r2, #32
 80079d8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	2200      	movs	r2, #0
 80079e0:	631a      	str	r2, [r3, #48]	; 0x30
}
 80079e2:	bf00      	nop
 80079e4:	3754      	adds	r7, #84	; 0x54
 80079e6:	46bd      	mov	sp, r7
 80079e8:	bc80      	pop	{r7}
 80079ea:	4770      	bx	lr

080079ec <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80079ec:	b580      	push	{r7, lr}
 80079ee:	b084      	sub	sp, #16
 80079f0:	af00      	add	r7, sp, #0
 80079f2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079f8:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80079fa:	68fb      	ldr	r3, [r7, #12]
 80079fc:	2200      	movs	r2, #0
 80079fe:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8007a00:	68fb      	ldr	r3, [r7, #12]
 8007a02:	2200      	movs	r2, #0
 8007a04:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007a06:	68f8      	ldr	r0, [r7, #12]
 8007a08:	f7ff fed3 	bl	80077b2 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007a0c:	bf00      	nop
 8007a0e:	3710      	adds	r7, #16
 8007a10:	46bd      	mov	sp, r7
 8007a12:	bd80      	pop	{r7, pc}

08007a14 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8007a14:	b480      	push	{r7}
 8007a16:	b085      	sub	sp, #20
 8007a18:	af00      	add	r7, sp, #0
 8007a1a:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007a22:	b2db      	uxtb	r3, r3
 8007a24:	2b21      	cmp	r3, #33	; 0x21
 8007a26:	d13e      	bne.n	8007aa6 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	689b      	ldr	r3, [r3, #8]
 8007a2c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007a30:	d114      	bne.n	8007a5c <UART_Transmit_IT+0x48>
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	691b      	ldr	r3, [r3, #16]
 8007a36:	2b00      	cmp	r3, #0
 8007a38:	d110      	bne.n	8007a5c <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	6a1b      	ldr	r3, [r3, #32]
 8007a3e:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8007a40:	68fb      	ldr	r3, [r7, #12]
 8007a42:	881b      	ldrh	r3, [r3, #0]
 8007a44:	461a      	mov	r2, r3
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	681b      	ldr	r3, [r3, #0]
 8007a4a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007a4e:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	6a1b      	ldr	r3, [r3, #32]
 8007a54:	1c9a      	adds	r2, r3, #2
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	621a      	str	r2, [r3, #32]
 8007a5a:	e008      	b.n	8007a6e <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	6a1b      	ldr	r3, [r3, #32]
 8007a60:	1c59      	adds	r1, r3, #1
 8007a62:	687a      	ldr	r2, [r7, #4]
 8007a64:	6211      	str	r1, [r2, #32]
 8007a66:	781a      	ldrb	r2, [r3, #0]
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	681b      	ldr	r3, [r3, #0]
 8007a6c:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007a72:	b29b      	uxth	r3, r3
 8007a74:	3b01      	subs	r3, #1
 8007a76:	b29b      	uxth	r3, r3
 8007a78:	687a      	ldr	r2, [r7, #4]
 8007a7a:	4619      	mov	r1, r3
 8007a7c:	84d1      	strh	r1, [r2, #38]	; 0x26
 8007a7e:	2b00      	cmp	r3, #0
 8007a80:	d10f      	bne.n	8007aa2 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	681b      	ldr	r3, [r3, #0]
 8007a86:	68da      	ldr	r2, [r3, #12]
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	681b      	ldr	r3, [r3, #0]
 8007a8c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007a90:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	681b      	ldr	r3, [r3, #0]
 8007a96:	68da      	ldr	r2, [r3, #12]
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	681b      	ldr	r3, [r3, #0]
 8007a9c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007aa0:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8007aa2:	2300      	movs	r3, #0
 8007aa4:	e000      	b.n	8007aa8 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8007aa6:	2302      	movs	r3, #2
  }
}
 8007aa8:	4618      	mov	r0, r3
 8007aaa:	3714      	adds	r7, #20
 8007aac:	46bd      	mov	sp, r7
 8007aae:	bc80      	pop	{r7}
 8007ab0:	4770      	bx	lr

08007ab2 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007ab2:	b580      	push	{r7, lr}
 8007ab4:	b082      	sub	sp, #8
 8007ab6:	af00      	add	r7, sp, #0
 8007ab8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	681b      	ldr	r3, [r3, #0]
 8007abe:	68da      	ldr	r2, [r3, #12]
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	681b      	ldr	r3, [r3, #0]
 8007ac4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007ac8:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	2220      	movs	r2, #32
 8007ace:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007ad2:	6878      	ldr	r0, [r7, #4]
 8007ad4:	f7ff fe64 	bl	80077a0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8007ad8:	2300      	movs	r3, #0
}
 8007ada:	4618      	mov	r0, r3
 8007adc:	3708      	adds	r7, #8
 8007ade:	46bd      	mov	sp, r7
 8007ae0:	bd80      	pop	{r7, pc}

08007ae2 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8007ae2:	b580      	push	{r7, lr}
 8007ae4:	b08c      	sub	sp, #48	; 0x30
 8007ae6:	af00      	add	r7, sp, #0
 8007ae8:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8007af0:	b2db      	uxtb	r3, r3
 8007af2:	2b22      	cmp	r3, #34	; 0x22
 8007af4:	f040 80ae 	bne.w	8007c54 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	689b      	ldr	r3, [r3, #8]
 8007afc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007b00:	d117      	bne.n	8007b32 <UART_Receive_IT+0x50>
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	691b      	ldr	r3, [r3, #16]
 8007b06:	2b00      	cmp	r3, #0
 8007b08:	d113      	bne.n	8007b32 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8007b0a:	2300      	movs	r3, #0
 8007b0c:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007b12:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	681b      	ldr	r3, [r3, #0]
 8007b18:	685b      	ldr	r3, [r3, #4]
 8007b1a:	b29b      	uxth	r3, r3
 8007b1c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007b20:	b29a      	uxth	r2, r3
 8007b22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b24:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007b2a:	1c9a      	adds	r2, r3, #2
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	629a      	str	r2, [r3, #40]	; 0x28
 8007b30:	e026      	b.n	8007b80 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007b36:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8007b38:	2300      	movs	r3, #0
 8007b3a:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	689b      	ldr	r3, [r3, #8]
 8007b40:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007b44:	d007      	beq.n	8007b56 <UART_Receive_IT+0x74>
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	689b      	ldr	r3, [r3, #8]
 8007b4a:	2b00      	cmp	r3, #0
 8007b4c:	d10a      	bne.n	8007b64 <UART_Receive_IT+0x82>
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	691b      	ldr	r3, [r3, #16]
 8007b52:	2b00      	cmp	r3, #0
 8007b54:	d106      	bne.n	8007b64 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	681b      	ldr	r3, [r3, #0]
 8007b5a:	685b      	ldr	r3, [r3, #4]
 8007b5c:	b2da      	uxtb	r2, r3
 8007b5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b60:	701a      	strb	r2, [r3, #0]
 8007b62:	e008      	b.n	8007b76 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	681b      	ldr	r3, [r3, #0]
 8007b68:	685b      	ldr	r3, [r3, #4]
 8007b6a:	b2db      	uxtb	r3, r3
 8007b6c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007b70:	b2da      	uxtb	r2, r3
 8007b72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b74:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007b7a:	1c5a      	adds	r2, r3, #1
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007b84:	b29b      	uxth	r3, r3
 8007b86:	3b01      	subs	r3, #1
 8007b88:	b29b      	uxth	r3, r3
 8007b8a:	687a      	ldr	r2, [r7, #4]
 8007b8c:	4619      	mov	r1, r3
 8007b8e:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8007b90:	2b00      	cmp	r3, #0
 8007b92:	d15d      	bne.n	8007c50 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	681b      	ldr	r3, [r3, #0]
 8007b98:	68da      	ldr	r2, [r3, #12]
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	681b      	ldr	r3, [r3, #0]
 8007b9e:	f022 0220 	bic.w	r2, r2, #32
 8007ba2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	681b      	ldr	r3, [r3, #0]
 8007ba8:	68da      	ldr	r2, [r3, #12]
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	681b      	ldr	r3, [r3, #0]
 8007bae:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007bb2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	681b      	ldr	r3, [r3, #0]
 8007bb8:	695a      	ldr	r2, [r3, #20]
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	681b      	ldr	r3, [r3, #0]
 8007bbe:	f022 0201 	bic.w	r2, r2, #1
 8007bc2:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	2220      	movs	r2, #32
 8007bc8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	2200      	movs	r2, #0
 8007bd0:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007bd6:	2b01      	cmp	r3, #1
 8007bd8:	d135      	bne.n	8007c46 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	2200      	movs	r2, #0
 8007bde:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	681b      	ldr	r3, [r3, #0]
 8007be4:	330c      	adds	r3, #12
 8007be6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007be8:	697b      	ldr	r3, [r7, #20]
 8007bea:	e853 3f00 	ldrex	r3, [r3]
 8007bee:	613b      	str	r3, [r7, #16]
   return(result);
 8007bf0:	693b      	ldr	r3, [r7, #16]
 8007bf2:	f023 0310 	bic.w	r3, r3, #16
 8007bf6:	627b      	str	r3, [r7, #36]	; 0x24
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	681b      	ldr	r3, [r3, #0]
 8007bfc:	330c      	adds	r3, #12
 8007bfe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007c00:	623a      	str	r2, [r7, #32]
 8007c02:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c04:	69f9      	ldr	r1, [r7, #28]
 8007c06:	6a3a      	ldr	r2, [r7, #32]
 8007c08:	e841 2300 	strex	r3, r2, [r1]
 8007c0c:	61bb      	str	r3, [r7, #24]
   return(result);
 8007c0e:	69bb      	ldr	r3, [r7, #24]
 8007c10:	2b00      	cmp	r3, #0
 8007c12:	d1e5      	bne.n	8007be0 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	681b      	ldr	r3, [r3, #0]
 8007c18:	681b      	ldr	r3, [r3, #0]
 8007c1a:	f003 0310 	and.w	r3, r3, #16
 8007c1e:	2b10      	cmp	r3, #16
 8007c20:	d10a      	bne.n	8007c38 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8007c22:	2300      	movs	r3, #0
 8007c24:	60fb      	str	r3, [r7, #12]
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	681b      	ldr	r3, [r3, #0]
 8007c2a:	681b      	ldr	r3, [r3, #0]
 8007c2c:	60fb      	str	r3, [r7, #12]
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	681b      	ldr	r3, [r3, #0]
 8007c32:	685b      	ldr	r3, [r3, #4]
 8007c34:	60fb      	str	r3, [r7, #12]
 8007c36:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8007c3c:	4619      	mov	r1, r3
 8007c3e:	6878      	ldr	r0, [r7, #4]
 8007c40:	f7ff fdc0 	bl	80077c4 <HAL_UARTEx_RxEventCallback>
 8007c44:	e002      	b.n	8007c4c <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8007c46:	6878      	ldr	r0, [r7, #4]
 8007c48:	f7fe f854 	bl	8005cf4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8007c4c:	2300      	movs	r3, #0
 8007c4e:	e002      	b.n	8007c56 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8007c50:	2300      	movs	r3, #0
 8007c52:	e000      	b.n	8007c56 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8007c54:	2302      	movs	r3, #2
  }
}
 8007c56:	4618      	mov	r0, r3
 8007c58:	3730      	adds	r7, #48	; 0x30
 8007c5a:	46bd      	mov	sp, r7
 8007c5c:	bd80      	pop	{r7, pc}
	...

08007c60 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007c60:	b580      	push	{r7, lr}
 8007c62:	b084      	sub	sp, #16
 8007c64:	af00      	add	r7, sp, #0
 8007c66:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	681b      	ldr	r3, [r3, #0]
 8007c6c:	691b      	ldr	r3, [r3, #16]
 8007c6e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	68da      	ldr	r2, [r3, #12]
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	681b      	ldr	r3, [r3, #0]
 8007c7a:	430a      	orrs	r2, r1
 8007c7c:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	689a      	ldr	r2, [r3, #8]
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	691b      	ldr	r3, [r3, #16]
 8007c86:	431a      	orrs	r2, r3
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	695b      	ldr	r3, [r3, #20]
 8007c8c:	4313      	orrs	r3, r2
 8007c8e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	681b      	ldr	r3, [r3, #0]
 8007c94:	68db      	ldr	r3, [r3, #12]
 8007c96:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8007c9a:	f023 030c 	bic.w	r3, r3, #12
 8007c9e:	687a      	ldr	r2, [r7, #4]
 8007ca0:	6812      	ldr	r2, [r2, #0]
 8007ca2:	68b9      	ldr	r1, [r7, #8]
 8007ca4:	430b      	orrs	r3, r1
 8007ca6:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	681b      	ldr	r3, [r3, #0]
 8007cac:	695b      	ldr	r3, [r3, #20]
 8007cae:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	699a      	ldr	r2, [r3, #24]
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	681b      	ldr	r3, [r3, #0]
 8007cba:	430a      	orrs	r2, r1
 8007cbc:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	681b      	ldr	r3, [r3, #0]
 8007cc2:	4a2c      	ldr	r2, [pc, #176]	; (8007d74 <UART_SetConfig+0x114>)
 8007cc4:	4293      	cmp	r3, r2
 8007cc6:	d103      	bne.n	8007cd0 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8007cc8:	f7ff f9ae 	bl	8007028 <HAL_RCC_GetPCLK2Freq>
 8007ccc:	60f8      	str	r0, [r7, #12]
 8007cce:	e002      	b.n	8007cd6 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8007cd0:	f7ff f996 	bl	8007000 <HAL_RCC_GetPCLK1Freq>
 8007cd4:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007cd6:	68fa      	ldr	r2, [r7, #12]
 8007cd8:	4613      	mov	r3, r2
 8007cda:	009b      	lsls	r3, r3, #2
 8007cdc:	4413      	add	r3, r2
 8007cde:	009a      	lsls	r2, r3, #2
 8007ce0:	441a      	add	r2, r3
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	685b      	ldr	r3, [r3, #4]
 8007ce6:	009b      	lsls	r3, r3, #2
 8007ce8:	fbb2 f3f3 	udiv	r3, r2, r3
 8007cec:	4a22      	ldr	r2, [pc, #136]	; (8007d78 <UART_SetConfig+0x118>)
 8007cee:	fba2 2303 	umull	r2, r3, r2, r3
 8007cf2:	095b      	lsrs	r3, r3, #5
 8007cf4:	0119      	lsls	r1, r3, #4
 8007cf6:	68fa      	ldr	r2, [r7, #12]
 8007cf8:	4613      	mov	r3, r2
 8007cfa:	009b      	lsls	r3, r3, #2
 8007cfc:	4413      	add	r3, r2
 8007cfe:	009a      	lsls	r2, r3, #2
 8007d00:	441a      	add	r2, r3
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	685b      	ldr	r3, [r3, #4]
 8007d06:	009b      	lsls	r3, r3, #2
 8007d08:	fbb2 f2f3 	udiv	r2, r2, r3
 8007d0c:	4b1a      	ldr	r3, [pc, #104]	; (8007d78 <UART_SetConfig+0x118>)
 8007d0e:	fba3 0302 	umull	r0, r3, r3, r2
 8007d12:	095b      	lsrs	r3, r3, #5
 8007d14:	2064      	movs	r0, #100	; 0x64
 8007d16:	fb00 f303 	mul.w	r3, r0, r3
 8007d1a:	1ad3      	subs	r3, r2, r3
 8007d1c:	011b      	lsls	r3, r3, #4
 8007d1e:	3332      	adds	r3, #50	; 0x32
 8007d20:	4a15      	ldr	r2, [pc, #84]	; (8007d78 <UART_SetConfig+0x118>)
 8007d22:	fba2 2303 	umull	r2, r3, r2, r3
 8007d26:	095b      	lsrs	r3, r3, #5
 8007d28:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007d2c:	4419      	add	r1, r3
 8007d2e:	68fa      	ldr	r2, [r7, #12]
 8007d30:	4613      	mov	r3, r2
 8007d32:	009b      	lsls	r3, r3, #2
 8007d34:	4413      	add	r3, r2
 8007d36:	009a      	lsls	r2, r3, #2
 8007d38:	441a      	add	r2, r3
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	685b      	ldr	r3, [r3, #4]
 8007d3e:	009b      	lsls	r3, r3, #2
 8007d40:	fbb2 f2f3 	udiv	r2, r2, r3
 8007d44:	4b0c      	ldr	r3, [pc, #48]	; (8007d78 <UART_SetConfig+0x118>)
 8007d46:	fba3 0302 	umull	r0, r3, r3, r2
 8007d4a:	095b      	lsrs	r3, r3, #5
 8007d4c:	2064      	movs	r0, #100	; 0x64
 8007d4e:	fb00 f303 	mul.w	r3, r0, r3
 8007d52:	1ad3      	subs	r3, r2, r3
 8007d54:	011b      	lsls	r3, r3, #4
 8007d56:	3332      	adds	r3, #50	; 0x32
 8007d58:	4a07      	ldr	r2, [pc, #28]	; (8007d78 <UART_SetConfig+0x118>)
 8007d5a:	fba2 2303 	umull	r2, r3, r2, r3
 8007d5e:	095b      	lsrs	r3, r3, #5
 8007d60:	f003 020f 	and.w	r2, r3, #15
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	681b      	ldr	r3, [r3, #0]
 8007d68:	440a      	add	r2, r1
 8007d6a:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8007d6c:	bf00      	nop
 8007d6e:	3710      	adds	r7, #16
 8007d70:	46bd      	mov	sp, r7
 8007d72:	bd80      	pop	{r7, pc}
 8007d74:	40013800 	.word	0x40013800
 8007d78:	51eb851f 	.word	0x51eb851f

08007d7c <memset>:
 8007d7c:	4603      	mov	r3, r0
 8007d7e:	4402      	add	r2, r0
 8007d80:	4293      	cmp	r3, r2
 8007d82:	d100      	bne.n	8007d86 <memset+0xa>
 8007d84:	4770      	bx	lr
 8007d86:	f803 1b01 	strb.w	r1, [r3], #1
 8007d8a:	e7f9      	b.n	8007d80 <memset+0x4>

08007d8c <__libc_init_array>:
 8007d8c:	b570      	push	{r4, r5, r6, lr}
 8007d8e:	2600      	movs	r6, #0
 8007d90:	4d0c      	ldr	r5, [pc, #48]	; (8007dc4 <__libc_init_array+0x38>)
 8007d92:	4c0d      	ldr	r4, [pc, #52]	; (8007dc8 <__libc_init_array+0x3c>)
 8007d94:	1b64      	subs	r4, r4, r5
 8007d96:	10a4      	asrs	r4, r4, #2
 8007d98:	42a6      	cmp	r6, r4
 8007d9a:	d109      	bne.n	8007db0 <__libc_init_array+0x24>
 8007d9c:	f000 f81a 	bl	8007dd4 <_init>
 8007da0:	2600      	movs	r6, #0
 8007da2:	4d0a      	ldr	r5, [pc, #40]	; (8007dcc <__libc_init_array+0x40>)
 8007da4:	4c0a      	ldr	r4, [pc, #40]	; (8007dd0 <__libc_init_array+0x44>)
 8007da6:	1b64      	subs	r4, r4, r5
 8007da8:	10a4      	asrs	r4, r4, #2
 8007daa:	42a6      	cmp	r6, r4
 8007dac:	d105      	bne.n	8007dba <__libc_init_array+0x2e>
 8007dae:	bd70      	pop	{r4, r5, r6, pc}
 8007db0:	f855 3b04 	ldr.w	r3, [r5], #4
 8007db4:	4798      	blx	r3
 8007db6:	3601      	adds	r6, #1
 8007db8:	e7ee      	b.n	8007d98 <__libc_init_array+0xc>
 8007dba:	f855 3b04 	ldr.w	r3, [r5], #4
 8007dbe:	4798      	blx	r3
 8007dc0:	3601      	adds	r6, #1
 8007dc2:	e7f2      	b.n	8007daa <__libc_init_array+0x1e>
 8007dc4:	08007e18 	.word	0x08007e18
 8007dc8:	08007e18 	.word	0x08007e18
 8007dcc:	08007e18 	.word	0x08007e18
 8007dd0:	08007e1c 	.word	0x08007e1c

08007dd4 <_init>:
 8007dd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007dd6:	bf00      	nop
 8007dd8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007dda:	bc08      	pop	{r3}
 8007ddc:	469e      	mov	lr, r3
 8007dde:	4770      	bx	lr

08007de0 <_fini>:
 8007de0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007de2:	bf00      	nop
 8007de4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007de6:	bc08      	pop	{r3}
 8007de8:	469e      	mov	lr, r3
 8007dea:	4770      	bx	lr
