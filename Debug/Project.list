
Project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a8bc  080001e8  080001e8  000101e8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00006b28  0800aaa4  0800aaa4  0001aaa4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080115cc  080115cc  00030060  2**0
                  CONTENTS
  4 .ARM          00000000  080115cc  080115cc  00030060  2**0
                  CONTENTS
  5 .preinit_array 00000000  080115cc  080115cc  00030060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080115cc  080115cc  000215cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080115d0  080115d0  000215d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000060  20000000  080115d4  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000df8  20000060  08011634  00030060  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000e58  08011634  00030e58  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00030060  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00030089  2**0
                  CONTENTS, READONLY
 13 .debug_info   00010731  00000000  00000000  000300cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002fbb  00000000  00000000  000407fd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001040  00000000  00000000  000437b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000c9a  00000000  00000000  000447f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001b4cf  00000000  00000000  00045492  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001586e  00000000  00000000  00060961  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0009be13  00000000  00000000  000761cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00004858  00000000  00000000  00111fe4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004a  00000000  00000000  0011683c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e8 <__do_global_dtors_aux>:
 80001e8:	b510      	push	{r4, lr}
 80001ea:	4c05      	ldr	r4, [pc, #20]	; (8000200 <__do_global_dtors_aux+0x18>)
 80001ec:	7823      	ldrb	r3, [r4, #0]
 80001ee:	b933      	cbnz	r3, 80001fe <__do_global_dtors_aux+0x16>
 80001f0:	4b04      	ldr	r3, [pc, #16]	; (8000204 <__do_global_dtors_aux+0x1c>)
 80001f2:	b113      	cbz	r3, 80001fa <__do_global_dtors_aux+0x12>
 80001f4:	4804      	ldr	r0, [pc, #16]	; (8000208 <__do_global_dtors_aux+0x20>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	2301      	movs	r3, #1
 80001fc:	7023      	strb	r3, [r4, #0]
 80001fe:	bd10      	pop	{r4, pc}
 8000200:	20000060 	.word	0x20000060
 8000204:	00000000 	.word	0x00000000
 8000208:	0800aa8c 	.word	0x0800aa8c

0800020c <frame_dummy>:
 800020c:	b508      	push	{r3, lr}
 800020e:	4b03      	ldr	r3, [pc, #12]	; (800021c <frame_dummy+0x10>)
 8000210:	b11b      	cbz	r3, 800021a <frame_dummy+0xe>
 8000212:	4903      	ldr	r1, [pc, #12]	; (8000220 <frame_dummy+0x14>)
 8000214:	4803      	ldr	r0, [pc, #12]	; (8000224 <frame_dummy+0x18>)
 8000216:	f3af 8000 	nop.w
 800021a:	bd08      	pop	{r3, pc}
 800021c:	00000000 	.word	0x00000000
 8000220:	20000064 	.word	0x20000064
 8000224:	0800aa8c 	.word	0x0800aa8c

08000228 <strlen>:
 8000228:	4603      	mov	r3, r0
 800022a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800022e:	2a00      	cmp	r2, #0
 8000230:	d1fb      	bne.n	800022a <strlen+0x2>
 8000232:	1a18      	subs	r0, r3, r0
 8000234:	3801      	subs	r0, #1
 8000236:	4770      	bx	lr

08000238 <__aeabi_dmul>:
 8000238:	b570      	push	{r4, r5, r6, lr}
 800023a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800023e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000242:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000246:	bf1d      	ittte	ne
 8000248:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800024c:	ea94 0f0c 	teqne	r4, ip
 8000250:	ea95 0f0c 	teqne	r5, ip
 8000254:	f000 f8de 	bleq	8000414 <__aeabi_dmul+0x1dc>
 8000258:	442c      	add	r4, r5
 800025a:	ea81 0603 	eor.w	r6, r1, r3
 800025e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000262:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000266:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800026a:	bf18      	it	ne
 800026c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000270:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000274:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000278:	d038      	beq.n	80002ec <__aeabi_dmul+0xb4>
 800027a:	fba0 ce02 	umull	ip, lr, r0, r2
 800027e:	f04f 0500 	mov.w	r5, #0
 8000282:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000286:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800028a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800028e:	f04f 0600 	mov.w	r6, #0
 8000292:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000296:	f09c 0f00 	teq	ip, #0
 800029a:	bf18      	it	ne
 800029c:	f04e 0e01 	orrne.w	lr, lr, #1
 80002a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80002a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80002a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80002ac:	d204      	bcs.n	80002b8 <__aeabi_dmul+0x80>
 80002ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80002b2:	416d      	adcs	r5, r5
 80002b4:	eb46 0606 	adc.w	r6, r6, r6
 80002b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80002bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80002c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80002c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80002c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80002cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80002d0:	bf88      	it	hi
 80002d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80002d6:	d81e      	bhi.n	8000316 <__aeabi_dmul+0xde>
 80002d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80002dc:	bf08      	it	eq
 80002de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80002e2:	f150 0000 	adcs.w	r0, r0, #0
 80002e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002ea:	bd70      	pop	{r4, r5, r6, pc}
 80002ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80002f0:	ea46 0101 	orr.w	r1, r6, r1
 80002f4:	ea40 0002 	orr.w	r0, r0, r2
 80002f8:	ea81 0103 	eor.w	r1, r1, r3
 80002fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000300:	bfc2      	ittt	gt
 8000302:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000306:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800030a:	bd70      	popgt	{r4, r5, r6, pc}
 800030c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000310:	f04f 0e00 	mov.w	lr, #0
 8000314:	3c01      	subs	r4, #1
 8000316:	f300 80ab 	bgt.w	8000470 <__aeabi_dmul+0x238>
 800031a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800031e:	bfde      	ittt	le
 8000320:	2000      	movle	r0, #0
 8000322:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000326:	bd70      	pople	{r4, r5, r6, pc}
 8000328:	f1c4 0400 	rsb	r4, r4, #0
 800032c:	3c20      	subs	r4, #32
 800032e:	da35      	bge.n	800039c <__aeabi_dmul+0x164>
 8000330:	340c      	adds	r4, #12
 8000332:	dc1b      	bgt.n	800036c <__aeabi_dmul+0x134>
 8000334:	f104 0414 	add.w	r4, r4, #20
 8000338:	f1c4 0520 	rsb	r5, r4, #32
 800033c:	fa00 f305 	lsl.w	r3, r0, r5
 8000340:	fa20 f004 	lsr.w	r0, r0, r4
 8000344:	fa01 f205 	lsl.w	r2, r1, r5
 8000348:	ea40 0002 	orr.w	r0, r0, r2
 800034c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000350:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000354:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000358:	fa21 f604 	lsr.w	r6, r1, r4
 800035c:	eb42 0106 	adc.w	r1, r2, r6
 8000360:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000364:	bf08      	it	eq
 8000366:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800036a:	bd70      	pop	{r4, r5, r6, pc}
 800036c:	f1c4 040c 	rsb	r4, r4, #12
 8000370:	f1c4 0520 	rsb	r5, r4, #32
 8000374:	fa00 f304 	lsl.w	r3, r0, r4
 8000378:	fa20 f005 	lsr.w	r0, r0, r5
 800037c:	fa01 f204 	lsl.w	r2, r1, r4
 8000380:	ea40 0002 	orr.w	r0, r0, r2
 8000384:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000388:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800038c:	f141 0100 	adc.w	r1, r1, #0
 8000390:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000394:	bf08      	it	eq
 8000396:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800039a:	bd70      	pop	{r4, r5, r6, pc}
 800039c:	f1c4 0520 	rsb	r5, r4, #32
 80003a0:	fa00 f205 	lsl.w	r2, r0, r5
 80003a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80003a8:	fa20 f304 	lsr.w	r3, r0, r4
 80003ac:	fa01 f205 	lsl.w	r2, r1, r5
 80003b0:	ea43 0302 	orr.w	r3, r3, r2
 80003b4:	fa21 f004 	lsr.w	r0, r1, r4
 80003b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80003bc:	fa21 f204 	lsr.w	r2, r1, r4
 80003c0:	ea20 0002 	bic.w	r0, r0, r2
 80003c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80003c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003cc:	bf08      	it	eq
 80003ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003d2:	bd70      	pop	{r4, r5, r6, pc}
 80003d4:	f094 0f00 	teq	r4, #0
 80003d8:	d10f      	bne.n	80003fa <__aeabi_dmul+0x1c2>
 80003da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80003de:	0040      	lsls	r0, r0, #1
 80003e0:	eb41 0101 	adc.w	r1, r1, r1
 80003e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003e8:	bf08      	it	eq
 80003ea:	3c01      	subeq	r4, #1
 80003ec:	d0f7      	beq.n	80003de <__aeabi_dmul+0x1a6>
 80003ee:	ea41 0106 	orr.w	r1, r1, r6
 80003f2:	f095 0f00 	teq	r5, #0
 80003f6:	bf18      	it	ne
 80003f8:	4770      	bxne	lr
 80003fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80003fe:	0052      	lsls	r2, r2, #1
 8000400:	eb43 0303 	adc.w	r3, r3, r3
 8000404:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000408:	bf08      	it	eq
 800040a:	3d01      	subeq	r5, #1
 800040c:	d0f7      	beq.n	80003fe <__aeabi_dmul+0x1c6>
 800040e:	ea43 0306 	orr.w	r3, r3, r6
 8000412:	4770      	bx	lr
 8000414:	ea94 0f0c 	teq	r4, ip
 8000418:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800041c:	bf18      	it	ne
 800041e:	ea95 0f0c 	teqne	r5, ip
 8000422:	d00c      	beq.n	800043e <__aeabi_dmul+0x206>
 8000424:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000428:	bf18      	it	ne
 800042a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800042e:	d1d1      	bne.n	80003d4 <__aeabi_dmul+0x19c>
 8000430:	ea81 0103 	eor.w	r1, r1, r3
 8000434:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000438:	f04f 0000 	mov.w	r0, #0
 800043c:	bd70      	pop	{r4, r5, r6, pc}
 800043e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000442:	bf06      	itte	eq
 8000444:	4610      	moveq	r0, r2
 8000446:	4619      	moveq	r1, r3
 8000448:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800044c:	d019      	beq.n	8000482 <__aeabi_dmul+0x24a>
 800044e:	ea94 0f0c 	teq	r4, ip
 8000452:	d102      	bne.n	800045a <__aeabi_dmul+0x222>
 8000454:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000458:	d113      	bne.n	8000482 <__aeabi_dmul+0x24a>
 800045a:	ea95 0f0c 	teq	r5, ip
 800045e:	d105      	bne.n	800046c <__aeabi_dmul+0x234>
 8000460:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000464:	bf1c      	itt	ne
 8000466:	4610      	movne	r0, r2
 8000468:	4619      	movne	r1, r3
 800046a:	d10a      	bne.n	8000482 <__aeabi_dmul+0x24a>
 800046c:	ea81 0103 	eor.w	r1, r1, r3
 8000470:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000474:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000478:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800047c:	f04f 0000 	mov.w	r0, #0
 8000480:	bd70      	pop	{r4, r5, r6, pc}
 8000482:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000486:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800048a:	bd70      	pop	{r4, r5, r6, pc}

0800048c <__aeabi_drsub>:
 800048c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000490:	e002      	b.n	8000498 <__adddf3>
 8000492:	bf00      	nop

08000494 <__aeabi_dsub>:
 8000494:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000498 <__adddf3>:
 8000498:	b530      	push	{r4, r5, lr}
 800049a:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800049e:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80004a2:	ea94 0f05 	teq	r4, r5
 80004a6:	bf08      	it	eq
 80004a8:	ea90 0f02 	teqeq	r0, r2
 80004ac:	bf1f      	itttt	ne
 80004ae:	ea54 0c00 	orrsne.w	ip, r4, r0
 80004b2:	ea55 0c02 	orrsne.w	ip, r5, r2
 80004b6:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80004ba:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004be:	f000 80e2 	beq.w	8000686 <__adddf3+0x1ee>
 80004c2:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80004c6:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80004ca:	bfb8      	it	lt
 80004cc:	426d      	neglt	r5, r5
 80004ce:	dd0c      	ble.n	80004ea <__adddf3+0x52>
 80004d0:	442c      	add	r4, r5
 80004d2:	ea80 0202 	eor.w	r2, r0, r2
 80004d6:	ea81 0303 	eor.w	r3, r1, r3
 80004da:	ea82 0000 	eor.w	r0, r2, r0
 80004de:	ea83 0101 	eor.w	r1, r3, r1
 80004e2:	ea80 0202 	eor.w	r2, r0, r2
 80004e6:	ea81 0303 	eor.w	r3, r1, r3
 80004ea:	2d36      	cmp	r5, #54	; 0x36
 80004ec:	bf88      	it	hi
 80004ee:	bd30      	pophi	{r4, r5, pc}
 80004f0:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80004f4:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80004f8:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80004fc:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000500:	d002      	beq.n	8000508 <__adddf3+0x70>
 8000502:	4240      	negs	r0, r0
 8000504:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000508:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 800050c:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000510:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000514:	d002      	beq.n	800051c <__adddf3+0x84>
 8000516:	4252      	negs	r2, r2
 8000518:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800051c:	ea94 0f05 	teq	r4, r5
 8000520:	f000 80a7 	beq.w	8000672 <__adddf3+0x1da>
 8000524:	f1a4 0401 	sub.w	r4, r4, #1
 8000528:	f1d5 0e20 	rsbs	lr, r5, #32
 800052c:	db0d      	blt.n	800054a <__adddf3+0xb2>
 800052e:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000532:	fa22 f205 	lsr.w	r2, r2, r5
 8000536:	1880      	adds	r0, r0, r2
 8000538:	f141 0100 	adc.w	r1, r1, #0
 800053c:	fa03 f20e 	lsl.w	r2, r3, lr
 8000540:	1880      	adds	r0, r0, r2
 8000542:	fa43 f305 	asr.w	r3, r3, r5
 8000546:	4159      	adcs	r1, r3
 8000548:	e00e      	b.n	8000568 <__adddf3+0xd0>
 800054a:	f1a5 0520 	sub.w	r5, r5, #32
 800054e:	f10e 0e20 	add.w	lr, lr, #32
 8000552:	2a01      	cmp	r2, #1
 8000554:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000558:	bf28      	it	cs
 800055a:	f04c 0c02 	orrcs.w	ip, ip, #2
 800055e:	fa43 f305 	asr.w	r3, r3, r5
 8000562:	18c0      	adds	r0, r0, r3
 8000564:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000568:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800056c:	d507      	bpl.n	800057e <__adddf3+0xe6>
 800056e:	f04f 0e00 	mov.w	lr, #0
 8000572:	f1dc 0c00 	rsbs	ip, ip, #0
 8000576:	eb7e 0000 	sbcs.w	r0, lr, r0
 800057a:	eb6e 0101 	sbc.w	r1, lr, r1
 800057e:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000582:	d31b      	bcc.n	80005bc <__adddf3+0x124>
 8000584:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000588:	d30c      	bcc.n	80005a4 <__adddf3+0x10c>
 800058a:	0849      	lsrs	r1, r1, #1
 800058c:	ea5f 0030 	movs.w	r0, r0, rrx
 8000590:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000594:	f104 0401 	add.w	r4, r4, #1
 8000598:	ea4f 5244 	mov.w	r2, r4, lsl #21
 800059c:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80005a0:	f080 809a 	bcs.w	80006d8 <__adddf3+0x240>
 80005a4:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80005a8:	bf08      	it	eq
 80005aa:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80005ae:	f150 0000 	adcs.w	r0, r0, #0
 80005b2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005b6:	ea41 0105 	orr.w	r1, r1, r5
 80005ba:	bd30      	pop	{r4, r5, pc}
 80005bc:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80005c0:	4140      	adcs	r0, r0
 80005c2:	eb41 0101 	adc.w	r1, r1, r1
 80005c6:	3c01      	subs	r4, #1
 80005c8:	bf28      	it	cs
 80005ca:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80005ce:	d2e9      	bcs.n	80005a4 <__adddf3+0x10c>
 80005d0:	f091 0f00 	teq	r1, #0
 80005d4:	bf04      	itt	eq
 80005d6:	4601      	moveq	r1, r0
 80005d8:	2000      	moveq	r0, #0
 80005da:	fab1 f381 	clz	r3, r1
 80005de:	bf08      	it	eq
 80005e0:	3320      	addeq	r3, #32
 80005e2:	f1a3 030b 	sub.w	r3, r3, #11
 80005e6:	f1b3 0220 	subs.w	r2, r3, #32
 80005ea:	da0c      	bge.n	8000606 <__adddf3+0x16e>
 80005ec:	320c      	adds	r2, #12
 80005ee:	dd08      	ble.n	8000602 <__adddf3+0x16a>
 80005f0:	f102 0c14 	add.w	ip, r2, #20
 80005f4:	f1c2 020c 	rsb	r2, r2, #12
 80005f8:	fa01 f00c 	lsl.w	r0, r1, ip
 80005fc:	fa21 f102 	lsr.w	r1, r1, r2
 8000600:	e00c      	b.n	800061c <__adddf3+0x184>
 8000602:	f102 0214 	add.w	r2, r2, #20
 8000606:	bfd8      	it	le
 8000608:	f1c2 0c20 	rsble	ip, r2, #32
 800060c:	fa01 f102 	lsl.w	r1, r1, r2
 8000610:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000614:	bfdc      	itt	le
 8000616:	ea41 010c 	orrle.w	r1, r1, ip
 800061a:	4090      	lslle	r0, r2
 800061c:	1ae4      	subs	r4, r4, r3
 800061e:	bfa2      	ittt	ge
 8000620:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000624:	4329      	orrge	r1, r5
 8000626:	bd30      	popge	{r4, r5, pc}
 8000628:	ea6f 0404 	mvn.w	r4, r4
 800062c:	3c1f      	subs	r4, #31
 800062e:	da1c      	bge.n	800066a <__adddf3+0x1d2>
 8000630:	340c      	adds	r4, #12
 8000632:	dc0e      	bgt.n	8000652 <__adddf3+0x1ba>
 8000634:	f104 0414 	add.w	r4, r4, #20
 8000638:	f1c4 0220 	rsb	r2, r4, #32
 800063c:	fa20 f004 	lsr.w	r0, r0, r4
 8000640:	fa01 f302 	lsl.w	r3, r1, r2
 8000644:	ea40 0003 	orr.w	r0, r0, r3
 8000648:	fa21 f304 	lsr.w	r3, r1, r4
 800064c:	ea45 0103 	orr.w	r1, r5, r3
 8000650:	bd30      	pop	{r4, r5, pc}
 8000652:	f1c4 040c 	rsb	r4, r4, #12
 8000656:	f1c4 0220 	rsb	r2, r4, #32
 800065a:	fa20 f002 	lsr.w	r0, r0, r2
 800065e:	fa01 f304 	lsl.w	r3, r1, r4
 8000662:	ea40 0003 	orr.w	r0, r0, r3
 8000666:	4629      	mov	r1, r5
 8000668:	bd30      	pop	{r4, r5, pc}
 800066a:	fa21 f004 	lsr.w	r0, r1, r4
 800066e:	4629      	mov	r1, r5
 8000670:	bd30      	pop	{r4, r5, pc}
 8000672:	f094 0f00 	teq	r4, #0
 8000676:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800067a:	bf06      	itte	eq
 800067c:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000680:	3401      	addeq	r4, #1
 8000682:	3d01      	subne	r5, #1
 8000684:	e74e      	b.n	8000524 <__adddf3+0x8c>
 8000686:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800068a:	bf18      	it	ne
 800068c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000690:	d029      	beq.n	80006e6 <__adddf3+0x24e>
 8000692:	ea94 0f05 	teq	r4, r5
 8000696:	bf08      	it	eq
 8000698:	ea90 0f02 	teqeq	r0, r2
 800069c:	d005      	beq.n	80006aa <__adddf3+0x212>
 800069e:	ea54 0c00 	orrs.w	ip, r4, r0
 80006a2:	bf04      	itt	eq
 80006a4:	4619      	moveq	r1, r3
 80006a6:	4610      	moveq	r0, r2
 80006a8:	bd30      	pop	{r4, r5, pc}
 80006aa:	ea91 0f03 	teq	r1, r3
 80006ae:	bf1e      	ittt	ne
 80006b0:	2100      	movne	r1, #0
 80006b2:	2000      	movne	r0, #0
 80006b4:	bd30      	popne	{r4, r5, pc}
 80006b6:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80006ba:	d105      	bne.n	80006c8 <__adddf3+0x230>
 80006bc:	0040      	lsls	r0, r0, #1
 80006be:	4149      	adcs	r1, r1
 80006c0:	bf28      	it	cs
 80006c2:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80006c6:	bd30      	pop	{r4, r5, pc}
 80006c8:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80006cc:	bf3c      	itt	cc
 80006ce:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80006d2:	bd30      	popcc	{r4, r5, pc}
 80006d4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80006d8:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80006dc:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80006e0:	f04f 0000 	mov.w	r0, #0
 80006e4:	bd30      	pop	{r4, r5, pc}
 80006e6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80006ea:	bf1a      	itte	ne
 80006ec:	4619      	movne	r1, r3
 80006ee:	4610      	movne	r0, r2
 80006f0:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80006f4:	bf1c      	itt	ne
 80006f6:	460b      	movne	r3, r1
 80006f8:	4602      	movne	r2, r0
 80006fa:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80006fe:	bf06      	itte	eq
 8000700:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000704:	ea91 0f03 	teqeq	r1, r3
 8000708:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 800070c:	bd30      	pop	{r4, r5, pc}
 800070e:	bf00      	nop

08000710 <__aeabi_ui2d>:
 8000710:	f090 0f00 	teq	r0, #0
 8000714:	bf04      	itt	eq
 8000716:	2100      	moveq	r1, #0
 8000718:	4770      	bxeq	lr
 800071a:	b530      	push	{r4, r5, lr}
 800071c:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000720:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000724:	f04f 0500 	mov.w	r5, #0
 8000728:	f04f 0100 	mov.w	r1, #0
 800072c:	e750      	b.n	80005d0 <__adddf3+0x138>
 800072e:	bf00      	nop

08000730 <__aeabi_i2d>:
 8000730:	f090 0f00 	teq	r0, #0
 8000734:	bf04      	itt	eq
 8000736:	2100      	moveq	r1, #0
 8000738:	4770      	bxeq	lr
 800073a:	b530      	push	{r4, r5, lr}
 800073c:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000740:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000744:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000748:	bf48      	it	mi
 800074a:	4240      	negmi	r0, r0
 800074c:	f04f 0100 	mov.w	r1, #0
 8000750:	e73e      	b.n	80005d0 <__adddf3+0x138>
 8000752:	bf00      	nop

08000754 <__aeabi_f2d>:
 8000754:	0042      	lsls	r2, r0, #1
 8000756:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800075a:	ea4f 0131 	mov.w	r1, r1, rrx
 800075e:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000762:	bf1f      	itttt	ne
 8000764:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000768:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 800076c:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000770:	4770      	bxne	lr
 8000772:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000776:	bf08      	it	eq
 8000778:	4770      	bxeq	lr
 800077a:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800077e:	bf04      	itt	eq
 8000780:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000784:	4770      	bxeq	lr
 8000786:	b530      	push	{r4, r5, lr}
 8000788:	f44f 7460 	mov.w	r4, #896	; 0x380
 800078c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000790:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000794:	e71c      	b.n	80005d0 <__adddf3+0x138>
 8000796:	bf00      	nop

08000798 <__aeabi_ul2d>:
 8000798:	ea50 0201 	orrs.w	r2, r0, r1
 800079c:	bf08      	it	eq
 800079e:	4770      	bxeq	lr
 80007a0:	b530      	push	{r4, r5, lr}
 80007a2:	f04f 0500 	mov.w	r5, #0
 80007a6:	e00a      	b.n	80007be <__aeabi_l2d+0x16>

080007a8 <__aeabi_l2d>:
 80007a8:	ea50 0201 	orrs.w	r2, r0, r1
 80007ac:	bf08      	it	eq
 80007ae:	4770      	bxeq	lr
 80007b0:	b530      	push	{r4, r5, lr}
 80007b2:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80007b6:	d502      	bpl.n	80007be <__aeabi_l2d+0x16>
 80007b8:	4240      	negs	r0, r0
 80007ba:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80007be:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80007c2:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80007c6:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80007ca:	f43f aed8 	beq.w	800057e <__adddf3+0xe6>
 80007ce:	f04f 0203 	mov.w	r2, #3
 80007d2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80007d6:	bf18      	it	ne
 80007d8:	3203      	addne	r2, #3
 80007da:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80007de:	bf18      	it	ne
 80007e0:	3203      	addne	r2, #3
 80007e2:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80007e6:	f1c2 0320 	rsb	r3, r2, #32
 80007ea:	fa00 fc03 	lsl.w	ip, r0, r3
 80007ee:	fa20 f002 	lsr.w	r0, r0, r2
 80007f2:	fa01 fe03 	lsl.w	lr, r1, r3
 80007f6:	ea40 000e 	orr.w	r0, r0, lr
 80007fa:	fa21 f102 	lsr.w	r1, r1, r2
 80007fe:	4414      	add	r4, r2
 8000800:	e6bd      	b.n	800057e <__adddf3+0xe6>
 8000802:	bf00      	nop

08000804 <__aeabi_d2uiz>:
 8000804:	004a      	lsls	r2, r1, #1
 8000806:	d211      	bcs.n	800082c <__aeabi_d2uiz+0x28>
 8000808:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 800080c:	d211      	bcs.n	8000832 <__aeabi_d2uiz+0x2e>
 800080e:	d50d      	bpl.n	800082c <__aeabi_d2uiz+0x28>
 8000810:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000814:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000818:	d40e      	bmi.n	8000838 <__aeabi_d2uiz+0x34>
 800081a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 800081e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000822:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000826:	fa23 f002 	lsr.w	r0, r3, r2
 800082a:	4770      	bx	lr
 800082c:	f04f 0000 	mov.w	r0, #0
 8000830:	4770      	bx	lr
 8000832:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000836:	d102      	bne.n	800083e <__aeabi_d2uiz+0x3a>
 8000838:	f04f 30ff 	mov.w	r0, #4294967295
 800083c:	4770      	bx	lr
 800083e:	f04f 0000 	mov.w	r0, #0
 8000842:	4770      	bx	lr

08000844 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000844:	b580      	push	{r7, lr}
 8000846:	b088      	sub	sp, #32
 8000848:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800084a:	f107 0310 	add.w	r3, r7, #16
 800084e:	2200      	movs	r2, #0
 8000850:	601a      	str	r2, [r3, #0]
 8000852:	605a      	str	r2, [r3, #4]
 8000854:	609a      	str	r2, [r3, #8]
 8000856:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000858:	4b46      	ldr	r3, [pc, #280]	; (8000974 <MX_GPIO_Init+0x130>)
 800085a:	699b      	ldr	r3, [r3, #24]
 800085c:	4a45      	ldr	r2, [pc, #276]	; (8000974 <MX_GPIO_Init+0x130>)
 800085e:	f043 0320 	orr.w	r3, r3, #32
 8000862:	6193      	str	r3, [r2, #24]
 8000864:	4b43      	ldr	r3, [pc, #268]	; (8000974 <MX_GPIO_Init+0x130>)
 8000866:	699b      	ldr	r3, [r3, #24]
 8000868:	f003 0320 	and.w	r3, r3, #32
 800086c:	60fb      	str	r3, [r7, #12]
 800086e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000870:	4b40      	ldr	r3, [pc, #256]	; (8000974 <MX_GPIO_Init+0x130>)
 8000872:	699b      	ldr	r3, [r3, #24]
 8000874:	4a3f      	ldr	r2, [pc, #252]	; (8000974 <MX_GPIO_Init+0x130>)
 8000876:	f043 0304 	orr.w	r3, r3, #4
 800087a:	6193      	str	r3, [r2, #24]
 800087c:	4b3d      	ldr	r3, [pc, #244]	; (8000974 <MX_GPIO_Init+0x130>)
 800087e:	699b      	ldr	r3, [r3, #24]
 8000880:	f003 0304 	and.w	r3, r3, #4
 8000884:	60bb      	str	r3, [r7, #8]
 8000886:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000888:	4b3a      	ldr	r3, [pc, #232]	; (8000974 <MX_GPIO_Init+0x130>)
 800088a:	699b      	ldr	r3, [r3, #24]
 800088c:	4a39      	ldr	r2, [pc, #228]	; (8000974 <MX_GPIO_Init+0x130>)
 800088e:	f043 0310 	orr.w	r3, r3, #16
 8000892:	6193      	str	r3, [r2, #24]
 8000894:	4b37      	ldr	r3, [pc, #220]	; (8000974 <MX_GPIO_Init+0x130>)
 8000896:	699b      	ldr	r3, [r3, #24]
 8000898:	f003 0310 	and.w	r3, r3, #16
 800089c:	607b      	str	r3, [r7, #4]
 800089e:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED0_GPIO_Port, LED0_Pin, GPIO_PIN_RESET);
 80008a0:	2200      	movs	r2, #0
 80008a2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80008a6:	4834      	ldr	r0, [pc, #208]	; (8000978 <MX_GPIO_Init+0x134>)
 80008a8:	f006 fd89 	bl	80073be <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET);
 80008ac:	2200      	movs	r2, #0
 80008ae:	2104      	movs	r1, #4
 80008b0:	4832      	ldr	r0, [pc, #200]	; (800097c <MX_GPIO_Init+0x138>)
 80008b2:	f006 fd84 	bl	80073be <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = KEY_WK_Pin;
 80008b6:	2301      	movs	r3, #1
 80008b8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80008ba:	4b31      	ldr	r3, [pc, #196]	; (8000980 <MX_GPIO_Init+0x13c>)
 80008bc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80008be:	2302      	movs	r3, #2
 80008c0:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(KEY_WK_GPIO_Port, &GPIO_InitStruct);
 80008c2:	f107 0310 	add.w	r3, r7, #16
 80008c6:	4619      	mov	r1, r3
 80008c8:	482b      	ldr	r0, [pc, #172]	; (8000978 <MX_GPIO_Init+0x134>)
 80008ca:	f006 fbcd 	bl	8007068 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = KEY0_Pin;
 80008ce:	2320      	movs	r3, #32
 80008d0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80008d2:	4b2c      	ldr	r3, [pc, #176]	; (8000984 <MX_GPIO_Init+0x140>)
 80008d4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80008d6:	2301      	movs	r3, #1
 80008d8:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(KEY0_GPIO_Port, &GPIO_InitStruct);
 80008da:	f107 0310 	add.w	r3, r7, #16
 80008de:	4619      	mov	r1, r3
 80008e0:	4829      	ldr	r0, [pc, #164]	; (8000988 <MX_GPIO_Init+0x144>)
 80008e2:	f006 fbc1 	bl	8007068 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED0_Pin;
 80008e6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80008ea:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008ec:	2301      	movs	r3, #1
 80008ee:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008f0:	2300      	movs	r3, #0
 80008f2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008f4:	2302      	movs	r3, #2
 80008f6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED0_GPIO_Port, &GPIO_InitStruct);
 80008f8:	f107 0310 	add.w	r3, r7, #16
 80008fc:	4619      	mov	r1, r3
 80008fe:	481e      	ldr	r0, [pc, #120]	; (8000978 <MX_GPIO_Init+0x134>)
 8000900:	f006 fbb2 	bl	8007068 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = KEY1_Pin;
 8000904:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000908:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800090a:	4b1e      	ldr	r3, [pc, #120]	; (8000984 <MX_GPIO_Init+0x140>)
 800090c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800090e:	2301      	movs	r3, #1
 8000910:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(KEY1_GPIO_Port, &GPIO_InitStruct);
 8000912:	f107 0310 	add.w	r3, r7, #16
 8000916:	4619      	mov	r1, r3
 8000918:	4817      	ldr	r0, [pc, #92]	; (8000978 <MX_GPIO_Init+0x134>)
 800091a:	f006 fba5 	bl	8007068 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED1_Pin;
 800091e:	2304      	movs	r3, #4
 8000920:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000922:	2301      	movs	r3, #1
 8000924:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000926:	2300      	movs	r3, #0
 8000928:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800092a:	2302      	movs	r3, #2
 800092c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED1_GPIO_Port, &GPIO_InitStruct);
 800092e:	f107 0310 	add.w	r3, r7, #16
 8000932:	4619      	mov	r1, r3
 8000934:	4811      	ldr	r0, [pc, #68]	; (800097c <MX_GPIO_Init+0x138>)
 8000936:	f006 fb97 	bl	8007068 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 1, 0);
 800093a:	2200      	movs	r2, #0
 800093c:	2101      	movs	r1, #1
 800093e:	2006      	movs	r0, #6
 8000940:	f006 fa19 	bl	8006d76 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8000944:	2006      	movs	r0, #6
 8000946:	f006 fa32 	bl	8006dae <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 1, 1);
 800094a:	2201      	movs	r2, #1
 800094c:	2101      	movs	r1, #1
 800094e:	2017      	movs	r0, #23
 8000950:	f006 fa11 	bl	8006d76 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000954:	2017      	movs	r0, #23
 8000956:	f006 fa2a 	bl	8006dae <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 1, 2);
 800095a:	2202      	movs	r2, #2
 800095c:	2101      	movs	r1, #1
 800095e:	2028      	movs	r0, #40	; 0x28
 8000960:	f006 fa09 	bl	8006d76 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000964:	2028      	movs	r0, #40	; 0x28
 8000966:	f006 fa22 	bl	8006dae <HAL_NVIC_EnableIRQ>

}
 800096a:	bf00      	nop
 800096c:	3720      	adds	r7, #32
 800096e:	46bd      	mov	sp, r7
 8000970:	bd80      	pop	{r7, pc}
 8000972:	bf00      	nop
 8000974:	40021000 	.word	0x40021000
 8000978:	40010800 	.word	0x40010800
 800097c:	40011400 	.word	0x40011400
 8000980:	10110000 	.word	0x10110000
 8000984:	10210000 	.word	0x10210000
 8000988:	40011000 	.word	0x40011000

0800098c <LCD_WR_REG>:
//默认为竖屏
_lcd_dev lcddev;

//写寄存器函数
//data:寄存器值
void LCD_WR_REG(uint16_t data) {
 800098c:	b480      	push	{r7}
 800098e:	b083      	sub	sp, #12
 8000990:	af00      	add	r7, sp, #0
 8000992:	4603      	mov	r3, r0
 8000994:	80fb      	strh	r3, [r7, #6]
	LCD_RS_CLR;  //写地址
 8000996:	4b0d      	ldr	r3, [pc, #52]	; (80009cc <LCD_WR_REG+0x40>)
 8000998:	f44f 7280 	mov.w	r2, #256	; 0x100
 800099c:	615a      	str	r2, [r3, #20]
	LCD_CS_CLR;
 800099e:	4b0b      	ldr	r3, [pc, #44]	; (80009cc <LCD_WR_REG+0x40>)
 80009a0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80009a4:	615a      	str	r2, [r3, #20]
	DATAOUT(data);
 80009a6:	4a0a      	ldr	r2, [pc, #40]	; (80009d0 <LCD_WR_REG+0x44>)
 80009a8:	88fb      	ldrh	r3, [r7, #6]
 80009aa:	60d3      	str	r3, [r2, #12]
	LCD_WR_CLR;
 80009ac:	4b07      	ldr	r3, [pc, #28]	; (80009cc <LCD_WR_REG+0x40>)
 80009ae:	2280      	movs	r2, #128	; 0x80
 80009b0:	615a      	str	r2, [r3, #20]
	LCD_WR_SET;
 80009b2:	4b06      	ldr	r3, [pc, #24]	; (80009cc <LCD_WR_REG+0x40>)
 80009b4:	2280      	movs	r2, #128	; 0x80
 80009b6:	611a      	str	r2, [r3, #16]
	LCD_CS_SET;
 80009b8:	4b04      	ldr	r3, [pc, #16]	; (80009cc <LCD_WR_REG+0x40>)
 80009ba:	f44f 7200 	mov.w	r2, #512	; 0x200
 80009be:	611a      	str	r2, [r3, #16]
}
 80009c0:	bf00      	nop
 80009c2:	370c      	adds	r7, #12
 80009c4:	46bd      	mov	sp, r7
 80009c6:	bc80      	pop	{r7}
 80009c8:	4770      	bx	lr
 80009ca:	bf00      	nop
 80009cc:	40011000 	.word	0x40011000
 80009d0:	40010c00 	.word	0x40010c00

080009d4 <LCD_WR_DATAX>:
//写数据函数
//可以替代LCD_WR_DATAX宏,拿时间换空间.
//data:寄存器值
void LCD_WR_DATAX(uint16_t data) {
 80009d4:	b480      	push	{r7}
 80009d6:	b083      	sub	sp, #12
 80009d8:	af00      	add	r7, sp, #0
 80009da:	4603      	mov	r3, r0
 80009dc:	80fb      	strh	r3, [r7, #6]
	LCD_RS_SET;
 80009de:	4b0d      	ldr	r3, [pc, #52]	; (8000a14 <LCD_WR_DATAX+0x40>)
 80009e0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80009e4:	611a      	str	r2, [r3, #16]
	LCD_CS_CLR;
 80009e6:	4b0b      	ldr	r3, [pc, #44]	; (8000a14 <LCD_WR_DATAX+0x40>)
 80009e8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80009ec:	615a      	str	r2, [r3, #20]
	DATAOUT(data);
 80009ee:	4a0a      	ldr	r2, [pc, #40]	; (8000a18 <LCD_WR_DATAX+0x44>)
 80009f0:	88fb      	ldrh	r3, [r7, #6]
 80009f2:	60d3      	str	r3, [r2, #12]
	LCD_WR_CLR;
 80009f4:	4b07      	ldr	r3, [pc, #28]	; (8000a14 <LCD_WR_DATAX+0x40>)
 80009f6:	2280      	movs	r2, #128	; 0x80
 80009f8:	615a      	str	r2, [r3, #20]
	LCD_WR_SET;
 80009fa:	4b06      	ldr	r3, [pc, #24]	; (8000a14 <LCD_WR_DATAX+0x40>)
 80009fc:	2280      	movs	r2, #128	; 0x80
 80009fe:	611a      	str	r2, [r3, #16]
	LCD_CS_SET;
 8000a00:	4b04      	ldr	r3, [pc, #16]	; (8000a14 <LCD_WR_DATAX+0x40>)
 8000a02:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000a06:	611a      	str	r2, [r3, #16]
}
 8000a08:	bf00      	nop
 8000a0a:	370c      	adds	r7, #12
 8000a0c:	46bd      	mov	sp, r7
 8000a0e:	bc80      	pop	{r7}
 8000a10:	4770      	bx	lr
 8000a12:	bf00      	nop
 8000a14:	40011000 	.word	0x40011000
 8000a18:	40010c00 	.word	0x40010c00

08000a1c <LCD_RD_DATA>:
//读LCD数据
//返回值:读到的值
uint16_t LCD_RD_DATA(void) {
 8000a1c:	b580      	push	{r7, lr}
 8000a1e:	b082      	sub	sp, #8
 8000a20:	af00      	add	r7, sp, #0
	uint16_t t;
	GPIOB->CRL = 0X88888888; //PB0-7  上拉输入
 8000a22:	4b1d      	ldr	r3, [pc, #116]	; (8000a98 <LCD_RD_DATA+0x7c>)
 8000a24:	f04f 3288 	mov.w	r2, #2290649224	; 0x88888888
 8000a28:	601a      	str	r2, [r3, #0]
	GPIOB->CRH = 0X88888888; //PB8-15 上拉输入
 8000a2a:	4b1b      	ldr	r3, [pc, #108]	; (8000a98 <LCD_RD_DATA+0x7c>)
 8000a2c:	f04f 3288 	mov.w	r2, #2290649224	; 0x88888888
 8000a30:	605a      	str	r2, [r3, #4]
	GPIOB->ODR = 0X0000;     //全部输出0
 8000a32:	4b19      	ldr	r3, [pc, #100]	; (8000a98 <LCD_RD_DATA+0x7c>)
 8000a34:	2200      	movs	r2, #0
 8000a36:	60da      	str	r2, [r3, #12]

	LCD_RS_SET;
 8000a38:	4b18      	ldr	r3, [pc, #96]	; (8000a9c <LCD_RD_DATA+0x80>)
 8000a3a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000a3e:	611a      	str	r2, [r3, #16]
	LCD_CS_CLR;
 8000a40:	4b16      	ldr	r3, [pc, #88]	; (8000a9c <LCD_RD_DATA+0x80>)
 8000a42:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000a46:	615a      	str	r2, [r3, #20]
	//读取数据(读寄存器时,并不需要读2次)
	LCD_RD_CLR;
 8000a48:	4b14      	ldr	r3, [pc, #80]	; (8000a9c <LCD_RD_DATA+0x80>)
 8000a4a:	2240      	movs	r2, #64	; 0x40
 8000a4c:	615a      	str	r2, [r3, #20]
	if (lcddev.id == 0X8989)
 8000a4e:	4b14      	ldr	r3, [pc, #80]	; (8000aa0 <LCD_RD_DATA+0x84>)
 8000a50:	889b      	ldrh	r3, [r3, #4]
 8000a52:	f648 1289 	movw	r2, #35209	; 0x8989
 8000a56:	4293      	cmp	r3, r2
 8000a58:	d102      	bne.n	8000a60 <LCD_RD_DATA+0x44>
		HAL_Delay(1); // delay_us(2);//FOR 8989,延时2us
 8000a5a:	2001      	movs	r0, #1
 8000a5c:	f006 f890 	bl	8006b80 <HAL_Delay>
	t = DATAIN
 8000a60:	4b0d      	ldr	r3, [pc, #52]	; (8000a98 <LCD_RD_DATA+0x7c>)
 8000a62:	689b      	ldr	r3, [r3, #8]
 8000a64:	80fb      	strh	r3, [r7, #6]
	;
	LCD_RD_SET;
 8000a66:	4b0d      	ldr	r3, [pc, #52]	; (8000a9c <LCD_RD_DATA+0x80>)
 8000a68:	2240      	movs	r2, #64	; 0x40
 8000a6a:	611a      	str	r2, [r3, #16]
	LCD_CS_SET;
 8000a6c:	4b0b      	ldr	r3, [pc, #44]	; (8000a9c <LCD_RD_DATA+0x80>)
 8000a6e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000a72:	611a      	str	r2, [r3, #16]

	GPIOB->CRL = 0X33333333; //PB0-7  上拉输出
 8000a74:	4b08      	ldr	r3, [pc, #32]	; (8000a98 <LCD_RD_DATA+0x7c>)
 8000a76:	f04f 3233 	mov.w	r2, #858993459	; 0x33333333
 8000a7a:	601a      	str	r2, [r3, #0]
	GPIOB->CRH = 0X33333333; //PB8-15 上拉输出
 8000a7c:	4b06      	ldr	r3, [pc, #24]	; (8000a98 <LCD_RD_DATA+0x7c>)
 8000a7e:	f04f 3233 	mov.w	r2, #858993459	; 0x33333333
 8000a82:	605a      	str	r2, [r3, #4]
	GPIOB->ODR = 0XFFFF;    //全部输出高
 8000a84:	4b04      	ldr	r3, [pc, #16]	; (8000a98 <LCD_RD_DATA+0x7c>)
 8000a86:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000a8a:	60da      	str	r2, [r3, #12]
	return t;
 8000a8c:	88fb      	ldrh	r3, [r7, #6]
}
 8000a8e:	4618      	mov	r0, r3
 8000a90:	3708      	adds	r7, #8
 8000a92:	46bd      	mov	sp, r7
 8000a94:	bd80      	pop	{r7, pc}
 8000a96:	bf00      	nop
 8000a98:	40010c00 	.word	0x40010c00
 8000a9c:	40011000 	.word	0x40011000
 8000aa0:	20000080 	.word	0x20000080

08000aa4 <LCD_WriteReg>:
//写寄存器
//LCD_Reg:寄存器编号
//LCD_RegValue:要写入的值
void LCD_WriteReg(uint16_t LCD_Reg, uint16_t LCD_RegValue) {
 8000aa4:	b580      	push	{r7, lr}
 8000aa6:	b082      	sub	sp, #8
 8000aa8:	af00      	add	r7, sp, #0
 8000aaa:	4603      	mov	r3, r0
 8000aac:	460a      	mov	r2, r1
 8000aae:	80fb      	strh	r3, [r7, #6]
 8000ab0:	4613      	mov	r3, r2
 8000ab2:	80bb      	strh	r3, [r7, #4]
	LCD_WR_REG(LCD_Reg);
 8000ab4:	88fb      	ldrh	r3, [r7, #6]
 8000ab6:	4618      	mov	r0, r3
 8000ab8:	f7ff ff68 	bl	800098c <LCD_WR_REG>
	LCD_WR_DATA(LCD_RegValue);
 8000abc:	4b0c      	ldr	r3, [pc, #48]	; (8000af0 <LCD_WriteReg+0x4c>)
 8000abe:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000ac2:	611a      	str	r2, [r3, #16]
 8000ac4:	4b0a      	ldr	r3, [pc, #40]	; (8000af0 <LCD_WriteReg+0x4c>)
 8000ac6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000aca:	615a      	str	r2, [r3, #20]
 8000acc:	4a09      	ldr	r2, [pc, #36]	; (8000af4 <LCD_WriteReg+0x50>)
 8000ace:	88bb      	ldrh	r3, [r7, #4]
 8000ad0:	60d3      	str	r3, [r2, #12]
 8000ad2:	4b07      	ldr	r3, [pc, #28]	; (8000af0 <LCD_WriteReg+0x4c>)
 8000ad4:	2280      	movs	r2, #128	; 0x80
 8000ad6:	615a      	str	r2, [r3, #20]
 8000ad8:	4b05      	ldr	r3, [pc, #20]	; (8000af0 <LCD_WriteReg+0x4c>)
 8000ada:	2280      	movs	r2, #128	; 0x80
 8000adc:	611a      	str	r2, [r3, #16]
 8000ade:	4b04      	ldr	r3, [pc, #16]	; (8000af0 <LCD_WriteReg+0x4c>)
 8000ae0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000ae4:	611a      	str	r2, [r3, #16]
}
 8000ae6:	bf00      	nop
 8000ae8:	3708      	adds	r7, #8
 8000aea:	46bd      	mov	sp, r7
 8000aec:	bd80      	pop	{r7, pc}
 8000aee:	bf00      	nop
 8000af0:	40011000 	.word	0x40011000
 8000af4:	40010c00 	.word	0x40010c00

08000af8 <LCD_ReadReg>:
//读寄存器
//LCD_Reg:寄存器编号
//返回值:读到的值
uint16_t LCD_ReadReg(uint16_t LCD_Reg) {
 8000af8:	b580      	push	{r7, lr}
 8000afa:	b082      	sub	sp, #8
 8000afc:	af00      	add	r7, sp, #0
 8000afe:	4603      	mov	r3, r0
 8000b00:	80fb      	strh	r3, [r7, #6]
	LCD_WR_REG(LCD_Reg);  //写入要读的寄存器号
 8000b02:	88fb      	ldrh	r3, [r7, #6]
 8000b04:	4618      	mov	r0, r3
 8000b06:	f7ff ff41 	bl	800098c <LCD_WR_REG>
	return LCD_RD_DATA();
 8000b0a:	f7ff ff87 	bl	8000a1c <LCD_RD_DATA>
 8000b0e:	4603      	mov	r3, r0
}
 8000b10:	4618      	mov	r0, r3
 8000b12:	3708      	adds	r7, #8
 8000b14:	46bd      	mov	sp, r7
 8000b16:	bd80      	pop	{r7, pc}

08000b18 <LCD_WriteRAM_Prepare>:
//开始写GRAM
void LCD_WriteRAM_Prepare(void) {
 8000b18:	b580      	push	{r7, lr}
 8000b1a:	af00      	add	r7, sp, #0
	LCD_WR_REG(lcddev.wramcmd);
 8000b1c:	4b03      	ldr	r3, [pc, #12]	; (8000b2c <LCD_WriteRAM_Prepare+0x14>)
 8000b1e:	891b      	ldrh	r3, [r3, #8]
 8000b20:	4618      	mov	r0, r3
 8000b22:	f7ff ff33 	bl	800098c <LCD_WR_REG>
}
 8000b26:	bf00      	nop
 8000b28:	bd80      	pop	{r7, pc}
 8000b2a:	bf00      	nop
 8000b2c:	20000080 	.word	0x20000080

08000b30 <LCD_SetCursor>:
		LCD_WriteReg(0X07, 0x0);	//关闭显示
}
//设置光标位置
//Xpos:横坐标
//Ypos:纵坐标
void LCD_SetCursor(uint16_t Xpos, uint16_t Ypos) {
 8000b30:	b580      	push	{r7, lr}
 8000b32:	b082      	sub	sp, #8
 8000b34:	af00      	add	r7, sp, #0
 8000b36:	4603      	mov	r3, r0
 8000b38:	460a      	mov	r2, r1
 8000b3a:	80fb      	strh	r3, [r7, #6]
 8000b3c:	4613      	mov	r3, r2
 8000b3e:	80bb      	strh	r3, [r7, #4]
	if (lcddev.id == 0X9341 || lcddev.id == 0X5310) {
 8000b40:	4b73      	ldr	r3, [pc, #460]	; (8000d10 <LCD_SetCursor+0x1e0>)
 8000b42:	889b      	ldrh	r3, [r3, #4]
 8000b44:	f249 3241 	movw	r2, #37697	; 0x9341
 8000b48:	4293      	cmp	r3, r2
 8000b4a:	d005      	beq.n	8000b58 <LCD_SetCursor+0x28>
 8000b4c:	4b70      	ldr	r3, [pc, #448]	; (8000d10 <LCD_SetCursor+0x1e0>)
 8000b4e:	889b      	ldrh	r3, [r3, #4]
 8000b50:	f245 3210 	movw	r2, #21264	; 0x5310
 8000b54:	4293      	cmp	r3, r2
 8000b56:	d164      	bne.n	8000c22 <LCD_SetCursor+0xf2>
		LCD_WR_REG(lcddev.setxcmd);
 8000b58:	4b6d      	ldr	r3, [pc, #436]	; (8000d10 <LCD_SetCursor+0x1e0>)
 8000b5a:	895b      	ldrh	r3, [r3, #10]
 8000b5c:	4618      	mov	r0, r3
 8000b5e:	f7ff ff15 	bl	800098c <LCD_WR_REG>
		LCD_WR_DATA(Xpos >> 8);
 8000b62:	4b6c      	ldr	r3, [pc, #432]	; (8000d14 <LCD_SetCursor+0x1e4>)
 8000b64:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000b68:	611a      	str	r2, [r3, #16]
 8000b6a:	4b6a      	ldr	r3, [pc, #424]	; (8000d14 <LCD_SetCursor+0x1e4>)
 8000b6c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000b70:	615a      	str	r2, [r3, #20]
 8000b72:	88fb      	ldrh	r3, [r7, #6]
 8000b74:	0a1b      	lsrs	r3, r3, #8
 8000b76:	b29a      	uxth	r2, r3
 8000b78:	4b67      	ldr	r3, [pc, #412]	; (8000d18 <LCD_SetCursor+0x1e8>)
 8000b7a:	60da      	str	r2, [r3, #12]
 8000b7c:	4b65      	ldr	r3, [pc, #404]	; (8000d14 <LCD_SetCursor+0x1e4>)
 8000b7e:	2280      	movs	r2, #128	; 0x80
 8000b80:	615a      	str	r2, [r3, #20]
 8000b82:	4b64      	ldr	r3, [pc, #400]	; (8000d14 <LCD_SetCursor+0x1e4>)
 8000b84:	2280      	movs	r2, #128	; 0x80
 8000b86:	611a      	str	r2, [r3, #16]
 8000b88:	4b62      	ldr	r3, [pc, #392]	; (8000d14 <LCD_SetCursor+0x1e4>)
 8000b8a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000b8e:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(Xpos & 0XFF);
 8000b90:	4b60      	ldr	r3, [pc, #384]	; (8000d14 <LCD_SetCursor+0x1e4>)
 8000b92:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000b96:	611a      	str	r2, [r3, #16]
 8000b98:	4b5e      	ldr	r3, [pc, #376]	; (8000d14 <LCD_SetCursor+0x1e4>)
 8000b9a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000b9e:	615a      	str	r2, [r3, #20]
 8000ba0:	88fb      	ldrh	r3, [r7, #6]
 8000ba2:	4a5d      	ldr	r2, [pc, #372]	; (8000d18 <LCD_SetCursor+0x1e8>)
 8000ba4:	b2db      	uxtb	r3, r3
 8000ba6:	60d3      	str	r3, [r2, #12]
 8000ba8:	4b5a      	ldr	r3, [pc, #360]	; (8000d14 <LCD_SetCursor+0x1e4>)
 8000baa:	2280      	movs	r2, #128	; 0x80
 8000bac:	615a      	str	r2, [r3, #20]
 8000bae:	4b59      	ldr	r3, [pc, #356]	; (8000d14 <LCD_SetCursor+0x1e4>)
 8000bb0:	2280      	movs	r2, #128	; 0x80
 8000bb2:	611a      	str	r2, [r3, #16]
 8000bb4:	4b57      	ldr	r3, [pc, #348]	; (8000d14 <LCD_SetCursor+0x1e4>)
 8000bb6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000bba:	611a      	str	r2, [r3, #16]
		LCD_WR_REG(lcddev.setycmd);
 8000bbc:	4b54      	ldr	r3, [pc, #336]	; (8000d10 <LCD_SetCursor+0x1e0>)
 8000bbe:	899b      	ldrh	r3, [r3, #12]
 8000bc0:	4618      	mov	r0, r3
 8000bc2:	f7ff fee3 	bl	800098c <LCD_WR_REG>
		LCD_WR_DATA(Ypos >> 8);
 8000bc6:	4b53      	ldr	r3, [pc, #332]	; (8000d14 <LCD_SetCursor+0x1e4>)
 8000bc8:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000bcc:	611a      	str	r2, [r3, #16]
 8000bce:	4b51      	ldr	r3, [pc, #324]	; (8000d14 <LCD_SetCursor+0x1e4>)
 8000bd0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000bd4:	615a      	str	r2, [r3, #20]
 8000bd6:	88bb      	ldrh	r3, [r7, #4]
 8000bd8:	0a1b      	lsrs	r3, r3, #8
 8000bda:	b29a      	uxth	r2, r3
 8000bdc:	4b4e      	ldr	r3, [pc, #312]	; (8000d18 <LCD_SetCursor+0x1e8>)
 8000bde:	60da      	str	r2, [r3, #12]
 8000be0:	4b4c      	ldr	r3, [pc, #304]	; (8000d14 <LCD_SetCursor+0x1e4>)
 8000be2:	2280      	movs	r2, #128	; 0x80
 8000be4:	615a      	str	r2, [r3, #20]
 8000be6:	4b4b      	ldr	r3, [pc, #300]	; (8000d14 <LCD_SetCursor+0x1e4>)
 8000be8:	2280      	movs	r2, #128	; 0x80
 8000bea:	611a      	str	r2, [r3, #16]
 8000bec:	4b49      	ldr	r3, [pc, #292]	; (8000d14 <LCD_SetCursor+0x1e4>)
 8000bee:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000bf2:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(Ypos & 0XFF);
 8000bf4:	4b47      	ldr	r3, [pc, #284]	; (8000d14 <LCD_SetCursor+0x1e4>)
 8000bf6:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000bfa:	611a      	str	r2, [r3, #16]
 8000bfc:	4b45      	ldr	r3, [pc, #276]	; (8000d14 <LCD_SetCursor+0x1e4>)
 8000bfe:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000c02:	615a      	str	r2, [r3, #20]
 8000c04:	88bb      	ldrh	r3, [r7, #4]
 8000c06:	4a44      	ldr	r2, [pc, #272]	; (8000d18 <LCD_SetCursor+0x1e8>)
 8000c08:	b2db      	uxtb	r3, r3
 8000c0a:	60d3      	str	r3, [r2, #12]
 8000c0c:	4b41      	ldr	r3, [pc, #260]	; (8000d14 <LCD_SetCursor+0x1e4>)
 8000c0e:	2280      	movs	r2, #128	; 0x80
 8000c10:	615a      	str	r2, [r3, #20]
 8000c12:	4b40      	ldr	r3, [pc, #256]	; (8000d14 <LCD_SetCursor+0x1e4>)
 8000c14:	2280      	movs	r2, #128	; 0x80
 8000c16:	611a      	str	r2, [r3, #16]
 8000c18:	4b3e      	ldr	r3, [pc, #248]	; (8000d14 <LCD_SetCursor+0x1e4>)
 8000c1a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000c1e:	611a      	str	r2, [r3, #16]
		if (lcddev.dir == 1)
			Xpos = lcddev.width - 1 - Xpos;	//横屏其实就是调转x,y坐标
		LCD_WriteReg(lcddev.setxcmd, Xpos);
		LCD_WriteReg(lcddev.setycmd, Ypos);
	}
}
 8000c20:	e248      	b.n	80010b4 <LCD_SetCursor+0x584>
	} else if (lcddev.id == 0X6804) {
 8000c22:	4b3b      	ldr	r3, [pc, #236]	; (8000d10 <LCD_SetCursor+0x1e0>)
 8000c24:	889b      	ldrh	r3, [r3, #4]
 8000c26:	f646 0204 	movw	r2, #26628	; 0x6804
 8000c2a:	4293      	cmp	r3, r2
 8000c2c:	d176      	bne.n	8000d1c <LCD_SetCursor+0x1ec>
		if (lcddev.dir == 1)
 8000c2e:	4b38      	ldr	r3, [pc, #224]	; (8000d10 <LCD_SetCursor+0x1e0>)
 8000c30:	799b      	ldrb	r3, [r3, #6]
 8000c32:	2b01      	cmp	r3, #1
 8000c34:	d106      	bne.n	8000c44 <LCD_SetCursor+0x114>
			Xpos = lcddev.width - 1 - Xpos;	//横屏时处理
 8000c36:	4b36      	ldr	r3, [pc, #216]	; (8000d10 <LCD_SetCursor+0x1e0>)
 8000c38:	881a      	ldrh	r2, [r3, #0]
 8000c3a:	88fb      	ldrh	r3, [r7, #6]
 8000c3c:	1ad3      	subs	r3, r2, r3
 8000c3e:	b29b      	uxth	r3, r3
 8000c40:	3b01      	subs	r3, #1
 8000c42:	80fb      	strh	r3, [r7, #6]
		LCD_WR_REG(lcddev.setxcmd);
 8000c44:	4b32      	ldr	r3, [pc, #200]	; (8000d10 <LCD_SetCursor+0x1e0>)
 8000c46:	895b      	ldrh	r3, [r3, #10]
 8000c48:	4618      	mov	r0, r3
 8000c4a:	f7ff fe9f 	bl	800098c <LCD_WR_REG>
		LCD_WR_DATA(Xpos >> 8);
 8000c4e:	4b31      	ldr	r3, [pc, #196]	; (8000d14 <LCD_SetCursor+0x1e4>)
 8000c50:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000c54:	611a      	str	r2, [r3, #16]
 8000c56:	4b2f      	ldr	r3, [pc, #188]	; (8000d14 <LCD_SetCursor+0x1e4>)
 8000c58:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000c5c:	615a      	str	r2, [r3, #20]
 8000c5e:	88fb      	ldrh	r3, [r7, #6]
 8000c60:	0a1b      	lsrs	r3, r3, #8
 8000c62:	b29a      	uxth	r2, r3
 8000c64:	4b2c      	ldr	r3, [pc, #176]	; (8000d18 <LCD_SetCursor+0x1e8>)
 8000c66:	60da      	str	r2, [r3, #12]
 8000c68:	4b2a      	ldr	r3, [pc, #168]	; (8000d14 <LCD_SetCursor+0x1e4>)
 8000c6a:	2280      	movs	r2, #128	; 0x80
 8000c6c:	615a      	str	r2, [r3, #20]
 8000c6e:	4b29      	ldr	r3, [pc, #164]	; (8000d14 <LCD_SetCursor+0x1e4>)
 8000c70:	2280      	movs	r2, #128	; 0x80
 8000c72:	611a      	str	r2, [r3, #16]
 8000c74:	4b27      	ldr	r3, [pc, #156]	; (8000d14 <LCD_SetCursor+0x1e4>)
 8000c76:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000c7a:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(Xpos & 0XFF);
 8000c7c:	4b25      	ldr	r3, [pc, #148]	; (8000d14 <LCD_SetCursor+0x1e4>)
 8000c7e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000c82:	611a      	str	r2, [r3, #16]
 8000c84:	4b23      	ldr	r3, [pc, #140]	; (8000d14 <LCD_SetCursor+0x1e4>)
 8000c86:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000c8a:	615a      	str	r2, [r3, #20]
 8000c8c:	88fb      	ldrh	r3, [r7, #6]
 8000c8e:	4a22      	ldr	r2, [pc, #136]	; (8000d18 <LCD_SetCursor+0x1e8>)
 8000c90:	b2db      	uxtb	r3, r3
 8000c92:	60d3      	str	r3, [r2, #12]
 8000c94:	4b1f      	ldr	r3, [pc, #124]	; (8000d14 <LCD_SetCursor+0x1e4>)
 8000c96:	2280      	movs	r2, #128	; 0x80
 8000c98:	615a      	str	r2, [r3, #20]
 8000c9a:	4b1e      	ldr	r3, [pc, #120]	; (8000d14 <LCD_SetCursor+0x1e4>)
 8000c9c:	2280      	movs	r2, #128	; 0x80
 8000c9e:	611a      	str	r2, [r3, #16]
 8000ca0:	4b1c      	ldr	r3, [pc, #112]	; (8000d14 <LCD_SetCursor+0x1e4>)
 8000ca2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000ca6:	611a      	str	r2, [r3, #16]
		LCD_WR_REG(lcddev.setycmd);
 8000ca8:	4b19      	ldr	r3, [pc, #100]	; (8000d10 <LCD_SetCursor+0x1e0>)
 8000caa:	899b      	ldrh	r3, [r3, #12]
 8000cac:	4618      	mov	r0, r3
 8000cae:	f7ff fe6d 	bl	800098c <LCD_WR_REG>
		LCD_WR_DATA(Ypos >> 8);
 8000cb2:	4b18      	ldr	r3, [pc, #96]	; (8000d14 <LCD_SetCursor+0x1e4>)
 8000cb4:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000cb8:	611a      	str	r2, [r3, #16]
 8000cba:	4b16      	ldr	r3, [pc, #88]	; (8000d14 <LCD_SetCursor+0x1e4>)
 8000cbc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000cc0:	615a      	str	r2, [r3, #20]
 8000cc2:	88bb      	ldrh	r3, [r7, #4]
 8000cc4:	0a1b      	lsrs	r3, r3, #8
 8000cc6:	b29a      	uxth	r2, r3
 8000cc8:	4b13      	ldr	r3, [pc, #76]	; (8000d18 <LCD_SetCursor+0x1e8>)
 8000cca:	60da      	str	r2, [r3, #12]
 8000ccc:	4b11      	ldr	r3, [pc, #68]	; (8000d14 <LCD_SetCursor+0x1e4>)
 8000cce:	2280      	movs	r2, #128	; 0x80
 8000cd0:	615a      	str	r2, [r3, #20]
 8000cd2:	4b10      	ldr	r3, [pc, #64]	; (8000d14 <LCD_SetCursor+0x1e4>)
 8000cd4:	2280      	movs	r2, #128	; 0x80
 8000cd6:	611a      	str	r2, [r3, #16]
 8000cd8:	4b0e      	ldr	r3, [pc, #56]	; (8000d14 <LCD_SetCursor+0x1e4>)
 8000cda:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000cde:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(Ypos & 0XFF);
 8000ce0:	4b0c      	ldr	r3, [pc, #48]	; (8000d14 <LCD_SetCursor+0x1e4>)
 8000ce2:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000ce6:	611a      	str	r2, [r3, #16]
 8000ce8:	4b0a      	ldr	r3, [pc, #40]	; (8000d14 <LCD_SetCursor+0x1e4>)
 8000cea:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000cee:	615a      	str	r2, [r3, #20]
 8000cf0:	88bb      	ldrh	r3, [r7, #4]
 8000cf2:	4a09      	ldr	r2, [pc, #36]	; (8000d18 <LCD_SetCursor+0x1e8>)
 8000cf4:	b2db      	uxtb	r3, r3
 8000cf6:	60d3      	str	r3, [r2, #12]
 8000cf8:	4b06      	ldr	r3, [pc, #24]	; (8000d14 <LCD_SetCursor+0x1e4>)
 8000cfa:	2280      	movs	r2, #128	; 0x80
 8000cfc:	615a      	str	r2, [r3, #20]
 8000cfe:	4b05      	ldr	r3, [pc, #20]	; (8000d14 <LCD_SetCursor+0x1e4>)
 8000d00:	2280      	movs	r2, #128	; 0x80
 8000d02:	611a      	str	r2, [r3, #16]
 8000d04:	4b03      	ldr	r3, [pc, #12]	; (8000d14 <LCD_SetCursor+0x1e4>)
 8000d06:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000d0a:	611a      	str	r2, [r3, #16]
}
 8000d0c:	e1d2      	b.n	80010b4 <LCD_SetCursor+0x584>
 8000d0e:	bf00      	nop
 8000d10:	20000080 	.word	0x20000080
 8000d14:	40011000 	.word	0x40011000
 8000d18:	40010c00 	.word	0x40010c00
	} else if (lcddev.id == 0X1963) {
 8000d1c:	4b99      	ldr	r3, [pc, #612]	; (8000f84 <LCD_SetCursor+0x454>)
 8000d1e:	889b      	ldrh	r3, [r3, #4]
 8000d20:	f641 1263 	movw	r2, #6499	; 0x1963
 8000d24:	4293      	cmp	r3, r2
 8000d26:	f040 8133 	bne.w	8000f90 <LCD_SetCursor+0x460>
		if (lcddev.dir == 0)	//x坐标需要变换
 8000d2a:	4b96      	ldr	r3, [pc, #600]	; (8000f84 <LCD_SetCursor+0x454>)
 8000d2c:	799b      	ldrb	r3, [r3, #6]
 8000d2e:	2b00      	cmp	r3, #0
 8000d30:	d163      	bne.n	8000dfa <LCD_SetCursor+0x2ca>
			Xpos = lcddev.width - 1 - Xpos;
 8000d32:	4b94      	ldr	r3, [pc, #592]	; (8000f84 <LCD_SetCursor+0x454>)
 8000d34:	881a      	ldrh	r2, [r3, #0]
 8000d36:	88fb      	ldrh	r3, [r7, #6]
 8000d38:	1ad3      	subs	r3, r2, r3
 8000d3a:	b29b      	uxth	r3, r3
 8000d3c:	3b01      	subs	r3, #1
 8000d3e:	80fb      	strh	r3, [r7, #6]
			LCD_WR_REG(lcddev.setxcmd);
 8000d40:	4b90      	ldr	r3, [pc, #576]	; (8000f84 <LCD_SetCursor+0x454>)
 8000d42:	895b      	ldrh	r3, [r3, #10]
 8000d44:	4618      	mov	r0, r3
 8000d46:	f7ff fe21 	bl	800098c <LCD_WR_REG>
			LCD_WR_DATA(0);
 8000d4a:	4b8f      	ldr	r3, [pc, #572]	; (8000f88 <LCD_SetCursor+0x458>)
 8000d4c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000d50:	611a      	str	r2, [r3, #16]
 8000d52:	4b8d      	ldr	r3, [pc, #564]	; (8000f88 <LCD_SetCursor+0x458>)
 8000d54:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000d58:	615a      	str	r2, [r3, #20]
 8000d5a:	4b8c      	ldr	r3, [pc, #560]	; (8000f8c <LCD_SetCursor+0x45c>)
 8000d5c:	2200      	movs	r2, #0
 8000d5e:	60da      	str	r2, [r3, #12]
 8000d60:	4b89      	ldr	r3, [pc, #548]	; (8000f88 <LCD_SetCursor+0x458>)
 8000d62:	2280      	movs	r2, #128	; 0x80
 8000d64:	615a      	str	r2, [r3, #20]
 8000d66:	4b88      	ldr	r3, [pc, #544]	; (8000f88 <LCD_SetCursor+0x458>)
 8000d68:	2280      	movs	r2, #128	; 0x80
 8000d6a:	611a      	str	r2, [r3, #16]
 8000d6c:	4b86      	ldr	r3, [pc, #536]	; (8000f88 <LCD_SetCursor+0x458>)
 8000d6e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000d72:	611a      	str	r2, [r3, #16]
			LCD_WR_DATA(0);
 8000d74:	4b84      	ldr	r3, [pc, #528]	; (8000f88 <LCD_SetCursor+0x458>)
 8000d76:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000d7a:	611a      	str	r2, [r3, #16]
 8000d7c:	4b82      	ldr	r3, [pc, #520]	; (8000f88 <LCD_SetCursor+0x458>)
 8000d7e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000d82:	615a      	str	r2, [r3, #20]
 8000d84:	4b81      	ldr	r3, [pc, #516]	; (8000f8c <LCD_SetCursor+0x45c>)
 8000d86:	2200      	movs	r2, #0
 8000d88:	60da      	str	r2, [r3, #12]
 8000d8a:	4b7f      	ldr	r3, [pc, #508]	; (8000f88 <LCD_SetCursor+0x458>)
 8000d8c:	2280      	movs	r2, #128	; 0x80
 8000d8e:	615a      	str	r2, [r3, #20]
 8000d90:	4b7d      	ldr	r3, [pc, #500]	; (8000f88 <LCD_SetCursor+0x458>)
 8000d92:	2280      	movs	r2, #128	; 0x80
 8000d94:	611a      	str	r2, [r3, #16]
 8000d96:	4b7c      	ldr	r3, [pc, #496]	; (8000f88 <LCD_SetCursor+0x458>)
 8000d98:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000d9c:	611a      	str	r2, [r3, #16]
			LCD_WR_DATA(Xpos >> 8);
 8000d9e:	4b7a      	ldr	r3, [pc, #488]	; (8000f88 <LCD_SetCursor+0x458>)
 8000da0:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000da4:	611a      	str	r2, [r3, #16]
 8000da6:	4b78      	ldr	r3, [pc, #480]	; (8000f88 <LCD_SetCursor+0x458>)
 8000da8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000dac:	615a      	str	r2, [r3, #20]
 8000dae:	88fb      	ldrh	r3, [r7, #6]
 8000db0:	0a1b      	lsrs	r3, r3, #8
 8000db2:	b29a      	uxth	r2, r3
 8000db4:	4b75      	ldr	r3, [pc, #468]	; (8000f8c <LCD_SetCursor+0x45c>)
 8000db6:	60da      	str	r2, [r3, #12]
 8000db8:	4b73      	ldr	r3, [pc, #460]	; (8000f88 <LCD_SetCursor+0x458>)
 8000dba:	2280      	movs	r2, #128	; 0x80
 8000dbc:	615a      	str	r2, [r3, #20]
 8000dbe:	4b72      	ldr	r3, [pc, #456]	; (8000f88 <LCD_SetCursor+0x458>)
 8000dc0:	2280      	movs	r2, #128	; 0x80
 8000dc2:	611a      	str	r2, [r3, #16]
 8000dc4:	4b70      	ldr	r3, [pc, #448]	; (8000f88 <LCD_SetCursor+0x458>)
 8000dc6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000dca:	611a      	str	r2, [r3, #16]
			LCD_WR_DATA(Xpos & 0XFF);
 8000dcc:	4b6e      	ldr	r3, [pc, #440]	; (8000f88 <LCD_SetCursor+0x458>)
 8000dce:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000dd2:	611a      	str	r2, [r3, #16]
 8000dd4:	4b6c      	ldr	r3, [pc, #432]	; (8000f88 <LCD_SetCursor+0x458>)
 8000dd6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000dda:	615a      	str	r2, [r3, #20]
 8000ddc:	88fb      	ldrh	r3, [r7, #6]
 8000dde:	4a6b      	ldr	r2, [pc, #428]	; (8000f8c <LCD_SetCursor+0x45c>)
 8000de0:	b2db      	uxtb	r3, r3
 8000de2:	60d3      	str	r3, [r2, #12]
 8000de4:	4b68      	ldr	r3, [pc, #416]	; (8000f88 <LCD_SetCursor+0x458>)
 8000de6:	2280      	movs	r2, #128	; 0x80
 8000de8:	615a      	str	r2, [r3, #20]
 8000dea:	4b67      	ldr	r3, [pc, #412]	; (8000f88 <LCD_SetCursor+0x458>)
 8000dec:	2280      	movs	r2, #128	; 0x80
 8000dee:	611a      	str	r2, [r3, #16]
 8000df0:	4b65      	ldr	r3, [pc, #404]	; (8000f88 <LCD_SetCursor+0x458>)
 8000df2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000df6:	611a      	str	r2, [r3, #16]
 8000df8:	e061      	b.n	8000ebe <LCD_SetCursor+0x38e>
			LCD_WR_REG(lcddev.setxcmd);
 8000dfa:	4b62      	ldr	r3, [pc, #392]	; (8000f84 <LCD_SetCursor+0x454>)
 8000dfc:	895b      	ldrh	r3, [r3, #10]
 8000dfe:	4618      	mov	r0, r3
 8000e00:	f7ff fdc4 	bl	800098c <LCD_WR_REG>
			LCD_WR_DATA(Xpos >> 8);
 8000e04:	4b60      	ldr	r3, [pc, #384]	; (8000f88 <LCD_SetCursor+0x458>)
 8000e06:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000e0a:	611a      	str	r2, [r3, #16]
 8000e0c:	4b5e      	ldr	r3, [pc, #376]	; (8000f88 <LCD_SetCursor+0x458>)
 8000e0e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000e12:	615a      	str	r2, [r3, #20]
 8000e14:	88fb      	ldrh	r3, [r7, #6]
 8000e16:	0a1b      	lsrs	r3, r3, #8
 8000e18:	b29a      	uxth	r2, r3
 8000e1a:	4b5c      	ldr	r3, [pc, #368]	; (8000f8c <LCD_SetCursor+0x45c>)
 8000e1c:	60da      	str	r2, [r3, #12]
 8000e1e:	4b5a      	ldr	r3, [pc, #360]	; (8000f88 <LCD_SetCursor+0x458>)
 8000e20:	2280      	movs	r2, #128	; 0x80
 8000e22:	615a      	str	r2, [r3, #20]
 8000e24:	4b58      	ldr	r3, [pc, #352]	; (8000f88 <LCD_SetCursor+0x458>)
 8000e26:	2280      	movs	r2, #128	; 0x80
 8000e28:	611a      	str	r2, [r3, #16]
 8000e2a:	4b57      	ldr	r3, [pc, #348]	; (8000f88 <LCD_SetCursor+0x458>)
 8000e2c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000e30:	611a      	str	r2, [r3, #16]
			LCD_WR_DATA(Xpos & 0XFF);
 8000e32:	4b55      	ldr	r3, [pc, #340]	; (8000f88 <LCD_SetCursor+0x458>)
 8000e34:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000e38:	611a      	str	r2, [r3, #16]
 8000e3a:	4b53      	ldr	r3, [pc, #332]	; (8000f88 <LCD_SetCursor+0x458>)
 8000e3c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000e40:	615a      	str	r2, [r3, #20]
 8000e42:	88fb      	ldrh	r3, [r7, #6]
 8000e44:	4a51      	ldr	r2, [pc, #324]	; (8000f8c <LCD_SetCursor+0x45c>)
 8000e46:	b2db      	uxtb	r3, r3
 8000e48:	60d3      	str	r3, [r2, #12]
 8000e4a:	4b4f      	ldr	r3, [pc, #316]	; (8000f88 <LCD_SetCursor+0x458>)
 8000e4c:	2280      	movs	r2, #128	; 0x80
 8000e4e:	615a      	str	r2, [r3, #20]
 8000e50:	4b4d      	ldr	r3, [pc, #308]	; (8000f88 <LCD_SetCursor+0x458>)
 8000e52:	2280      	movs	r2, #128	; 0x80
 8000e54:	611a      	str	r2, [r3, #16]
 8000e56:	4b4c      	ldr	r3, [pc, #304]	; (8000f88 <LCD_SetCursor+0x458>)
 8000e58:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000e5c:	611a      	str	r2, [r3, #16]
			LCD_WR_DATA((lcddev.width - 1) >> 8);
 8000e5e:	4b4a      	ldr	r3, [pc, #296]	; (8000f88 <LCD_SetCursor+0x458>)
 8000e60:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000e64:	611a      	str	r2, [r3, #16]
 8000e66:	4b48      	ldr	r3, [pc, #288]	; (8000f88 <LCD_SetCursor+0x458>)
 8000e68:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000e6c:	615a      	str	r2, [r3, #20]
 8000e6e:	4b45      	ldr	r3, [pc, #276]	; (8000f84 <LCD_SetCursor+0x454>)
 8000e70:	881b      	ldrh	r3, [r3, #0]
 8000e72:	3b01      	subs	r3, #1
 8000e74:	121a      	asrs	r2, r3, #8
 8000e76:	4b45      	ldr	r3, [pc, #276]	; (8000f8c <LCD_SetCursor+0x45c>)
 8000e78:	60da      	str	r2, [r3, #12]
 8000e7a:	4b43      	ldr	r3, [pc, #268]	; (8000f88 <LCD_SetCursor+0x458>)
 8000e7c:	2280      	movs	r2, #128	; 0x80
 8000e7e:	615a      	str	r2, [r3, #20]
 8000e80:	4b41      	ldr	r3, [pc, #260]	; (8000f88 <LCD_SetCursor+0x458>)
 8000e82:	2280      	movs	r2, #128	; 0x80
 8000e84:	611a      	str	r2, [r3, #16]
 8000e86:	4b40      	ldr	r3, [pc, #256]	; (8000f88 <LCD_SetCursor+0x458>)
 8000e88:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000e8c:	611a      	str	r2, [r3, #16]
			LCD_WR_DATA((lcddev.width - 1) & 0XFF);
 8000e8e:	4b3e      	ldr	r3, [pc, #248]	; (8000f88 <LCD_SetCursor+0x458>)
 8000e90:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000e94:	611a      	str	r2, [r3, #16]
 8000e96:	4b3c      	ldr	r3, [pc, #240]	; (8000f88 <LCD_SetCursor+0x458>)
 8000e98:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000e9c:	615a      	str	r2, [r3, #20]
 8000e9e:	4b39      	ldr	r3, [pc, #228]	; (8000f84 <LCD_SetCursor+0x454>)
 8000ea0:	881b      	ldrh	r3, [r3, #0]
 8000ea2:	3b01      	subs	r3, #1
 8000ea4:	4a39      	ldr	r2, [pc, #228]	; (8000f8c <LCD_SetCursor+0x45c>)
 8000ea6:	b2db      	uxtb	r3, r3
 8000ea8:	60d3      	str	r3, [r2, #12]
 8000eaa:	4b37      	ldr	r3, [pc, #220]	; (8000f88 <LCD_SetCursor+0x458>)
 8000eac:	2280      	movs	r2, #128	; 0x80
 8000eae:	615a      	str	r2, [r3, #20]
 8000eb0:	4b35      	ldr	r3, [pc, #212]	; (8000f88 <LCD_SetCursor+0x458>)
 8000eb2:	2280      	movs	r2, #128	; 0x80
 8000eb4:	611a      	str	r2, [r3, #16]
 8000eb6:	4b34      	ldr	r3, [pc, #208]	; (8000f88 <LCD_SetCursor+0x458>)
 8000eb8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000ebc:	611a      	str	r2, [r3, #16]
		LCD_WR_REG(lcddev.setycmd);
 8000ebe:	4b31      	ldr	r3, [pc, #196]	; (8000f84 <LCD_SetCursor+0x454>)
 8000ec0:	899b      	ldrh	r3, [r3, #12]
 8000ec2:	4618      	mov	r0, r3
 8000ec4:	f7ff fd62 	bl	800098c <LCD_WR_REG>
		LCD_WR_DATA(Ypos >> 8);
 8000ec8:	4b2f      	ldr	r3, [pc, #188]	; (8000f88 <LCD_SetCursor+0x458>)
 8000eca:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000ece:	611a      	str	r2, [r3, #16]
 8000ed0:	4b2d      	ldr	r3, [pc, #180]	; (8000f88 <LCD_SetCursor+0x458>)
 8000ed2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000ed6:	615a      	str	r2, [r3, #20]
 8000ed8:	88bb      	ldrh	r3, [r7, #4]
 8000eda:	0a1b      	lsrs	r3, r3, #8
 8000edc:	b29a      	uxth	r2, r3
 8000ede:	4b2b      	ldr	r3, [pc, #172]	; (8000f8c <LCD_SetCursor+0x45c>)
 8000ee0:	60da      	str	r2, [r3, #12]
 8000ee2:	4b29      	ldr	r3, [pc, #164]	; (8000f88 <LCD_SetCursor+0x458>)
 8000ee4:	2280      	movs	r2, #128	; 0x80
 8000ee6:	615a      	str	r2, [r3, #20]
 8000ee8:	4b27      	ldr	r3, [pc, #156]	; (8000f88 <LCD_SetCursor+0x458>)
 8000eea:	2280      	movs	r2, #128	; 0x80
 8000eec:	611a      	str	r2, [r3, #16]
 8000eee:	4b26      	ldr	r3, [pc, #152]	; (8000f88 <LCD_SetCursor+0x458>)
 8000ef0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000ef4:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(Ypos & 0XFF);
 8000ef6:	4b24      	ldr	r3, [pc, #144]	; (8000f88 <LCD_SetCursor+0x458>)
 8000ef8:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000efc:	611a      	str	r2, [r3, #16]
 8000efe:	4b22      	ldr	r3, [pc, #136]	; (8000f88 <LCD_SetCursor+0x458>)
 8000f00:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000f04:	615a      	str	r2, [r3, #20]
 8000f06:	88bb      	ldrh	r3, [r7, #4]
 8000f08:	4a20      	ldr	r2, [pc, #128]	; (8000f8c <LCD_SetCursor+0x45c>)
 8000f0a:	b2db      	uxtb	r3, r3
 8000f0c:	60d3      	str	r3, [r2, #12]
 8000f0e:	4b1e      	ldr	r3, [pc, #120]	; (8000f88 <LCD_SetCursor+0x458>)
 8000f10:	2280      	movs	r2, #128	; 0x80
 8000f12:	615a      	str	r2, [r3, #20]
 8000f14:	4b1c      	ldr	r3, [pc, #112]	; (8000f88 <LCD_SetCursor+0x458>)
 8000f16:	2280      	movs	r2, #128	; 0x80
 8000f18:	611a      	str	r2, [r3, #16]
 8000f1a:	4b1b      	ldr	r3, [pc, #108]	; (8000f88 <LCD_SetCursor+0x458>)
 8000f1c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000f20:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA((lcddev.height - 1) >> 8);
 8000f22:	4b19      	ldr	r3, [pc, #100]	; (8000f88 <LCD_SetCursor+0x458>)
 8000f24:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000f28:	611a      	str	r2, [r3, #16]
 8000f2a:	4b17      	ldr	r3, [pc, #92]	; (8000f88 <LCD_SetCursor+0x458>)
 8000f2c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000f30:	615a      	str	r2, [r3, #20]
 8000f32:	4b14      	ldr	r3, [pc, #80]	; (8000f84 <LCD_SetCursor+0x454>)
 8000f34:	885b      	ldrh	r3, [r3, #2]
 8000f36:	3b01      	subs	r3, #1
 8000f38:	121a      	asrs	r2, r3, #8
 8000f3a:	4b14      	ldr	r3, [pc, #80]	; (8000f8c <LCD_SetCursor+0x45c>)
 8000f3c:	60da      	str	r2, [r3, #12]
 8000f3e:	4b12      	ldr	r3, [pc, #72]	; (8000f88 <LCD_SetCursor+0x458>)
 8000f40:	2280      	movs	r2, #128	; 0x80
 8000f42:	615a      	str	r2, [r3, #20]
 8000f44:	4b10      	ldr	r3, [pc, #64]	; (8000f88 <LCD_SetCursor+0x458>)
 8000f46:	2280      	movs	r2, #128	; 0x80
 8000f48:	611a      	str	r2, [r3, #16]
 8000f4a:	4b0f      	ldr	r3, [pc, #60]	; (8000f88 <LCD_SetCursor+0x458>)
 8000f4c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000f50:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA((lcddev.height - 1) & 0XFF);
 8000f52:	4b0d      	ldr	r3, [pc, #52]	; (8000f88 <LCD_SetCursor+0x458>)
 8000f54:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000f58:	611a      	str	r2, [r3, #16]
 8000f5a:	4b0b      	ldr	r3, [pc, #44]	; (8000f88 <LCD_SetCursor+0x458>)
 8000f5c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000f60:	615a      	str	r2, [r3, #20]
 8000f62:	4b08      	ldr	r3, [pc, #32]	; (8000f84 <LCD_SetCursor+0x454>)
 8000f64:	885b      	ldrh	r3, [r3, #2]
 8000f66:	3b01      	subs	r3, #1
 8000f68:	4a08      	ldr	r2, [pc, #32]	; (8000f8c <LCD_SetCursor+0x45c>)
 8000f6a:	b2db      	uxtb	r3, r3
 8000f6c:	60d3      	str	r3, [r2, #12]
 8000f6e:	4b06      	ldr	r3, [pc, #24]	; (8000f88 <LCD_SetCursor+0x458>)
 8000f70:	2280      	movs	r2, #128	; 0x80
 8000f72:	615a      	str	r2, [r3, #20]
 8000f74:	4b04      	ldr	r3, [pc, #16]	; (8000f88 <LCD_SetCursor+0x458>)
 8000f76:	2280      	movs	r2, #128	; 0x80
 8000f78:	611a      	str	r2, [r3, #16]
 8000f7a:	4b03      	ldr	r3, [pc, #12]	; (8000f88 <LCD_SetCursor+0x458>)
 8000f7c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000f80:	611a      	str	r2, [r3, #16]
}
 8000f82:	e097      	b.n	80010b4 <LCD_SetCursor+0x584>
 8000f84:	20000080 	.word	0x20000080
 8000f88:	40011000 	.word	0x40011000
 8000f8c:	40010c00 	.word	0x40010c00
	} else if (lcddev.id == 0X5510) {
 8000f90:	4b4a      	ldr	r3, [pc, #296]	; (80010bc <LCD_SetCursor+0x58c>)
 8000f92:	889b      	ldrh	r3, [r3, #4]
 8000f94:	f245 5210 	movw	r2, #21776	; 0x5510
 8000f98:	4293      	cmp	r3, r2
 8000f9a:	d172      	bne.n	8001082 <LCD_SetCursor+0x552>
		LCD_WR_REG(lcddev.setxcmd);
 8000f9c:	4b47      	ldr	r3, [pc, #284]	; (80010bc <LCD_SetCursor+0x58c>)
 8000f9e:	895b      	ldrh	r3, [r3, #10]
 8000fa0:	4618      	mov	r0, r3
 8000fa2:	f7ff fcf3 	bl	800098c <LCD_WR_REG>
		LCD_WR_DATA(Xpos >> 8);
 8000fa6:	4b46      	ldr	r3, [pc, #280]	; (80010c0 <LCD_SetCursor+0x590>)
 8000fa8:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000fac:	611a      	str	r2, [r3, #16]
 8000fae:	4b44      	ldr	r3, [pc, #272]	; (80010c0 <LCD_SetCursor+0x590>)
 8000fb0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000fb4:	615a      	str	r2, [r3, #20]
 8000fb6:	88fb      	ldrh	r3, [r7, #6]
 8000fb8:	0a1b      	lsrs	r3, r3, #8
 8000fba:	b29a      	uxth	r2, r3
 8000fbc:	4b41      	ldr	r3, [pc, #260]	; (80010c4 <LCD_SetCursor+0x594>)
 8000fbe:	60da      	str	r2, [r3, #12]
 8000fc0:	4b3f      	ldr	r3, [pc, #252]	; (80010c0 <LCD_SetCursor+0x590>)
 8000fc2:	2280      	movs	r2, #128	; 0x80
 8000fc4:	615a      	str	r2, [r3, #20]
 8000fc6:	4b3e      	ldr	r3, [pc, #248]	; (80010c0 <LCD_SetCursor+0x590>)
 8000fc8:	2280      	movs	r2, #128	; 0x80
 8000fca:	611a      	str	r2, [r3, #16]
 8000fcc:	4b3c      	ldr	r3, [pc, #240]	; (80010c0 <LCD_SetCursor+0x590>)
 8000fce:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000fd2:	611a      	str	r2, [r3, #16]
		LCD_WR_REG(lcddev.setxcmd + 1);
 8000fd4:	4b39      	ldr	r3, [pc, #228]	; (80010bc <LCD_SetCursor+0x58c>)
 8000fd6:	895b      	ldrh	r3, [r3, #10]
 8000fd8:	3301      	adds	r3, #1
 8000fda:	b29b      	uxth	r3, r3
 8000fdc:	4618      	mov	r0, r3
 8000fde:	f7ff fcd5 	bl	800098c <LCD_WR_REG>
		LCD_WR_DATA(Xpos & 0XFF);
 8000fe2:	4b37      	ldr	r3, [pc, #220]	; (80010c0 <LCD_SetCursor+0x590>)
 8000fe4:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000fe8:	611a      	str	r2, [r3, #16]
 8000fea:	4b35      	ldr	r3, [pc, #212]	; (80010c0 <LCD_SetCursor+0x590>)
 8000fec:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000ff0:	615a      	str	r2, [r3, #20]
 8000ff2:	88fb      	ldrh	r3, [r7, #6]
 8000ff4:	4a33      	ldr	r2, [pc, #204]	; (80010c4 <LCD_SetCursor+0x594>)
 8000ff6:	b2db      	uxtb	r3, r3
 8000ff8:	60d3      	str	r3, [r2, #12]
 8000ffa:	4b31      	ldr	r3, [pc, #196]	; (80010c0 <LCD_SetCursor+0x590>)
 8000ffc:	2280      	movs	r2, #128	; 0x80
 8000ffe:	615a      	str	r2, [r3, #20]
 8001000:	4b2f      	ldr	r3, [pc, #188]	; (80010c0 <LCD_SetCursor+0x590>)
 8001002:	2280      	movs	r2, #128	; 0x80
 8001004:	611a      	str	r2, [r3, #16]
 8001006:	4b2e      	ldr	r3, [pc, #184]	; (80010c0 <LCD_SetCursor+0x590>)
 8001008:	f44f 7200 	mov.w	r2, #512	; 0x200
 800100c:	611a      	str	r2, [r3, #16]
		LCD_WR_REG(lcddev.setycmd);
 800100e:	4b2b      	ldr	r3, [pc, #172]	; (80010bc <LCD_SetCursor+0x58c>)
 8001010:	899b      	ldrh	r3, [r3, #12]
 8001012:	4618      	mov	r0, r3
 8001014:	f7ff fcba 	bl	800098c <LCD_WR_REG>
		LCD_WR_DATA(Ypos >> 8);
 8001018:	4b29      	ldr	r3, [pc, #164]	; (80010c0 <LCD_SetCursor+0x590>)
 800101a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800101e:	611a      	str	r2, [r3, #16]
 8001020:	4b27      	ldr	r3, [pc, #156]	; (80010c0 <LCD_SetCursor+0x590>)
 8001022:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001026:	615a      	str	r2, [r3, #20]
 8001028:	88bb      	ldrh	r3, [r7, #4]
 800102a:	0a1b      	lsrs	r3, r3, #8
 800102c:	b29a      	uxth	r2, r3
 800102e:	4b25      	ldr	r3, [pc, #148]	; (80010c4 <LCD_SetCursor+0x594>)
 8001030:	60da      	str	r2, [r3, #12]
 8001032:	4b23      	ldr	r3, [pc, #140]	; (80010c0 <LCD_SetCursor+0x590>)
 8001034:	2280      	movs	r2, #128	; 0x80
 8001036:	615a      	str	r2, [r3, #20]
 8001038:	4b21      	ldr	r3, [pc, #132]	; (80010c0 <LCD_SetCursor+0x590>)
 800103a:	2280      	movs	r2, #128	; 0x80
 800103c:	611a      	str	r2, [r3, #16]
 800103e:	4b20      	ldr	r3, [pc, #128]	; (80010c0 <LCD_SetCursor+0x590>)
 8001040:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001044:	611a      	str	r2, [r3, #16]
		LCD_WR_REG(lcddev.setycmd + 1);
 8001046:	4b1d      	ldr	r3, [pc, #116]	; (80010bc <LCD_SetCursor+0x58c>)
 8001048:	899b      	ldrh	r3, [r3, #12]
 800104a:	3301      	adds	r3, #1
 800104c:	b29b      	uxth	r3, r3
 800104e:	4618      	mov	r0, r3
 8001050:	f7ff fc9c 	bl	800098c <LCD_WR_REG>
		LCD_WR_DATA(Ypos & 0XFF);
 8001054:	4b1a      	ldr	r3, [pc, #104]	; (80010c0 <LCD_SetCursor+0x590>)
 8001056:	f44f 7280 	mov.w	r2, #256	; 0x100
 800105a:	611a      	str	r2, [r3, #16]
 800105c:	4b18      	ldr	r3, [pc, #96]	; (80010c0 <LCD_SetCursor+0x590>)
 800105e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001062:	615a      	str	r2, [r3, #20]
 8001064:	88bb      	ldrh	r3, [r7, #4]
 8001066:	4a17      	ldr	r2, [pc, #92]	; (80010c4 <LCD_SetCursor+0x594>)
 8001068:	b2db      	uxtb	r3, r3
 800106a:	60d3      	str	r3, [r2, #12]
 800106c:	4b14      	ldr	r3, [pc, #80]	; (80010c0 <LCD_SetCursor+0x590>)
 800106e:	2280      	movs	r2, #128	; 0x80
 8001070:	615a      	str	r2, [r3, #20]
 8001072:	4b13      	ldr	r3, [pc, #76]	; (80010c0 <LCD_SetCursor+0x590>)
 8001074:	2280      	movs	r2, #128	; 0x80
 8001076:	611a      	str	r2, [r3, #16]
 8001078:	4b11      	ldr	r3, [pc, #68]	; (80010c0 <LCD_SetCursor+0x590>)
 800107a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800107e:	611a      	str	r2, [r3, #16]
}
 8001080:	e018      	b.n	80010b4 <LCD_SetCursor+0x584>
		if (lcddev.dir == 1)
 8001082:	4b0e      	ldr	r3, [pc, #56]	; (80010bc <LCD_SetCursor+0x58c>)
 8001084:	799b      	ldrb	r3, [r3, #6]
 8001086:	2b01      	cmp	r3, #1
 8001088:	d106      	bne.n	8001098 <LCD_SetCursor+0x568>
			Xpos = lcddev.width - 1 - Xpos;	//横屏其实就是调转x,y坐标
 800108a:	4b0c      	ldr	r3, [pc, #48]	; (80010bc <LCD_SetCursor+0x58c>)
 800108c:	881a      	ldrh	r2, [r3, #0]
 800108e:	88fb      	ldrh	r3, [r7, #6]
 8001090:	1ad3      	subs	r3, r2, r3
 8001092:	b29b      	uxth	r3, r3
 8001094:	3b01      	subs	r3, #1
 8001096:	80fb      	strh	r3, [r7, #6]
		LCD_WriteReg(lcddev.setxcmd, Xpos);
 8001098:	4b08      	ldr	r3, [pc, #32]	; (80010bc <LCD_SetCursor+0x58c>)
 800109a:	895b      	ldrh	r3, [r3, #10]
 800109c:	88fa      	ldrh	r2, [r7, #6]
 800109e:	4611      	mov	r1, r2
 80010a0:	4618      	mov	r0, r3
 80010a2:	f7ff fcff 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(lcddev.setycmd, Ypos);
 80010a6:	4b05      	ldr	r3, [pc, #20]	; (80010bc <LCD_SetCursor+0x58c>)
 80010a8:	899b      	ldrh	r3, [r3, #12]
 80010aa:	88ba      	ldrh	r2, [r7, #4]
 80010ac:	4611      	mov	r1, r2
 80010ae:	4618      	mov	r0, r3
 80010b0:	f7ff fcf8 	bl	8000aa4 <LCD_WriteReg>
}
 80010b4:	bf00      	nop
 80010b6:	3708      	adds	r7, #8
 80010b8:	46bd      	mov	sp, r7
 80010ba:	bd80      	pop	{r7, pc}
 80010bc:	20000080 	.word	0x20000080
 80010c0:	40011000 	.word	0x40011000
 80010c4:	40010c00 	.word	0x40010c00

080010c8 <LCD_Scan_Dir>:
//设置LCD的自动扫描方向
//注意:其他函数可能会受到此函数设置的影响(尤其是9341/6804这两个奇葩),
//所以,一般设置为L2R_U2D即可,如果设置为其他扫描方式,可能导致显示不正常.
//dir:0~7,代表8个方向(具体定义见lcd.h)
//9320/9325/9328/4531/4535/1505/b505/5408/9341/5310/5510/1963等IC已经实际测试	   	   
void LCD_Scan_Dir(uint8_t dir) {
 80010c8:	b580      	push	{r7, lr}
 80010ca:	b084      	sub	sp, #16
 80010cc:	af00      	add	r7, sp, #0
 80010ce:	4603      	mov	r3, r0
 80010d0:	71fb      	strb	r3, [r7, #7]
	uint16_t regval = 0;
 80010d2:	2300      	movs	r3, #0
 80010d4:	81fb      	strh	r3, [r7, #14]
	uint16_t dirreg = 0;
 80010d6:	2300      	movs	r3, #0
 80010d8:	81bb      	strh	r3, [r7, #12]
	uint16_t temp;
	if ((lcddev.dir == 1 && lcddev.id != 0X6804 && lcddev.id != 0X1963)
 80010da:	4b78      	ldr	r3, [pc, #480]	; (80012bc <LCD_Scan_Dir+0x1f4>)
 80010dc:	799b      	ldrb	r3, [r3, #6]
 80010de:	2b01      	cmp	r3, #1
 80010e0:	d10b      	bne.n	80010fa <LCD_Scan_Dir+0x32>
 80010e2:	4b76      	ldr	r3, [pc, #472]	; (80012bc <LCD_Scan_Dir+0x1f4>)
 80010e4:	889b      	ldrh	r3, [r3, #4]
 80010e6:	f646 0204 	movw	r2, #26628	; 0x6804
 80010ea:	4293      	cmp	r3, r2
 80010ec:	d005      	beq.n	80010fa <LCD_Scan_Dir+0x32>
 80010ee:	4b73      	ldr	r3, [pc, #460]	; (80012bc <LCD_Scan_Dir+0x1f4>)
 80010f0:	889b      	ldrh	r3, [r3, #4]
 80010f2:	f641 1263 	movw	r2, #6499	; 0x1963
 80010f6:	4293      	cmp	r3, r2
 80010f8:	d109      	bne.n	800110e <LCD_Scan_Dir+0x46>
			|| (lcddev.dir == 0 && lcddev.id == 0X1963))//横屏时，对6804和1963不改变扫描方向！竖屏时1963改变方向
 80010fa:	4b70      	ldr	r3, [pc, #448]	; (80012bc <LCD_Scan_Dir+0x1f4>)
 80010fc:	799b      	ldrb	r3, [r3, #6]
 80010fe:	2b00      	cmp	r3, #0
 8001100:	d134      	bne.n	800116c <LCD_Scan_Dir+0xa4>
 8001102:	4b6e      	ldr	r3, [pc, #440]	; (80012bc <LCD_Scan_Dir+0x1f4>)
 8001104:	889b      	ldrh	r3, [r3, #4]
 8001106:	f641 1263 	movw	r2, #6499	; 0x1963
 800110a:	4293      	cmp	r3, r2
 800110c:	d12e      	bne.n	800116c <LCD_Scan_Dir+0xa4>
			{
		switch (dir)	//方向转换
 800110e:	79fb      	ldrb	r3, [r7, #7]
 8001110:	2b07      	cmp	r3, #7
 8001112:	d82b      	bhi.n	800116c <LCD_Scan_Dir+0xa4>
 8001114:	a201      	add	r2, pc, #4	; (adr r2, 800111c <LCD_Scan_Dir+0x54>)
 8001116:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800111a:	bf00      	nop
 800111c:	0800113d 	.word	0x0800113d
 8001120:	08001143 	.word	0x08001143
 8001124:	08001149 	.word	0x08001149
 8001128:	0800114f 	.word	0x0800114f
 800112c:	08001155 	.word	0x08001155
 8001130:	0800115b 	.word	0x0800115b
 8001134:	08001161 	.word	0x08001161
 8001138:	08001167 	.word	0x08001167
		{
		case 0:
			dir = 6;
 800113c:	2306      	movs	r3, #6
 800113e:	71fb      	strb	r3, [r7, #7]
			break;
 8001140:	e014      	b.n	800116c <LCD_Scan_Dir+0xa4>
		case 1:
			dir = 7;
 8001142:	2307      	movs	r3, #7
 8001144:	71fb      	strb	r3, [r7, #7]
			break;
 8001146:	e011      	b.n	800116c <LCD_Scan_Dir+0xa4>
		case 2:
			dir = 4;
 8001148:	2304      	movs	r3, #4
 800114a:	71fb      	strb	r3, [r7, #7]
			break;
 800114c:	e00e      	b.n	800116c <LCD_Scan_Dir+0xa4>
		case 3:
			dir = 5;
 800114e:	2305      	movs	r3, #5
 8001150:	71fb      	strb	r3, [r7, #7]
			break;
 8001152:	e00b      	b.n	800116c <LCD_Scan_Dir+0xa4>
		case 4:
			dir = 1;
 8001154:	2301      	movs	r3, #1
 8001156:	71fb      	strb	r3, [r7, #7]
			break;
 8001158:	e008      	b.n	800116c <LCD_Scan_Dir+0xa4>
		case 5:
			dir = 0;
 800115a:	2300      	movs	r3, #0
 800115c:	71fb      	strb	r3, [r7, #7]
			break;
 800115e:	e005      	b.n	800116c <LCD_Scan_Dir+0xa4>
		case 6:
			dir = 3;
 8001160:	2303      	movs	r3, #3
 8001162:	71fb      	strb	r3, [r7, #7]
			break;
 8001164:	e002      	b.n	800116c <LCD_Scan_Dir+0xa4>
		case 7:
			dir = 2;
 8001166:	2302      	movs	r3, #2
 8001168:	71fb      	strb	r3, [r7, #7]
			break;
 800116a:	bf00      	nop
		}
	}
	if (lcddev.id == 0x9341 || lcddev.id == 0X6804 || lcddev.id == 0X5310
 800116c:	4b53      	ldr	r3, [pc, #332]	; (80012bc <LCD_Scan_Dir+0x1f4>)
 800116e:	889b      	ldrh	r3, [r3, #4]
 8001170:	f249 3241 	movw	r2, #37697	; 0x9341
 8001174:	4293      	cmp	r3, r2
 8001176:	d018      	beq.n	80011aa <LCD_Scan_Dir+0xe2>
 8001178:	4b50      	ldr	r3, [pc, #320]	; (80012bc <LCD_Scan_Dir+0x1f4>)
 800117a:	889b      	ldrh	r3, [r3, #4]
 800117c:	f646 0204 	movw	r2, #26628	; 0x6804
 8001180:	4293      	cmp	r3, r2
 8001182:	d012      	beq.n	80011aa <LCD_Scan_Dir+0xe2>
 8001184:	4b4d      	ldr	r3, [pc, #308]	; (80012bc <LCD_Scan_Dir+0x1f4>)
 8001186:	889b      	ldrh	r3, [r3, #4]
 8001188:	f245 3210 	movw	r2, #21264	; 0x5310
 800118c:	4293      	cmp	r3, r2
 800118e:	d00c      	beq.n	80011aa <LCD_Scan_Dir+0xe2>
			|| lcddev.id == 0X5510 || lcddev.id == 0X1963)//9341/6804/5310/5510/1963,特殊处理
 8001190:	4b4a      	ldr	r3, [pc, #296]	; (80012bc <LCD_Scan_Dir+0x1f4>)
 8001192:	889b      	ldrh	r3, [r3, #4]
 8001194:	f245 5210 	movw	r2, #21776	; 0x5510
 8001198:	4293      	cmp	r3, r2
 800119a:	d006      	beq.n	80011aa <LCD_Scan_Dir+0xe2>
 800119c:	4b47      	ldr	r3, [pc, #284]	; (80012bc <LCD_Scan_Dir+0x1f4>)
 800119e:	889b      	ldrh	r3, [r3, #4]
 80011a0:	f641 1263 	movw	r2, #6499	; 0x1963
 80011a4:	4293      	cmp	r3, r2
 80011a6:	f040 8250 	bne.w	800164a <LCD_Scan_Dir+0x582>
					{
		switch (dir) {
 80011aa:	79fb      	ldrb	r3, [r7, #7]
 80011ac:	2b07      	cmp	r3, #7
 80011ae:	d836      	bhi.n	800121e <LCD_Scan_Dir+0x156>
 80011b0:	a201      	add	r2, pc, #4	; (adr r2, 80011b8 <LCD_Scan_Dir+0xf0>)
 80011b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80011b6:	bf00      	nop
 80011b8:	0800121f 	.word	0x0800121f
 80011bc:	080011d9 	.word	0x080011d9
 80011c0:	080011e3 	.word	0x080011e3
 80011c4:	080011ed 	.word	0x080011ed
 80011c8:	080011f7 	.word	0x080011f7
 80011cc:	08001201 	.word	0x08001201
 80011d0:	0800120b 	.word	0x0800120b
 80011d4:	08001215 	.word	0x08001215
		case L2R_U2D:	//从左到右,从上到下
			regval |= (0 << 7) | (0 << 6) | (0 << 5);
			break;
		case L2R_D2U:	//从左到右,从下到上
			regval |= (1 << 7) | (0 << 6) | (0 << 5);
 80011d8:	89fb      	ldrh	r3, [r7, #14]
 80011da:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80011de:	81fb      	strh	r3, [r7, #14]
			break;
 80011e0:	e01d      	b.n	800121e <LCD_Scan_Dir+0x156>
		case R2L_U2D:	//从右到左,从上到下
			regval |= (0 << 7) | (1 << 6) | (0 << 5);
 80011e2:	89fb      	ldrh	r3, [r7, #14]
 80011e4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80011e8:	81fb      	strh	r3, [r7, #14]
			break;
 80011ea:	e018      	b.n	800121e <LCD_Scan_Dir+0x156>
		case R2L_D2U:	//从右到左,从下到上
			regval |= (1 << 7) | (1 << 6) | (0 << 5);
 80011ec:	89fb      	ldrh	r3, [r7, #14]
 80011ee:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80011f2:	81fb      	strh	r3, [r7, #14]
			break;
 80011f4:	e013      	b.n	800121e <LCD_Scan_Dir+0x156>
		case U2D_L2R:	//从上到下,从左到右
			regval |= (0 << 7) | (0 << 6) | (1 << 5);
 80011f6:	89fb      	ldrh	r3, [r7, #14]
 80011f8:	f043 0320 	orr.w	r3, r3, #32
 80011fc:	81fb      	strh	r3, [r7, #14]
			break;
 80011fe:	e00e      	b.n	800121e <LCD_Scan_Dir+0x156>
		case U2D_R2L:	//从上到下,从右到左
			regval |= (0 << 7) | (1 << 6) | (1 << 5);
 8001200:	89fb      	ldrh	r3, [r7, #14]
 8001202:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8001206:	81fb      	strh	r3, [r7, #14]
			break;
 8001208:	e009      	b.n	800121e <LCD_Scan_Dir+0x156>
		case D2U_L2R:	//从下到上,从左到右
			regval |= (1 << 7) | (0 << 6) | (1 << 5);
 800120a:	89fb      	ldrh	r3, [r7, #14]
 800120c:	f043 03a0 	orr.w	r3, r3, #160	; 0xa0
 8001210:	81fb      	strh	r3, [r7, #14]
			break;
 8001212:	e004      	b.n	800121e <LCD_Scan_Dir+0x156>
		case D2U_R2L:	//从下到上,从右到左
			regval |= (1 << 7) | (1 << 6) | (1 << 5);
 8001214:	89fb      	ldrh	r3, [r7, #14]
 8001216:	f043 03e0 	orr.w	r3, r3, #224	; 0xe0
 800121a:	81fb      	strh	r3, [r7, #14]
			break;
 800121c:	bf00      	nop
		}
		if (lcddev.id == 0X5510)
 800121e:	4b27      	ldr	r3, [pc, #156]	; (80012bc <LCD_Scan_Dir+0x1f4>)
 8001220:	889b      	ldrh	r3, [r3, #4]
 8001222:	f245 5210 	movw	r2, #21776	; 0x5510
 8001226:	4293      	cmp	r3, r2
 8001228:	d103      	bne.n	8001232 <LCD_Scan_Dir+0x16a>
			dirreg = 0X3600;
 800122a:	f44f 5358 	mov.w	r3, #13824	; 0x3600
 800122e:	81bb      	strh	r3, [r7, #12]
 8001230:	e001      	b.n	8001236 <LCD_Scan_Dir+0x16e>
		else
			dirreg = 0X36;
 8001232:	2336      	movs	r3, #54	; 0x36
 8001234:	81bb      	strh	r3, [r7, #12]
		if ((lcddev.id != 0X5310) && (lcddev.id != 0X5510) && (lcddev.id != 0X1963))
 8001236:	4b21      	ldr	r3, [pc, #132]	; (80012bc <LCD_Scan_Dir+0x1f4>)
 8001238:	889b      	ldrh	r3, [r3, #4]
 800123a:	f245 3210 	movw	r2, #21264	; 0x5310
 800123e:	4293      	cmp	r3, r2
 8001240:	d00f      	beq.n	8001262 <LCD_Scan_Dir+0x19a>
 8001242:	4b1e      	ldr	r3, [pc, #120]	; (80012bc <LCD_Scan_Dir+0x1f4>)
 8001244:	889b      	ldrh	r3, [r3, #4]
 8001246:	f245 5210 	movw	r2, #21776	; 0x5510
 800124a:	4293      	cmp	r3, r2
 800124c:	d009      	beq.n	8001262 <LCD_Scan_Dir+0x19a>
 800124e:	4b1b      	ldr	r3, [pc, #108]	; (80012bc <LCD_Scan_Dir+0x1f4>)
 8001250:	889b      	ldrh	r3, [r3, #4]
 8001252:	f641 1263 	movw	r2, #6499	; 0x1963
 8001256:	4293      	cmp	r3, r2
 8001258:	d003      	beq.n	8001262 <LCD_Scan_Dir+0x19a>
			regval |= 0X08;	//5310/5510/1963不需要BGR
 800125a:	89fb      	ldrh	r3, [r7, #14]
 800125c:	f043 0308 	orr.w	r3, r3, #8
 8001260:	81fb      	strh	r3, [r7, #14]
		if (lcddev.id == 0X6804)
 8001262:	4b16      	ldr	r3, [pc, #88]	; (80012bc <LCD_Scan_Dir+0x1f4>)
 8001264:	889b      	ldrh	r3, [r3, #4]
 8001266:	f646 0204 	movw	r2, #26628	; 0x6804
 800126a:	4293      	cmp	r3, r2
 800126c:	d103      	bne.n	8001276 <LCD_Scan_Dir+0x1ae>
			regval |= 0x02;	//6804的BIT6和9341的反了
 800126e:	89fb      	ldrh	r3, [r7, #14]
 8001270:	f043 0302 	orr.w	r3, r3, #2
 8001274:	81fb      	strh	r3, [r7, #14]
		LCD_WriteReg(dirreg, regval);
 8001276:	89fa      	ldrh	r2, [r7, #14]
 8001278:	89bb      	ldrh	r3, [r7, #12]
 800127a:	4611      	mov	r1, r2
 800127c:	4618      	mov	r0, r3
 800127e:	f7ff fc11 	bl	8000aa4 <LCD_WriteReg>
		if (lcddev.id != 0X1963)	//1963不做坐标处理
 8001282:	4b0e      	ldr	r3, [pc, #56]	; (80012bc <LCD_Scan_Dir+0x1f4>)
 8001284:	889b      	ldrh	r3, [r3, #4]
 8001286:	f641 1263 	movw	r2, #6499	; 0x1963
 800128a:	4293      	cmp	r3, r2
 800128c:	d028      	beq.n	80012e0 <LCD_Scan_Dir+0x218>
				{
			if (regval & 0X20) {
 800128e:	89fb      	ldrh	r3, [r7, #14]
 8001290:	f003 0320 	and.w	r3, r3, #32
 8001294:	2b00      	cmp	r3, #0
 8001296:	d013      	beq.n	80012c0 <LCD_Scan_Dir+0x1f8>
				if (lcddev.width < lcddev.height)	//交换X,Y
 8001298:	4b08      	ldr	r3, [pc, #32]	; (80012bc <LCD_Scan_Dir+0x1f4>)
 800129a:	881a      	ldrh	r2, [r3, #0]
 800129c:	4b07      	ldr	r3, [pc, #28]	; (80012bc <LCD_Scan_Dir+0x1f4>)
 800129e:	885b      	ldrh	r3, [r3, #2]
 80012a0:	429a      	cmp	r2, r3
 80012a2:	d21d      	bcs.n	80012e0 <LCD_Scan_Dir+0x218>
						{
					temp = lcddev.width;
 80012a4:	4b05      	ldr	r3, [pc, #20]	; (80012bc <LCD_Scan_Dir+0x1f4>)
 80012a6:	881b      	ldrh	r3, [r3, #0]
 80012a8:	817b      	strh	r3, [r7, #10]
					lcddev.width = lcddev.height;
 80012aa:	4b04      	ldr	r3, [pc, #16]	; (80012bc <LCD_Scan_Dir+0x1f4>)
 80012ac:	885a      	ldrh	r2, [r3, #2]
 80012ae:	4b03      	ldr	r3, [pc, #12]	; (80012bc <LCD_Scan_Dir+0x1f4>)
 80012b0:	801a      	strh	r2, [r3, #0]
					lcddev.height = temp;
 80012b2:	4a02      	ldr	r2, [pc, #8]	; (80012bc <LCD_Scan_Dir+0x1f4>)
 80012b4:	897b      	ldrh	r3, [r7, #10]
 80012b6:	8053      	strh	r3, [r2, #2]
 80012b8:	e012      	b.n	80012e0 <LCD_Scan_Dir+0x218>
 80012ba:	bf00      	nop
 80012bc:	20000080 	.word	0x20000080
				}
			} else {
				if (lcddev.width > lcddev.height)	//交换X,Y
 80012c0:	4b7f      	ldr	r3, [pc, #508]	; (80014c0 <LCD_Scan_Dir+0x3f8>)
 80012c2:	881a      	ldrh	r2, [r3, #0]
 80012c4:	4b7e      	ldr	r3, [pc, #504]	; (80014c0 <LCD_Scan_Dir+0x3f8>)
 80012c6:	885b      	ldrh	r3, [r3, #2]
 80012c8:	429a      	cmp	r2, r3
 80012ca:	d909      	bls.n	80012e0 <LCD_Scan_Dir+0x218>
						{
					temp = lcddev.width;
 80012cc:	4b7c      	ldr	r3, [pc, #496]	; (80014c0 <LCD_Scan_Dir+0x3f8>)
 80012ce:	881b      	ldrh	r3, [r3, #0]
 80012d0:	817b      	strh	r3, [r7, #10]
					lcddev.width = lcddev.height;
 80012d2:	4b7b      	ldr	r3, [pc, #492]	; (80014c0 <LCD_Scan_Dir+0x3f8>)
 80012d4:	885a      	ldrh	r2, [r3, #2]
 80012d6:	4b7a      	ldr	r3, [pc, #488]	; (80014c0 <LCD_Scan_Dir+0x3f8>)
 80012d8:	801a      	strh	r2, [r3, #0]
					lcddev.height = temp;
 80012da:	4a79      	ldr	r2, [pc, #484]	; (80014c0 <LCD_Scan_Dir+0x3f8>)
 80012dc:	897b      	ldrh	r3, [r7, #10]
 80012de:	8053      	strh	r3, [r2, #2]
				}
			}
		}
		if (lcddev.id == 0X5510) {
 80012e0:	4b77      	ldr	r3, [pc, #476]	; (80014c0 <LCD_Scan_Dir+0x3f8>)
 80012e2:	889b      	ldrh	r3, [r3, #4]
 80012e4:	f245 5210 	movw	r2, #21776	; 0x5510
 80012e8:	4293      	cmp	r3, r2
 80012ea:	f040 80ef 	bne.w	80014cc <LCD_Scan_Dir+0x404>
			LCD_WR_REG(lcddev.setxcmd);
 80012ee:	4b74      	ldr	r3, [pc, #464]	; (80014c0 <LCD_Scan_Dir+0x3f8>)
 80012f0:	895b      	ldrh	r3, [r3, #10]
 80012f2:	4618      	mov	r0, r3
 80012f4:	f7ff fb4a 	bl	800098c <LCD_WR_REG>
			LCD_WR_DATA(0);
 80012f8:	4b72      	ldr	r3, [pc, #456]	; (80014c4 <LCD_Scan_Dir+0x3fc>)
 80012fa:	f44f 7280 	mov.w	r2, #256	; 0x100
 80012fe:	611a      	str	r2, [r3, #16]
 8001300:	4b70      	ldr	r3, [pc, #448]	; (80014c4 <LCD_Scan_Dir+0x3fc>)
 8001302:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001306:	615a      	str	r2, [r3, #20]
 8001308:	4b6f      	ldr	r3, [pc, #444]	; (80014c8 <LCD_Scan_Dir+0x400>)
 800130a:	2200      	movs	r2, #0
 800130c:	60da      	str	r2, [r3, #12]
 800130e:	4b6d      	ldr	r3, [pc, #436]	; (80014c4 <LCD_Scan_Dir+0x3fc>)
 8001310:	2280      	movs	r2, #128	; 0x80
 8001312:	615a      	str	r2, [r3, #20]
 8001314:	4b6b      	ldr	r3, [pc, #428]	; (80014c4 <LCD_Scan_Dir+0x3fc>)
 8001316:	2280      	movs	r2, #128	; 0x80
 8001318:	611a      	str	r2, [r3, #16]
 800131a:	4b6a      	ldr	r3, [pc, #424]	; (80014c4 <LCD_Scan_Dir+0x3fc>)
 800131c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001320:	611a      	str	r2, [r3, #16]
			LCD_WR_REG(lcddev.setxcmd + 1);
 8001322:	4b67      	ldr	r3, [pc, #412]	; (80014c0 <LCD_Scan_Dir+0x3f8>)
 8001324:	895b      	ldrh	r3, [r3, #10]
 8001326:	3301      	adds	r3, #1
 8001328:	b29b      	uxth	r3, r3
 800132a:	4618      	mov	r0, r3
 800132c:	f7ff fb2e 	bl	800098c <LCD_WR_REG>
			LCD_WR_DATA(0);
 8001330:	4b64      	ldr	r3, [pc, #400]	; (80014c4 <LCD_Scan_Dir+0x3fc>)
 8001332:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001336:	611a      	str	r2, [r3, #16]
 8001338:	4b62      	ldr	r3, [pc, #392]	; (80014c4 <LCD_Scan_Dir+0x3fc>)
 800133a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800133e:	615a      	str	r2, [r3, #20]
 8001340:	4b61      	ldr	r3, [pc, #388]	; (80014c8 <LCD_Scan_Dir+0x400>)
 8001342:	2200      	movs	r2, #0
 8001344:	60da      	str	r2, [r3, #12]
 8001346:	4b5f      	ldr	r3, [pc, #380]	; (80014c4 <LCD_Scan_Dir+0x3fc>)
 8001348:	2280      	movs	r2, #128	; 0x80
 800134a:	615a      	str	r2, [r3, #20]
 800134c:	4b5d      	ldr	r3, [pc, #372]	; (80014c4 <LCD_Scan_Dir+0x3fc>)
 800134e:	2280      	movs	r2, #128	; 0x80
 8001350:	611a      	str	r2, [r3, #16]
 8001352:	4b5c      	ldr	r3, [pc, #368]	; (80014c4 <LCD_Scan_Dir+0x3fc>)
 8001354:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001358:	611a      	str	r2, [r3, #16]
			LCD_WR_REG(lcddev.setxcmd + 2);
 800135a:	4b59      	ldr	r3, [pc, #356]	; (80014c0 <LCD_Scan_Dir+0x3f8>)
 800135c:	895b      	ldrh	r3, [r3, #10]
 800135e:	3302      	adds	r3, #2
 8001360:	b29b      	uxth	r3, r3
 8001362:	4618      	mov	r0, r3
 8001364:	f7ff fb12 	bl	800098c <LCD_WR_REG>
			LCD_WR_DATA((lcddev.width - 1) >> 8);
 8001368:	4b56      	ldr	r3, [pc, #344]	; (80014c4 <LCD_Scan_Dir+0x3fc>)
 800136a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800136e:	611a      	str	r2, [r3, #16]
 8001370:	4b54      	ldr	r3, [pc, #336]	; (80014c4 <LCD_Scan_Dir+0x3fc>)
 8001372:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001376:	615a      	str	r2, [r3, #20]
 8001378:	4b51      	ldr	r3, [pc, #324]	; (80014c0 <LCD_Scan_Dir+0x3f8>)
 800137a:	881b      	ldrh	r3, [r3, #0]
 800137c:	3b01      	subs	r3, #1
 800137e:	121a      	asrs	r2, r3, #8
 8001380:	4b51      	ldr	r3, [pc, #324]	; (80014c8 <LCD_Scan_Dir+0x400>)
 8001382:	60da      	str	r2, [r3, #12]
 8001384:	4b4f      	ldr	r3, [pc, #316]	; (80014c4 <LCD_Scan_Dir+0x3fc>)
 8001386:	2280      	movs	r2, #128	; 0x80
 8001388:	615a      	str	r2, [r3, #20]
 800138a:	4b4e      	ldr	r3, [pc, #312]	; (80014c4 <LCD_Scan_Dir+0x3fc>)
 800138c:	2280      	movs	r2, #128	; 0x80
 800138e:	611a      	str	r2, [r3, #16]
 8001390:	4b4c      	ldr	r3, [pc, #304]	; (80014c4 <LCD_Scan_Dir+0x3fc>)
 8001392:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001396:	611a      	str	r2, [r3, #16]
			LCD_WR_REG(lcddev.setxcmd + 3);
 8001398:	4b49      	ldr	r3, [pc, #292]	; (80014c0 <LCD_Scan_Dir+0x3f8>)
 800139a:	895b      	ldrh	r3, [r3, #10]
 800139c:	3303      	adds	r3, #3
 800139e:	b29b      	uxth	r3, r3
 80013a0:	4618      	mov	r0, r3
 80013a2:	f7ff faf3 	bl	800098c <LCD_WR_REG>
			LCD_WR_DATA((lcddev.width - 1) & 0XFF);
 80013a6:	4b47      	ldr	r3, [pc, #284]	; (80014c4 <LCD_Scan_Dir+0x3fc>)
 80013a8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80013ac:	611a      	str	r2, [r3, #16]
 80013ae:	4b45      	ldr	r3, [pc, #276]	; (80014c4 <LCD_Scan_Dir+0x3fc>)
 80013b0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80013b4:	615a      	str	r2, [r3, #20]
 80013b6:	4b42      	ldr	r3, [pc, #264]	; (80014c0 <LCD_Scan_Dir+0x3f8>)
 80013b8:	881b      	ldrh	r3, [r3, #0]
 80013ba:	3b01      	subs	r3, #1
 80013bc:	4a42      	ldr	r2, [pc, #264]	; (80014c8 <LCD_Scan_Dir+0x400>)
 80013be:	b2db      	uxtb	r3, r3
 80013c0:	60d3      	str	r3, [r2, #12]
 80013c2:	4b40      	ldr	r3, [pc, #256]	; (80014c4 <LCD_Scan_Dir+0x3fc>)
 80013c4:	2280      	movs	r2, #128	; 0x80
 80013c6:	615a      	str	r2, [r3, #20]
 80013c8:	4b3e      	ldr	r3, [pc, #248]	; (80014c4 <LCD_Scan_Dir+0x3fc>)
 80013ca:	2280      	movs	r2, #128	; 0x80
 80013cc:	611a      	str	r2, [r3, #16]
 80013ce:	4b3d      	ldr	r3, [pc, #244]	; (80014c4 <LCD_Scan_Dir+0x3fc>)
 80013d0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80013d4:	611a      	str	r2, [r3, #16]
			LCD_WR_REG(lcddev.setycmd);
 80013d6:	4b3a      	ldr	r3, [pc, #232]	; (80014c0 <LCD_Scan_Dir+0x3f8>)
 80013d8:	899b      	ldrh	r3, [r3, #12]
 80013da:	4618      	mov	r0, r3
 80013dc:	f7ff fad6 	bl	800098c <LCD_WR_REG>
			LCD_WR_DATA(0);
 80013e0:	4b38      	ldr	r3, [pc, #224]	; (80014c4 <LCD_Scan_Dir+0x3fc>)
 80013e2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80013e6:	611a      	str	r2, [r3, #16]
 80013e8:	4b36      	ldr	r3, [pc, #216]	; (80014c4 <LCD_Scan_Dir+0x3fc>)
 80013ea:	f44f 7200 	mov.w	r2, #512	; 0x200
 80013ee:	615a      	str	r2, [r3, #20]
 80013f0:	4b35      	ldr	r3, [pc, #212]	; (80014c8 <LCD_Scan_Dir+0x400>)
 80013f2:	2200      	movs	r2, #0
 80013f4:	60da      	str	r2, [r3, #12]
 80013f6:	4b33      	ldr	r3, [pc, #204]	; (80014c4 <LCD_Scan_Dir+0x3fc>)
 80013f8:	2280      	movs	r2, #128	; 0x80
 80013fa:	615a      	str	r2, [r3, #20]
 80013fc:	4b31      	ldr	r3, [pc, #196]	; (80014c4 <LCD_Scan_Dir+0x3fc>)
 80013fe:	2280      	movs	r2, #128	; 0x80
 8001400:	611a      	str	r2, [r3, #16]
 8001402:	4b30      	ldr	r3, [pc, #192]	; (80014c4 <LCD_Scan_Dir+0x3fc>)
 8001404:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001408:	611a      	str	r2, [r3, #16]
			LCD_WR_REG(lcddev.setycmd + 1);
 800140a:	4b2d      	ldr	r3, [pc, #180]	; (80014c0 <LCD_Scan_Dir+0x3f8>)
 800140c:	899b      	ldrh	r3, [r3, #12]
 800140e:	3301      	adds	r3, #1
 8001410:	b29b      	uxth	r3, r3
 8001412:	4618      	mov	r0, r3
 8001414:	f7ff faba 	bl	800098c <LCD_WR_REG>
			LCD_WR_DATA(0);
 8001418:	4b2a      	ldr	r3, [pc, #168]	; (80014c4 <LCD_Scan_Dir+0x3fc>)
 800141a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800141e:	611a      	str	r2, [r3, #16]
 8001420:	4b28      	ldr	r3, [pc, #160]	; (80014c4 <LCD_Scan_Dir+0x3fc>)
 8001422:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001426:	615a      	str	r2, [r3, #20]
 8001428:	4b27      	ldr	r3, [pc, #156]	; (80014c8 <LCD_Scan_Dir+0x400>)
 800142a:	2200      	movs	r2, #0
 800142c:	60da      	str	r2, [r3, #12]
 800142e:	4b25      	ldr	r3, [pc, #148]	; (80014c4 <LCD_Scan_Dir+0x3fc>)
 8001430:	2280      	movs	r2, #128	; 0x80
 8001432:	615a      	str	r2, [r3, #20]
 8001434:	4b23      	ldr	r3, [pc, #140]	; (80014c4 <LCD_Scan_Dir+0x3fc>)
 8001436:	2280      	movs	r2, #128	; 0x80
 8001438:	611a      	str	r2, [r3, #16]
 800143a:	4b22      	ldr	r3, [pc, #136]	; (80014c4 <LCD_Scan_Dir+0x3fc>)
 800143c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001440:	611a      	str	r2, [r3, #16]
			LCD_WR_REG(lcddev.setycmd + 2);
 8001442:	4b1f      	ldr	r3, [pc, #124]	; (80014c0 <LCD_Scan_Dir+0x3f8>)
 8001444:	899b      	ldrh	r3, [r3, #12]
 8001446:	3302      	adds	r3, #2
 8001448:	b29b      	uxth	r3, r3
 800144a:	4618      	mov	r0, r3
 800144c:	f7ff fa9e 	bl	800098c <LCD_WR_REG>
			LCD_WR_DATA((lcddev.height - 1) >> 8);
 8001450:	4b1c      	ldr	r3, [pc, #112]	; (80014c4 <LCD_Scan_Dir+0x3fc>)
 8001452:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001456:	611a      	str	r2, [r3, #16]
 8001458:	4b1a      	ldr	r3, [pc, #104]	; (80014c4 <LCD_Scan_Dir+0x3fc>)
 800145a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800145e:	615a      	str	r2, [r3, #20]
 8001460:	4b17      	ldr	r3, [pc, #92]	; (80014c0 <LCD_Scan_Dir+0x3f8>)
 8001462:	885b      	ldrh	r3, [r3, #2]
 8001464:	3b01      	subs	r3, #1
 8001466:	121a      	asrs	r2, r3, #8
 8001468:	4b17      	ldr	r3, [pc, #92]	; (80014c8 <LCD_Scan_Dir+0x400>)
 800146a:	60da      	str	r2, [r3, #12]
 800146c:	4b15      	ldr	r3, [pc, #84]	; (80014c4 <LCD_Scan_Dir+0x3fc>)
 800146e:	2280      	movs	r2, #128	; 0x80
 8001470:	615a      	str	r2, [r3, #20]
 8001472:	4b14      	ldr	r3, [pc, #80]	; (80014c4 <LCD_Scan_Dir+0x3fc>)
 8001474:	2280      	movs	r2, #128	; 0x80
 8001476:	611a      	str	r2, [r3, #16]
 8001478:	4b12      	ldr	r3, [pc, #72]	; (80014c4 <LCD_Scan_Dir+0x3fc>)
 800147a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800147e:	611a      	str	r2, [r3, #16]
			LCD_WR_REG(lcddev.setycmd + 3);
 8001480:	4b0f      	ldr	r3, [pc, #60]	; (80014c0 <LCD_Scan_Dir+0x3f8>)
 8001482:	899b      	ldrh	r3, [r3, #12]
 8001484:	3303      	adds	r3, #3
 8001486:	b29b      	uxth	r3, r3
 8001488:	4618      	mov	r0, r3
 800148a:	f7ff fa7f 	bl	800098c <LCD_WR_REG>
			LCD_WR_DATA((lcddev.height - 1) & 0XFF);
 800148e:	4b0d      	ldr	r3, [pc, #52]	; (80014c4 <LCD_Scan_Dir+0x3fc>)
 8001490:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001494:	611a      	str	r2, [r3, #16]
 8001496:	4b0b      	ldr	r3, [pc, #44]	; (80014c4 <LCD_Scan_Dir+0x3fc>)
 8001498:	f44f 7200 	mov.w	r2, #512	; 0x200
 800149c:	615a      	str	r2, [r3, #20]
 800149e:	4b08      	ldr	r3, [pc, #32]	; (80014c0 <LCD_Scan_Dir+0x3f8>)
 80014a0:	885b      	ldrh	r3, [r3, #2]
 80014a2:	3b01      	subs	r3, #1
 80014a4:	4a08      	ldr	r2, [pc, #32]	; (80014c8 <LCD_Scan_Dir+0x400>)
 80014a6:	b2db      	uxtb	r3, r3
 80014a8:	60d3      	str	r3, [r2, #12]
 80014aa:	4b06      	ldr	r3, [pc, #24]	; (80014c4 <LCD_Scan_Dir+0x3fc>)
 80014ac:	2280      	movs	r2, #128	; 0x80
 80014ae:	615a      	str	r2, [r3, #20]
 80014b0:	4b04      	ldr	r3, [pc, #16]	; (80014c4 <LCD_Scan_Dir+0x3fc>)
 80014b2:	2280      	movs	r2, #128	; 0x80
 80014b4:	611a      	str	r2, [r3, #16]
 80014b6:	4b03      	ldr	r3, [pc, #12]	; (80014c4 <LCD_Scan_Dir+0x3fc>)
 80014b8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80014bc:	611a      	str	r2, [r3, #16]
		if (lcddev.id == 0X5510) {
 80014be:	e10b      	b.n	80016d8 <LCD_Scan_Dir+0x610>
 80014c0:	20000080 	.word	0x20000080
 80014c4:	40011000 	.word	0x40011000
 80014c8:	40010c00 	.word	0x40010c00
		} else {
			LCD_WR_REG(lcddev.setxcmd);
 80014cc:	4b84      	ldr	r3, [pc, #528]	; (80016e0 <LCD_Scan_Dir+0x618>)
 80014ce:	895b      	ldrh	r3, [r3, #10]
 80014d0:	4618      	mov	r0, r3
 80014d2:	f7ff fa5b 	bl	800098c <LCD_WR_REG>
			LCD_WR_DATA(0);
 80014d6:	4b83      	ldr	r3, [pc, #524]	; (80016e4 <LCD_Scan_Dir+0x61c>)
 80014d8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80014dc:	611a      	str	r2, [r3, #16]
 80014de:	4b81      	ldr	r3, [pc, #516]	; (80016e4 <LCD_Scan_Dir+0x61c>)
 80014e0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80014e4:	615a      	str	r2, [r3, #20]
 80014e6:	4b80      	ldr	r3, [pc, #512]	; (80016e8 <LCD_Scan_Dir+0x620>)
 80014e8:	2200      	movs	r2, #0
 80014ea:	60da      	str	r2, [r3, #12]
 80014ec:	4b7d      	ldr	r3, [pc, #500]	; (80016e4 <LCD_Scan_Dir+0x61c>)
 80014ee:	2280      	movs	r2, #128	; 0x80
 80014f0:	615a      	str	r2, [r3, #20]
 80014f2:	4b7c      	ldr	r3, [pc, #496]	; (80016e4 <LCD_Scan_Dir+0x61c>)
 80014f4:	2280      	movs	r2, #128	; 0x80
 80014f6:	611a      	str	r2, [r3, #16]
 80014f8:	4b7a      	ldr	r3, [pc, #488]	; (80016e4 <LCD_Scan_Dir+0x61c>)
 80014fa:	f44f 7200 	mov.w	r2, #512	; 0x200
 80014fe:	611a      	str	r2, [r3, #16]
			LCD_WR_DATA(0);
 8001500:	4b78      	ldr	r3, [pc, #480]	; (80016e4 <LCD_Scan_Dir+0x61c>)
 8001502:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001506:	611a      	str	r2, [r3, #16]
 8001508:	4b76      	ldr	r3, [pc, #472]	; (80016e4 <LCD_Scan_Dir+0x61c>)
 800150a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800150e:	615a      	str	r2, [r3, #20]
 8001510:	4b75      	ldr	r3, [pc, #468]	; (80016e8 <LCD_Scan_Dir+0x620>)
 8001512:	2200      	movs	r2, #0
 8001514:	60da      	str	r2, [r3, #12]
 8001516:	4b73      	ldr	r3, [pc, #460]	; (80016e4 <LCD_Scan_Dir+0x61c>)
 8001518:	2280      	movs	r2, #128	; 0x80
 800151a:	615a      	str	r2, [r3, #20]
 800151c:	4b71      	ldr	r3, [pc, #452]	; (80016e4 <LCD_Scan_Dir+0x61c>)
 800151e:	2280      	movs	r2, #128	; 0x80
 8001520:	611a      	str	r2, [r3, #16]
 8001522:	4b70      	ldr	r3, [pc, #448]	; (80016e4 <LCD_Scan_Dir+0x61c>)
 8001524:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001528:	611a      	str	r2, [r3, #16]
			LCD_WR_DATA((lcddev.width - 1) >> 8);
 800152a:	4b6e      	ldr	r3, [pc, #440]	; (80016e4 <LCD_Scan_Dir+0x61c>)
 800152c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001530:	611a      	str	r2, [r3, #16]
 8001532:	4b6c      	ldr	r3, [pc, #432]	; (80016e4 <LCD_Scan_Dir+0x61c>)
 8001534:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001538:	615a      	str	r2, [r3, #20]
 800153a:	4b69      	ldr	r3, [pc, #420]	; (80016e0 <LCD_Scan_Dir+0x618>)
 800153c:	881b      	ldrh	r3, [r3, #0]
 800153e:	3b01      	subs	r3, #1
 8001540:	121a      	asrs	r2, r3, #8
 8001542:	4b69      	ldr	r3, [pc, #420]	; (80016e8 <LCD_Scan_Dir+0x620>)
 8001544:	60da      	str	r2, [r3, #12]
 8001546:	4b67      	ldr	r3, [pc, #412]	; (80016e4 <LCD_Scan_Dir+0x61c>)
 8001548:	2280      	movs	r2, #128	; 0x80
 800154a:	615a      	str	r2, [r3, #20]
 800154c:	4b65      	ldr	r3, [pc, #404]	; (80016e4 <LCD_Scan_Dir+0x61c>)
 800154e:	2280      	movs	r2, #128	; 0x80
 8001550:	611a      	str	r2, [r3, #16]
 8001552:	4b64      	ldr	r3, [pc, #400]	; (80016e4 <LCD_Scan_Dir+0x61c>)
 8001554:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001558:	611a      	str	r2, [r3, #16]
			LCD_WR_DATA((lcddev.width - 1) & 0XFF);
 800155a:	4b62      	ldr	r3, [pc, #392]	; (80016e4 <LCD_Scan_Dir+0x61c>)
 800155c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001560:	611a      	str	r2, [r3, #16]
 8001562:	4b60      	ldr	r3, [pc, #384]	; (80016e4 <LCD_Scan_Dir+0x61c>)
 8001564:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001568:	615a      	str	r2, [r3, #20]
 800156a:	4b5d      	ldr	r3, [pc, #372]	; (80016e0 <LCD_Scan_Dir+0x618>)
 800156c:	881b      	ldrh	r3, [r3, #0]
 800156e:	3b01      	subs	r3, #1
 8001570:	4a5d      	ldr	r2, [pc, #372]	; (80016e8 <LCD_Scan_Dir+0x620>)
 8001572:	b2db      	uxtb	r3, r3
 8001574:	60d3      	str	r3, [r2, #12]
 8001576:	4b5b      	ldr	r3, [pc, #364]	; (80016e4 <LCD_Scan_Dir+0x61c>)
 8001578:	2280      	movs	r2, #128	; 0x80
 800157a:	615a      	str	r2, [r3, #20]
 800157c:	4b59      	ldr	r3, [pc, #356]	; (80016e4 <LCD_Scan_Dir+0x61c>)
 800157e:	2280      	movs	r2, #128	; 0x80
 8001580:	611a      	str	r2, [r3, #16]
 8001582:	4b58      	ldr	r3, [pc, #352]	; (80016e4 <LCD_Scan_Dir+0x61c>)
 8001584:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001588:	611a      	str	r2, [r3, #16]
			LCD_WR_REG(lcddev.setycmd);
 800158a:	4b55      	ldr	r3, [pc, #340]	; (80016e0 <LCD_Scan_Dir+0x618>)
 800158c:	899b      	ldrh	r3, [r3, #12]
 800158e:	4618      	mov	r0, r3
 8001590:	f7ff f9fc 	bl	800098c <LCD_WR_REG>
			LCD_WR_DATA(0);
 8001594:	4b53      	ldr	r3, [pc, #332]	; (80016e4 <LCD_Scan_Dir+0x61c>)
 8001596:	f44f 7280 	mov.w	r2, #256	; 0x100
 800159a:	611a      	str	r2, [r3, #16]
 800159c:	4b51      	ldr	r3, [pc, #324]	; (80016e4 <LCD_Scan_Dir+0x61c>)
 800159e:	f44f 7200 	mov.w	r2, #512	; 0x200
 80015a2:	615a      	str	r2, [r3, #20]
 80015a4:	4b50      	ldr	r3, [pc, #320]	; (80016e8 <LCD_Scan_Dir+0x620>)
 80015a6:	2200      	movs	r2, #0
 80015a8:	60da      	str	r2, [r3, #12]
 80015aa:	4b4e      	ldr	r3, [pc, #312]	; (80016e4 <LCD_Scan_Dir+0x61c>)
 80015ac:	2280      	movs	r2, #128	; 0x80
 80015ae:	615a      	str	r2, [r3, #20]
 80015b0:	4b4c      	ldr	r3, [pc, #304]	; (80016e4 <LCD_Scan_Dir+0x61c>)
 80015b2:	2280      	movs	r2, #128	; 0x80
 80015b4:	611a      	str	r2, [r3, #16]
 80015b6:	4b4b      	ldr	r3, [pc, #300]	; (80016e4 <LCD_Scan_Dir+0x61c>)
 80015b8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80015bc:	611a      	str	r2, [r3, #16]
			LCD_WR_DATA(0);
 80015be:	4b49      	ldr	r3, [pc, #292]	; (80016e4 <LCD_Scan_Dir+0x61c>)
 80015c0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80015c4:	611a      	str	r2, [r3, #16]
 80015c6:	4b47      	ldr	r3, [pc, #284]	; (80016e4 <LCD_Scan_Dir+0x61c>)
 80015c8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80015cc:	615a      	str	r2, [r3, #20]
 80015ce:	4b46      	ldr	r3, [pc, #280]	; (80016e8 <LCD_Scan_Dir+0x620>)
 80015d0:	2200      	movs	r2, #0
 80015d2:	60da      	str	r2, [r3, #12]
 80015d4:	4b43      	ldr	r3, [pc, #268]	; (80016e4 <LCD_Scan_Dir+0x61c>)
 80015d6:	2280      	movs	r2, #128	; 0x80
 80015d8:	615a      	str	r2, [r3, #20]
 80015da:	4b42      	ldr	r3, [pc, #264]	; (80016e4 <LCD_Scan_Dir+0x61c>)
 80015dc:	2280      	movs	r2, #128	; 0x80
 80015de:	611a      	str	r2, [r3, #16]
 80015e0:	4b40      	ldr	r3, [pc, #256]	; (80016e4 <LCD_Scan_Dir+0x61c>)
 80015e2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80015e6:	611a      	str	r2, [r3, #16]
			LCD_WR_DATA((lcddev.height - 1) >> 8);
 80015e8:	4b3e      	ldr	r3, [pc, #248]	; (80016e4 <LCD_Scan_Dir+0x61c>)
 80015ea:	f44f 7280 	mov.w	r2, #256	; 0x100
 80015ee:	611a      	str	r2, [r3, #16]
 80015f0:	4b3c      	ldr	r3, [pc, #240]	; (80016e4 <LCD_Scan_Dir+0x61c>)
 80015f2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80015f6:	615a      	str	r2, [r3, #20]
 80015f8:	4b39      	ldr	r3, [pc, #228]	; (80016e0 <LCD_Scan_Dir+0x618>)
 80015fa:	885b      	ldrh	r3, [r3, #2]
 80015fc:	3b01      	subs	r3, #1
 80015fe:	121a      	asrs	r2, r3, #8
 8001600:	4b39      	ldr	r3, [pc, #228]	; (80016e8 <LCD_Scan_Dir+0x620>)
 8001602:	60da      	str	r2, [r3, #12]
 8001604:	4b37      	ldr	r3, [pc, #220]	; (80016e4 <LCD_Scan_Dir+0x61c>)
 8001606:	2280      	movs	r2, #128	; 0x80
 8001608:	615a      	str	r2, [r3, #20]
 800160a:	4b36      	ldr	r3, [pc, #216]	; (80016e4 <LCD_Scan_Dir+0x61c>)
 800160c:	2280      	movs	r2, #128	; 0x80
 800160e:	611a      	str	r2, [r3, #16]
 8001610:	4b34      	ldr	r3, [pc, #208]	; (80016e4 <LCD_Scan_Dir+0x61c>)
 8001612:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001616:	611a      	str	r2, [r3, #16]
			LCD_WR_DATA((lcddev.height - 1) & 0XFF);
 8001618:	4b32      	ldr	r3, [pc, #200]	; (80016e4 <LCD_Scan_Dir+0x61c>)
 800161a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800161e:	611a      	str	r2, [r3, #16]
 8001620:	4b30      	ldr	r3, [pc, #192]	; (80016e4 <LCD_Scan_Dir+0x61c>)
 8001622:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001626:	615a      	str	r2, [r3, #20]
 8001628:	4b2d      	ldr	r3, [pc, #180]	; (80016e0 <LCD_Scan_Dir+0x618>)
 800162a:	885b      	ldrh	r3, [r3, #2]
 800162c:	3b01      	subs	r3, #1
 800162e:	4a2e      	ldr	r2, [pc, #184]	; (80016e8 <LCD_Scan_Dir+0x620>)
 8001630:	b2db      	uxtb	r3, r3
 8001632:	60d3      	str	r3, [r2, #12]
 8001634:	4b2b      	ldr	r3, [pc, #172]	; (80016e4 <LCD_Scan_Dir+0x61c>)
 8001636:	2280      	movs	r2, #128	; 0x80
 8001638:	615a      	str	r2, [r3, #20]
 800163a:	4b2a      	ldr	r3, [pc, #168]	; (80016e4 <LCD_Scan_Dir+0x61c>)
 800163c:	2280      	movs	r2, #128	; 0x80
 800163e:	611a      	str	r2, [r3, #16]
 8001640:	4b28      	ldr	r3, [pc, #160]	; (80016e4 <LCD_Scan_Dir+0x61c>)
 8001642:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001646:	611a      	str	r2, [r3, #16]
		if (lcddev.id == 0X5510) {
 8001648:	e046      	b.n	80016d8 <LCD_Scan_Dir+0x610>
		}
	} else {
		switch (dir) {
 800164a:	79fb      	ldrb	r3, [r7, #7]
 800164c:	2b07      	cmp	r3, #7
 800164e:	d836      	bhi.n	80016be <LCD_Scan_Dir+0x5f6>
 8001650:	a201      	add	r2, pc, #4	; (adr r2, 8001658 <LCD_Scan_Dir+0x590>)
 8001652:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001656:	bf00      	nop
 8001658:	08001679 	.word	0x08001679
 800165c:	08001683 	.word	0x08001683
 8001660:	0800168d 	.word	0x0800168d
 8001664:	080016bf 	.word	0x080016bf
 8001668:	08001697 	.word	0x08001697
 800166c:	080016a1 	.word	0x080016a1
 8001670:	080016ab 	.word	0x080016ab
 8001674:	080016b5 	.word	0x080016b5
		case L2R_U2D:	//从左到右,从上到下
			regval |= (1 << 5) | (1 << 4) | (0 << 3);
 8001678:	89fb      	ldrh	r3, [r7, #14]
 800167a:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 800167e:	81fb      	strh	r3, [r7, #14]
			break;
 8001680:	e01d      	b.n	80016be <LCD_Scan_Dir+0x5f6>
		case L2R_D2U:	//从左到右,从下到上
			regval |= (0 << 5) | (1 << 4) | (0 << 3);
 8001682:	89fb      	ldrh	r3, [r7, #14]
 8001684:	f043 0310 	orr.w	r3, r3, #16
 8001688:	81fb      	strh	r3, [r7, #14]
			break;
 800168a:	e018      	b.n	80016be <LCD_Scan_Dir+0x5f6>
		case R2L_U2D:	//从右到左,从上到下
			regval |= (1 << 5) | (0 << 4) | (0 << 3);
 800168c:	89fb      	ldrh	r3, [r7, #14]
 800168e:	f043 0320 	orr.w	r3, r3, #32
 8001692:	81fb      	strh	r3, [r7, #14]
			break;
 8001694:	e013      	b.n	80016be <LCD_Scan_Dir+0x5f6>
		case R2L_D2U:	//从右到左,从下到上
			regval |= (0 << 5) | (0 << 4) | (0 << 3);
			break;
		case U2D_L2R:	//从上到下,从左到右
			regval |= (1 << 5) | (1 << 4) | (1 << 3);
 8001696:	89fb      	ldrh	r3, [r7, #14]
 8001698:	f043 0338 	orr.w	r3, r3, #56	; 0x38
 800169c:	81fb      	strh	r3, [r7, #14]
			break;
 800169e:	e00e      	b.n	80016be <LCD_Scan_Dir+0x5f6>
		case U2D_R2L:	//从上到下,从右到左
			regval |= (1 << 5) | (0 << 4) | (1 << 3);
 80016a0:	89fb      	ldrh	r3, [r7, #14]
 80016a2:	f043 0328 	orr.w	r3, r3, #40	; 0x28
 80016a6:	81fb      	strh	r3, [r7, #14]
			break;
 80016a8:	e009      	b.n	80016be <LCD_Scan_Dir+0x5f6>
		case D2U_L2R:	//从下到上,从左到右
			regval |= (0 << 5) | (1 << 4) | (1 << 3);
 80016aa:	89fb      	ldrh	r3, [r7, #14]
 80016ac:	f043 0318 	orr.w	r3, r3, #24
 80016b0:	81fb      	strh	r3, [r7, #14]
			break;
 80016b2:	e004      	b.n	80016be <LCD_Scan_Dir+0x5f6>
		case D2U_R2L:	//从下到上,从右到左
			regval |= (0 << 5) | (0 << 4) | (1 << 3);
 80016b4:	89fb      	ldrh	r3, [r7, #14]
 80016b6:	f043 0308 	orr.w	r3, r3, #8
 80016ba:	81fb      	strh	r3, [r7, #14]
			break;
 80016bc:	bf00      	nop
		}
		dirreg = 0X03;
 80016be:	2303      	movs	r3, #3
 80016c0:	81bb      	strh	r3, [r7, #12]
		regval |= 1 << 12;
 80016c2:	89fb      	ldrh	r3, [r7, #14]
 80016c4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80016c8:	81fb      	strh	r3, [r7, #14]
		LCD_WriteReg(dirreg, regval);
 80016ca:	89fa      	ldrh	r2, [r7, #14]
 80016cc:	89bb      	ldrh	r3, [r7, #12]
 80016ce:	4611      	mov	r1, r2
 80016d0:	4618      	mov	r0, r3
 80016d2:	f7ff f9e7 	bl	8000aa4 <LCD_WriteReg>
	}
}
 80016d6:	bf00      	nop
 80016d8:	bf00      	nop
 80016da:	3710      	adds	r7, #16
 80016dc:	46bd      	mov	sp, r7
 80016de:	bd80      	pop	{r7, pc}
 80016e0:	20000080 	.word	0x20000080
 80016e4:	40011000 	.word	0x40011000
 80016e8:	40010c00 	.word	0x40010c00

080016ec <LCD_Fast_DrawPoint>:
	LCD_WriteRAM_Prepare();
	LCD_WR_DATA(POINT_COLOR); //POINT_COLOR: Color of this point
}
//Draw a point with color(quicker)
//x,y: coordinate
void LCD_Fast_DrawPoint(uint16_t x, uint16_t y, uint16_t color) {
 80016ec:	b580      	push	{r7, lr}
 80016ee:	b082      	sub	sp, #8
 80016f0:	af00      	add	r7, sp, #0
 80016f2:	4603      	mov	r3, r0
 80016f4:	80fb      	strh	r3, [r7, #6]
 80016f6:	460b      	mov	r3, r1
 80016f8:	80bb      	strh	r3, [r7, #4]
 80016fa:	4613      	mov	r3, r2
 80016fc:	807b      	strh	r3, [r7, #2]
	if (lcddev.id == 0X9341 || lcddev.id == 0X5310) {
 80016fe:	4b75      	ldr	r3, [pc, #468]	; (80018d4 <LCD_Fast_DrawPoint+0x1e8>)
 8001700:	889b      	ldrh	r3, [r3, #4]
 8001702:	f249 3241 	movw	r2, #37697	; 0x9341
 8001706:	4293      	cmp	r3, r2
 8001708:	d005      	beq.n	8001716 <LCD_Fast_DrawPoint+0x2a>
 800170a:	4b72      	ldr	r3, [pc, #456]	; (80018d4 <LCD_Fast_DrawPoint+0x1e8>)
 800170c:	889b      	ldrh	r3, [r3, #4]
 800170e:	f245 3210 	movw	r2, #21264	; 0x5310
 8001712:	4293      	cmp	r3, r2
 8001714:	d164      	bne.n	80017e0 <LCD_Fast_DrawPoint+0xf4>
		LCD_WR_REG(lcddev.setxcmd);
 8001716:	4b6f      	ldr	r3, [pc, #444]	; (80018d4 <LCD_Fast_DrawPoint+0x1e8>)
 8001718:	895b      	ldrh	r3, [r3, #10]
 800171a:	4618      	mov	r0, r3
 800171c:	f7ff f936 	bl	800098c <LCD_WR_REG>
		LCD_WR_DATA(x >> 8);
 8001720:	4b6d      	ldr	r3, [pc, #436]	; (80018d8 <LCD_Fast_DrawPoint+0x1ec>)
 8001722:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001726:	611a      	str	r2, [r3, #16]
 8001728:	4b6b      	ldr	r3, [pc, #428]	; (80018d8 <LCD_Fast_DrawPoint+0x1ec>)
 800172a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800172e:	615a      	str	r2, [r3, #20]
 8001730:	88fb      	ldrh	r3, [r7, #6]
 8001732:	0a1b      	lsrs	r3, r3, #8
 8001734:	b29a      	uxth	r2, r3
 8001736:	4b69      	ldr	r3, [pc, #420]	; (80018dc <LCD_Fast_DrawPoint+0x1f0>)
 8001738:	60da      	str	r2, [r3, #12]
 800173a:	4b67      	ldr	r3, [pc, #412]	; (80018d8 <LCD_Fast_DrawPoint+0x1ec>)
 800173c:	2280      	movs	r2, #128	; 0x80
 800173e:	615a      	str	r2, [r3, #20]
 8001740:	4b65      	ldr	r3, [pc, #404]	; (80018d8 <LCD_Fast_DrawPoint+0x1ec>)
 8001742:	2280      	movs	r2, #128	; 0x80
 8001744:	611a      	str	r2, [r3, #16]
 8001746:	4b64      	ldr	r3, [pc, #400]	; (80018d8 <LCD_Fast_DrawPoint+0x1ec>)
 8001748:	f44f 7200 	mov.w	r2, #512	; 0x200
 800174c:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(x & 0XFF);
 800174e:	4b62      	ldr	r3, [pc, #392]	; (80018d8 <LCD_Fast_DrawPoint+0x1ec>)
 8001750:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001754:	611a      	str	r2, [r3, #16]
 8001756:	4b60      	ldr	r3, [pc, #384]	; (80018d8 <LCD_Fast_DrawPoint+0x1ec>)
 8001758:	f44f 7200 	mov.w	r2, #512	; 0x200
 800175c:	615a      	str	r2, [r3, #20]
 800175e:	88fb      	ldrh	r3, [r7, #6]
 8001760:	4a5e      	ldr	r2, [pc, #376]	; (80018dc <LCD_Fast_DrawPoint+0x1f0>)
 8001762:	b2db      	uxtb	r3, r3
 8001764:	60d3      	str	r3, [r2, #12]
 8001766:	4b5c      	ldr	r3, [pc, #368]	; (80018d8 <LCD_Fast_DrawPoint+0x1ec>)
 8001768:	2280      	movs	r2, #128	; 0x80
 800176a:	615a      	str	r2, [r3, #20]
 800176c:	4b5a      	ldr	r3, [pc, #360]	; (80018d8 <LCD_Fast_DrawPoint+0x1ec>)
 800176e:	2280      	movs	r2, #128	; 0x80
 8001770:	611a      	str	r2, [r3, #16]
 8001772:	4b59      	ldr	r3, [pc, #356]	; (80018d8 <LCD_Fast_DrawPoint+0x1ec>)
 8001774:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001778:	611a      	str	r2, [r3, #16]
		LCD_WR_REG(lcddev.setycmd);
 800177a:	4b56      	ldr	r3, [pc, #344]	; (80018d4 <LCD_Fast_DrawPoint+0x1e8>)
 800177c:	899b      	ldrh	r3, [r3, #12]
 800177e:	4618      	mov	r0, r3
 8001780:	f7ff f904 	bl	800098c <LCD_WR_REG>
		LCD_WR_DATA(y >> 8);
 8001784:	4b54      	ldr	r3, [pc, #336]	; (80018d8 <LCD_Fast_DrawPoint+0x1ec>)
 8001786:	f44f 7280 	mov.w	r2, #256	; 0x100
 800178a:	611a      	str	r2, [r3, #16]
 800178c:	4b52      	ldr	r3, [pc, #328]	; (80018d8 <LCD_Fast_DrawPoint+0x1ec>)
 800178e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001792:	615a      	str	r2, [r3, #20]
 8001794:	88bb      	ldrh	r3, [r7, #4]
 8001796:	0a1b      	lsrs	r3, r3, #8
 8001798:	b29a      	uxth	r2, r3
 800179a:	4b50      	ldr	r3, [pc, #320]	; (80018dc <LCD_Fast_DrawPoint+0x1f0>)
 800179c:	60da      	str	r2, [r3, #12]
 800179e:	4b4e      	ldr	r3, [pc, #312]	; (80018d8 <LCD_Fast_DrawPoint+0x1ec>)
 80017a0:	2280      	movs	r2, #128	; 0x80
 80017a2:	615a      	str	r2, [r3, #20]
 80017a4:	4b4c      	ldr	r3, [pc, #304]	; (80018d8 <LCD_Fast_DrawPoint+0x1ec>)
 80017a6:	2280      	movs	r2, #128	; 0x80
 80017a8:	611a      	str	r2, [r3, #16]
 80017aa:	4b4b      	ldr	r3, [pc, #300]	; (80018d8 <LCD_Fast_DrawPoint+0x1ec>)
 80017ac:	f44f 7200 	mov.w	r2, #512	; 0x200
 80017b0:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(y & 0XFF);
 80017b2:	4b49      	ldr	r3, [pc, #292]	; (80018d8 <LCD_Fast_DrawPoint+0x1ec>)
 80017b4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80017b8:	611a      	str	r2, [r3, #16]
 80017ba:	4b47      	ldr	r3, [pc, #284]	; (80018d8 <LCD_Fast_DrawPoint+0x1ec>)
 80017bc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80017c0:	615a      	str	r2, [r3, #20]
 80017c2:	88bb      	ldrh	r3, [r7, #4]
 80017c4:	4a45      	ldr	r2, [pc, #276]	; (80018dc <LCD_Fast_DrawPoint+0x1f0>)
 80017c6:	b2db      	uxtb	r3, r3
 80017c8:	60d3      	str	r3, [r2, #12]
 80017ca:	4b43      	ldr	r3, [pc, #268]	; (80018d8 <LCD_Fast_DrawPoint+0x1ec>)
 80017cc:	2280      	movs	r2, #128	; 0x80
 80017ce:	615a      	str	r2, [r3, #20]
 80017d0:	4b41      	ldr	r3, [pc, #260]	; (80018d8 <LCD_Fast_DrawPoint+0x1ec>)
 80017d2:	2280      	movs	r2, #128	; 0x80
 80017d4:	611a      	str	r2, [r3, #16]
 80017d6:	4b40      	ldr	r3, [pc, #256]	; (80018d8 <LCD_Fast_DrawPoint+0x1ec>)
 80017d8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80017dc:	611a      	str	r2, [r3, #16]
 80017de:	e1e6      	b.n	8001bae <LCD_Fast_DrawPoint+0x4c2>
	} else if (lcddev.id == 0X5510) {
 80017e0:	4b3c      	ldr	r3, [pc, #240]	; (80018d4 <LCD_Fast_DrawPoint+0x1e8>)
 80017e2:	889b      	ldrh	r3, [r3, #4]
 80017e4:	f245 5210 	movw	r2, #21776	; 0x5510
 80017e8:	4293      	cmp	r3, r2
 80017ea:	d179      	bne.n	80018e0 <LCD_Fast_DrawPoint+0x1f4>
		LCD_WR_REG(lcddev.setxcmd);
 80017ec:	4b39      	ldr	r3, [pc, #228]	; (80018d4 <LCD_Fast_DrawPoint+0x1e8>)
 80017ee:	895b      	ldrh	r3, [r3, #10]
 80017f0:	4618      	mov	r0, r3
 80017f2:	f7ff f8cb 	bl	800098c <LCD_WR_REG>
		LCD_WR_DATA(x >> 8);
 80017f6:	4b38      	ldr	r3, [pc, #224]	; (80018d8 <LCD_Fast_DrawPoint+0x1ec>)
 80017f8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80017fc:	611a      	str	r2, [r3, #16]
 80017fe:	4b36      	ldr	r3, [pc, #216]	; (80018d8 <LCD_Fast_DrawPoint+0x1ec>)
 8001800:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001804:	615a      	str	r2, [r3, #20]
 8001806:	88fb      	ldrh	r3, [r7, #6]
 8001808:	0a1b      	lsrs	r3, r3, #8
 800180a:	b29a      	uxth	r2, r3
 800180c:	4b33      	ldr	r3, [pc, #204]	; (80018dc <LCD_Fast_DrawPoint+0x1f0>)
 800180e:	60da      	str	r2, [r3, #12]
 8001810:	4b31      	ldr	r3, [pc, #196]	; (80018d8 <LCD_Fast_DrawPoint+0x1ec>)
 8001812:	2280      	movs	r2, #128	; 0x80
 8001814:	615a      	str	r2, [r3, #20]
 8001816:	4b30      	ldr	r3, [pc, #192]	; (80018d8 <LCD_Fast_DrawPoint+0x1ec>)
 8001818:	2280      	movs	r2, #128	; 0x80
 800181a:	611a      	str	r2, [r3, #16]
 800181c:	4b2e      	ldr	r3, [pc, #184]	; (80018d8 <LCD_Fast_DrawPoint+0x1ec>)
 800181e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001822:	611a      	str	r2, [r3, #16]
		LCD_WR_REG(lcddev.setxcmd + 1);
 8001824:	4b2b      	ldr	r3, [pc, #172]	; (80018d4 <LCD_Fast_DrawPoint+0x1e8>)
 8001826:	895b      	ldrh	r3, [r3, #10]
 8001828:	3301      	adds	r3, #1
 800182a:	b29b      	uxth	r3, r3
 800182c:	4618      	mov	r0, r3
 800182e:	f7ff f8ad 	bl	800098c <LCD_WR_REG>
		LCD_WR_DATA(x & 0XFF);
 8001832:	4b29      	ldr	r3, [pc, #164]	; (80018d8 <LCD_Fast_DrawPoint+0x1ec>)
 8001834:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001838:	611a      	str	r2, [r3, #16]
 800183a:	4b27      	ldr	r3, [pc, #156]	; (80018d8 <LCD_Fast_DrawPoint+0x1ec>)
 800183c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001840:	615a      	str	r2, [r3, #20]
 8001842:	88fb      	ldrh	r3, [r7, #6]
 8001844:	4a25      	ldr	r2, [pc, #148]	; (80018dc <LCD_Fast_DrawPoint+0x1f0>)
 8001846:	b2db      	uxtb	r3, r3
 8001848:	60d3      	str	r3, [r2, #12]
 800184a:	4b23      	ldr	r3, [pc, #140]	; (80018d8 <LCD_Fast_DrawPoint+0x1ec>)
 800184c:	2280      	movs	r2, #128	; 0x80
 800184e:	615a      	str	r2, [r3, #20]
 8001850:	4b21      	ldr	r3, [pc, #132]	; (80018d8 <LCD_Fast_DrawPoint+0x1ec>)
 8001852:	2280      	movs	r2, #128	; 0x80
 8001854:	611a      	str	r2, [r3, #16]
 8001856:	4b20      	ldr	r3, [pc, #128]	; (80018d8 <LCD_Fast_DrawPoint+0x1ec>)
 8001858:	f44f 7200 	mov.w	r2, #512	; 0x200
 800185c:	611a      	str	r2, [r3, #16]
		LCD_WR_REG(lcddev.setycmd);
 800185e:	4b1d      	ldr	r3, [pc, #116]	; (80018d4 <LCD_Fast_DrawPoint+0x1e8>)
 8001860:	899b      	ldrh	r3, [r3, #12]
 8001862:	4618      	mov	r0, r3
 8001864:	f7ff f892 	bl	800098c <LCD_WR_REG>
		LCD_WR_DATA(y >> 8);
 8001868:	4b1b      	ldr	r3, [pc, #108]	; (80018d8 <LCD_Fast_DrawPoint+0x1ec>)
 800186a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800186e:	611a      	str	r2, [r3, #16]
 8001870:	4b19      	ldr	r3, [pc, #100]	; (80018d8 <LCD_Fast_DrawPoint+0x1ec>)
 8001872:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001876:	615a      	str	r2, [r3, #20]
 8001878:	88bb      	ldrh	r3, [r7, #4]
 800187a:	0a1b      	lsrs	r3, r3, #8
 800187c:	b29a      	uxth	r2, r3
 800187e:	4b17      	ldr	r3, [pc, #92]	; (80018dc <LCD_Fast_DrawPoint+0x1f0>)
 8001880:	60da      	str	r2, [r3, #12]
 8001882:	4b15      	ldr	r3, [pc, #84]	; (80018d8 <LCD_Fast_DrawPoint+0x1ec>)
 8001884:	2280      	movs	r2, #128	; 0x80
 8001886:	615a      	str	r2, [r3, #20]
 8001888:	4b13      	ldr	r3, [pc, #76]	; (80018d8 <LCD_Fast_DrawPoint+0x1ec>)
 800188a:	2280      	movs	r2, #128	; 0x80
 800188c:	611a      	str	r2, [r3, #16]
 800188e:	4b12      	ldr	r3, [pc, #72]	; (80018d8 <LCD_Fast_DrawPoint+0x1ec>)
 8001890:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001894:	611a      	str	r2, [r3, #16]
		LCD_WR_REG(lcddev.setycmd + 1);
 8001896:	4b0f      	ldr	r3, [pc, #60]	; (80018d4 <LCD_Fast_DrawPoint+0x1e8>)
 8001898:	899b      	ldrh	r3, [r3, #12]
 800189a:	3301      	adds	r3, #1
 800189c:	b29b      	uxth	r3, r3
 800189e:	4618      	mov	r0, r3
 80018a0:	f7ff f874 	bl	800098c <LCD_WR_REG>
		LCD_WR_DATA(y & 0XFF);
 80018a4:	4b0c      	ldr	r3, [pc, #48]	; (80018d8 <LCD_Fast_DrawPoint+0x1ec>)
 80018a6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80018aa:	611a      	str	r2, [r3, #16]
 80018ac:	4b0a      	ldr	r3, [pc, #40]	; (80018d8 <LCD_Fast_DrawPoint+0x1ec>)
 80018ae:	f44f 7200 	mov.w	r2, #512	; 0x200
 80018b2:	615a      	str	r2, [r3, #20]
 80018b4:	88bb      	ldrh	r3, [r7, #4]
 80018b6:	4a09      	ldr	r2, [pc, #36]	; (80018dc <LCD_Fast_DrawPoint+0x1f0>)
 80018b8:	b2db      	uxtb	r3, r3
 80018ba:	60d3      	str	r3, [r2, #12]
 80018bc:	4b06      	ldr	r3, [pc, #24]	; (80018d8 <LCD_Fast_DrawPoint+0x1ec>)
 80018be:	2280      	movs	r2, #128	; 0x80
 80018c0:	615a      	str	r2, [r3, #20]
 80018c2:	4b05      	ldr	r3, [pc, #20]	; (80018d8 <LCD_Fast_DrawPoint+0x1ec>)
 80018c4:	2280      	movs	r2, #128	; 0x80
 80018c6:	611a      	str	r2, [r3, #16]
 80018c8:	4b03      	ldr	r3, [pc, #12]	; (80018d8 <LCD_Fast_DrawPoint+0x1ec>)
 80018ca:	f44f 7200 	mov.w	r2, #512	; 0x200
 80018ce:	611a      	str	r2, [r3, #16]
 80018d0:	e16d      	b.n	8001bae <LCD_Fast_DrawPoint+0x4c2>
 80018d2:	bf00      	nop
 80018d4:	20000080 	.word	0x20000080
 80018d8:	40011000 	.word	0x40011000
 80018dc:	40010c00 	.word	0x40010c00
	} else if (lcddev.id == 0X1963) {
 80018e0:	4b68      	ldr	r3, [pc, #416]	; (8001a84 <LCD_Fast_DrawPoint+0x398>)
 80018e2:	889b      	ldrh	r3, [r3, #4]
 80018e4:	f641 1263 	movw	r2, #6499	; 0x1963
 80018e8:	4293      	cmp	r3, r2
 80018ea:	f040 80d1 	bne.w	8001a90 <LCD_Fast_DrawPoint+0x3a4>
		if (lcddev.dir == 0)
 80018ee:	4b65      	ldr	r3, [pc, #404]	; (8001a84 <LCD_Fast_DrawPoint+0x398>)
 80018f0:	799b      	ldrb	r3, [r3, #6]
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	d106      	bne.n	8001904 <LCD_Fast_DrawPoint+0x218>
			x = lcddev.width - 1 - x;
 80018f6:	4b63      	ldr	r3, [pc, #396]	; (8001a84 <LCD_Fast_DrawPoint+0x398>)
 80018f8:	881a      	ldrh	r2, [r3, #0]
 80018fa:	88fb      	ldrh	r3, [r7, #6]
 80018fc:	1ad3      	subs	r3, r2, r3
 80018fe:	b29b      	uxth	r3, r3
 8001900:	3b01      	subs	r3, #1
 8001902:	80fb      	strh	r3, [r7, #6]
		LCD_WR_REG(lcddev.setxcmd);
 8001904:	4b5f      	ldr	r3, [pc, #380]	; (8001a84 <LCD_Fast_DrawPoint+0x398>)
 8001906:	895b      	ldrh	r3, [r3, #10]
 8001908:	4618      	mov	r0, r3
 800190a:	f7ff f83f 	bl	800098c <LCD_WR_REG>
		LCD_WR_DATA(x >> 8);
 800190e:	4b5e      	ldr	r3, [pc, #376]	; (8001a88 <LCD_Fast_DrawPoint+0x39c>)
 8001910:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001914:	611a      	str	r2, [r3, #16]
 8001916:	4b5c      	ldr	r3, [pc, #368]	; (8001a88 <LCD_Fast_DrawPoint+0x39c>)
 8001918:	f44f 7200 	mov.w	r2, #512	; 0x200
 800191c:	615a      	str	r2, [r3, #20]
 800191e:	88fb      	ldrh	r3, [r7, #6]
 8001920:	0a1b      	lsrs	r3, r3, #8
 8001922:	b29a      	uxth	r2, r3
 8001924:	4b59      	ldr	r3, [pc, #356]	; (8001a8c <LCD_Fast_DrawPoint+0x3a0>)
 8001926:	60da      	str	r2, [r3, #12]
 8001928:	4b57      	ldr	r3, [pc, #348]	; (8001a88 <LCD_Fast_DrawPoint+0x39c>)
 800192a:	2280      	movs	r2, #128	; 0x80
 800192c:	615a      	str	r2, [r3, #20]
 800192e:	4b56      	ldr	r3, [pc, #344]	; (8001a88 <LCD_Fast_DrawPoint+0x39c>)
 8001930:	2280      	movs	r2, #128	; 0x80
 8001932:	611a      	str	r2, [r3, #16]
 8001934:	4b54      	ldr	r3, [pc, #336]	; (8001a88 <LCD_Fast_DrawPoint+0x39c>)
 8001936:	f44f 7200 	mov.w	r2, #512	; 0x200
 800193a:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(x & 0XFF);
 800193c:	4b52      	ldr	r3, [pc, #328]	; (8001a88 <LCD_Fast_DrawPoint+0x39c>)
 800193e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001942:	611a      	str	r2, [r3, #16]
 8001944:	4b50      	ldr	r3, [pc, #320]	; (8001a88 <LCD_Fast_DrawPoint+0x39c>)
 8001946:	f44f 7200 	mov.w	r2, #512	; 0x200
 800194a:	615a      	str	r2, [r3, #20]
 800194c:	88fb      	ldrh	r3, [r7, #6]
 800194e:	4a4f      	ldr	r2, [pc, #316]	; (8001a8c <LCD_Fast_DrawPoint+0x3a0>)
 8001950:	b2db      	uxtb	r3, r3
 8001952:	60d3      	str	r3, [r2, #12]
 8001954:	4b4c      	ldr	r3, [pc, #304]	; (8001a88 <LCD_Fast_DrawPoint+0x39c>)
 8001956:	2280      	movs	r2, #128	; 0x80
 8001958:	615a      	str	r2, [r3, #20]
 800195a:	4b4b      	ldr	r3, [pc, #300]	; (8001a88 <LCD_Fast_DrawPoint+0x39c>)
 800195c:	2280      	movs	r2, #128	; 0x80
 800195e:	611a      	str	r2, [r3, #16]
 8001960:	4b49      	ldr	r3, [pc, #292]	; (8001a88 <LCD_Fast_DrawPoint+0x39c>)
 8001962:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001966:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(x >> 8);
 8001968:	4b47      	ldr	r3, [pc, #284]	; (8001a88 <LCD_Fast_DrawPoint+0x39c>)
 800196a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800196e:	611a      	str	r2, [r3, #16]
 8001970:	4b45      	ldr	r3, [pc, #276]	; (8001a88 <LCD_Fast_DrawPoint+0x39c>)
 8001972:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001976:	615a      	str	r2, [r3, #20]
 8001978:	88fb      	ldrh	r3, [r7, #6]
 800197a:	0a1b      	lsrs	r3, r3, #8
 800197c:	b29a      	uxth	r2, r3
 800197e:	4b43      	ldr	r3, [pc, #268]	; (8001a8c <LCD_Fast_DrawPoint+0x3a0>)
 8001980:	60da      	str	r2, [r3, #12]
 8001982:	4b41      	ldr	r3, [pc, #260]	; (8001a88 <LCD_Fast_DrawPoint+0x39c>)
 8001984:	2280      	movs	r2, #128	; 0x80
 8001986:	615a      	str	r2, [r3, #20]
 8001988:	4b3f      	ldr	r3, [pc, #252]	; (8001a88 <LCD_Fast_DrawPoint+0x39c>)
 800198a:	2280      	movs	r2, #128	; 0x80
 800198c:	611a      	str	r2, [r3, #16]
 800198e:	4b3e      	ldr	r3, [pc, #248]	; (8001a88 <LCD_Fast_DrawPoint+0x39c>)
 8001990:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001994:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(x & 0XFF);
 8001996:	4b3c      	ldr	r3, [pc, #240]	; (8001a88 <LCD_Fast_DrawPoint+0x39c>)
 8001998:	f44f 7280 	mov.w	r2, #256	; 0x100
 800199c:	611a      	str	r2, [r3, #16]
 800199e:	4b3a      	ldr	r3, [pc, #232]	; (8001a88 <LCD_Fast_DrawPoint+0x39c>)
 80019a0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80019a4:	615a      	str	r2, [r3, #20]
 80019a6:	88fb      	ldrh	r3, [r7, #6]
 80019a8:	4a38      	ldr	r2, [pc, #224]	; (8001a8c <LCD_Fast_DrawPoint+0x3a0>)
 80019aa:	b2db      	uxtb	r3, r3
 80019ac:	60d3      	str	r3, [r2, #12]
 80019ae:	4b36      	ldr	r3, [pc, #216]	; (8001a88 <LCD_Fast_DrawPoint+0x39c>)
 80019b0:	2280      	movs	r2, #128	; 0x80
 80019b2:	615a      	str	r2, [r3, #20]
 80019b4:	4b34      	ldr	r3, [pc, #208]	; (8001a88 <LCD_Fast_DrawPoint+0x39c>)
 80019b6:	2280      	movs	r2, #128	; 0x80
 80019b8:	611a      	str	r2, [r3, #16]
 80019ba:	4b33      	ldr	r3, [pc, #204]	; (8001a88 <LCD_Fast_DrawPoint+0x39c>)
 80019bc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80019c0:	611a      	str	r2, [r3, #16]
		LCD_WR_REG(lcddev.setycmd);
 80019c2:	4b30      	ldr	r3, [pc, #192]	; (8001a84 <LCD_Fast_DrawPoint+0x398>)
 80019c4:	899b      	ldrh	r3, [r3, #12]
 80019c6:	4618      	mov	r0, r3
 80019c8:	f7fe ffe0 	bl	800098c <LCD_WR_REG>
		LCD_WR_DATA(y >> 8);
 80019cc:	4b2e      	ldr	r3, [pc, #184]	; (8001a88 <LCD_Fast_DrawPoint+0x39c>)
 80019ce:	f44f 7280 	mov.w	r2, #256	; 0x100
 80019d2:	611a      	str	r2, [r3, #16]
 80019d4:	4b2c      	ldr	r3, [pc, #176]	; (8001a88 <LCD_Fast_DrawPoint+0x39c>)
 80019d6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80019da:	615a      	str	r2, [r3, #20]
 80019dc:	88bb      	ldrh	r3, [r7, #4]
 80019de:	0a1b      	lsrs	r3, r3, #8
 80019e0:	b29a      	uxth	r2, r3
 80019e2:	4b2a      	ldr	r3, [pc, #168]	; (8001a8c <LCD_Fast_DrawPoint+0x3a0>)
 80019e4:	60da      	str	r2, [r3, #12]
 80019e6:	4b28      	ldr	r3, [pc, #160]	; (8001a88 <LCD_Fast_DrawPoint+0x39c>)
 80019e8:	2280      	movs	r2, #128	; 0x80
 80019ea:	615a      	str	r2, [r3, #20]
 80019ec:	4b26      	ldr	r3, [pc, #152]	; (8001a88 <LCD_Fast_DrawPoint+0x39c>)
 80019ee:	2280      	movs	r2, #128	; 0x80
 80019f0:	611a      	str	r2, [r3, #16]
 80019f2:	4b25      	ldr	r3, [pc, #148]	; (8001a88 <LCD_Fast_DrawPoint+0x39c>)
 80019f4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80019f8:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(y & 0XFF);
 80019fa:	4b23      	ldr	r3, [pc, #140]	; (8001a88 <LCD_Fast_DrawPoint+0x39c>)
 80019fc:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001a00:	611a      	str	r2, [r3, #16]
 8001a02:	4b21      	ldr	r3, [pc, #132]	; (8001a88 <LCD_Fast_DrawPoint+0x39c>)
 8001a04:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001a08:	615a      	str	r2, [r3, #20]
 8001a0a:	88bb      	ldrh	r3, [r7, #4]
 8001a0c:	4a1f      	ldr	r2, [pc, #124]	; (8001a8c <LCD_Fast_DrawPoint+0x3a0>)
 8001a0e:	b2db      	uxtb	r3, r3
 8001a10:	60d3      	str	r3, [r2, #12]
 8001a12:	4b1d      	ldr	r3, [pc, #116]	; (8001a88 <LCD_Fast_DrawPoint+0x39c>)
 8001a14:	2280      	movs	r2, #128	; 0x80
 8001a16:	615a      	str	r2, [r3, #20]
 8001a18:	4b1b      	ldr	r3, [pc, #108]	; (8001a88 <LCD_Fast_DrawPoint+0x39c>)
 8001a1a:	2280      	movs	r2, #128	; 0x80
 8001a1c:	611a      	str	r2, [r3, #16]
 8001a1e:	4b1a      	ldr	r3, [pc, #104]	; (8001a88 <LCD_Fast_DrawPoint+0x39c>)
 8001a20:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001a24:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(y >> 8);
 8001a26:	4b18      	ldr	r3, [pc, #96]	; (8001a88 <LCD_Fast_DrawPoint+0x39c>)
 8001a28:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001a2c:	611a      	str	r2, [r3, #16]
 8001a2e:	4b16      	ldr	r3, [pc, #88]	; (8001a88 <LCD_Fast_DrawPoint+0x39c>)
 8001a30:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001a34:	615a      	str	r2, [r3, #20]
 8001a36:	88bb      	ldrh	r3, [r7, #4]
 8001a38:	0a1b      	lsrs	r3, r3, #8
 8001a3a:	b29a      	uxth	r2, r3
 8001a3c:	4b13      	ldr	r3, [pc, #76]	; (8001a8c <LCD_Fast_DrawPoint+0x3a0>)
 8001a3e:	60da      	str	r2, [r3, #12]
 8001a40:	4b11      	ldr	r3, [pc, #68]	; (8001a88 <LCD_Fast_DrawPoint+0x39c>)
 8001a42:	2280      	movs	r2, #128	; 0x80
 8001a44:	615a      	str	r2, [r3, #20]
 8001a46:	4b10      	ldr	r3, [pc, #64]	; (8001a88 <LCD_Fast_DrawPoint+0x39c>)
 8001a48:	2280      	movs	r2, #128	; 0x80
 8001a4a:	611a      	str	r2, [r3, #16]
 8001a4c:	4b0e      	ldr	r3, [pc, #56]	; (8001a88 <LCD_Fast_DrawPoint+0x39c>)
 8001a4e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001a52:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(y & 0XFF);
 8001a54:	4b0c      	ldr	r3, [pc, #48]	; (8001a88 <LCD_Fast_DrawPoint+0x39c>)
 8001a56:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001a5a:	611a      	str	r2, [r3, #16]
 8001a5c:	4b0a      	ldr	r3, [pc, #40]	; (8001a88 <LCD_Fast_DrawPoint+0x39c>)
 8001a5e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001a62:	615a      	str	r2, [r3, #20]
 8001a64:	88bb      	ldrh	r3, [r7, #4]
 8001a66:	4a09      	ldr	r2, [pc, #36]	; (8001a8c <LCD_Fast_DrawPoint+0x3a0>)
 8001a68:	b2db      	uxtb	r3, r3
 8001a6a:	60d3      	str	r3, [r2, #12]
 8001a6c:	4b06      	ldr	r3, [pc, #24]	; (8001a88 <LCD_Fast_DrawPoint+0x39c>)
 8001a6e:	2280      	movs	r2, #128	; 0x80
 8001a70:	615a      	str	r2, [r3, #20]
 8001a72:	4b05      	ldr	r3, [pc, #20]	; (8001a88 <LCD_Fast_DrawPoint+0x39c>)
 8001a74:	2280      	movs	r2, #128	; 0x80
 8001a76:	611a      	str	r2, [r3, #16]
 8001a78:	4b03      	ldr	r3, [pc, #12]	; (8001a88 <LCD_Fast_DrawPoint+0x39c>)
 8001a7a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001a7e:	611a      	str	r2, [r3, #16]
 8001a80:	e095      	b.n	8001bae <LCD_Fast_DrawPoint+0x4c2>
 8001a82:	bf00      	nop
 8001a84:	20000080 	.word	0x20000080
 8001a88:	40011000 	.word	0x40011000
 8001a8c:	40010c00 	.word	0x40010c00
	} else if (lcddev.id == 0X6804) {
 8001a90:	4b5e      	ldr	r3, [pc, #376]	; (8001c0c <LCD_Fast_DrawPoint+0x520>)
 8001a92:	889b      	ldrh	r3, [r3, #4]
 8001a94:	f646 0204 	movw	r2, #26628	; 0x6804
 8001a98:	4293      	cmp	r3, r2
 8001a9a:	d16f      	bne.n	8001b7c <LCD_Fast_DrawPoint+0x490>
		if (lcddev.dir == 1)
 8001a9c:	4b5b      	ldr	r3, [pc, #364]	; (8001c0c <LCD_Fast_DrawPoint+0x520>)
 8001a9e:	799b      	ldrb	r3, [r3, #6]
 8001aa0:	2b01      	cmp	r3, #1
 8001aa2:	d106      	bne.n	8001ab2 <LCD_Fast_DrawPoint+0x3c6>
			x = lcddev.width - 1 - x;	//横屏时处理
 8001aa4:	4b59      	ldr	r3, [pc, #356]	; (8001c0c <LCD_Fast_DrawPoint+0x520>)
 8001aa6:	881a      	ldrh	r2, [r3, #0]
 8001aa8:	88fb      	ldrh	r3, [r7, #6]
 8001aaa:	1ad3      	subs	r3, r2, r3
 8001aac:	b29b      	uxth	r3, r3
 8001aae:	3b01      	subs	r3, #1
 8001ab0:	80fb      	strh	r3, [r7, #6]
		LCD_WR_REG(lcddev.setxcmd);
 8001ab2:	4b56      	ldr	r3, [pc, #344]	; (8001c0c <LCD_Fast_DrawPoint+0x520>)
 8001ab4:	895b      	ldrh	r3, [r3, #10]
 8001ab6:	4618      	mov	r0, r3
 8001ab8:	f7fe ff68 	bl	800098c <LCD_WR_REG>
		LCD_WR_DATA(x >> 8);
 8001abc:	4b54      	ldr	r3, [pc, #336]	; (8001c10 <LCD_Fast_DrawPoint+0x524>)
 8001abe:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001ac2:	611a      	str	r2, [r3, #16]
 8001ac4:	4b52      	ldr	r3, [pc, #328]	; (8001c10 <LCD_Fast_DrawPoint+0x524>)
 8001ac6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001aca:	615a      	str	r2, [r3, #20]
 8001acc:	88fb      	ldrh	r3, [r7, #6]
 8001ace:	0a1b      	lsrs	r3, r3, #8
 8001ad0:	b29a      	uxth	r2, r3
 8001ad2:	4b50      	ldr	r3, [pc, #320]	; (8001c14 <LCD_Fast_DrawPoint+0x528>)
 8001ad4:	60da      	str	r2, [r3, #12]
 8001ad6:	4b4e      	ldr	r3, [pc, #312]	; (8001c10 <LCD_Fast_DrawPoint+0x524>)
 8001ad8:	2280      	movs	r2, #128	; 0x80
 8001ada:	615a      	str	r2, [r3, #20]
 8001adc:	4b4c      	ldr	r3, [pc, #304]	; (8001c10 <LCD_Fast_DrawPoint+0x524>)
 8001ade:	2280      	movs	r2, #128	; 0x80
 8001ae0:	611a      	str	r2, [r3, #16]
 8001ae2:	4b4b      	ldr	r3, [pc, #300]	; (8001c10 <LCD_Fast_DrawPoint+0x524>)
 8001ae4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001ae8:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(x & 0XFF);
 8001aea:	4b49      	ldr	r3, [pc, #292]	; (8001c10 <LCD_Fast_DrawPoint+0x524>)
 8001aec:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001af0:	611a      	str	r2, [r3, #16]
 8001af2:	4b47      	ldr	r3, [pc, #284]	; (8001c10 <LCD_Fast_DrawPoint+0x524>)
 8001af4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001af8:	615a      	str	r2, [r3, #20]
 8001afa:	88fb      	ldrh	r3, [r7, #6]
 8001afc:	4a45      	ldr	r2, [pc, #276]	; (8001c14 <LCD_Fast_DrawPoint+0x528>)
 8001afe:	b2db      	uxtb	r3, r3
 8001b00:	60d3      	str	r3, [r2, #12]
 8001b02:	4b43      	ldr	r3, [pc, #268]	; (8001c10 <LCD_Fast_DrawPoint+0x524>)
 8001b04:	2280      	movs	r2, #128	; 0x80
 8001b06:	615a      	str	r2, [r3, #20]
 8001b08:	4b41      	ldr	r3, [pc, #260]	; (8001c10 <LCD_Fast_DrawPoint+0x524>)
 8001b0a:	2280      	movs	r2, #128	; 0x80
 8001b0c:	611a      	str	r2, [r3, #16]
 8001b0e:	4b40      	ldr	r3, [pc, #256]	; (8001c10 <LCD_Fast_DrawPoint+0x524>)
 8001b10:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001b14:	611a      	str	r2, [r3, #16]
		LCD_WR_REG(lcddev.setycmd);
 8001b16:	4b3d      	ldr	r3, [pc, #244]	; (8001c0c <LCD_Fast_DrawPoint+0x520>)
 8001b18:	899b      	ldrh	r3, [r3, #12]
 8001b1a:	4618      	mov	r0, r3
 8001b1c:	f7fe ff36 	bl	800098c <LCD_WR_REG>
		LCD_WR_DATA(y >> 8);
 8001b20:	4b3b      	ldr	r3, [pc, #236]	; (8001c10 <LCD_Fast_DrawPoint+0x524>)
 8001b22:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001b26:	611a      	str	r2, [r3, #16]
 8001b28:	4b39      	ldr	r3, [pc, #228]	; (8001c10 <LCD_Fast_DrawPoint+0x524>)
 8001b2a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001b2e:	615a      	str	r2, [r3, #20]
 8001b30:	88bb      	ldrh	r3, [r7, #4]
 8001b32:	0a1b      	lsrs	r3, r3, #8
 8001b34:	b29a      	uxth	r2, r3
 8001b36:	4b37      	ldr	r3, [pc, #220]	; (8001c14 <LCD_Fast_DrawPoint+0x528>)
 8001b38:	60da      	str	r2, [r3, #12]
 8001b3a:	4b35      	ldr	r3, [pc, #212]	; (8001c10 <LCD_Fast_DrawPoint+0x524>)
 8001b3c:	2280      	movs	r2, #128	; 0x80
 8001b3e:	615a      	str	r2, [r3, #20]
 8001b40:	4b33      	ldr	r3, [pc, #204]	; (8001c10 <LCD_Fast_DrawPoint+0x524>)
 8001b42:	2280      	movs	r2, #128	; 0x80
 8001b44:	611a      	str	r2, [r3, #16]
 8001b46:	4b32      	ldr	r3, [pc, #200]	; (8001c10 <LCD_Fast_DrawPoint+0x524>)
 8001b48:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001b4c:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(y & 0XFF);
 8001b4e:	4b30      	ldr	r3, [pc, #192]	; (8001c10 <LCD_Fast_DrawPoint+0x524>)
 8001b50:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001b54:	611a      	str	r2, [r3, #16]
 8001b56:	4b2e      	ldr	r3, [pc, #184]	; (8001c10 <LCD_Fast_DrawPoint+0x524>)
 8001b58:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001b5c:	615a      	str	r2, [r3, #20]
 8001b5e:	88bb      	ldrh	r3, [r7, #4]
 8001b60:	4a2c      	ldr	r2, [pc, #176]	; (8001c14 <LCD_Fast_DrawPoint+0x528>)
 8001b62:	b2db      	uxtb	r3, r3
 8001b64:	60d3      	str	r3, [r2, #12]
 8001b66:	4b2a      	ldr	r3, [pc, #168]	; (8001c10 <LCD_Fast_DrawPoint+0x524>)
 8001b68:	2280      	movs	r2, #128	; 0x80
 8001b6a:	615a      	str	r2, [r3, #20]
 8001b6c:	4b28      	ldr	r3, [pc, #160]	; (8001c10 <LCD_Fast_DrawPoint+0x524>)
 8001b6e:	2280      	movs	r2, #128	; 0x80
 8001b70:	611a      	str	r2, [r3, #16]
 8001b72:	4b27      	ldr	r3, [pc, #156]	; (8001c10 <LCD_Fast_DrawPoint+0x524>)
 8001b74:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001b78:	611a      	str	r2, [r3, #16]
 8001b7a:	e018      	b.n	8001bae <LCD_Fast_DrawPoint+0x4c2>
	} else {
		if (lcddev.dir == 1)
 8001b7c:	4b23      	ldr	r3, [pc, #140]	; (8001c0c <LCD_Fast_DrawPoint+0x520>)
 8001b7e:	799b      	ldrb	r3, [r3, #6]
 8001b80:	2b01      	cmp	r3, #1
 8001b82:	d106      	bne.n	8001b92 <LCD_Fast_DrawPoint+0x4a6>
			x = lcddev.width - 1 - x;	//横屏其实就是调转x,y坐标
 8001b84:	4b21      	ldr	r3, [pc, #132]	; (8001c0c <LCD_Fast_DrawPoint+0x520>)
 8001b86:	881a      	ldrh	r2, [r3, #0]
 8001b88:	88fb      	ldrh	r3, [r7, #6]
 8001b8a:	1ad3      	subs	r3, r2, r3
 8001b8c:	b29b      	uxth	r3, r3
 8001b8e:	3b01      	subs	r3, #1
 8001b90:	80fb      	strh	r3, [r7, #6]
		LCD_WriteReg(lcddev.setxcmd, x);
 8001b92:	4b1e      	ldr	r3, [pc, #120]	; (8001c0c <LCD_Fast_DrawPoint+0x520>)
 8001b94:	895b      	ldrh	r3, [r3, #10]
 8001b96:	88fa      	ldrh	r2, [r7, #6]
 8001b98:	4611      	mov	r1, r2
 8001b9a:	4618      	mov	r0, r3
 8001b9c:	f7fe ff82 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(lcddev.setycmd, y);
 8001ba0:	4b1a      	ldr	r3, [pc, #104]	; (8001c0c <LCD_Fast_DrawPoint+0x520>)
 8001ba2:	899b      	ldrh	r3, [r3, #12]
 8001ba4:	88ba      	ldrh	r2, [r7, #4]
 8001ba6:	4611      	mov	r1, r2
 8001ba8:	4618      	mov	r0, r3
 8001baa:	f7fe ff7b 	bl	8000aa4 <LCD_WriteReg>
	}
	LCD_RS_CLR;
 8001bae:	4b18      	ldr	r3, [pc, #96]	; (8001c10 <LCD_Fast_DrawPoint+0x524>)
 8001bb0:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001bb4:	615a      	str	r2, [r3, #20]
	LCD_CS_CLR;
 8001bb6:	4b16      	ldr	r3, [pc, #88]	; (8001c10 <LCD_Fast_DrawPoint+0x524>)
 8001bb8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001bbc:	615a      	str	r2, [r3, #20]
	DATAOUT(lcddev.wramcmd);	//写指令
 8001bbe:	4b13      	ldr	r3, [pc, #76]	; (8001c0c <LCD_Fast_DrawPoint+0x520>)
 8001bc0:	891a      	ldrh	r2, [r3, #8]
 8001bc2:	4b14      	ldr	r3, [pc, #80]	; (8001c14 <LCD_Fast_DrawPoint+0x528>)
 8001bc4:	60da      	str	r2, [r3, #12]
	LCD_WR_CLR;
 8001bc6:	4b12      	ldr	r3, [pc, #72]	; (8001c10 <LCD_Fast_DrawPoint+0x524>)
 8001bc8:	2280      	movs	r2, #128	; 0x80
 8001bca:	615a      	str	r2, [r3, #20]
	LCD_WR_SET;
 8001bcc:	4b10      	ldr	r3, [pc, #64]	; (8001c10 <LCD_Fast_DrawPoint+0x524>)
 8001bce:	2280      	movs	r2, #128	; 0x80
 8001bd0:	611a      	str	r2, [r3, #16]
	LCD_CS_SET;
 8001bd2:	4b0f      	ldr	r3, [pc, #60]	; (8001c10 <LCD_Fast_DrawPoint+0x524>)
 8001bd4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001bd8:	611a      	str	r2, [r3, #16]
	LCD_WR_DATA(color);		//写数据
 8001bda:	4b0d      	ldr	r3, [pc, #52]	; (8001c10 <LCD_Fast_DrawPoint+0x524>)
 8001bdc:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001be0:	611a      	str	r2, [r3, #16]
 8001be2:	4b0b      	ldr	r3, [pc, #44]	; (8001c10 <LCD_Fast_DrawPoint+0x524>)
 8001be4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001be8:	615a      	str	r2, [r3, #20]
 8001bea:	4a0a      	ldr	r2, [pc, #40]	; (8001c14 <LCD_Fast_DrawPoint+0x528>)
 8001bec:	887b      	ldrh	r3, [r7, #2]
 8001bee:	60d3      	str	r3, [r2, #12]
 8001bf0:	4b07      	ldr	r3, [pc, #28]	; (8001c10 <LCD_Fast_DrawPoint+0x524>)
 8001bf2:	2280      	movs	r2, #128	; 0x80
 8001bf4:	615a      	str	r2, [r3, #20]
 8001bf6:	4b06      	ldr	r3, [pc, #24]	; (8001c10 <LCD_Fast_DrawPoint+0x524>)
 8001bf8:	2280      	movs	r2, #128	; 0x80
 8001bfa:	611a      	str	r2, [r3, #16]
 8001bfc:	4b04      	ldr	r3, [pc, #16]	; (8001c10 <LCD_Fast_DrawPoint+0x524>)
 8001bfe:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001c02:	611a      	str	r2, [r3, #16]
}
 8001c04:	bf00      	nop
 8001c06:	3708      	adds	r7, #8
 8001c08:	46bd      	mov	sp, r7
 8001c0a:	bd80      	pop	{r7, pc}
 8001c0c:	20000080 	.word	0x20000080
 8001c10:	40011000 	.word	0x40011000
 8001c14:	40010c00 	.word	0x40010c00

08001c18 <LCD_SSD_BackLightSet>:
//SSD1963 背光设置
//pwm:背光等级,0~100.越大越亮.
void LCD_SSD_BackLightSet(uint8_t pwm) {
 8001c18:	b590      	push	{r4, r7, lr}
 8001c1a:	b083      	sub	sp, #12
 8001c1c:	af00      	add	r7, sp, #0
 8001c1e:	4603      	mov	r3, r0
 8001c20:	71fb      	strb	r3, [r7, #7]
	LCD_WR_REG(0xBE);	//配置PWM输出
 8001c22:	20be      	movs	r0, #190	; 0xbe
 8001c24:	f7fe feb2 	bl	800098c <LCD_WR_REG>
	LCD_WR_DATA(0x05);	//1设置PWM频率
 8001c28:	4b4b      	ldr	r3, [pc, #300]	; (8001d58 <LCD_SSD_BackLightSet+0x140>)
 8001c2a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001c2e:	611a      	str	r2, [r3, #16]
 8001c30:	4b49      	ldr	r3, [pc, #292]	; (8001d58 <LCD_SSD_BackLightSet+0x140>)
 8001c32:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001c36:	615a      	str	r2, [r3, #20]
 8001c38:	4b48      	ldr	r3, [pc, #288]	; (8001d5c <LCD_SSD_BackLightSet+0x144>)
 8001c3a:	2205      	movs	r2, #5
 8001c3c:	60da      	str	r2, [r3, #12]
 8001c3e:	4b46      	ldr	r3, [pc, #280]	; (8001d58 <LCD_SSD_BackLightSet+0x140>)
 8001c40:	2280      	movs	r2, #128	; 0x80
 8001c42:	615a      	str	r2, [r3, #20]
 8001c44:	4b44      	ldr	r3, [pc, #272]	; (8001d58 <LCD_SSD_BackLightSet+0x140>)
 8001c46:	2280      	movs	r2, #128	; 0x80
 8001c48:	611a      	str	r2, [r3, #16]
 8001c4a:	4b43      	ldr	r3, [pc, #268]	; (8001d58 <LCD_SSD_BackLightSet+0x140>)
 8001c4c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001c50:	611a      	str	r2, [r3, #16]
	LCD_WR_DATA(pwm * 2.55);	//2设置PWM占空比
 8001c52:	4b41      	ldr	r3, [pc, #260]	; (8001d58 <LCD_SSD_BackLightSet+0x140>)
 8001c54:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001c58:	611a      	str	r2, [r3, #16]
 8001c5a:	4b3f      	ldr	r3, [pc, #252]	; (8001d58 <LCD_SSD_BackLightSet+0x140>)
 8001c5c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001c60:	615a      	str	r2, [r3, #20]
 8001c62:	79fb      	ldrb	r3, [r7, #7]
 8001c64:	4618      	mov	r0, r3
 8001c66:	f7fe fd63 	bl	8000730 <__aeabi_i2d>
 8001c6a:	a339      	add	r3, pc, #228	; (adr r3, 8001d50 <LCD_SSD_BackLightSet+0x138>)
 8001c6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c70:	f7fe fae2 	bl	8000238 <__aeabi_dmul>
 8001c74:	4602      	mov	r2, r0
 8001c76:	460b      	mov	r3, r1
 8001c78:	4c38      	ldr	r4, [pc, #224]	; (8001d5c <LCD_SSD_BackLightSet+0x144>)
 8001c7a:	4610      	mov	r0, r2
 8001c7c:	4619      	mov	r1, r3
 8001c7e:	f7fe fdc1 	bl	8000804 <__aeabi_d2uiz>
 8001c82:	4603      	mov	r3, r0
 8001c84:	60e3      	str	r3, [r4, #12]
 8001c86:	4b34      	ldr	r3, [pc, #208]	; (8001d58 <LCD_SSD_BackLightSet+0x140>)
 8001c88:	2280      	movs	r2, #128	; 0x80
 8001c8a:	615a      	str	r2, [r3, #20]
 8001c8c:	4b32      	ldr	r3, [pc, #200]	; (8001d58 <LCD_SSD_BackLightSet+0x140>)
 8001c8e:	2280      	movs	r2, #128	; 0x80
 8001c90:	611a      	str	r2, [r3, #16]
 8001c92:	4b31      	ldr	r3, [pc, #196]	; (8001d58 <LCD_SSD_BackLightSet+0x140>)
 8001c94:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001c98:	611a      	str	r2, [r3, #16]
	LCD_WR_DATA(0x01);	//3设置C
 8001c9a:	4b2f      	ldr	r3, [pc, #188]	; (8001d58 <LCD_SSD_BackLightSet+0x140>)
 8001c9c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001ca0:	611a      	str	r2, [r3, #16]
 8001ca2:	4b2d      	ldr	r3, [pc, #180]	; (8001d58 <LCD_SSD_BackLightSet+0x140>)
 8001ca4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001ca8:	615a      	str	r2, [r3, #20]
 8001caa:	4b2c      	ldr	r3, [pc, #176]	; (8001d5c <LCD_SSD_BackLightSet+0x144>)
 8001cac:	2201      	movs	r2, #1
 8001cae:	60da      	str	r2, [r3, #12]
 8001cb0:	4b29      	ldr	r3, [pc, #164]	; (8001d58 <LCD_SSD_BackLightSet+0x140>)
 8001cb2:	2280      	movs	r2, #128	; 0x80
 8001cb4:	615a      	str	r2, [r3, #20]
 8001cb6:	4b28      	ldr	r3, [pc, #160]	; (8001d58 <LCD_SSD_BackLightSet+0x140>)
 8001cb8:	2280      	movs	r2, #128	; 0x80
 8001cba:	611a      	str	r2, [r3, #16]
 8001cbc:	4b26      	ldr	r3, [pc, #152]	; (8001d58 <LCD_SSD_BackLightSet+0x140>)
 8001cbe:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001cc2:	611a      	str	r2, [r3, #16]
	LCD_WR_DATA(0xFF);	//4设置D
 8001cc4:	4b24      	ldr	r3, [pc, #144]	; (8001d58 <LCD_SSD_BackLightSet+0x140>)
 8001cc6:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001cca:	611a      	str	r2, [r3, #16]
 8001ccc:	4b22      	ldr	r3, [pc, #136]	; (8001d58 <LCD_SSD_BackLightSet+0x140>)
 8001cce:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001cd2:	615a      	str	r2, [r3, #20]
 8001cd4:	4b21      	ldr	r3, [pc, #132]	; (8001d5c <LCD_SSD_BackLightSet+0x144>)
 8001cd6:	22ff      	movs	r2, #255	; 0xff
 8001cd8:	60da      	str	r2, [r3, #12]
 8001cda:	4b1f      	ldr	r3, [pc, #124]	; (8001d58 <LCD_SSD_BackLightSet+0x140>)
 8001cdc:	2280      	movs	r2, #128	; 0x80
 8001cde:	615a      	str	r2, [r3, #20]
 8001ce0:	4b1d      	ldr	r3, [pc, #116]	; (8001d58 <LCD_SSD_BackLightSet+0x140>)
 8001ce2:	2280      	movs	r2, #128	; 0x80
 8001ce4:	611a      	str	r2, [r3, #16]
 8001ce6:	4b1c      	ldr	r3, [pc, #112]	; (8001d58 <LCD_SSD_BackLightSet+0x140>)
 8001ce8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001cec:	611a      	str	r2, [r3, #16]
	LCD_WR_DATA(0x00);	//5设置E
 8001cee:	4b1a      	ldr	r3, [pc, #104]	; (8001d58 <LCD_SSD_BackLightSet+0x140>)
 8001cf0:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001cf4:	611a      	str	r2, [r3, #16]
 8001cf6:	4b18      	ldr	r3, [pc, #96]	; (8001d58 <LCD_SSD_BackLightSet+0x140>)
 8001cf8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001cfc:	615a      	str	r2, [r3, #20]
 8001cfe:	4b17      	ldr	r3, [pc, #92]	; (8001d5c <LCD_SSD_BackLightSet+0x144>)
 8001d00:	2200      	movs	r2, #0
 8001d02:	60da      	str	r2, [r3, #12]
 8001d04:	4b14      	ldr	r3, [pc, #80]	; (8001d58 <LCD_SSD_BackLightSet+0x140>)
 8001d06:	2280      	movs	r2, #128	; 0x80
 8001d08:	615a      	str	r2, [r3, #20]
 8001d0a:	4b13      	ldr	r3, [pc, #76]	; (8001d58 <LCD_SSD_BackLightSet+0x140>)
 8001d0c:	2280      	movs	r2, #128	; 0x80
 8001d0e:	611a      	str	r2, [r3, #16]
 8001d10:	4b11      	ldr	r3, [pc, #68]	; (8001d58 <LCD_SSD_BackLightSet+0x140>)
 8001d12:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001d16:	611a      	str	r2, [r3, #16]
	LCD_WR_DATA(0x00);	//6设置F
 8001d18:	4b0f      	ldr	r3, [pc, #60]	; (8001d58 <LCD_SSD_BackLightSet+0x140>)
 8001d1a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001d1e:	611a      	str	r2, [r3, #16]
 8001d20:	4b0d      	ldr	r3, [pc, #52]	; (8001d58 <LCD_SSD_BackLightSet+0x140>)
 8001d22:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001d26:	615a      	str	r2, [r3, #20]
 8001d28:	4b0c      	ldr	r3, [pc, #48]	; (8001d5c <LCD_SSD_BackLightSet+0x144>)
 8001d2a:	2200      	movs	r2, #0
 8001d2c:	60da      	str	r2, [r3, #12]
 8001d2e:	4b0a      	ldr	r3, [pc, #40]	; (8001d58 <LCD_SSD_BackLightSet+0x140>)
 8001d30:	2280      	movs	r2, #128	; 0x80
 8001d32:	615a      	str	r2, [r3, #20]
 8001d34:	4b08      	ldr	r3, [pc, #32]	; (8001d58 <LCD_SSD_BackLightSet+0x140>)
 8001d36:	2280      	movs	r2, #128	; 0x80
 8001d38:	611a      	str	r2, [r3, #16]
 8001d3a:	4b07      	ldr	r3, [pc, #28]	; (8001d58 <LCD_SSD_BackLightSet+0x140>)
 8001d3c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001d40:	611a      	str	r2, [r3, #16]
}
 8001d42:	bf00      	nop
 8001d44:	370c      	adds	r7, #12
 8001d46:	46bd      	mov	sp, r7
 8001d48:	bd90      	pop	{r4, r7, pc}
 8001d4a:	bf00      	nop
 8001d4c:	f3af 8000 	nop.w
 8001d50:	66666666 	.word	0x66666666
 8001d54:	40046666 	.word	0x40046666
 8001d58:	40011000 	.word	0x40011000
 8001d5c:	40010c00 	.word	0x40010c00

08001d60 <LCD_Display_Dir>:
// Set LCD display direction
// dir: 0, vertical 1, horizontal
void LCD_Display_Dir(uint8_t dir) {
 8001d60:	b580      	push	{r7, lr}
 8001d62:	b082      	sub	sp, #8
 8001d64:	af00      	add	r7, sp, #0
 8001d66:	4603      	mov	r3, r0
 8001d68:	71fb      	strb	r3, [r7, #7]
	if (dir == 0)			//竖屏
 8001d6a:	79fb      	ldrb	r3, [r7, #7]
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	d177      	bne.n	8001e60 <LCD_Display_Dir+0x100>
			{
		lcddev.dir = 0;	//竖屏
 8001d70:	4b80      	ldr	r3, [pc, #512]	; (8001f74 <LCD_Display_Dir+0x214>)
 8001d72:	2200      	movs	r2, #0
 8001d74:	719a      	strb	r2, [r3, #6]
		lcddev.width = 240;
 8001d76:	4b7f      	ldr	r3, [pc, #508]	; (8001f74 <LCD_Display_Dir+0x214>)
 8001d78:	22f0      	movs	r2, #240	; 0xf0
 8001d7a:	801a      	strh	r2, [r3, #0]
		lcddev.height = 320;
 8001d7c:	4b7d      	ldr	r3, [pc, #500]	; (8001f74 <LCD_Display_Dir+0x214>)
 8001d7e:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8001d82:	805a      	strh	r2, [r3, #2]
		if (lcddev.id == 0X9341 || lcddev.id == 0X6804 || lcddev.id == 0X5310) {
 8001d84:	4b7b      	ldr	r3, [pc, #492]	; (8001f74 <LCD_Display_Dir+0x214>)
 8001d86:	889b      	ldrh	r3, [r3, #4]
 8001d88:	f249 3241 	movw	r2, #37697	; 0x9341
 8001d8c:	4293      	cmp	r3, r2
 8001d8e:	d00b      	beq.n	8001da8 <LCD_Display_Dir+0x48>
 8001d90:	4b78      	ldr	r3, [pc, #480]	; (8001f74 <LCD_Display_Dir+0x214>)
 8001d92:	889b      	ldrh	r3, [r3, #4]
 8001d94:	f646 0204 	movw	r2, #26628	; 0x6804
 8001d98:	4293      	cmp	r3, r2
 8001d9a:	d005      	beq.n	8001da8 <LCD_Display_Dir+0x48>
 8001d9c:	4b75      	ldr	r3, [pc, #468]	; (8001f74 <LCD_Display_Dir+0x214>)
 8001d9e:	889b      	ldrh	r3, [r3, #4]
 8001da0:	f245 3210 	movw	r2, #21264	; 0x5310
 8001da4:	4293      	cmp	r3, r2
 8001da6:	d11e      	bne.n	8001de6 <LCD_Display_Dir+0x86>
			lcddev.wramcmd = 0X2C;
 8001da8:	4b72      	ldr	r3, [pc, #456]	; (8001f74 <LCD_Display_Dir+0x214>)
 8001daa:	222c      	movs	r2, #44	; 0x2c
 8001dac:	811a      	strh	r2, [r3, #8]
			lcddev.setxcmd = 0X2A;
 8001dae:	4b71      	ldr	r3, [pc, #452]	; (8001f74 <LCD_Display_Dir+0x214>)
 8001db0:	222a      	movs	r2, #42	; 0x2a
 8001db2:	815a      	strh	r2, [r3, #10]
			lcddev.setycmd = 0X2B;
 8001db4:	4b6f      	ldr	r3, [pc, #444]	; (8001f74 <LCD_Display_Dir+0x214>)
 8001db6:	222b      	movs	r2, #43	; 0x2b
 8001db8:	819a      	strh	r2, [r3, #12]
			if (lcddev.id == 0X6804 || lcddev.id == 0X5310) {
 8001dba:	4b6e      	ldr	r3, [pc, #440]	; (8001f74 <LCD_Display_Dir+0x214>)
 8001dbc:	889b      	ldrh	r3, [r3, #4]
 8001dbe:	f646 0204 	movw	r2, #26628	; 0x6804
 8001dc2:	4293      	cmp	r3, r2
 8001dc4:	d006      	beq.n	8001dd4 <LCD_Display_Dir+0x74>
 8001dc6:	4b6b      	ldr	r3, [pc, #428]	; (8001f74 <LCD_Display_Dir+0x214>)
 8001dc8:	889b      	ldrh	r3, [r3, #4]
 8001dca:	f245 3210 	movw	r2, #21264	; 0x5310
 8001dce:	4293      	cmp	r3, r2
 8001dd0:	f040 80c7 	bne.w	8001f62 <LCD_Display_Dir+0x202>
				lcddev.width = 320;
 8001dd4:	4b67      	ldr	r3, [pc, #412]	; (8001f74 <LCD_Display_Dir+0x214>)
 8001dd6:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8001dda:	801a      	strh	r2, [r3, #0]
				lcddev.height = 480;
 8001ddc:	4b65      	ldr	r3, [pc, #404]	; (8001f74 <LCD_Display_Dir+0x214>)
 8001dde:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8001de2:	805a      	strh	r2, [r3, #2]
			if (lcddev.id == 0X6804 || lcddev.id == 0X5310) {
 8001de4:	e0bd      	b.n	8001f62 <LCD_Display_Dir+0x202>
			}
		} else if (lcddev.id == 0x5510) {
 8001de6:	4b63      	ldr	r3, [pc, #396]	; (8001f74 <LCD_Display_Dir+0x214>)
 8001de8:	889b      	ldrh	r3, [r3, #4]
 8001dea:	f245 5210 	movw	r2, #21776	; 0x5510
 8001dee:	4293      	cmp	r3, r2
 8001df0:	d114      	bne.n	8001e1c <LCD_Display_Dir+0xbc>
			lcddev.wramcmd = 0X2C00;
 8001df2:	4b60      	ldr	r3, [pc, #384]	; (8001f74 <LCD_Display_Dir+0x214>)
 8001df4:	f44f 5230 	mov.w	r2, #11264	; 0x2c00
 8001df8:	811a      	strh	r2, [r3, #8]
			lcddev.setxcmd = 0X2A00;
 8001dfa:	4b5e      	ldr	r3, [pc, #376]	; (8001f74 <LCD_Display_Dir+0x214>)
 8001dfc:	f44f 5228 	mov.w	r2, #10752	; 0x2a00
 8001e00:	815a      	strh	r2, [r3, #10]
			lcddev.setycmd = 0X2B00;
 8001e02:	4b5c      	ldr	r3, [pc, #368]	; (8001f74 <LCD_Display_Dir+0x214>)
 8001e04:	f44f 522c 	mov.w	r2, #11008	; 0x2b00
 8001e08:	819a      	strh	r2, [r3, #12]
			lcddev.width = 480;
 8001e0a:	4b5a      	ldr	r3, [pc, #360]	; (8001f74 <LCD_Display_Dir+0x214>)
 8001e0c:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8001e10:	801a      	strh	r2, [r3, #0]
			lcddev.height = 800;
 8001e12:	4b58      	ldr	r3, [pc, #352]	; (8001f74 <LCD_Display_Dir+0x214>)
 8001e14:	f44f 7248 	mov.w	r2, #800	; 0x320
 8001e18:	805a      	strh	r2, [r3, #2]
 8001e1a:	e0a3      	b.n	8001f64 <LCD_Display_Dir+0x204>
		} else if (lcddev.id == 0X1963) {
 8001e1c:	4b55      	ldr	r3, [pc, #340]	; (8001f74 <LCD_Display_Dir+0x214>)
 8001e1e:	889b      	ldrh	r3, [r3, #4]
 8001e20:	f641 1263 	movw	r2, #6499	; 0x1963
 8001e24:	4293      	cmp	r3, r2
 8001e26:	d111      	bne.n	8001e4c <LCD_Display_Dir+0xec>
			lcddev.wramcmd = 0X2C;	//设置写入GRAM的指令
 8001e28:	4b52      	ldr	r3, [pc, #328]	; (8001f74 <LCD_Display_Dir+0x214>)
 8001e2a:	222c      	movs	r2, #44	; 0x2c
 8001e2c:	811a      	strh	r2, [r3, #8]
			lcddev.setxcmd = 0X2B;	//设置写X坐标指令
 8001e2e:	4b51      	ldr	r3, [pc, #324]	; (8001f74 <LCD_Display_Dir+0x214>)
 8001e30:	222b      	movs	r2, #43	; 0x2b
 8001e32:	815a      	strh	r2, [r3, #10]
			lcddev.setycmd = 0X2A;	//设置写Y坐标指令
 8001e34:	4b4f      	ldr	r3, [pc, #316]	; (8001f74 <LCD_Display_Dir+0x214>)
 8001e36:	222a      	movs	r2, #42	; 0x2a
 8001e38:	819a      	strh	r2, [r3, #12]
			lcddev.width = 480;		//设置宽度480
 8001e3a:	4b4e      	ldr	r3, [pc, #312]	; (8001f74 <LCD_Display_Dir+0x214>)
 8001e3c:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8001e40:	801a      	strh	r2, [r3, #0]
			lcddev.height = 800;		//设置高度800
 8001e42:	4b4c      	ldr	r3, [pc, #304]	; (8001f74 <LCD_Display_Dir+0x214>)
 8001e44:	f44f 7248 	mov.w	r2, #800	; 0x320
 8001e48:	805a      	strh	r2, [r3, #2]
 8001e4a:	e08b      	b.n	8001f64 <LCD_Display_Dir+0x204>
		} else {
			lcddev.wramcmd = 0X22;
 8001e4c:	4b49      	ldr	r3, [pc, #292]	; (8001f74 <LCD_Display_Dir+0x214>)
 8001e4e:	2222      	movs	r2, #34	; 0x22
 8001e50:	811a      	strh	r2, [r3, #8]
			lcddev.setxcmd = 0X20;
 8001e52:	4b48      	ldr	r3, [pc, #288]	; (8001f74 <LCD_Display_Dir+0x214>)
 8001e54:	2220      	movs	r2, #32
 8001e56:	815a      	strh	r2, [r3, #10]
			lcddev.setycmd = 0X21;
 8001e58:	4b46      	ldr	r3, [pc, #280]	; (8001f74 <LCD_Display_Dir+0x214>)
 8001e5a:	2221      	movs	r2, #33	; 0x21
 8001e5c:	819a      	strh	r2, [r3, #12]
 8001e5e:	e081      	b.n	8001f64 <LCD_Display_Dir+0x204>
		}
	} else 				//横屏
	{
		lcddev.dir = 1;	//横屏
 8001e60:	4b44      	ldr	r3, [pc, #272]	; (8001f74 <LCD_Display_Dir+0x214>)
 8001e62:	2201      	movs	r2, #1
 8001e64:	719a      	strb	r2, [r3, #6]
		lcddev.width = 320;
 8001e66:	4b43      	ldr	r3, [pc, #268]	; (8001f74 <LCD_Display_Dir+0x214>)
 8001e68:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8001e6c:	801a      	strh	r2, [r3, #0]
		lcddev.height = 240;
 8001e6e:	4b41      	ldr	r3, [pc, #260]	; (8001f74 <LCD_Display_Dir+0x214>)
 8001e70:	22f0      	movs	r2, #240	; 0xf0
 8001e72:	805a      	strh	r2, [r3, #2]
		if (lcddev.id == 0X9341 || lcddev.id == 0X5310) {
 8001e74:	4b3f      	ldr	r3, [pc, #252]	; (8001f74 <LCD_Display_Dir+0x214>)
 8001e76:	889b      	ldrh	r3, [r3, #4]
 8001e78:	f249 3241 	movw	r2, #37697	; 0x9341
 8001e7c:	4293      	cmp	r3, r2
 8001e7e:	d005      	beq.n	8001e8c <LCD_Display_Dir+0x12c>
 8001e80:	4b3c      	ldr	r3, [pc, #240]	; (8001f74 <LCD_Display_Dir+0x214>)
 8001e82:	889b      	ldrh	r3, [r3, #4]
 8001e84:	f245 3210 	movw	r2, #21264	; 0x5310
 8001e88:	4293      	cmp	r3, r2
 8001e8a:	d109      	bne.n	8001ea0 <LCD_Display_Dir+0x140>
			lcddev.wramcmd = 0X2C;
 8001e8c:	4b39      	ldr	r3, [pc, #228]	; (8001f74 <LCD_Display_Dir+0x214>)
 8001e8e:	222c      	movs	r2, #44	; 0x2c
 8001e90:	811a      	strh	r2, [r3, #8]
			lcddev.setxcmd = 0X2A;
 8001e92:	4b38      	ldr	r3, [pc, #224]	; (8001f74 <LCD_Display_Dir+0x214>)
 8001e94:	222a      	movs	r2, #42	; 0x2a
 8001e96:	815a      	strh	r2, [r3, #10]
			lcddev.setycmd = 0X2B;
 8001e98:	4b36      	ldr	r3, [pc, #216]	; (8001f74 <LCD_Display_Dir+0x214>)
 8001e9a:	222b      	movs	r2, #43	; 0x2b
 8001e9c:	819a      	strh	r2, [r3, #12]
 8001e9e:	e04b      	b.n	8001f38 <LCD_Display_Dir+0x1d8>
		} else if (lcddev.id == 0X6804) {
 8001ea0:	4b34      	ldr	r3, [pc, #208]	; (8001f74 <LCD_Display_Dir+0x214>)
 8001ea2:	889b      	ldrh	r3, [r3, #4]
 8001ea4:	f646 0204 	movw	r2, #26628	; 0x6804
 8001ea8:	4293      	cmp	r3, r2
 8001eaa:	d109      	bne.n	8001ec0 <LCD_Display_Dir+0x160>
			lcddev.wramcmd = 0X2C;
 8001eac:	4b31      	ldr	r3, [pc, #196]	; (8001f74 <LCD_Display_Dir+0x214>)
 8001eae:	222c      	movs	r2, #44	; 0x2c
 8001eb0:	811a      	strh	r2, [r3, #8]
			lcddev.setxcmd = 0X2B;
 8001eb2:	4b30      	ldr	r3, [pc, #192]	; (8001f74 <LCD_Display_Dir+0x214>)
 8001eb4:	222b      	movs	r2, #43	; 0x2b
 8001eb6:	815a      	strh	r2, [r3, #10]
			lcddev.setycmd = 0X2A;
 8001eb8:	4b2e      	ldr	r3, [pc, #184]	; (8001f74 <LCD_Display_Dir+0x214>)
 8001eba:	222a      	movs	r2, #42	; 0x2a
 8001ebc:	819a      	strh	r2, [r3, #12]
 8001ebe:	e03b      	b.n	8001f38 <LCD_Display_Dir+0x1d8>
		} else if (lcddev.id == 0x5510) {
 8001ec0:	4b2c      	ldr	r3, [pc, #176]	; (8001f74 <LCD_Display_Dir+0x214>)
 8001ec2:	889b      	ldrh	r3, [r3, #4]
 8001ec4:	f245 5210 	movw	r2, #21776	; 0x5510
 8001ec8:	4293      	cmp	r3, r2
 8001eca:	d114      	bne.n	8001ef6 <LCD_Display_Dir+0x196>
			lcddev.wramcmd = 0X2C00;
 8001ecc:	4b29      	ldr	r3, [pc, #164]	; (8001f74 <LCD_Display_Dir+0x214>)
 8001ece:	f44f 5230 	mov.w	r2, #11264	; 0x2c00
 8001ed2:	811a      	strh	r2, [r3, #8]
			lcddev.setxcmd = 0X2A00;
 8001ed4:	4b27      	ldr	r3, [pc, #156]	; (8001f74 <LCD_Display_Dir+0x214>)
 8001ed6:	f44f 5228 	mov.w	r2, #10752	; 0x2a00
 8001eda:	815a      	strh	r2, [r3, #10]
			lcddev.setycmd = 0X2B00;
 8001edc:	4b25      	ldr	r3, [pc, #148]	; (8001f74 <LCD_Display_Dir+0x214>)
 8001ede:	f44f 522c 	mov.w	r2, #11008	; 0x2b00
 8001ee2:	819a      	strh	r2, [r3, #12]
			lcddev.width = 800;
 8001ee4:	4b23      	ldr	r3, [pc, #140]	; (8001f74 <LCD_Display_Dir+0x214>)
 8001ee6:	f44f 7248 	mov.w	r2, #800	; 0x320
 8001eea:	801a      	strh	r2, [r3, #0]
			lcddev.height = 480;
 8001eec:	4b21      	ldr	r3, [pc, #132]	; (8001f74 <LCD_Display_Dir+0x214>)
 8001eee:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8001ef2:	805a      	strh	r2, [r3, #2]
 8001ef4:	e020      	b.n	8001f38 <LCD_Display_Dir+0x1d8>
		} else if (lcddev.id == 0X1963) {
 8001ef6:	4b1f      	ldr	r3, [pc, #124]	; (8001f74 <LCD_Display_Dir+0x214>)
 8001ef8:	889b      	ldrh	r3, [r3, #4]
 8001efa:	f641 1263 	movw	r2, #6499	; 0x1963
 8001efe:	4293      	cmp	r3, r2
 8001f00:	d111      	bne.n	8001f26 <LCD_Display_Dir+0x1c6>
			lcddev.wramcmd = 0X2C;	//设置写入GRAM的指令
 8001f02:	4b1c      	ldr	r3, [pc, #112]	; (8001f74 <LCD_Display_Dir+0x214>)
 8001f04:	222c      	movs	r2, #44	; 0x2c
 8001f06:	811a      	strh	r2, [r3, #8]
			lcddev.setxcmd = 0X2A;	//设置写X坐标指令
 8001f08:	4b1a      	ldr	r3, [pc, #104]	; (8001f74 <LCD_Display_Dir+0x214>)
 8001f0a:	222a      	movs	r2, #42	; 0x2a
 8001f0c:	815a      	strh	r2, [r3, #10]
			lcddev.setycmd = 0X2B;	//设置写Y坐标指令
 8001f0e:	4b19      	ldr	r3, [pc, #100]	; (8001f74 <LCD_Display_Dir+0x214>)
 8001f10:	222b      	movs	r2, #43	; 0x2b
 8001f12:	819a      	strh	r2, [r3, #12]
			lcddev.width = 800;		//设置宽度800
 8001f14:	4b17      	ldr	r3, [pc, #92]	; (8001f74 <LCD_Display_Dir+0x214>)
 8001f16:	f44f 7248 	mov.w	r2, #800	; 0x320
 8001f1a:	801a      	strh	r2, [r3, #0]
			lcddev.height = 480;		//设置高度480
 8001f1c:	4b15      	ldr	r3, [pc, #84]	; (8001f74 <LCD_Display_Dir+0x214>)
 8001f1e:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8001f22:	805a      	strh	r2, [r3, #2]
 8001f24:	e008      	b.n	8001f38 <LCD_Display_Dir+0x1d8>
		} else {
			lcddev.wramcmd = 0X22;
 8001f26:	4b13      	ldr	r3, [pc, #76]	; (8001f74 <LCD_Display_Dir+0x214>)
 8001f28:	2222      	movs	r2, #34	; 0x22
 8001f2a:	811a      	strh	r2, [r3, #8]
			lcddev.setxcmd = 0X21;
 8001f2c:	4b11      	ldr	r3, [pc, #68]	; (8001f74 <LCD_Display_Dir+0x214>)
 8001f2e:	2221      	movs	r2, #33	; 0x21
 8001f30:	815a      	strh	r2, [r3, #10]
			lcddev.setycmd = 0X20;
 8001f32:	4b10      	ldr	r3, [pc, #64]	; (8001f74 <LCD_Display_Dir+0x214>)
 8001f34:	2220      	movs	r2, #32
 8001f36:	819a      	strh	r2, [r3, #12]
		}
		if (lcddev.id == 0X6804 || lcddev.id == 0X5310) {
 8001f38:	4b0e      	ldr	r3, [pc, #56]	; (8001f74 <LCD_Display_Dir+0x214>)
 8001f3a:	889b      	ldrh	r3, [r3, #4]
 8001f3c:	f646 0204 	movw	r2, #26628	; 0x6804
 8001f40:	4293      	cmp	r3, r2
 8001f42:	d005      	beq.n	8001f50 <LCD_Display_Dir+0x1f0>
 8001f44:	4b0b      	ldr	r3, [pc, #44]	; (8001f74 <LCD_Display_Dir+0x214>)
 8001f46:	889b      	ldrh	r3, [r3, #4]
 8001f48:	f245 3210 	movw	r2, #21264	; 0x5310
 8001f4c:	4293      	cmp	r3, r2
 8001f4e:	d109      	bne.n	8001f64 <LCD_Display_Dir+0x204>
			lcddev.width = 480;
 8001f50:	4b08      	ldr	r3, [pc, #32]	; (8001f74 <LCD_Display_Dir+0x214>)
 8001f52:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8001f56:	801a      	strh	r2, [r3, #0]
			lcddev.height = 320;
 8001f58:	4b06      	ldr	r3, [pc, #24]	; (8001f74 <LCD_Display_Dir+0x214>)
 8001f5a:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8001f5e:	805a      	strh	r2, [r3, #2]
 8001f60:	e000      	b.n	8001f64 <LCD_Display_Dir+0x204>
			if (lcddev.id == 0X6804 || lcddev.id == 0X5310) {
 8001f62:	bf00      	nop
		}
	}
	LCD_Scan_Dir(DFT_SCAN_DIR);	//默认扫描方向
 8001f64:	2000      	movs	r0, #0
 8001f66:	f7ff f8af 	bl	80010c8 <LCD_Scan_Dir>
}
 8001f6a:	bf00      	nop
 8001f6c:	3708      	adds	r7, #8
 8001f6e:	46bd      	mov	sp, r7
 8001f70:	bd80      	pop	{r7, pc}
 8001f72:	bf00      	nop
 8001f74:	20000080 	.word	0x20000080

08001f78 <LCD_Init>:
	}
}
//初始化lcd
//该初始化函数可以初始化各种ALIENTEK出品的LCD液晶屏
//本函数占用较大flash,用户可以根据自己的实际情况,删掉未用到的LCD初始化代码.以节省空间.
void LCD_Init(void) {
 8001f78:	b580      	push	{r7, lr}
 8001f7a:	b086      	sub	sp, #24
 8001f7c:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_Initure;

	__HAL_RCC_GPIOB_CLK_ENABLE();           	//开启GPIOB时钟
 8001f7e:	4b90      	ldr	r3, [pc, #576]	; (80021c0 <LCD_Init+0x248>)
 8001f80:	699b      	ldr	r3, [r3, #24]
 8001f82:	4a8f      	ldr	r2, [pc, #572]	; (80021c0 <LCD_Init+0x248>)
 8001f84:	f043 0308 	orr.w	r3, r3, #8
 8001f88:	6193      	str	r3, [r2, #24]
 8001f8a:	4b8d      	ldr	r3, [pc, #564]	; (80021c0 <LCD_Init+0x248>)
 8001f8c:	699b      	ldr	r3, [r3, #24]
 8001f8e:	f003 0308 	and.w	r3, r3, #8
 8001f92:	607b      	str	r3, [r7, #4]
 8001f94:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOC_CLK_ENABLE();           	//开启GPIOC时钟
 8001f96:	4b8a      	ldr	r3, [pc, #552]	; (80021c0 <LCD_Init+0x248>)
 8001f98:	699b      	ldr	r3, [r3, #24]
 8001f9a:	4a89      	ldr	r2, [pc, #548]	; (80021c0 <LCD_Init+0x248>)
 8001f9c:	f043 0310 	orr.w	r3, r3, #16
 8001fa0:	6193      	str	r3, [r2, #24]
 8001fa2:	4b87      	ldr	r3, [pc, #540]	; (80021c0 <LCD_Init+0x248>)
 8001fa4:	699b      	ldr	r3, [r3, #24]
 8001fa6:	f003 0310 	and.w	r3, r3, #16
 8001faa:	603b      	str	r3, [r7, #0]
 8001fac:	683b      	ldr	r3, [r7, #0]

	//PC6,7,8,9,10
	GPIO_Initure.Pin = GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_8 |\
 8001fae:	f44f 63f8 	mov.w	r3, #1984	; 0x7c0
 8001fb2:	60bb      	str	r3, [r7, #8]
 GPIO_PIN_9
			| GPIO_PIN_10;
	GPIO_Initure.Mode = GPIO_MODE_OUTPUT_PP;  	//推挽输出
 8001fb4:	2301      	movs	r3, #1
 8001fb6:	60fb      	str	r3, [r7, #12]
	GPIO_Initure.Pull = GPIO_PULLUP;          	//上拉
 8001fb8:	2301      	movs	r3, #1
 8001fba:	613b      	str	r3, [r7, #16]
	GPIO_Initure.Speed = GPIO_SPEED_FREQ_HIGH;    	 	//高速
 8001fbc:	2303      	movs	r3, #3
 8001fbe:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIOC, &GPIO_Initure);
 8001fc0:	f107 0308 	add.w	r3, r7, #8
 8001fc4:	4619      	mov	r1, r3
 8001fc6:	487f      	ldr	r0, [pc, #508]	; (80021c4 <LCD_Init+0x24c>)
 8001fc8:	f005 f84e 	bl	8007068 <HAL_GPIO_Init>

	//PB0~15
	GPIO_Initure.Pin = GPIO_PIN_All;				//PB推挽输出
 8001fcc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001fd0:	60bb      	str	r3, [r7, #8]
	HAL_GPIO_Init(GPIOB, &GPIO_Initure);
 8001fd2:	f107 0308 	add.w	r3, r7, #8
 8001fd6:	4619      	mov	r1, r3
 8001fd8:	487b      	ldr	r0, [pc, #492]	; (80021c8 <LCD_Init+0x250>)
 8001fda:	f005 f845 	bl	8007068 <HAL_GPIO_Init>

//	__HAL_AFIO_REMAP_SWJ_DISABLE();				//禁止JTAG

	HAL_Delay(50); // delay 50 ms
 8001fde:	2032      	movs	r0, #50	; 0x32
 8001fe0:	f004 fdce 	bl	8006b80 <HAL_Delay>
	LCD_WriteReg(0x0000, 0x0001);
 8001fe4:	2101      	movs	r1, #1
 8001fe6:	2000      	movs	r0, #0
 8001fe8:	f7fe fd5c 	bl	8000aa4 <LCD_WriteReg>
	HAL_Delay(50); // delay 50 ms
 8001fec:	2032      	movs	r0, #50	; 0x32
 8001fee:	f004 fdc7 	bl	8006b80 <HAL_Delay>
	lcddev.id = LCD_ReadReg(0x0000);
 8001ff2:	2000      	movs	r0, #0
 8001ff4:	f7fe fd80 	bl	8000af8 <LCD_ReadReg>
 8001ff8:	4603      	mov	r3, r0
 8001ffa:	461a      	mov	r2, r3
 8001ffc:	4b73      	ldr	r3, [pc, #460]	; (80021cc <LCD_Init+0x254>)
 8001ffe:	809a      	strh	r2, [r3, #4]
	if (lcddev.id < 0XFF || lcddev.id == 0XFFFF || lcddev.id == 0X9300) //读到ID不正确,新增lcddev.id==0X9300判断，因为9341在未被复位的情况下会被读成9300
 8002000:	4b72      	ldr	r3, [pc, #456]	; (80021cc <LCD_Init+0x254>)
 8002002:	889b      	ldrh	r3, [r3, #4]
 8002004:	2bfe      	cmp	r3, #254	; 0xfe
 8002006:	d90b      	bls.n	8002020 <LCD_Init+0xa8>
 8002008:	4b70      	ldr	r3, [pc, #448]	; (80021cc <LCD_Init+0x254>)
 800200a:	889b      	ldrh	r3, [r3, #4]
 800200c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002010:	4293      	cmp	r3, r2
 8002012:	d005      	beq.n	8002020 <LCD_Init+0xa8>
 8002014:	4b6d      	ldr	r3, [pc, #436]	; (80021cc <LCD_Init+0x254>)
 8002016:	889b      	ldrh	r3, [r3, #4]
 8002018:	f5b3 4f13 	cmp.w	r3, #37632	; 0x9300
 800201c:	f040 80c8 	bne.w	80021b0 <LCD_Init+0x238>
			{
		//尝试9341 ID的读取
		LCD_WR_REG(0XD3);
 8002020:	20d3      	movs	r0, #211	; 0xd3
 8002022:	f7fe fcb3 	bl	800098c <LCD_WR_REG>
		LCD_RD_DATA(); 				//dummy read 	
 8002026:	f7fe fcf9 	bl	8000a1c <LCD_RD_DATA>
		LCD_RD_DATA();   	    	//读到0X00
 800202a:	f7fe fcf7 	bl	8000a1c <LCD_RD_DATA>
		lcddev.id = LCD_RD_DATA();   	//读取93
 800202e:	f7fe fcf5 	bl	8000a1c <LCD_RD_DATA>
 8002032:	4603      	mov	r3, r0
 8002034:	461a      	mov	r2, r3
 8002036:	4b65      	ldr	r3, [pc, #404]	; (80021cc <LCD_Init+0x254>)
 8002038:	809a      	strh	r2, [r3, #4]
		lcddev.id <<= 8;
 800203a:	4b64      	ldr	r3, [pc, #400]	; (80021cc <LCD_Init+0x254>)
 800203c:	889b      	ldrh	r3, [r3, #4]
 800203e:	021b      	lsls	r3, r3, #8
 8002040:	b29a      	uxth	r2, r3
 8002042:	4b62      	ldr	r3, [pc, #392]	; (80021cc <LCD_Init+0x254>)
 8002044:	809a      	strh	r2, [r3, #4]
		lcddev.id |= LCD_RD_DATA();  	//读取41
 8002046:	f7fe fce9 	bl	8000a1c <LCD_RD_DATA>
 800204a:	4603      	mov	r3, r0
 800204c:	461a      	mov	r2, r3
 800204e:	4b5f      	ldr	r3, [pc, #380]	; (80021cc <LCD_Init+0x254>)
 8002050:	889b      	ldrh	r3, [r3, #4]
 8002052:	4313      	orrs	r3, r2
 8002054:	b29a      	uxth	r2, r3
 8002056:	4b5d      	ldr	r3, [pc, #372]	; (80021cc <LCD_Init+0x254>)
 8002058:	809a      	strh	r2, [r3, #4]
		if (lcddev.id != 0X9341)		//非9341,尝试是不是6804
 800205a:	4b5c      	ldr	r3, [pc, #368]	; (80021cc <LCD_Init+0x254>)
 800205c:	889b      	ldrh	r3, [r3, #4]
 800205e:	f249 3241 	movw	r2, #37697	; 0x9341
 8002062:	4293      	cmp	r3, r2
 8002064:	f000 80a4 	beq.w	80021b0 <LCD_Init+0x238>
				{
			LCD_WR_REG(0XBF);
 8002068:	20bf      	movs	r0, #191	; 0xbf
 800206a:	f7fe fc8f 	bl	800098c <LCD_WR_REG>
			LCD_RD_DATA(); 			//dummy read 	 
 800206e:	f7fe fcd5 	bl	8000a1c <LCD_RD_DATA>
			LCD_RD_DATA();   	    //读回0X01
 8002072:	f7fe fcd3 	bl	8000a1c <LCD_RD_DATA>
			LCD_RD_DATA(); 			//读回0XD0
 8002076:	f7fe fcd1 	bl	8000a1c <LCD_RD_DATA>
			lcddev.id = LCD_RD_DATA(); 			//这里读回0X68
 800207a:	f7fe fccf 	bl	8000a1c <LCD_RD_DATA>
 800207e:	4603      	mov	r3, r0
 8002080:	461a      	mov	r2, r3
 8002082:	4b52      	ldr	r3, [pc, #328]	; (80021cc <LCD_Init+0x254>)
 8002084:	809a      	strh	r2, [r3, #4]
			lcddev.id <<= 8;
 8002086:	4b51      	ldr	r3, [pc, #324]	; (80021cc <LCD_Init+0x254>)
 8002088:	889b      	ldrh	r3, [r3, #4]
 800208a:	021b      	lsls	r3, r3, #8
 800208c:	b29a      	uxth	r2, r3
 800208e:	4b4f      	ldr	r3, [pc, #316]	; (80021cc <LCD_Init+0x254>)
 8002090:	809a      	strh	r2, [r3, #4]
			lcddev.id |= LCD_RD_DATA(); 			//这里读回0X04
 8002092:	f7fe fcc3 	bl	8000a1c <LCD_RD_DATA>
 8002096:	4603      	mov	r3, r0
 8002098:	461a      	mov	r2, r3
 800209a:	4b4c      	ldr	r3, [pc, #304]	; (80021cc <LCD_Init+0x254>)
 800209c:	889b      	ldrh	r3, [r3, #4]
 800209e:	4313      	orrs	r3, r2
 80020a0:	b29a      	uxth	r2, r3
 80020a2:	4b4a      	ldr	r3, [pc, #296]	; (80021cc <LCD_Init+0x254>)
 80020a4:	809a      	strh	r2, [r3, #4]
			if (lcddev.id != 0X6804)	//也不是6804,尝试看看是不是NT35310
 80020a6:	4b49      	ldr	r3, [pc, #292]	; (80021cc <LCD_Init+0x254>)
 80020a8:	889b      	ldrh	r3, [r3, #4]
 80020aa:	f646 0204 	movw	r2, #26628	; 0x6804
 80020ae:	4293      	cmp	r3, r2
 80020b0:	d07e      	beq.n	80021b0 <LCD_Init+0x238>
					{
				LCD_WR_REG(0XD4);
 80020b2:	20d4      	movs	r0, #212	; 0xd4
 80020b4:	f7fe fc6a 	bl	800098c <LCD_WR_REG>
				LCD_RD_DATA(); 				//dummy read  
 80020b8:	f7fe fcb0 	bl	8000a1c <LCD_RD_DATA>
				LCD_RD_DATA();   			//读回0X01	 
 80020bc:	f7fe fcae 	bl	8000a1c <LCD_RD_DATA>
				lcddev.id = LCD_RD_DATA();	//读回0X53
 80020c0:	f7fe fcac 	bl	8000a1c <LCD_RD_DATA>
 80020c4:	4603      	mov	r3, r0
 80020c6:	461a      	mov	r2, r3
 80020c8:	4b40      	ldr	r3, [pc, #256]	; (80021cc <LCD_Init+0x254>)
 80020ca:	809a      	strh	r2, [r3, #4]
				lcddev.id <<= 8;
 80020cc:	4b3f      	ldr	r3, [pc, #252]	; (80021cc <LCD_Init+0x254>)
 80020ce:	889b      	ldrh	r3, [r3, #4]
 80020d0:	021b      	lsls	r3, r3, #8
 80020d2:	b29a      	uxth	r2, r3
 80020d4:	4b3d      	ldr	r3, [pc, #244]	; (80021cc <LCD_Init+0x254>)
 80020d6:	809a      	strh	r2, [r3, #4]
				lcddev.id |= LCD_RD_DATA();	//这里读回0X10
 80020d8:	f7fe fca0 	bl	8000a1c <LCD_RD_DATA>
 80020dc:	4603      	mov	r3, r0
 80020de:	461a      	mov	r2, r3
 80020e0:	4b3a      	ldr	r3, [pc, #232]	; (80021cc <LCD_Init+0x254>)
 80020e2:	889b      	ldrh	r3, [r3, #4]
 80020e4:	4313      	orrs	r3, r2
 80020e6:	b29a      	uxth	r2, r3
 80020e8:	4b38      	ldr	r3, [pc, #224]	; (80021cc <LCD_Init+0x254>)
 80020ea:	809a      	strh	r2, [r3, #4]
				if (lcddev.id != 0X5310)		//也不是NT35310,尝试看看是不是NT35510
 80020ec:	4b37      	ldr	r3, [pc, #220]	; (80021cc <LCD_Init+0x254>)
 80020ee:	889b      	ldrh	r3, [r3, #4]
 80020f0:	f245 3210 	movw	r2, #21264	; 0x5310
 80020f4:	4293      	cmp	r3, r2
 80020f6:	d05b      	beq.n	80021b0 <LCD_Init+0x238>
						{
					LCD_WR_REG(0XDA00);
 80020f8:	f44f 405a 	mov.w	r0, #55808	; 0xda00
 80020fc:	f7fe fc46 	bl	800098c <LCD_WR_REG>
					LCD_RD_DATA();   		//读回0X00	 
 8002100:	f7fe fc8c 	bl	8000a1c <LCD_RD_DATA>
					LCD_WR_REG(0XDB00);
 8002104:	f44f 405b 	mov.w	r0, #56064	; 0xdb00
 8002108:	f7fe fc40 	bl	800098c <LCD_WR_REG>
					lcddev.id = LCD_RD_DATA();   		//读回0X80
 800210c:	f7fe fc86 	bl	8000a1c <LCD_RD_DATA>
 8002110:	4603      	mov	r3, r0
 8002112:	461a      	mov	r2, r3
 8002114:	4b2d      	ldr	r3, [pc, #180]	; (80021cc <LCD_Init+0x254>)
 8002116:	809a      	strh	r2, [r3, #4]
					lcddev.id <<= 8;
 8002118:	4b2c      	ldr	r3, [pc, #176]	; (80021cc <LCD_Init+0x254>)
 800211a:	889b      	ldrh	r3, [r3, #4]
 800211c:	021b      	lsls	r3, r3, #8
 800211e:	b29a      	uxth	r2, r3
 8002120:	4b2a      	ldr	r3, [pc, #168]	; (80021cc <LCD_Init+0x254>)
 8002122:	809a      	strh	r2, [r3, #4]
					LCD_WR_REG(0XDC00);
 8002124:	f44f 405c 	mov.w	r0, #56320	; 0xdc00
 8002128:	f7fe fc30 	bl	800098c <LCD_WR_REG>
					lcddev.id |= LCD_RD_DATA();   		//读回0X00
 800212c:	f7fe fc76 	bl	8000a1c <LCD_RD_DATA>
 8002130:	4603      	mov	r3, r0
 8002132:	461a      	mov	r2, r3
 8002134:	4b25      	ldr	r3, [pc, #148]	; (80021cc <LCD_Init+0x254>)
 8002136:	889b      	ldrh	r3, [r3, #4]
 8002138:	4313      	orrs	r3, r2
 800213a:	b29a      	uxth	r2, r3
 800213c:	4b23      	ldr	r3, [pc, #140]	; (80021cc <LCD_Init+0x254>)
 800213e:	809a      	strh	r2, [r3, #4]
					if (lcddev.id == 0x8000)
 8002140:	4b22      	ldr	r3, [pc, #136]	; (80021cc <LCD_Init+0x254>)
 8002142:	889b      	ldrh	r3, [r3, #4]
 8002144:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002148:	d103      	bne.n	8002152 <LCD_Init+0x1da>
						lcddev.id = 0x5510;   		//NT35510读回的ID是8000H,为方便区分,我们强制设置为5510
 800214a:	4b20      	ldr	r3, [pc, #128]	; (80021cc <LCD_Init+0x254>)
 800214c:	f245 5210 	movw	r2, #21776	; 0x5510
 8002150:	809a      	strh	r2, [r3, #4]
					if (lcddev.id != 0X5510)			//也不是NT5510,尝试看看是不是SSD1963
 8002152:	4b1e      	ldr	r3, [pc, #120]	; (80021cc <LCD_Init+0x254>)
 8002154:	889b      	ldrh	r3, [r3, #4]
 8002156:	f245 5210 	movw	r2, #21776	; 0x5510
 800215a:	4293      	cmp	r3, r2
 800215c:	d028      	beq.n	80021b0 <LCD_Init+0x238>
							{
						LCD_WR_REG(0XA1);
 800215e:	20a1      	movs	r0, #161	; 0xa1
 8002160:	f7fe fc14 	bl	800098c <LCD_WR_REG>
						lcddev.id = LCD_RD_DATA();
 8002164:	f7fe fc5a 	bl	8000a1c <LCD_RD_DATA>
 8002168:	4603      	mov	r3, r0
 800216a:	461a      	mov	r2, r3
 800216c:	4b17      	ldr	r3, [pc, #92]	; (80021cc <LCD_Init+0x254>)
 800216e:	809a      	strh	r2, [r3, #4]
						lcddev.id = LCD_RD_DATA();	//读回0X57
 8002170:	f7fe fc54 	bl	8000a1c <LCD_RD_DATA>
 8002174:	4603      	mov	r3, r0
 8002176:	461a      	mov	r2, r3
 8002178:	4b14      	ldr	r3, [pc, #80]	; (80021cc <LCD_Init+0x254>)
 800217a:	809a      	strh	r2, [r3, #4]
						lcddev.id <<= 8;
 800217c:	4b13      	ldr	r3, [pc, #76]	; (80021cc <LCD_Init+0x254>)
 800217e:	889b      	ldrh	r3, [r3, #4]
 8002180:	021b      	lsls	r3, r3, #8
 8002182:	b29a      	uxth	r2, r3
 8002184:	4b11      	ldr	r3, [pc, #68]	; (80021cc <LCD_Init+0x254>)
 8002186:	809a      	strh	r2, [r3, #4]
						lcddev.id |= LCD_RD_DATA();	//读回0X61
 8002188:	f7fe fc48 	bl	8000a1c <LCD_RD_DATA>
 800218c:	4603      	mov	r3, r0
 800218e:	461a      	mov	r2, r3
 8002190:	4b0e      	ldr	r3, [pc, #56]	; (80021cc <LCD_Init+0x254>)
 8002192:	889b      	ldrh	r3, [r3, #4]
 8002194:	4313      	orrs	r3, r2
 8002196:	b29a      	uxth	r2, r3
 8002198:	4b0c      	ldr	r3, [pc, #48]	; (80021cc <LCD_Init+0x254>)
 800219a:	809a      	strh	r2, [r3, #4]
						if (lcddev.id == 0X5761)
 800219c:	4b0b      	ldr	r3, [pc, #44]	; (80021cc <LCD_Init+0x254>)
 800219e:	889b      	ldrh	r3, [r3, #4]
 80021a0:	f245 7261 	movw	r2, #22369	; 0x5761
 80021a4:	4293      	cmp	r3, r2
 80021a6:	d103      	bne.n	80021b0 <LCD_Init+0x238>
							lcddev.id = 0X1963;	//SSD1963读回的ID是5761H,为方便区分,我们强制设置为1963
 80021a8:	4b08      	ldr	r3, [pc, #32]	; (80021cc <LCD_Init+0x254>)
 80021aa:	f641 1263 	movw	r2, #6499	; 0x1963
 80021ae:	809a      	strh	r2, [r3, #4]
				}
			}
		}
	}
// 	printf(" LCD ID:%x\r\n",lcddev.id); //打印LCD ID
	if (lcddev.id == 0X9341)	//9341初始化
 80021b0:	4b06      	ldr	r3, [pc, #24]	; (80021cc <LCD_Init+0x254>)
 80021b2:	889b      	ldrh	r3, [r3, #4]
 80021b4:	f249 3241 	movw	r2, #37697	; 0x9341
 80021b8:	4293      	cmp	r3, r2
 80021ba:	f040 811f 	bne.w	80023fc <LCD_Init+0x484>
 80021be:	e007      	b.n	80021d0 <LCD_Init+0x258>
 80021c0:	40021000 	.word	0x40021000
 80021c4:	40011000 	.word	0x40011000
 80021c8:	40010c00 	.word	0x40010c00
 80021cc:	20000080 	.word	0x20000080
			{
		LCD_WR_REG(0xCF);
 80021d0:	20cf      	movs	r0, #207	; 0xcf
 80021d2:	f7fe fbdb 	bl	800098c <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 80021d6:	2000      	movs	r0, #0
 80021d8:	f7fe fbfc 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xC1);
 80021dc:	20c1      	movs	r0, #193	; 0xc1
 80021de:	f7fe fbf9 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X30);
 80021e2:	2030      	movs	r0, #48	; 0x30
 80021e4:	f7fe fbf6 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_REG(0xED);
 80021e8:	20ed      	movs	r0, #237	; 0xed
 80021ea:	f7fe fbcf 	bl	800098c <LCD_WR_REG>
		LCD_WR_DATAX(0x64);
 80021ee:	2064      	movs	r0, #100	; 0x64
 80021f0:	f7fe fbf0 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x03);
 80021f4:	2003      	movs	r0, #3
 80021f6:	f7fe fbed 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X12);
 80021fa:	2012      	movs	r0, #18
 80021fc:	f7fe fbea 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X81);
 8002200:	2081      	movs	r0, #129	; 0x81
 8002202:	f7fe fbe7 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_REG(0xE8);
 8002206:	20e8      	movs	r0, #232	; 0xe8
 8002208:	f7fe fbc0 	bl	800098c <LCD_WR_REG>
		LCD_WR_DATAX(0x85);
 800220c:	2085      	movs	r0, #133	; 0x85
 800220e:	f7fe fbe1 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x10);
 8002212:	2010      	movs	r0, #16
 8002214:	f7fe fbde 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x7A);
 8002218:	207a      	movs	r0, #122	; 0x7a
 800221a:	f7fe fbdb 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_REG(0xCB);
 800221e:	20cb      	movs	r0, #203	; 0xcb
 8002220:	f7fe fbb4 	bl	800098c <LCD_WR_REG>
		LCD_WR_DATAX(0x39);
 8002224:	2039      	movs	r0, #57	; 0x39
 8002226:	f7fe fbd5 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x2C);
 800222a:	202c      	movs	r0, #44	; 0x2c
 800222c:	f7fe fbd2 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002230:	2000      	movs	r0, #0
 8002232:	f7fe fbcf 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x34);
 8002236:	2034      	movs	r0, #52	; 0x34
 8002238:	f7fe fbcc 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x02);
 800223c:	2002      	movs	r0, #2
 800223e:	f7fe fbc9 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_REG(0xF7);
 8002242:	20f7      	movs	r0, #247	; 0xf7
 8002244:	f7fe fba2 	bl	800098c <LCD_WR_REG>
		LCD_WR_DATAX(0x20);
 8002248:	2020      	movs	r0, #32
 800224a:	f7fe fbc3 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_REG(0xEA);
 800224e:	20ea      	movs	r0, #234	; 0xea
 8002250:	f7fe fb9c 	bl	800098c <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 8002254:	2000      	movs	r0, #0
 8002256:	f7fe fbbd 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800225a:	2000      	movs	r0, #0
 800225c:	f7fe fbba 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_REG(0xC0);    //Power control 
 8002260:	20c0      	movs	r0, #192	; 0xc0
 8002262:	f7fe fb93 	bl	800098c <LCD_WR_REG>
		LCD_WR_DATAX(0x1B);   //VRH[5:0] 
 8002266:	201b      	movs	r0, #27
 8002268:	f7fe fbb4 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_REG(0xC1);    //Power control 
 800226c:	20c1      	movs	r0, #193	; 0xc1
 800226e:	f7fe fb8d 	bl	800098c <LCD_WR_REG>
		LCD_WR_DATAX(0x01);   //SAP[2:0];BT[3:0] 
 8002272:	2001      	movs	r0, #1
 8002274:	f7fe fbae 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_REG(0xC5);    //VCM control 
 8002278:	20c5      	movs	r0, #197	; 0xc5
 800227a:	f7fe fb87 	bl	800098c <LCD_WR_REG>
		LCD_WR_DATAX(0x30); 	 //3F
 800227e:	2030      	movs	r0, #48	; 0x30
 8002280:	f7fe fba8 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x30); 	 //3C
 8002284:	2030      	movs	r0, #48	; 0x30
 8002286:	f7fe fba5 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_REG(0xC7);    //VCM control2 
 800228a:	20c7      	movs	r0, #199	; 0xc7
 800228c:	f7fe fb7e 	bl	800098c <LCD_WR_REG>
		LCD_WR_DATAX(0XB7);
 8002290:	20b7      	movs	r0, #183	; 0xb7
 8002292:	f7fe fb9f 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_REG(0x36);    // Memory Access Control 
 8002296:	2036      	movs	r0, #54	; 0x36
 8002298:	f7fe fb78 	bl	800098c <LCD_WR_REG>
		LCD_WR_DATAX(0x48);
 800229c:	2048      	movs	r0, #72	; 0x48
 800229e:	f7fe fb99 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_REG(0x3A);
 80022a2:	203a      	movs	r0, #58	; 0x3a
 80022a4:	f7fe fb72 	bl	800098c <LCD_WR_REG>
		LCD_WR_DATAX(0x55);
 80022a8:	2055      	movs	r0, #85	; 0x55
 80022aa:	f7fe fb93 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_REG(0xB1);
 80022ae:	20b1      	movs	r0, #177	; 0xb1
 80022b0:	f7fe fb6c 	bl	800098c <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 80022b4:	2000      	movs	r0, #0
 80022b6:	f7fe fb8d 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x1A);
 80022ba:	201a      	movs	r0, #26
 80022bc:	f7fe fb8a 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_REG(0xB6);    // Display Function Control 
 80022c0:	20b6      	movs	r0, #182	; 0xb6
 80022c2:	f7fe fb63 	bl	800098c <LCD_WR_REG>
		LCD_WR_DATAX(0x0A);
 80022c6:	200a      	movs	r0, #10
 80022c8:	f7fe fb84 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xA2);
 80022cc:	20a2      	movs	r0, #162	; 0xa2
 80022ce:	f7fe fb81 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_REG(0xF2);    // 3Gamma Function Disable 
 80022d2:	20f2      	movs	r0, #242	; 0xf2
 80022d4:	f7fe fb5a 	bl	800098c <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 80022d8:	2000      	movs	r0, #0
 80022da:	f7fe fb7b 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_REG(0x26);    //Gamma curve selected 
 80022de:	2026      	movs	r0, #38	; 0x26
 80022e0:	f7fe fb54 	bl	800098c <LCD_WR_REG>
		LCD_WR_DATAX(0x01);
 80022e4:	2001      	movs	r0, #1
 80022e6:	f7fe fb75 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_REG(0xE0);    //Set Gamma 
 80022ea:	20e0      	movs	r0, #224	; 0xe0
 80022ec:	f7fe fb4e 	bl	800098c <LCD_WR_REG>
		LCD_WR_DATAX(0x0F);
 80022f0:	200f      	movs	r0, #15
 80022f2:	f7fe fb6f 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x2A);
 80022f6:	202a      	movs	r0, #42	; 0x2a
 80022f8:	f7fe fb6c 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x28);
 80022fc:	2028      	movs	r0, #40	; 0x28
 80022fe:	f7fe fb69 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x08);
 8002302:	2008      	movs	r0, #8
 8002304:	f7fe fb66 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x0E);
 8002308:	200e      	movs	r0, #14
 800230a:	f7fe fb63 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x08);
 800230e:	2008      	movs	r0, #8
 8002310:	f7fe fb60 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x54);
 8002314:	2054      	movs	r0, #84	; 0x54
 8002316:	f7fe fb5d 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0XA9);
 800231a:	20a9      	movs	r0, #169	; 0xa9
 800231c:	f7fe fb5a 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x43);
 8002320:	2043      	movs	r0, #67	; 0x43
 8002322:	f7fe fb57 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x0A);
 8002326:	200a      	movs	r0, #10
 8002328:	f7fe fb54 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x0F);
 800232c:	200f      	movs	r0, #15
 800232e:	f7fe fb51 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002332:	2000      	movs	r0, #0
 8002334:	f7fe fb4e 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002338:	2000      	movs	r0, #0
 800233a:	f7fe fb4b 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800233e:	2000      	movs	r0, #0
 8002340:	f7fe fb48 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002344:	2000      	movs	r0, #0
 8002346:	f7fe fb45 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_REG(0XE1);    //Set Gamma 
 800234a:	20e1      	movs	r0, #225	; 0xe1
 800234c:	f7fe fb1e 	bl	800098c <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 8002350:	2000      	movs	r0, #0
 8002352:	f7fe fb3f 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x15);
 8002356:	2015      	movs	r0, #21
 8002358:	f7fe fb3c 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x17);
 800235c:	2017      	movs	r0, #23
 800235e:	f7fe fb39 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x07);
 8002362:	2007      	movs	r0, #7
 8002364:	f7fe fb36 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x11);
 8002368:	2011      	movs	r0, #17
 800236a:	f7fe fb33 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x06);
 800236e:	2006      	movs	r0, #6
 8002370:	f7fe fb30 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x2B);
 8002374:	202b      	movs	r0, #43	; 0x2b
 8002376:	f7fe fb2d 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x56);
 800237a:	2056      	movs	r0, #86	; 0x56
 800237c:	f7fe fb2a 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x3C);
 8002380:	203c      	movs	r0, #60	; 0x3c
 8002382:	f7fe fb27 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x05);
 8002386:	2005      	movs	r0, #5
 8002388:	f7fe fb24 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x10);
 800238c:	2010      	movs	r0, #16
 800238e:	f7fe fb21 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x0F);
 8002392:	200f      	movs	r0, #15
 8002394:	f7fe fb1e 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x3F);
 8002398:	203f      	movs	r0, #63	; 0x3f
 800239a:	f7fe fb1b 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x3F);
 800239e:	203f      	movs	r0, #63	; 0x3f
 80023a0:	f7fe fb18 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x0F);
 80023a4:	200f      	movs	r0, #15
 80023a6:	f7fe fb15 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_REG(0x2B);
 80023aa:	202b      	movs	r0, #43	; 0x2b
 80023ac:	f7fe faee 	bl	800098c <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 80023b0:	2000      	movs	r0, #0
 80023b2:	f7fe fb0f 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80023b6:	2000      	movs	r0, #0
 80023b8:	f7fe fb0c 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x01);
 80023bc:	2001      	movs	r0, #1
 80023be:	f7fe fb09 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x3f);
 80023c2:	203f      	movs	r0, #63	; 0x3f
 80023c4:	f7fe fb06 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_REG(0x2A);
 80023c8:	202a      	movs	r0, #42	; 0x2a
 80023ca:	f7fe fadf 	bl	800098c <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 80023ce:	2000      	movs	r0, #0
 80023d0:	f7fe fb00 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80023d4:	2000      	movs	r0, #0
 80023d6:	f7fe fafd 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80023da:	2000      	movs	r0, #0
 80023dc:	f7fe fafa 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xef);
 80023e0:	20ef      	movs	r0, #239	; 0xef
 80023e2:	f7fe faf7 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_REG(0x11); //Exit Sleep
 80023e6:	2011      	movs	r0, #17
 80023e8:	f7fe fad0 	bl	800098c <LCD_WR_REG>
		HAL_Delay(120);
 80023ec:	2078      	movs	r0, #120	; 0x78
 80023ee:	f004 fbc7 	bl	8006b80 <HAL_Delay>
		LCD_WR_REG(0x29); //display on	
 80023f2:	2029      	movs	r0, #41	; 0x29
 80023f4:	f7fe faca 	bl	800098c <LCD_WR_REG>
 80023f8:	f003 bcd8 	b.w	8005dac <LCD_Init+0x3e34>
	} else if (lcddev.id == 0x6804) //6804初始化
 80023fc:	4b58      	ldr	r3, [pc, #352]	; (8002560 <LCD_Init+0x5e8>)
 80023fe:	889b      	ldrh	r3, [r3, #4]
 8002400:	f646 0204 	movw	r2, #26628	; 0x6804
 8002404:	4293      	cmp	r3, r2
 8002406:	f040 80ad 	bne.w	8002564 <LCD_Init+0x5ec>
			{
		LCD_WR_REG(0X11);
 800240a:	2011      	movs	r0, #17
 800240c:	f7fe fabe 	bl	800098c <LCD_WR_REG>
		HAL_Delay(20);
 8002410:	2014      	movs	r0, #20
 8002412:	f004 fbb5 	bl	8006b80 <HAL_Delay>
		LCD_WR_REG(0XD0); //VCI1  VCL  VGH  VGL DDVDH VREG1OUT power amplitude setting
 8002416:	20d0      	movs	r0, #208	; 0xd0
 8002418:	f7fe fab8 	bl	800098c <LCD_WR_REG>
		LCD_WR_DATAX(0X07);
 800241c:	2007      	movs	r0, #7
 800241e:	f7fe fad9 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X42);
 8002422:	2042      	movs	r0, #66	; 0x42
 8002424:	f7fe fad6 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X1D);
 8002428:	201d      	movs	r0, #29
 800242a:	f7fe fad3 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_REG(0XD1); //VCOMH VCOM_AC amplitude setting
 800242e:	20d1      	movs	r0, #209	; 0xd1
 8002430:	f7fe faac 	bl	800098c <LCD_WR_REG>
		LCD_WR_DATAX(0X00);
 8002434:	2000      	movs	r0, #0
 8002436:	f7fe facd 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X1a);
 800243a:	201a      	movs	r0, #26
 800243c:	f7fe faca 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X09);
 8002440:	2009      	movs	r0, #9
 8002442:	f7fe fac7 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_REG(0XD2); //Operational Amplifier Circuit Constant Current Adjust , charge pump frequency setting
 8002446:	20d2      	movs	r0, #210	; 0xd2
 8002448:	f7fe faa0 	bl	800098c <LCD_WR_REG>
		LCD_WR_DATAX(0X01);
 800244c:	2001      	movs	r0, #1
 800244e:	f7fe fac1 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X22);
 8002452:	2022      	movs	r0, #34	; 0x22
 8002454:	f7fe fabe 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_REG(0XC0); //REV SM GS
 8002458:	20c0      	movs	r0, #192	; 0xc0
 800245a:	f7fe fa97 	bl	800098c <LCD_WR_REG>
		LCD_WR_DATAX(0X10);
 800245e:	2010      	movs	r0, #16
 8002460:	f7fe fab8 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X3B);
 8002464:	203b      	movs	r0, #59	; 0x3b
 8002466:	f7fe fab5 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X00);
 800246a:	2000      	movs	r0, #0
 800246c:	f7fe fab2 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X02);
 8002470:	2002      	movs	r0, #2
 8002472:	f7fe faaf 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X11);
 8002476:	2011      	movs	r0, #17
 8002478:	f7fe faac 	bl	80009d4 <LCD_WR_DATAX>

		LCD_WR_REG(0XC5); // Frame rate setting = 72HZ  when setting 0x03
 800247c:	20c5      	movs	r0, #197	; 0xc5
 800247e:	f7fe fa85 	bl	800098c <LCD_WR_REG>
		LCD_WR_DATAX(0X03);
 8002482:	2003      	movs	r0, #3
 8002484:	f7fe faa6 	bl	80009d4 <LCD_WR_DATAX>

		LCD_WR_REG(0XC8); //Gamma setting
 8002488:	20c8      	movs	r0, #200	; 0xc8
 800248a:	f7fe fa7f 	bl	800098c <LCD_WR_REG>
		LCD_WR_DATAX(0X00);
 800248e:	2000      	movs	r0, #0
 8002490:	f7fe faa0 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X25);
 8002494:	2025      	movs	r0, #37	; 0x25
 8002496:	f7fe fa9d 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X21);
 800249a:	2021      	movs	r0, #33	; 0x21
 800249c:	f7fe fa9a 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X05);
 80024a0:	2005      	movs	r0, #5
 80024a2:	f7fe fa97 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X00);
 80024a6:	2000      	movs	r0, #0
 80024a8:	f7fe fa94 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X0a);
 80024ac:	200a      	movs	r0, #10
 80024ae:	f7fe fa91 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X65);
 80024b2:	2065      	movs	r0, #101	; 0x65
 80024b4:	f7fe fa8e 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X25);
 80024b8:	2025      	movs	r0, #37	; 0x25
 80024ba:	f7fe fa8b 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X77);
 80024be:	2077      	movs	r0, #119	; 0x77
 80024c0:	f7fe fa88 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X50);
 80024c4:	2050      	movs	r0, #80	; 0x50
 80024c6:	f7fe fa85 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X0f);
 80024ca:	200f      	movs	r0, #15
 80024cc:	f7fe fa82 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X00);
 80024d0:	2000      	movs	r0, #0
 80024d2:	f7fe fa7f 	bl	80009d4 <LCD_WR_DATAX>

		LCD_WR_REG(0XF8);
 80024d6:	20f8      	movs	r0, #248	; 0xf8
 80024d8:	f7fe fa58 	bl	800098c <LCD_WR_REG>
		LCD_WR_DATAX(0X01);
 80024dc:	2001      	movs	r0, #1
 80024de:	f7fe fa79 	bl	80009d4 <LCD_WR_DATAX>

		LCD_WR_REG(0XFE);
 80024e2:	20fe      	movs	r0, #254	; 0xfe
 80024e4:	f7fe fa52 	bl	800098c <LCD_WR_REG>
		LCD_WR_DATAX(0X00);
 80024e8:	2000      	movs	r0, #0
 80024ea:	f7fe fa73 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X02);
 80024ee:	2002      	movs	r0, #2
 80024f0:	f7fe fa70 	bl	80009d4 <LCD_WR_DATAX>

		LCD_WR_REG(0X20); //Exit invert mode
 80024f4:	2020      	movs	r0, #32
 80024f6:	f7fe fa49 	bl	800098c <LCD_WR_REG>

		LCD_WR_REG(0X36);
 80024fa:	2036      	movs	r0, #54	; 0x36
 80024fc:	f7fe fa46 	bl	800098c <LCD_WR_REG>
		LCD_WR_DATAX(0X08); //原来是a
 8002500:	2008      	movs	r0, #8
 8002502:	f7fe fa67 	bl	80009d4 <LCD_WR_DATAX>

		LCD_WR_REG(0X3A);
 8002506:	203a      	movs	r0, #58	; 0x3a
 8002508:	f7fe fa40 	bl	800098c <LCD_WR_REG>
		LCD_WR_DATAX(0X55); //16位模式
 800250c:	2055      	movs	r0, #85	; 0x55
 800250e:	f7fe fa61 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_REG(0X2B);
 8002512:	202b      	movs	r0, #43	; 0x2b
 8002514:	f7fe fa3a 	bl	800098c <LCD_WR_REG>
		LCD_WR_DATAX(0X00);
 8002518:	2000      	movs	r0, #0
 800251a:	f7fe fa5b 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X00);
 800251e:	2000      	movs	r0, #0
 8002520:	f7fe fa58 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X01);
 8002524:	2001      	movs	r0, #1
 8002526:	f7fe fa55 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X3F);
 800252a:	203f      	movs	r0, #63	; 0x3f
 800252c:	f7fe fa52 	bl	80009d4 <LCD_WR_DATAX>

		LCD_WR_REG(0X2A);
 8002530:	202a      	movs	r0, #42	; 0x2a
 8002532:	f7fe fa2b 	bl	800098c <LCD_WR_REG>
		LCD_WR_DATAX(0X00);
 8002536:	2000      	movs	r0, #0
 8002538:	f7fe fa4c 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X00);
 800253c:	2000      	movs	r0, #0
 800253e:	f7fe fa49 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X01);
 8002542:	2001      	movs	r0, #1
 8002544:	f7fe fa46 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0XDF);
 8002548:	20df      	movs	r0, #223	; 0xdf
 800254a:	f7fe fa43 	bl	80009d4 <LCD_WR_DATAX>
		HAL_Delay(120);
 800254e:	2078      	movs	r0, #120	; 0x78
 8002550:	f004 fb16 	bl	8006b80 <HAL_Delay>
		LCD_WR_REG(0X29);
 8002554:	2029      	movs	r0, #41	; 0x29
 8002556:	f7fe fa19 	bl	800098c <LCD_WR_REG>
 800255a:	f003 bc27 	b.w	8005dac <LCD_Init+0x3e34>
 800255e:	bf00      	nop
 8002560:	20000080 	.word	0x20000080
	} else if (lcddev.id == 0x5310) {
 8002564:	4b03      	ldr	r3, [pc, #12]	; (8002574 <LCD_Init+0x5fc>)
 8002566:	889b      	ldrh	r3, [r3, #4]
 8002568:	f245 3210 	movw	r2, #21264	; 0x5310
 800256c:	4293      	cmp	r3, r2
 800256e:	f040 877c 	bne.w	800346a <LCD_Init+0x14f2>
 8002572:	e001      	b.n	8002578 <LCD_Init+0x600>
 8002574:	20000080 	.word	0x20000080
		LCD_WR_REG(0xED);
 8002578:	20ed      	movs	r0, #237	; 0xed
 800257a:	f7fe fa07 	bl	800098c <LCD_WR_REG>
		LCD_WR_DATAX(0x01);
 800257e:	2001      	movs	r0, #1
 8002580:	f7fe fa28 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xFE);
 8002584:	20fe      	movs	r0, #254	; 0xfe
 8002586:	f7fe fa25 	bl	80009d4 <LCD_WR_DATAX>

		LCD_WR_REG(0xEE);
 800258a:	20ee      	movs	r0, #238	; 0xee
 800258c:	f7fe f9fe 	bl	800098c <LCD_WR_REG>
		LCD_WR_DATAX(0xDE);
 8002590:	20de      	movs	r0, #222	; 0xde
 8002592:	f7fe fa1f 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x21);
 8002596:	2021      	movs	r0, #33	; 0x21
 8002598:	f7fe fa1c 	bl	80009d4 <LCD_WR_DATAX>

		LCD_WR_REG(0xF1);
 800259c:	20f1      	movs	r0, #241	; 0xf1
 800259e:	f7fe f9f5 	bl	800098c <LCD_WR_REG>
		LCD_WR_DATAX(0x01);
 80025a2:	2001      	movs	r0, #1
 80025a4:	f7fe fa16 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_REG(0xDF);
 80025a8:	20df      	movs	r0, #223	; 0xdf
 80025aa:	f7fe f9ef 	bl	800098c <LCD_WR_REG>
		LCD_WR_DATAX(0x10);
 80025ae:	2010      	movs	r0, #16
 80025b0:	f7fe fa10 	bl	80009d4 <LCD_WR_DATAX>

		//VCOMvoltage//
		LCD_WR_REG(0xC4);
 80025b4:	20c4      	movs	r0, #196	; 0xc4
 80025b6:	f7fe f9e9 	bl	800098c <LCD_WR_REG>
		LCD_WR_DATAX(0x8F);	  //5f
 80025ba:	208f      	movs	r0, #143	; 0x8f
 80025bc:	f7fe fa0a 	bl	80009d4 <LCD_WR_DATAX>

		LCD_WR_REG(0xC6);
 80025c0:	20c6      	movs	r0, #198	; 0xc6
 80025c2:	f7fe f9e3 	bl	800098c <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 80025c6:	2000      	movs	r0, #0
 80025c8:	f7fe fa04 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xE2);
 80025cc:	20e2      	movs	r0, #226	; 0xe2
 80025ce:	f7fe fa01 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xE2);
 80025d2:	20e2      	movs	r0, #226	; 0xe2
 80025d4:	f7fe f9fe 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xE2);
 80025d8:	20e2      	movs	r0, #226	; 0xe2
 80025da:	f7fe f9fb 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_REG(0xBF);
 80025de:	20bf      	movs	r0, #191	; 0xbf
 80025e0:	f7fe f9d4 	bl	800098c <LCD_WR_REG>
		LCD_WR_DATAX(0xAA);
 80025e4:	20aa      	movs	r0, #170	; 0xaa
 80025e6:	f7fe f9f5 	bl	80009d4 <LCD_WR_DATAX>

		LCD_WR_REG(0xB0);
 80025ea:	20b0      	movs	r0, #176	; 0xb0
 80025ec:	f7fe f9ce 	bl	800098c <LCD_WR_REG>
		LCD_WR_DATAX(0x0D);
 80025f0:	200d      	movs	r0, #13
 80025f2:	f7fe f9ef 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80025f6:	2000      	movs	r0, #0
 80025f8:	f7fe f9ec 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x0D);
 80025fc:	200d      	movs	r0, #13
 80025fe:	f7fe f9e9 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002602:	2000      	movs	r0, #0
 8002604:	f7fe f9e6 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x11);
 8002608:	2011      	movs	r0, #17
 800260a:	f7fe f9e3 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800260e:	2000      	movs	r0, #0
 8002610:	f7fe f9e0 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x19);
 8002614:	2019      	movs	r0, #25
 8002616:	f7fe f9dd 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800261a:	2000      	movs	r0, #0
 800261c:	f7fe f9da 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x21);
 8002620:	2021      	movs	r0, #33	; 0x21
 8002622:	f7fe f9d7 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002626:	2000      	movs	r0, #0
 8002628:	f7fe f9d4 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x2D);
 800262c:	202d      	movs	r0, #45	; 0x2d
 800262e:	f7fe f9d1 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002632:	2000      	movs	r0, #0
 8002634:	f7fe f9ce 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x3D);
 8002638:	203d      	movs	r0, #61	; 0x3d
 800263a:	f7fe f9cb 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800263e:	2000      	movs	r0, #0
 8002640:	f7fe f9c8 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x5D);
 8002644:	205d      	movs	r0, #93	; 0x5d
 8002646:	f7fe f9c5 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800264a:	2000      	movs	r0, #0
 800264c:	f7fe f9c2 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x5D);
 8002650:	205d      	movs	r0, #93	; 0x5d
 8002652:	f7fe f9bf 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002656:	2000      	movs	r0, #0
 8002658:	f7fe f9bc 	bl	80009d4 <LCD_WR_DATAX>

		LCD_WR_REG(0xB1);
 800265c:	20b1      	movs	r0, #177	; 0xb1
 800265e:	f7fe f995 	bl	800098c <LCD_WR_REG>
		LCD_WR_DATAX(0x80);
 8002662:	2080      	movs	r0, #128	; 0x80
 8002664:	f7fe f9b6 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002668:	2000      	movs	r0, #0
 800266a:	f7fe f9b3 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x8B);
 800266e:	208b      	movs	r0, #139	; 0x8b
 8002670:	f7fe f9b0 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002674:	2000      	movs	r0, #0
 8002676:	f7fe f9ad 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x96);
 800267a:	2096      	movs	r0, #150	; 0x96
 800267c:	f7fe f9aa 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002680:	2000      	movs	r0, #0
 8002682:	f7fe f9a7 	bl	80009d4 <LCD_WR_DATAX>

		LCD_WR_REG(0xB2);
 8002686:	20b2      	movs	r0, #178	; 0xb2
 8002688:	f7fe f980 	bl	800098c <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 800268c:	2000      	movs	r0, #0
 800268e:	f7fe f9a1 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002692:	2000      	movs	r0, #0
 8002694:	f7fe f99e 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x02);
 8002698:	2002      	movs	r0, #2
 800269a:	f7fe f99b 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800269e:	2000      	movs	r0, #0
 80026a0:	f7fe f998 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x03);
 80026a4:	2003      	movs	r0, #3
 80026a6:	f7fe f995 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80026aa:	2000      	movs	r0, #0
 80026ac:	f7fe f992 	bl	80009d4 <LCD_WR_DATAX>

		LCD_WR_REG(0xB3);
 80026b0:	20b3      	movs	r0, #179	; 0xb3
 80026b2:	f7fe f96b 	bl	800098c <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 80026b6:	2000      	movs	r0, #0
 80026b8:	f7fe f98c 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80026bc:	2000      	movs	r0, #0
 80026be:	f7fe f989 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80026c2:	2000      	movs	r0, #0
 80026c4:	f7fe f986 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80026c8:	2000      	movs	r0, #0
 80026ca:	f7fe f983 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80026ce:	2000      	movs	r0, #0
 80026d0:	f7fe f980 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80026d4:	2000      	movs	r0, #0
 80026d6:	f7fe f97d 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80026da:	2000      	movs	r0, #0
 80026dc:	f7fe f97a 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80026e0:	2000      	movs	r0, #0
 80026e2:	f7fe f977 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80026e6:	2000      	movs	r0, #0
 80026e8:	f7fe f974 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80026ec:	2000      	movs	r0, #0
 80026ee:	f7fe f971 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80026f2:	2000      	movs	r0, #0
 80026f4:	f7fe f96e 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80026f8:	2000      	movs	r0, #0
 80026fa:	f7fe f96b 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80026fe:	2000      	movs	r0, #0
 8002700:	f7fe f968 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002704:	2000      	movs	r0, #0
 8002706:	f7fe f965 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800270a:	2000      	movs	r0, #0
 800270c:	f7fe f962 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002710:	2000      	movs	r0, #0
 8002712:	f7fe f95f 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002716:	2000      	movs	r0, #0
 8002718:	f7fe f95c 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800271c:	2000      	movs	r0, #0
 800271e:	f7fe f959 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002722:	2000      	movs	r0, #0
 8002724:	f7fe f956 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002728:	2000      	movs	r0, #0
 800272a:	f7fe f953 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800272e:	2000      	movs	r0, #0
 8002730:	f7fe f950 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002734:	2000      	movs	r0, #0
 8002736:	f7fe f94d 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800273a:	2000      	movs	r0, #0
 800273c:	f7fe f94a 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002740:	2000      	movs	r0, #0
 8002742:	f7fe f947 	bl	80009d4 <LCD_WR_DATAX>

		LCD_WR_REG(0xB4);
 8002746:	20b4      	movs	r0, #180	; 0xb4
 8002748:	f7fe f920 	bl	800098c <LCD_WR_REG>
		LCD_WR_DATAX(0x8B);
 800274c:	208b      	movs	r0, #139	; 0x8b
 800274e:	f7fe f941 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002752:	2000      	movs	r0, #0
 8002754:	f7fe f93e 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x96);
 8002758:	2096      	movs	r0, #150	; 0x96
 800275a:	f7fe f93b 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800275e:	2000      	movs	r0, #0
 8002760:	f7fe f938 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xA1);
 8002764:	20a1      	movs	r0, #161	; 0xa1
 8002766:	f7fe f935 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800276a:	2000      	movs	r0, #0
 800276c:	f7fe f932 	bl	80009d4 <LCD_WR_DATAX>

		LCD_WR_REG(0xB5);
 8002770:	20b5      	movs	r0, #181	; 0xb5
 8002772:	f7fe f90b 	bl	800098c <LCD_WR_REG>
		LCD_WR_DATAX(0x02);
 8002776:	2002      	movs	r0, #2
 8002778:	f7fe f92c 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800277c:	2000      	movs	r0, #0
 800277e:	f7fe f929 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x03);
 8002782:	2003      	movs	r0, #3
 8002784:	f7fe f926 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002788:	2000      	movs	r0, #0
 800278a:	f7fe f923 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x04);
 800278e:	2004      	movs	r0, #4
 8002790:	f7fe f920 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002794:	2000      	movs	r0, #0
 8002796:	f7fe f91d 	bl	80009d4 <LCD_WR_DATAX>

		LCD_WR_REG(0xB6);
 800279a:	20b6      	movs	r0, #182	; 0xb6
 800279c:	f7fe f8f6 	bl	800098c <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 80027a0:	2000      	movs	r0, #0
 80027a2:	f7fe f917 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80027a6:	2000      	movs	r0, #0
 80027a8:	f7fe f914 	bl	80009d4 <LCD_WR_DATAX>

		LCD_WR_REG(0xB7);
 80027ac:	20b7      	movs	r0, #183	; 0xb7
 80027ae:	f7fe f8ed 	bl	800098c <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 80027b2:	2000      	movs	r0, #0
 80027b4:	f7fe f90e 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80027b8:	2000      	movs	r0, #0
 80027ba:	f7fe f90b 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x3F);
 80027be:	203f      	movs	r0, #63	; 0x3f
 80027c0:	f7fe f908 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80027c4:	2000      	movs	r0, #0
 80027c6:	f7fe f905 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x5E);
 80027ca:	205e      	movs	r0, #94	; 0x5e
 80027cc:	f7fe f902 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80027d0:	2000      	movs	r0, #0
 80027d2:	f7fe f8ff 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x64);
 80027d6:	2064      	movs	r0, #100	; 0x64
 80027d8:	f7fe f8fc 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80027dc:	2000      	movs	r0, #0
 80027de:	f7fe f8f9 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x8C);
 80027e2:	208c      	movs	r0, #140	; 0x8c
 80027e4:	f7fe f8f6 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80027e8:	2000      	movs	r0, #0
 80027ea:	f7fe f8f3 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xAC);
 80027ee:	20ac      	movs	r0, #172	; 0xac
 80027f0:	f7fe f8f0 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80027f4:	2000      	movs	r0, #0
 80027f6:	f7fe f8ed 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xDC);
 80027fa:	20dc      	movs	r0, #220	; 0xdc
 80027fc:	f7fe f8ea 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002800:	2000      	movs	r0, #0
 8002802:	f7fe f8e7 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x70);
 8002806:	2070      	movs	r0, #112	; 0x70
 8002808:	f7fe f8e4 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800280c:	2000      	movs	r0, #0
 800280e:	f7fe f8e1 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x90);
 8002812:	2090      	movs	r0, #144	; 0x90
 8002814:	f7fe f8de 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002818:	2000      	movs	r0, #0
 800281a:	f7fe f8db 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xEB);
 800281e:	20eb      	movs	r0, #235	; 0xeb
 8002820:	f7fe f8d8 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002824:	2000      	movs	r0, #0
 8002826:	f7fe f8d5 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xDC);
 800282a:	20dc      	movs	r0, #220	; 0xdc
 800282c:	f7fe f8d2 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002830:	2000      	movs	r0, #0
 8002832:	f7fe f8cf 	bl	80009d4 <LCD_WR_DATAX>

		LCD_WR_REG(0xB8);
 8002836:	20b8      	movs	r0, #184	; 0xb8
 8002838:	f7fe f8a8 	bl	800098c <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 800283c:	2000      	movs	r0, #0
 800283e:	f7fe f8c9 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002842:	2000      	movs	r0, #0
 8002844:	f7fe f8c6 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002848:	2000      	movs	r0, #0
 800284a:	f7fe f8c3 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800284e:	2000      	movs	r0, #0
 8002850:	f7fe f8c0 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002854:	2000      	movs	r0, #0
 8002856:	f7fe f8bd 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800285a:	2000      	movs	r0, #0
 800285c:	f7fe f8ba 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002860:	2000      	movs	r0, #0
 8002862:	f7fe f8b7 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002866:	2000      	movs	r0, #0
 8002868:	f7fe f8b4 	bl	80009d4 <LCD_WR_DATAX>

		LCD_WR_REG(0xBA);
 800286c:	20ba      	movs	r0, #186	; 0xba
 800286e:	f7fe f88d 	bl	800098c <LCD_WR_REG>
		LCD_WR_DATAX(0x24);
 8002872:	2024      	movs	r0, #36	; 0x24
 8002874:	f7fe f8ae 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002878:	2000      	movs	r0, #0
 800287a:	f7fe f8ab 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800287e:	2000      	movs	r0, #0
 8002880:	f7fe f8a8 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002884:	2000      	movs	r0, #0
 8002886:	f7fe f8a5 	bl	80009d4 <LCD_WR_DATAX>

		LCD_WR_REG(0xC1);
 800288a:	20c1      	movs	r0, #193	; 0xc1
 800288c:	f7fe f87e 	bl	800098c <LCD_WR_REG>
		LCD_WR_DATAX(0x20);
 8002890:	2020      	movs	r0, #32
 8002892:	f7fe f89f 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002896:	2000      	movs	r0, #0
 8002898:	f7fe f89c 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x54);
 800289c:	2054      	movs	r0, #84	; 0x54
 800289e:	f7fe f899 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80028a2:	2000      	movs	r0, #0
 80028a4:	f7fe f896 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xFF);
 80028a8:	20ff      	movs	r0, #255	; 0xff
 80028aa:	f7fe f893 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80028ae:	2000      	movs	r0, #0
 80028b0:	f7fe f890 	bl	80009d4 <LCD_WR_DATAX>

		LCD_WR_REG(0xC2);
 80028b4:	20c2      	movs	r0, #194	; 0xc2
 80028b6:	f7fe f869 	bl	800098c <LCD_WR_REG>
		LCD_WR_DATAX(0x0A);
 80028ba:	200a      	movs	r0, #10
 80028bc:	f7fe f88a 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80028c0:	2000      	movs	r0, #0
 80028c2:	f7fe f887 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x04);
 80028c6:	2004      	movs	r0, #4
 80028c8:	f7fe f884 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80028cc:	2000      	movs	r0, #0
 80028ce:	f7fe f881 	bl	80009d4 <LCD_WR_DATAX>

		LCD_WR_REG(0xC3);
 80028d2:	20c3      	movs	r0, #195	; 0xc3
 80028d4:	f7fe f85a 	bl	800098c <LCD_WR_REG>
		LCD_WR_DATAX(0x3C);
 80028d8:	203c      	movs	r0, #60	; 0x3c
 80028da:	f7fe f87b 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80028de:	2000      	movs	r0, #0
 80028e0:	f7fe f878 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x3A);
 80028e4:	203a      	movs	r0, #58	; 0x3a
 80028e6:	f7fe f875 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80028ea:	2000      	movs	r0, #0
 80028ec:	f7fe f872 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x39);
 80028f0:	2039      	movs	r0, #57	; 0x39
 80028f2:	f7fe f86f 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80028f6:	2000      	movs	r0, #0
 80028f8:	f7fe f86c 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x37);
 80028fc:	2037      	movs	r0, #55	; 0x37
 80028fe:	f7fe f869 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002902:	2000      	movs	r0, #0
 8002904:	f7fe f866 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x3C);
 8002908:	203c      	movs	r0, #60	; 0x3c
 800290a:	f7fe f863 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800290e:	2000      	movs	r0, #0
 8002910:	f7fe f860 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x36);
 8002914:	2036      	movs	r0, #54	; 0x36
 8002916:	f7fe f85d 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800291a:	2000      	movs	r0, #0
 800291c:	f7fe f85a 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x32);
 8002920:	2032      	movs	r0, #50	; 0x32
 8002922:	f7fe f857 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002926:	2000      	movs	r0, #0
 8002928:	f7fe f854 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x2F);
 800292c:	202f      	movs	r0, #47	; 0x2f
 800292e:	f7fe f851 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002932:	2000      	movs	r0, #0
 8002934:	f7fe f84e 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x2C);
 8002938:	202c      	movs	r0, #44	; 0x2c
 800293a:	f7fe f84b 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800293e:	2000      	movs	r0, #0
 8002940:	f7fe f848 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x29);
 8002944:	2029      	movs	r0, #41	; 0x29
 8002946:	f7fe f845 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800294a:	2000      	movs	r0, #0
 800294c:	f7fe f842 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x26);
 8002950:	2026      	movs	r0, #38	; 0x26
 8002952:	f7fe f83f 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002956:	2000      	movs	r0, #0
 8002958:	f7fe f83c 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x24);
 800295c:	2024      	movs	r0, #36	; 0x24
 800295e:	f7fe f839 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002962:	2000      	movs	r0, #0
 8002964:	f7fe f836 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x24);
 8002968:	2024      	movs	r0, #36	; 0x24
 800296a:	f7fe f833 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800296e:	2000      	movs	r0, #0
 8002970:	f7fe f830 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x23);
 8002974:	2023      	movs	r0, #35	; 0x23
 8002976:	f7fe f82d 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800297a:	2000      	movs	r0, #0
 800297c:	f7fe f82a 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x3C);
 8002980:	203c      	movs	r0, #60	; 0x3c
 8002982:	f7fe f827 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002986:	2000      	movs	r0, #0
 8002988:	f7fe f824 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x36);
 800298c:	2036      	movs	r0, #54	; 0x36
 800298e:	f7fe f821 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002992:	2000      	movs	r0, #0
 8002994:	f7fe f81e 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x32);
 8002998:	2032      	movs	r0, #50	; 0x32
 800299a:	f7fe f81b 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800299e:	2000      	movs	r0, #0
 80029a0:	f7fe f818 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x2F);
 80029a4:	202f      	movs	r0, #47	; 0x2f
 80029a6:	f7fe f815 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80029aa:	2000      	movs	r0, #0
 80029ac:	f7fe f812 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x2C);
 80029b0:	202c      	movs	r0, #44	; 0x2c
 80029b2:	f7fe f80f 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80029b6:	2000      	movs	r0, #0
 80029b8:	f7fe f80c 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x29);
 80029bc:	2029      	movs	r0, #41	; 0x29
 80029be:	f7fe f809 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80029c2:	2000      	movs	r0, #0
 80029c4:	f7fe f806 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x26);
 80029c8:	2026      	movs	r0, #38	; 0x26
 80029ca:	f7fe f803 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80029ce:	2000      	movs	r0, #0
 80029d0:	f7fe f800 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x24);
 80029d4:	2024      	movs	r0, #36	; 0x24
 80029d6:	f7fd fffd 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80029da:	2000      	movs	r0, #0
 80029dc:	f7fd fffa 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x24);
 80029e0:	2024      	movs	r0, #36	; 0x24
 80029e2:	f7fd fff7 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80029e6:	2000      	movs	r0, #0
 80029e8:	f7fd fff4 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x23);
 80029ec:	2023      	movs	r0, #35	; 0x23
 80029ee:	f7fd fff1 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80029f2:	2000      	movs	r0, #0
 80029f4:	f7fd ffee 	bl	80009d4 <LCD_WR_DATAX>

		LCD_WR_REG(0xC4);
 80029f8:	20c4      	movs	r0, #196	; 0xc4
 80029fa:	f7fd ffc7 	bl	800098c <LCD_WR_REG>
		LCD_WR_DATAX(0x62);
 80029fe:	2062      	movs	r0, #98	; 0x62
 8002a00:	f7fd ffe8 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002a04:	2000      	movs	r0, #0
 8002a06:	f7fd ffe5 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x05);
 8002a0a:	2005      	movs	r0, #5
 8002a0c:	f7fd ffe2 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002a10:	2000      	movs	r0, #0
 8002a12:	f7fd ffdf 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x84);
 8002a16:	2084      	movs	r0, #132	; 0x84
 8002a18:	f7fd ffdc 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002a1c:	2000      	movs	r0, #0
 8002a1e:	f7fd ffd9 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xF0);
 8002a22:	20f0      	movs	r0, #240	; 0xf0
 8002a24:	f7fd ffd6 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002a28:	2000      	movs	r0, #0
 8002a2a:	f7fd ffd3 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x18);
 8002a2e:	2018      	movs	r0, #24
 8002a30:	f7fd ffd0 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002a34:	2000      	movs	r0, #0
 8002a36:	f7fd ffcd 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xA4);
 8002a3a:	20a4      	movs	r0, #164	; 0xa4
 8002a3c:	f7fd ffca 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002a40:	2000      	movs	r0, #0
 8002a42:	f7fd ffc7 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x18);
 8002a46:	2018      	movs	r0, #24
 8002a48:	f7fd ffc4 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002a4c:	2000      	movs	r0, #0
 8002a4e:	f7fd ffc1 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x50);
 8002a52:	2050      	movs	r0, #80	; 0x50
 8002a54:	f7fd ffbe 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002a58:	2000      	movs	r0, #0
 8002a5a:	f7fd ffbb 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x0C);
 8002a5e:	200c      	movs	r0, #12
 8002a60:	f7fd ffb8 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002a64:	2000      	movs	r0, #0
 8002a66:	f7fd ffb5 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x17);
 8002a6a:	2017      	movs	r0, #23
 8002a6c:	f7fd ffb2 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002a70:	2000      	movs	r0, #0
 8002a72:	f7fd ffaf 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x95);
 8002a76:	2095      	movs	r0, #149	; 0x95
 8002a78:	f7fd ffac 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002a7c:	2000      	movs	r0, #0
 8002a7e:	f7fd ffa9 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xF3);
 8002a82:	20f3      	movs	r0, #243	; 0xf3
 8002a84:	f7fd ffa6 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002a88:	2000      	movs	r0, #0
 8002a8a:	f7fd ffa3 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xE6);
 8002a8e:	20e6      	movs	r0, #230	; 0xe6
 8002a90:	f7fd ffa0 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002a94:	2000      	movs	r0, #0
 8002a96:	f7fd ff9d 	bl	80009d4 <LCD_WR_DATAX>

		LCD_WR_REG(0xC5);
 8002a9a:	20c5      	movs	r0, #197	; 0xc5
 8002a9c:	f7fd ff76 	bl	800098c <LCD_WR_REG>
		LCD_WR_DATAX(0x32);
 8002aa0:	2032      	movs	r0, #50	; 0x32
 8002aa2:	f7fd ff97 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002aa6:	2000      	movs	r0, #0
 8002aa8:	f7fd ff94 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x44);
 8002aac:	2044      	movs	r0, #68	; 0x44
 8002aae:	f7fd ff91 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002ab2:	2000      	movs	r0, #0
 8002ab4:	f7fd ff8e 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x65);
 8002ab8:	2065      	movs	r0, #101	; 0x65
 8002aba:	f7fd ff8b 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002abe:	2000      	movs	r0, #0
 8002ac0:	f7fd ff88 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x76);
 8002ac4:	2076      	movs	r0, #118	; 0x76
 8002ac6:	f7fd ff85 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002aca:	2000      	movs	r0, #0
 8002acc:	f7fd ff82 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x88);
 8002ad0:	2088      	movs	r0, #136	; 0x88
 8002ad2:	f7fd ff7f 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002ad6:	2000      	movs	r0, #0
 8002ad8:	f7fd ff7c 	bl	80009d4 <LCD_WR_DATAX>

		LCD_WR_REG(0xC6);
 8002adc:	20c6      	movs	r0, #198	; 0xc6
 8002ade:	f7fd ff55 	bl	800098c <LCD_WR_REG>
		LCD_WR_DATAX(0x20);
 8002ae2:	2020      	movs	r0, #32
 8002ae4:	f7fd ff76 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002ae8:	2000      	movs	r0, #0
 8002aea:	f7fd ff73 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x17);
 8002aee:	2017      	movs	r0, #23
 8002af0:	f7fd ff70 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002af4:	2000      	movs	r0, #0
 8002af6:	f7fd ff6d 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x01);
 8002afa:	2001      	movs	r0, #1
 8002afc:	f7fd ff6a 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002b00:	2000      	movs	r0, #0
 8002b02:	f7fd ff67 	bl	80009d4 <LCD_WR_DATAX>

		LCD_WR_REG(0xC7);
 8002b06:	20c7      	movs	r0, #199	; 0xc7
 8002b08:	f7fd ff40 	bl	800098c <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 8002b0c:	2000      	movs	r0, #0
 8002b0e:	f7fd ff61 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002b12:	2000      	movs	r0, #0
 8002b14:	f7fd ff5e 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002b18:	2000      	movs	r0, #0
 8002b1a:	f7fd ff5b 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002b1e:	2000      	movs	r0, #0
 8002b20:	f7fd ff58 	bl	80009d4 <LCD_WR_DATAX>

		LCD_WR_REG(0xC8);
 8002b24:	20c8      	movs	r0, #200	; 0xc8
 8002b26:	f7fd ff31 	bl	800098c <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 8002b2a:	2000      	movs	r0, #0
 8002b2c:	f7fd ff52 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002b30:	2000      	movs	r0, #0
 8002b32:	f7fd ff4f 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002b36:	2000      	movs	r0, #0
 8002b38:	f7fd ff4c 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002b3c:	2000      	movs	r0, #0
 8002b3e:	f7fd ff49 	bl	80009d4 <LCD_WR_DATAX>

		LCD_WR_REG(0xC9);
 8002b42:	20c9      	movs	r0, #201	; 0xc9
 8002b44:	f7fd ff22 	bl	800098c <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 8002b48:	2000      	movs	r0, #0
 8002b4a:	f7fd ff43 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002b4e:	2000      	movs	r0, #0
 8002b50:	f7fd ff40 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002b54:	2000      	movs	r0, #0
 8002b56:	f7fd ff3d 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002b5a:	2000      	movs	r0, #0
 8002b5c:	f7fd ff3a 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002b60:	2000      	movs	r0, #0
 8002b62:	f7fd ff37 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002b66:	2000      	movs	r0, #0
 8002b68:	f7fd ff34 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002b6c:	2000      	movs	r0, #0
 8002b6e:	f7fd ff31 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002b72:	2000      	movs	r0, #0
 8002b74:	f7fd ff2e 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002b78:	2000      	movs	r0, #0
 8002b7a:	f7fd ff2b 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002b7e:	2000      	movs	r0, #0
 8002b80:	f7fd ff28 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002b84:	2000      	movs	r0, #0
 8002b86:	f7fd ff25 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002b8a:	2000      	movs	r0, #0
 8002b8c:	f7fd ff22 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002b90:	2000      	movs	r0, #0
 8002b92:	f7fd ff1f 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002b96:	2000      	movs	r0, #0
 8002b98:	f7fd ff1c 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002b9c:	2000      	movs	r0, #0
 8002b9e:	f7fd ff19 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002ba2:	2000      	movs	r0, #0
 8002ba4:	f7fd ff16 	bl	80009d4 <LCD_WR_DATAX>

		LCD_WR_REG(0xE0);
 8002ba8:	20e0      	movs	r0, #224	; 0xe0
 8002baa:	f7fd feef 	bl	800098c <LCD_WR_REG>
		LCD_WR_DATAX(0x16);
 8002bae:	2016      	movs	r0, #22
 8002bb0:	f7fd ff10 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002bb4:	2000      	movs	r0, #0
 8002bb6:	f7fd ff0d 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x1C);
 8002bba:	201c      	movs	r0, #28
 8002bbc:	f7fd ff0a 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002bc0:	2000      	movs	r0, #0
 8002bc2:	f7fd ff07 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x21);
 8002bc6:	2021      	movs	r0, #33	; 0x21
 8002bc8:	f7fd ff04 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002bcc:	2000      	movs	r0, #0
 8002bce:	f7fd ff01 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x36);
 8002bd2:	2036      	movs	r0, #54	; 0x36
 8002bd4:	f7fd fefe 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002bd8:	2000      	movs	r0, #0
 8002bda:	f7fd fefb 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x46);
 8002bde:	2046      	movs	r0, #70	; 0x46
 8002be0:	f7fd fef8 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002be4:	2000      	movs	r0, #0
 8002be6:	f7fd fef5 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x52);
 8002bea:	2052      	movs	r0, #82	; 0x52
 8002bec:	f7fd fef2 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002bf0:	2000      	movs	r0, #0
 8002bf2:	f7fd feef 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x64);
 8002bf6:	2064      	movs	r0, #100	; 0x64
 8002bf8:	f7fd feec 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002bfc:	2000      	movs	r0, #0
 8002bfe:	f7fd fee9 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x7A);
 8002c02:	207a      	movs	r0, #122	; 0x7a
 8002c04:	f7fd fee6 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002c08:	2000      	movs	r0, #0
 8002c0a:	f7fd fee3 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x8B);
 8002c0e:	208b      	movs	r0, #139	; 0x8b
 8002c10:	f7fd fee0 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002c14:	2000      	movs	r0, #0
 8002c16:	f7fd fedd 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x99);
 8002c1a:	2099      	movs	r0, #153	; 0x99
 8002c1c:	f7fd feda 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002c20:	2000      	movs	r0, #0
 8002c22:	f7fd fed7 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xA8);
 8002c26:	20a8      	movs	r0, #168	; 0xa8
 8002c28:	f7fd fed4 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002c2c:	2000      	movs	r0, #0
 8002c2e:	f7fd fed1 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xB9);
 8002c32:	20b9      	movs	r0, #185	; 0xb9
 8002c34:	f7fd fece 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002c38:	2000      	movs	r0, #0
 8002c3a:	f7fd fecb 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xC4);
 8002c3e:	20c4      	movs	r0, #196	; 0xc4
 8002c40:	f7fd fec8 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002c44:	2000      	movs	r0, #0
 8002c46:	f7fd fec5 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xCA);
 8002c4a:	20ca      	movs	r0, #202	; 0xca
 8002c4c:	f7fd fec2 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002c50:	2000      	movs	r0, #0
 8002c52:	f7fd febf 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xD2);
 8002c56:	20d2      	movs	r0, #210	; 0xd2
 8002c58:	f7fd febc 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002c5c:	2000      	movs	r0, #0
 8002c5e:	f7fd feb9 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xD9);
 8002c62:	20d9      	movs	r0, #217	; 0xd9
 8002c64:	f7fd feb6 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002c68:	2000      	movs	r0, #0
 8002c6a:	f7fd feb3 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xE0);
 8002c6e:	20e0      	movs	r0, #224	; 0xe0
 8002c70:	f7fd feb0 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002c74:	2000      	movs	r0, #0
 8002c76:	f7fd fead 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xF3);
 8002c7a:	20f3      	movs	r0, #243	; 0xf3
 8002c7c:	f7fd feaa 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002c80:	2000      	movs	r0, #0
 8002c82:	f7fd fea7 	bl	80009d4 <LCD_WR_DATAX>

		LCD_WR_REG(0xE1);
 8002c86:	20e1      	movs	r0, #225	; 0xe1
 8002c88:	f7fd fe80 	bl	800098c <LCD_WR_REG>
		LCD_WR_DATAX(0x16);
 8002c8c:	2016      	movs	r0, #22
 8002c8e:	f7fd fea1 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002c92:	2000      	movs	r0, #0
 8002c94:	f7fd fe9e 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x1C);
 8002c98:	201c      	movs	r0, #28
 8002c9a:	f7fd fe9b 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002c9e:	2000      	movs	r0, #0
 8002ca0:	f7fd fe98 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x22);
 8002ca4:	2022      	movs	r0, #34	; 0x22
 8002ca6:	f7fd fe95 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002caa:	2000      	movs	r0, #0
 8002cac:	f7fd fe92 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x36);
 8002cb0:	2036      	movs	r0, #54	; 0x36
 8002cb2:	f7fd fe8f 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002cb6:	2000      	movs	r0, #0
 8002cb8:	f7fd fe8c 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x45);
 8002cbc:	2045      	movs	r0, #69	; 0x45
 8002cbe:	f7fd fe89 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002cc2:	2000      	movs	r0, #0
 8002cc4:	f7fd fe86 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x52);
 8002cc8:	2052      	movs	r0, #82	; 0x52
 8002cca:	f7fd fe83 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002cce:	2000      	movs	r0, #0
 8002cd0:	f7fd fe80 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x64);
 8002cd4:	2064      	movs	r0, #100	; 0x64
 8002cd6:	f7fd fe7d 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002cda:	2000      	movs	r0, #0
 8002cdc:	f7fd fe7a 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x7A);
 8002ce0:	207a      	movs	r0, #122	; 0x7a
 8002ce2:	f7fd fe77 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002ce6:	2000      	movs	r0, #0
 8002ce8:	f7fd fe74 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x8B);
 8002cec:	208b      	movs	r0, #139	; 0x8b
 8002cee:	f7fd fe71 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002cf2:	2000      	movs	r0, #0
 8002cf4:	f7fd fe6e 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x99);
 8002cf8:	2099      	movs	r0, #153	; 0x99
 8002cfa:	f7fd fe6b 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002cfe:	2000      	movs	r0, #0
 8002d00:	f7fd fe68 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xA8);
 8002d04:	20a8      	movs	r0, #168	; 0xa8
 8002d06:	f7fd fe65 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002d0a:	2000      	movs	r0, #0
 8002d0c:	f7fd fe62 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xB9);
 8002d10:	20b9      	movs	r0, #185	; 0xb9
 8002d12:	f7fd fe5f 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002d16:	2000      	movs	r0, #0
 8002d18:	f7fd fe5c 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xC4);
 8002d1c:	20c4      	movs	r0, #196	; 0xc4
 8002d1e:	f7fd fe59 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002d22:	2000      	movs	r0, #0
 8002d24:	f7fd fe56 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xCA);
 8002d28:	20ca      	movs	r0, #202	; 0xca
 8002d2a:	f7fd fe53 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002d2e:	2000      	movs	r0, #0
 8002d30:	f7fd fe50 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xD2);
 8002d34:	20d2      	movs	r0, #210	; 0xd2
 8002d36:	f7fd fe4d 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002d3a:	2000      	movs	r0, #0
 8002d3c:	f7fd fe4a 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xD8);
 8002d40:	20d8      	movs	r0, #216	; 0xd8
 8002d42:	f7fd fe47 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002d46:	2000      	movs	r0, #0
 8002d48:	f7fd fe44 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xE0);
 8002d4c:	20e0      	movs	r0, #224	; 0xe0
 8002d4e:	f7fd fe41 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002d52:	2000      	movs	r0, #0
 8002d54:	f7fd fe3e 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xF3);
 8002d58:	20f3      	movs	r0, #243	; 0xf3
 8002d5a:	f7fd fe3b 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002d5e:	2000      	movs	r0, #0
 8002d60:	f7fd fe38 	bl	80009d4 <LCD_WR_DATAX>

		LCD_WR_REG(0xE2);
 8002d64:	20e2      	movs	r0, #226	; 0xe2
 8002d66:	f7fd fe11 	bl	800098c <LCD_WR_REG>
		LCD_WR_DATAX(0x05);
 8002d6a:	2005      	movs	r0, #5
 8002d6c:	f7fd fe32 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002d70:	2000      	movs	r0, #0
 8002d72:	f7fd fe2f 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x0B);
 8002d76:	200b      	movs	r0, #11
 8002d78:	f7fd fe2c 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002d7c:	2000      	movs	r0, #0
 8002d7e:	f7fd fe29 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x1B);
 8002d82:	201b      	movs	r0, #27
 8002d84:	f7fd fe26 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002d88:	2000      	movs	r0, #0
 8002d8a:	f7fd fe23 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x34);
 8002d8e:	2034      	movs	r0, #52	; 0x34
 8002d90:	f7fd fe20 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002d94:	2000      	movs	r0, #0
 8002d96:	f7fd fe1d 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x44);
 8002d9a:	2044      	movs	r0, #68	; 0x44
 8002d9c:	f7fd fe1a 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002da0:	2000      	movs	r0, #0
 8002da2:	f7fd fe17 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x4F);
 8002da6:	204f      	movs	r0, #79	; 0x4f
 8002da8:	f7fd fe14 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002dac:	2000      	movs	r0, #0
 8002dae:	f7fd fe11 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x61);
 8002db2:	2061      	movs	r0, #97	; 0x61
 8002db4:	f7fd fe0e 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002db8:	2000      	movs	r0, #0
 8002dba:	f7fd fe0b 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x79);
 8002dbe:	2079      	movs	r0, #121	; 0x79
 8002dc0:	f7fd fe08 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002dc4:	2000      	movs	r0, #0
 8002dc6:	f7fd fe05 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x88);
 8002dca:	2088      	movs	r0, #136	; 0x88
 8002dcc:	f7fd fe02 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002dd0:	2000      	movs	r0, #0
 8002dd2:	f7fd fdff 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x97);
 8002dd6:	2097      	movs	r0, #151	; 0x97
 8002dd8:	f7fd fdfc 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002ddc:	2000      	movs	r0, #0
 8002dde:	f7fd fdf9 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xA6);
 8002de2:	20a6      	movs	r0, #166	; 0xa6
 8002de4:	f7fd fdf6 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002de8:	2000      	movs	r0, #0
 8002dea:	f7fd fdf3 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xB7);
 8002dee:	20b7      	movs	r0, #183	; 0xb7
 8002df0:	f7fd fdf0 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002df4:	2000      	movs	r0, #0
 8002df6:	f7fd fded 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xC2);
 8002dfa:	20c2      	movs	r0, #194	; 0xc2
 8002dfc:	f7fd fdea 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002e00:	2000      	movs	r0, #0
 8002e02:	f7fd fde7 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xC7);
 8002e06:	20c7      	movs	r0, #199	; 0xc7
 8002e08:	f7fd fde4 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002e0c:	2000      	movs	r0, #0
 8002e0e:	f7fd fde1 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xD1);
 8002e12:	20d1      	movs	r0, #209	; 0xd1
 8002e14:	f7fd fdde 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002e18:	2000      	movs	r0, #0
 8002e1a:	f7fd fddb 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xD6);
 8002e1e:	20d6      	movs	r0, #214	; 0xd6
 8002e20:	f7fd fdd8 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002e24:	2000      	movs	r0, #0
 8002e26:	f7fd fdd5 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xDD);
 8002e2a:	20dd      	movs	r0, #221	; 0xdd
 8002e2c:	f7fd fdd2 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002e30:	2000      	movs	r0, #0
 8002e32:	f7fd fdcf 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xF3);
 8002e36:	20f3      	movs	r0, #243	; 0xf3
 8002e38:	f7fd fdcc 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002e3c:	2000      	movs	r0, #0
 8002e3e:	f7fd fdc9 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_REG(0xE3);
 8002e42:	20e3      	movs	r0, #227	; 0xe3
 8002e44:	f7fd fda2 	bl	800098c <LCD_WR_REG>
		LCD_WR_DATAX(0x05);
 8002e48:	2005      	movs	r0, #5
 8002e4a:	f7fd fdc3 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002e4e:	2000      	movs	r0, #0
 8002e50:	f7fd fdc0 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xA);
 8002e54:	200a      	movs	r0, #10
 8002e56:	f7fd fdbd 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002e5a:	2000      	movs	r0, #0
 8002e5c:	f7fd fdba 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x1C);
 8002e60:	201c      	movs	r0, #28
 8002e62:	f7fd fdb7 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002e66:	2000      	movs	r0, #0
 8002e68:	f7fd fdb4 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x33);
 8002e6c:	2033      	movs	r0, #51	; 0x33
 8002e6e:	f7fd fdb1 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002e72:	2000      	movs	r0, #0
 8002e74:	f7fd fdae 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x44);
 8002e78:	2044      	movs	r0, #68	; 0x44
 8002e7a:	f7fd fdab 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002e7e:	2000      	movs	r0, #0
 8002e80:	f7fd fda8 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x50);
 8002e84:	2050      	movs	r0, #80	; 0x50
 8002e86:	f7fd fda5 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002e8a:	2000      	movs	r0, #0
 8002e8c:	f7fd fda2 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x62);
 8002e90:	2062      	movs	r0, #98	; 0x62
 8002e92:	f7fd fd9f 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002e96:	2000      	movs	r0, #0
 8002e98:	f7fd fd9c 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x78);
 8002e9c:	2078      	movs	r0, #120	; 0x78
 8002e9e:	f7fd fd99 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002ea2:	2000      	movs	r0, #0
 8002ea4:	f7fd fd96 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x88);
 8002ea8:	2088      	movs	r0, #136	; 0x88
 8002eaa:	f7fd fd93 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002eae:	2000      	movs	r0, #0
 8002eb0:	f7fd fd90 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x97);
 8002eb4:	2097      	movs	r0, #151	; 0x97
 8002eb6:	f7fd fd8d 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002eba:	2000      	movs	r0, #0
 8002ebc:	f7fd fd8a 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xA6);
 8002ec0:	20a6      	movs	r0, #166	; 0xa6
 8002ec2:	f7fd fd87 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002ec6:	2000      	movs	r0, #0
 8002ec8:	f7fd fd84 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xB7);
 8002ecc:	20b7      	movs	r0, #183	; 0xb7
 8002ece:	f7fd fd81 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002ed2:	2000      	movs	r0, #0
 8002ed4:	f7fd fd7e 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xC2);
 8002ed8:	20c2      	movs	r0, #194	; 0xc2
 8002eda:	f7fd fd7b 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002ede:	2000      	movs	r0, #0
 8002ee0:	f7fd fd78 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xC7);
 8002ee4:	20c7      	movs	r0, #199	; 0xc7
 8002ee6:	f7fd fd75 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002eea:	2000      	movs	r0, #0
 8002eec:	f7fd fd72 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xD1);
 8002ef0:	20d1      	movs	r0, #209	; 0xd1
 8002ef2:	f7fd fd6f 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002ef6:	2000      	movs	r0, #0
 8002ef8:	f7fd fd6c 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xD5);
 8002efc:	20d5      	movs	r0, #213	; 0xd5
 8002efe:	f7fd fd69 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002f02:	2000      	movs	r0, #0
 8002f04:	f7fd fd66 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xDD);
 8002f08:	20dd      	movs	r0, #221	; 0xdd
 8002f0a:	f7fd fd63 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002f0e:	2000      	movs	r0, #0
 8002f10:	f7fd fd60 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xF3);
 8002f14:	20f3      	movs	r0, #243	; 0xf3
 8002f16:	f7fd fd5d 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002f1a:	2000      	movs	r0, #0
 8002f1c:	f7fd fd5a 	bl	80009d4 <LCD_WR_DATAX>

		LCD_WR_REG(0xE4);
 8002f20:	20e4      	movs	r0, #228	; 0xe4
 8002f22:	f7fd fd33 	bl	800098c <LCD_WR_REG>
		LCD_WR_DATAX(0x01);
 8002f26:	2001      	movs	r0, #1
 8002f28:	f7fd fd54 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002f2c:	2000      	movs	r0, #0
 8002f2e:	f7fd fd51 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x01);
 8002f32:	2001      	movs	r0, #1
 8002f34:	f7fd fd4e 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002f38:	2000      	movs	r0, #0
 8002f3a:	f7fd fd4b 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x02);
 8002f3e:	2002      	movs	r0, #2
 8002f40:	f7fd fd48 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002f44:	2000      	movs	r0, #0
 8002f46:	f7fd fd45 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x2A);
 8002f4a:	202a      	movs	r0, #42	; 0x2a
 8002f4c:	f7fd fd42 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002f50:	2000      	movs	r0, #0
 8002f52:	f7fd fd3f 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x3C);
 8002f56:	203c      	movs	r0, #60	; 0x3c
 8002f58:	f7fd fd3c 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002f5c:	2000      	movs	r0, #0
 8002f5e:	f7fd fd39 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x4B);
 8002f62:	204b      	movs	r0, #75	; 0x4b
 8002f64:	f7fd fd36 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002f68:	2000      	movs	r0, #0
 8002f6a:	f7fd fd33 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x5D);
 8002f6e:	205d      	movs	r0, #93	; 0x5d
 8002f70:	f7fd fd30 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002f74:	2000      	movs	r0, #0
 8002f76:	f7fd fd2d 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x74);
 8002f7a:	2074      	movs	r0, #116	; 0x74
 8002f7c:	f7fd fd2a 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002f80:	2000      	movs	r0, #0
 8002f82:	f7fd fd27 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x84);
 8002f86:	2084      	movs	r0, #132	; 0x84
 8002f88:	f7fd fd24 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002f8c:	2000      	movs	r0, #0
 8002f8e:	f7fd fd21 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x93);
 8002f92:	2093      	movs	r0, #147	; 0x93
 8002f94:	f7fd fd1e 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002f98:	2000      	movs	r0, #0
 8002f9a:	f7fd fd1b 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xA2);
 8002f9e:	20a2      	movs	r0, #162	; 0xa2
 8002fa0:	f7fd fd18 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002fa4:	2000      	movs	r0, #0
 8002fa6:	f7fd fd15 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xB3);
 8002faa:	20b3      	movs	r0, #179	; 0xb3
 8002fac:	f7fd fd12 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002fb0:	2000      	movs	r0, #0
 8002fb2:	f7fd fd0f 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xBE);
 8002fb6:	20be      	movs	r0, #190	; 0xbe
 8002fb8:	f7fd fd0c 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002fbc:	2000      	movs	r0, #0
 8002fbe:	f7fd fd09 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xC4);
 8002fc2:	20c4      	movs	r0, #196	; 0xc4
 8002fc4:	f7fd fd06 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002fc8:	2000      	movs	r0, #0
 8002fca:	f7fd fd03 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xCD);
 8002fce:	20cd      	movs	r0, #205	; 0xcd
 8002fd0:	f7fd fd00 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002fd4:	2000      	movs	r0, #0
 8002fd6:	f7fd fcfd 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xD3);
 8002fda:	20d3      	movs	r0, #211	; 0xd3
 8002fdc:	f7fd fcfa 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002fe0:	2000      	movs	r0, #0
 8002fe2:	f7fd fcf7 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xDD);
 8002fe6:	20dd      	movs	r0, #221	; 0xdd
 8002fe8:	f7fd fcf4 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002fec:	2000      	movs	r0, #0
 8002fee:	f7fd fcf1 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xF3);
 8002ff2:	20f3      	movs	r0, #243	; 0xf3
 8002ff4:	f7fd fcee 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002ff8:	2000      	movs	r0, #0
 8002ffa:	f7fd fceb 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_REG(0xE5);
 8002ffe:	20e5      	movs	r0, #229	; 0xe5
 8003000:	f7fd fcc4 	bl	800098c <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 8003004:	2000      	movs	r0, #0
 8003006:	f7fd fce5 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800300a:	2000      	movs	r0, #0
 800300c:	f7fd fce2 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003010:	2000      	movs	r0, #0
 8003012:	f7fd fcdf 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003016:	2000      	movs	r0, #0
 8003018:	f7fd fcdc 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x02);
 800301c:	2002      	movs	r0, #2
 800301e:	f7fd fcd9 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003022:	2000      	movs	r0, #0
 8003024:	f7fd fcd6 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x29);
 8003028:	2029      	movs	r0, #41	; 0x29
 800302a:	f7fd fcd3 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800302e:	2000      	movs	r0, #0
 8003030:	f7fd fcd0 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x3C);
 8003034:	203c      	movs	r0, #60	; 0x3c
 8003036:	f7fd fccd 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800303a:	2000      	movs	r0, #0
 800303c:	f7fd fcca 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x4B);
 8003040:	204b      	movs	r0, #75	; 0x4b
 8003042:	f7fd fcc7 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003046:	2000      	movs	r0, #0
 8003048:	f7fd fcc4 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x5D);
 800304c:	205d      	movs	r0, #93	; 0x5d
 800304e:	f7fd fcc1 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003052:	2000      	movs	r0, #0
 8003054:	f7fd fcbe 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x74);
 8003058:	2074      	movs	r0, #116	; 0x74
 800305a:	f7fd fcbb 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800305e:	2000      	movs	r0, #0
 8003060:	f7fd fcb8 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x84);
 8003064:	2084      	movs	r0, #132	; 0x84
 8003066:	f7fd fcb5 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800306a:	2000      	movs	r0, #0
 800306c:	f7fd fcb2 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x93);
 8003070:	2093      	movs	r0, #147	; 0x93
 8003072:	f7fd fcaf 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003076:	2000      	movs	r0, #0
 8003078:	f7fd fcac 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xA2);
 800307c:	20a2      	movs	r0, #162	; 0xa2
 800307e:	f7fd fca9 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003082:	2000      	movs	r0, #0
 8003084:	f7fd fca6 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xB3);
 8003088:	20b3      	movs	r0, #179	; 0xb3
 800308a:	f7fd fca3 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800308e:	2000      	movs	r0, #0
 8003090:	f7fd fca0 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xBE);
 8003094:	20be      	movs	r0, #190	; 0xbe
 8003096:	f7fd fc9d 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800309a:	2000      	movs	r0, #0
 800309c:	f7fd fc9a 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xC4);
 80030a0:	20c4      	movs	r0, #196	; 0xc4
 80030a2:	f7fd fc97 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80030a6:	2000      	movs	r0, #0
 80030a8:	f7fd fc94 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xCD);
 80030ac:	20cd      	movs	r0, #205	; 0xcd
 80030ae:	f7fd fc91 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80030b2:	2000      	movs	r0, #0
 80030b4:	f7fd fc8e 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xD3);
 80030b8:	20d3      	movs	r0, #211	; 0xd3
 80030ba:	f7fd fc8b 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80030be:	2000      	movs	r0, #0
 80030c0:	f7fd fc88 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xDC);
 80030c4:	20dc      	movs	r0, #220	; 0xdc
 80030c6:	f7fd fc85 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80030ca:	2000      	movs	r0, #0
 80030cc:	f7fd fc82 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xF3);
 80030d0:	20f3      	movs	r0, #243	; 0xf3
 80030d2:	f7fd fc7f 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80030d6:	2000      	movs	r0, #0
 80030d8:	f7fd fc7c 	bl	80009d4 <LCD_WR_DATAX>

		LCD_WR_REG(0xE6);
 80030dc:	20e6      	movs	r0, #230	; 0xe6
 80030de:	f7fd fc55 	bl	800098c <LCD_WR_REG>
		LCD_WR_DATAX(0x11);
 80030e2:	2011      	movs	r0, #17
 80030e4:	f7fd fc76 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80030e8:	2000      	movs	r0, #0
 80030ea:	f7fd fc73 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x34);
 80030ee:	2034      	movs	r0, #52	; 0x34
 80030f0:	f7fd fc70 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80030f4:	2000      	movs	r0, #0
 80030f6:	f7fd fc6d 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x56);
 80030fa:	2056      	movs	r0, #86	; 0x56
 80030fc:	f7fd fc6a 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003100:	2000      	movs	r0, #0
 8003102:	f7fd fc67 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x76);
 8003106:	2076      	movs	r0, #118	; 0x76
 8003108:	f7fd fc64 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800310c:	2000      	movs	r0, #0
 800310e:	f7fd fc61 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x77);
 8003112:	2077      	movs	r0, #119	; 0x77
 8003114:	f7fd fc5e 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003118:	2000      	movs	r0, #0
 800311a:	f7fd fc5b 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x66);
 800311e:	2066      	movs	r0, #102	; 0x66
 8003120:	f7fd fc58 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003124:	2000      	movs	r0, #0
 8003126:	f7fd fc55 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x88);
 800312a:	2088      	movs	r0, #136	; 0x88
 800312c:	f7fd fc52 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003130:	2000      	movs	r0, #0
 8003132:	f7fd fc4f 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x99);
 8003136:	2099      	movs	r0, #153	; 0x99
 8003138:	f7fd fc4c 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800313c:	2000      	movs	r0, #0
 800313e:	f7fd fc49 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xBB);
 8003142:	20bb      	movs	r0, #187	; 0xbb
 8003144:	f7fd fc46 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003148:	2000      	movs	r0, #0
 800314a:	f7fd fc43 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x99);
 800314e:	2099      	movs	r0, #153	; 0x99
 8003150:	f7fd fc40 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003154:	2000      	movs	r0, #0
 8003156:	f7fd fc3d 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x66);
 800315a:	2066      	movs	r0, #102	; 0x66
 800315c:	f7fd fc3a 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003160:	2000      	movs	r0, #0
 8003162:	f7fd fc37 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x55);
 8003166:	2055      	movs	r0, #85	; 0x55
 8003168:	f7fd fc34 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800316c:	2000      	movs	r0, #0
 800316e:	f7fd fc31 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x55);
 8003172:	2055      	movs	r0, #85	; 0x55
 8003174:	f7fd fc2e 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003178:	2000      	movs	r0, #0
 800317a:	f7fd fc2b 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x45);
 800317e:	2045      	movs	r0, #69	; 0x45
 8003180:	f7fd fc28 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003184:	2000      	movs	r0, #0
 8003186:	f7fd fc25 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x43);
 800318a:	2043      	movs	r0, #67	; 0x43
 800318c:	f7fd fc22 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003190:	2000      	movs	r0, #0
 8003192:	f7fd fc1f 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x44);
 8003196:	2044      	movs	r0, #68	; 0x44
 8003198:	f7fd fc1c 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800319c:	2000      	movs	r0, #0
 800319e:	f7fd fc19 	bl	80009d4 <LCD_WR_DATAX>

		LCD_WR_REG(0xE7);
 80031a2:	20e7      	movs	r0, #231	; 0xe7
 80031a4:	f7fd fbf2 	bl	800098c <LCD_WR_REG>
		LCD_WR_DATAX(0x32);
 80031a8:	2032      	movs	r0, #50	; 0x32
 80031aa:	f7fd fc13 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80031ae:	2000      	movs	r0, #0
 80031b0:	f7fd fc10 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x55);
 80031b4:	2055      	movs	r0, #85	; 0x55
 80031b6:	f7fd fc0d 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80031ba:	2000      	movs	r0, #0
 80031bc:	f7fd fc0a 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x76);
 80031c0:	2076      	movs	r0, #118	; 0x76
 80031c2:	f7fd fc07 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80031c6:	2000      	movs	r0, #0
 80031c8:	f7fd fc04 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x66);
 80031cc:	2066      	movs	r0, #102	; 0x66
 80031ce:	f7fd fc01 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80031d2:	2000      	movs	r0, #0
 80031d4:	f7fd fbfe 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x67);
 80031d8:	2067      	movs	r0, #103	; 0x67
 80031da:	f7fd fbfb 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80031de:	2000      	movs	r0, #0
 80031e0:	f7fd fbf8 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x67);
 80031e4:	2067      	movs	r0, #103	; 0x67
 80031e6:	f7fd fbf5 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80031ea:	2000      	movs	r0, #0
 80031ec:	f7fd fbf2 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x87);
 80031f0:	2087      	movs	r0, #135	; 0x87
 80031f2:	f7fd fbef 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80031f6:	2000      	movs	r0, #0
 80031f8:	f7fd fbec 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x99);
 80031fc:	2099      	movs	r0, #153	; 0x99
 80031fe:	f7fd fbe9 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003202:	2000      	movs	r0, #0
 8003204:	f7fd fbe6 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xBB);
 8003208:	20bb      	movs	r0, #187	; 0xbb
 800320a:	f7fd fbe3 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800320e:	2000      	movs	r0, #0
 8003210:	f7fd fbe0 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x99);
 8003214:	2099      	movs	r0, #153	; 0x99
 8003216:	f7fd fbdd 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800321a:	2000      	movs	r0, #0
 800321c:	f7fd fbda 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x77);
 8003220:	2077      	movs	r0, #119	; 0x77
 8003222:	f7fd fbd7 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003226:	2000      	movs	r0, #0
 8003228:	f7fd fbd4 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x44);
 800322c:	2044      	movs	r0, #68	; 0x44
 800322e:	f7fd fbd1 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003232:	2000      	movs	r0, #0
 8003234:	f7fd fbce 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x56);
 8003238:	2056      	movs	r0, #86	; 0x56
 800323a:	f7fd fbcb 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800323e:	2000      	movs	r0, #0
 8003240:	f7fd fbc8 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x23);
 8003244:	2023      	movs	r0, #35	; 0x23
 8003246:	f7fd fbc5 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800324a:	2000      	movs	r0, #0
 800324c:	f7fd fbc2 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x33);
 8003250:	2033      	movs	r0, #51	; 0x33
 8003252:	f7fd fbbf 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003256:	2000      	movs	r0, #0
 8003258:	f7fd fbbc 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x45);
 800325c:	2045      	movs	r0, #69	; 0x45
 800325e:	f7fd fbb9 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003262:	2000      	movs	r0, #0
 8003264:	f7fd fbb6 	bl	80009d4 <LCD_WR_DATAX>

		LCD_WR_REG(0xE8);
 8003268:	20e8      	movs	r0, #232	; 0xe8
 800326a:	f7fd fb8f 	bl	800098c <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 800326e:	2000      	movs	r0, #0
 8003270:	f7fd fbb0 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003274:	2000      	movs	r0, #0
 8003276:	f7fd fbad 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x99);
 800327a:	2099      	movs	r0, #153	; 0x99
 800327c:	f7fd fbaa 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003280:	2000      	movs	r0, #0
 8003282:	f7fd fba7 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x87);
 8003286:	2087      	movs	r0, #135	; 0x87
 8003288:	f7fd fba4 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800328c:	2000      	movs	r0, #0
 800328e:	f7fd fba1 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x88);
 8003292:	2088      	movs	r0, #136	; 0x88
 8003294:	f7fd fb9e 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003298:	2000      	movs	r0, #0
 800329a:	f7fd fb9b 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x77);
 800329e:	2077      	movs	r0, #119	; 0x77
 80032a0:	f7fd fb98 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80032a4:	2000      	movs	r0, #0
 80032a6:	f7fd fb95 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x66);
 80032aa:	2066      	movs	r0, #102	; 0x66
 80032ac:	f7fd fb92 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80032b0:	2000      	movs	r0, #0
 80032b2:	f7fd fb8f 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x88);
 80032b6:	2088      	movs	r0, #136	; 0x88
 80032b8:	f7fd fb8c 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80032bc:	2000      	movs	r0, #0
 80032be:	f7fd fb89 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xAA);
 80032c2:	20aa      	movs	r0, #170	; 0xaa
 80032c4:	f7fd fb86 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80032c8:	2000      	movs	r0, #0
 80032ca:	f7fd fb83 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xBB);
 80032ce:	20bb      	movs	r0, #187	; 0xbb
 80032d0:	f7fd fb80 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80032d4:	2000      	movs	r0, #0
 80032d6:	f7fd fb7d 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x99);
 80032da:	2099      	movs	r0, #153	; 0x99
 80032dc:	f7fd fb7a 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80032e0:	2000      	movs	r0, #0
 80032e2:	f7fd fb77 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x66);
 80032e6:	2066      	movs	r0, #102	; 0x66
 80032e8:	f7fd fb74 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80032ec:	2000      	movs	r0, #0
 80032ee:	f7fd fb71 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x55);
 80032f2:	2055      	movs	r0, #85	; 0x55
 80032f4:	f7fd fb6e 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80032f8:	2000      	movs	r0, #0
 80032fa:	f7fd fb6b 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x55);
 80032fe:	2055      	movs	r0, #85	; 0x55
 8003300:	f7fd fb68 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003304:	2000      	movs	r0, #0
 8003306:	f7fd fb65 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x44);
 800330a:	2044      	movs	r0, #68	; 0x44
 800330c:	f7fd fb62 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003310:	2000      	movs	r0, #0
 8003312:	f7fd fb5f 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x44);
 8003316:	2044      	movs	r0, #68	; 0x44
 8003318:	f7fd fb5c 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800331c:	2000      	movs	r0, #0
 800331e:	f7fd fb59 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x55);
 8003322:	2055      	movs	r0, #85	; 0x55
 8003324:	f7fd fb56 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003328:	2000      	movs	r0, #0
 800332a:	f7fd fb53 	bl	80009d4 <LCD_WR_DATAX>

		LCD_WR_REG(0xE9);
 800332e:	20e9      	movs	r0, #233	; 0xe9
 8003330:	f7fd fb2c 	bl	800098c <LCD_WR_REG>
		LCD_WR_DATAX(0xAA);
 8003334:	20aa      	movs	r0, #170	; 0xaa
 8003336:	f7fd fb4d 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800333a:	2000      	movs	r0, #0
 800333c:	f7fd fb4a 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003340:	2000      	movs	r0, #0
 8003342:	f7fd fb47 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003346:	2000      	movs	r0, #0
 8003348:	f7fd fb44 	bl	80009d4 <LCD_WR_DATAX>

		LCD_WR_REG(0x00);
 800334c:	2000      	movs	r0, #0
 800334e:	f7fd fb1d 	bl	800098c <LCD_WR_REG>
		LCD_WR_DATAX(0xAA);
 8003352:	20aa      	movs	r0, #170	; 0xaa
 8003354:	f7fd fb3e 	bl	80009d4 <LCD_WR_DATAX>

		LCD_WR_REG(0xCF);
 8003358:	20cf      	movs	r0, #207	; 0xcf
 800335a:	f7fd fb17 	bl	800098c <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 800335e:	2000      	movs	r0, #0
 8003360:	f7fd fb38 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003364:	2000      	movs	r0, #0
 8003366:	f7fd fb35 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800336a:	2000      	movs	r0, #0
 800336c:	f7fd fb32 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003370:	2000      	movs	r0, #0
 8003372:	f7fd fb2f 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003376:	2000      	movs	r0, #0
 8003378:	f7fd fb2c 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800337c:	2000      	movs	r0, #0
 800337e:	f7fd fb29 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003382:	2000      	movs	r0, #0
 8003384:	f7fd fb26 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003388:	2000      	movs	r0, #0
 800338a:	f7fd fb23 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800338e:	2000      	movs	r0, #0
 8003390:	f7fd fb20 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003394:	2000      	movs	r0, #0
 8003396:	f7fd fb1d 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800339a:	2000      	movs	r0, #0
 800339c:	f7fd fb1a 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80033a0:	2000      	movs	r0, #0
 80033a2:	f7fd fb17 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80033a6:	2000      	movs	r0, #0
 80033a8:	f7fd fb14 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80033ac:	2000      	movs	r0, #0
 80033ae:	f7fd fb11 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80033b2:	2000      	movs	r0, #0
 80033b4:	f7fd fb0e 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80033b8:	2000      	movs	r0, #0
 80033ba:	f7fd fb0b 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80033be:	2000      	movs	r0, #0
 80033c0:	f7fd fb08 	bl	80009d4 <LCD_WR_DATAX>

		LCD_WR_REG(0xF0);
 80033c4:	20f0      	movs	r0, #240	; 0xf0
 80033c6:	f7fd fae1 	bl	800098c <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 80033ca:	2000      	movs	r0, #0
 80033cc:	f7fd fb02 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x50);
 80033d0:	2050      	movs	r0, #80	; 0x50
 80033d2:	f7fd faff 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80033d6:	2000      	movs	r0, #0
 80033d8:	f7fd fafc 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80033dc:	2000      	movs	r0, #0
 80033de:	f7fd faf9 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80033e2:	2000      	movs	r0, #0
 80033e4:	f7fd faf6 	bl	80009d4 <LCD_WR_DATAX>

		LCD_WR_REG(0xF3);
 80033e8:	20f3      	movs	r0, #243	; 0xf3
 80033ea:	f7fd facf 	bl	800098c <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 80033ee:	2000      	movs	r0, #0
 80033f0:	f7fd faf0 	bl	80009d4 <LCD_WR_DATAX>

		LCD_WR_REG(0xF9);
 80033f4:	20f9      	movs	r0, #249	; 0xf9
 80033f6:	f7fd fac9 	bl	800098c <LCD_WR_REG>
		LCD_WR_DATAX(0x06);
 80033fa:	2006      	movs	r0, #6
 80033fc:	f7fd faea 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x10);
 8003400:	2010      	movs	r0, #16
 8003402:	f7fd fae7 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x29);
 8003406:	2029      	movs	r0, #41	; 0x29
 8003408:	f7fd fae4 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800340c:	2000      	movs	r0, #0
 800340e:	f7fd fae1 	bl	80009d4 <LCD_WR_DATAX>

		LCD_WR_REG(0x3A);
 8003412:	203a      	movs	r0, #58	; 0x3a
 8003414:	f7fd faba 	bl	800098c <LCD_WR_REG>
		LCD_WR_DATAX(0x55);	//66
 8003418:	2055      	movs	r0, #85	; 0x55
 800341a:	f7fd fadb 	bl	80009d4 <LCD_WR_DATAX>

		LCD_WR_REG(0x11);
 800341e:	2011      	movs	r0, #17
 8003420:	f7fd fab4 	bl	800098c <LCD_WR_REG>
		HAL_Delay(100);
 8003424:	2064      	movs	r0, #100	; 0x64
 8003426:	f003 fbab 	bl	8006b80 <HAL_Delay>
		LCD_WR_REG(0x29);
 800342a:	2029      	movs	r0, #41	; 0x29
 800342c:	f7fd faae 	bl	800098c <LCD_WR_REG>
		LCD_WR_REG(0x35);
 8003430:	2035      	movs	r0, #53	; 0x35
 8003432:	f7fd faab 	bl	800098c <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 8003436:	2000      	movs	r0, #0
 8003438:	f7fd facc 	bl	80009d4 <LCD_WR_DATAX>

		LCD_WR_REG(0x51);
 800343c:	2051      	movs	r0, #81	; 0x51
 800343e:	f7fd faa5 	bl	800098c <LCD_WR_REG>
		LCD_WR_DATAX(0xFF);
 8003442:	20ff      	movs	r0, #255	; 0xff
 8003444:	f7fd fac6 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_REG(0x53);
 8003448:	2053      	movs	r0, #83	; 0x53
 800344a:	f7fd fa9f 	bl	800098c <LCD_WR_REG>
		LCD_WR_DATAX(0x2C);
 800344e:	202c      	movs	r0, #44	; 0x2c
 8003450:	f7fd fac0 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_REG(0x55);
 8003454:	2055      	movs	r0, #85	; 0x55
 8003456:	f7fd fa99 	bl	800098c <LCD_WR_REG>
		LCD_WR_DATAX(0x82);
 800345a:	2082      	movs	r0, #130	; 0x82
 800345c:	f7fd faba 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_REG(0x2c);
 8003460:	202c      	movs	r0, #44	; 0x2c
 8003462:	f7fd fa93 	bl	800098c <LCD_WR_REG>
 8003466:	f002 bca1 	b.w	8005dac <LCD_Init+0x3e34>
	} else if (lcddev.id == 0x5510) {
 800346a:	4b04      	ldr	r3, [pc, #16]	; (800347c <LCD_Init+0x1504>)
 800346c:	889b      	ldrh	r3, [r3, #4]
 800346e:	f245 5210 	movw	r2, #21776	; 0x5510
 8003472:	4293      	cmp	r3, r2
 8003474:	f040 8782 	bne.w	800437c <LCD_Init+0x2404>
 8003478:	e002      	b.n	8003480 <LCD_Init+0x1508>
 800347a:	bf00      	nop
 800347c:	20000080 	.word	0x20000080
		LCD_WriteReg(0xF000, 0x55);
 8003480:	2155      	movs	r1, #85	; 0x55
 8003482:	f44f 4070 	mov.w	r0, #61440	; 0xf000
 8003486:	f7fd fb0d 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0xF001, 0xAA);
 800348a:	21aa      	movs	r1, #170	; 0xaa
 800348c:	f24f 0001 	movw	r0, #61441	; 0xf001
 8003490:	f7fd fb08 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0xF002, 0x52);
 8003494:	2152      	movs	r1, #82	; 0x52
 8003496:	f24f 0002 	movw	r0, #61442	; 0xf002
 800349a:	f7fd fb03 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0xF003, 0x08);
 800349e:	2108      	movs	r1, #8
 80034a0:	f24f 0003 	movw	r0, #61443	; 0xf003
 80034a4:	f7fd fafe 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0xF004, 0x01);
 80034a8:	2101      	movs	r1, #1
 80034aa:	f24f 0004 	movw	r0, #61444	; 0xf004
 80034ae:	f7fd faf9 	bl	8000aa4 <LCD_WriteReg>
		//AVDD Set AVDD 5.2V
		LCD_WriteReg(0xB000, 0x0D);
 80034b2:	210d      	movs	r1, #13
 80034b4:	f44f 4030 	mov.w	r0, #45056	; 0xb000
 80034b8:	f7fd faf4 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0xB001, 0x0D);
 80034bc:	210d      	movs	r1, #13
 80034be:	f24b 0001 	movw	r0, #45057	; 0xb001
 80034c2:	f7fd faef 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0xB002, 0x0D);
 80034c6:	210d      	movs	r1, #13
 80034c8:	f24b 0002 	movw	r0, #45058	; 0xb002
 80034cc:	f7fd faea 	bl	8000aa4 <LCD_WriteReg>
		//AVDD ratio
		LCD_WriteReg(0xB600, 0x34);
 80034d0:	2134      	movs	r1, #52	; 0x34
 80034d2:	f44f 4036 	mov.w	r0, #46592	; 0xb600
 80034d6:	f7fd fae5 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0xB601, 0x34);
 80034da:	2134      	movs	r1, #52	; 0x34
 80034dc:	f24b 6001 	movw	r0, #46593	; 0xb601
 80034e0:	f7fd fae0 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0xB602, 0x34);
 80034e4:	2134      	movs	r1, #52	; 0x34
 80034e6:	f24b 6002 	movw	r0, #46594	; 0xb602
 80034ea:	f7fd fadb 	bl	8000aa4 <LCD_WriteReg>
		//AVEE -5.2V
		LCD_WriteReg(0xB100, 0x0D);
 80034ee:	210d      	movs	r1, #13
 80034f0:	f44f 4031 	mov.w	r0, #45312	; 0xb100
 80034f4:	f7fd fad6 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0xB101, 0x0D);
 80034f8:	210d      	movs	r1, #13
 80034fa:	f24b 1001 	movw	r0, #45313	; 0xb101
 80034fe:	f7fd fad1 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0xB102, 0x0D);
 8003502:	210d      	movs	r1, #13
 8003504:	f24b 1002 	movw	r0, #45314	; 0xb102
 8003508:	f7fd facc 	bl	8000aa4 <LCD_WriteReg>
		//AVEE ratio
		LCD_WriteReg(0xB700, 0x34);
 800350c:	2134      	movs	r1, #52	; 0x34
 800350e:	f44f 4037 	mov.w	r0, #46848	; 0xb700
 8003512:	f7fd fac7 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0xB701, 0x34);
 8003516:	2134      	movs	r1, #52	; 0x34
 8003518:	f24b 7001 	movw	r0, #46849	; 0xb701
 800351c:	f7fd fac2 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0xB702, 0x34);
 8003520:	2134      	movs	r1, #52	; 0x34
 8003522:	f24b 7002 	movw	r0, #46850	; 0xb702
 8003526:	f7fd fabd 	bl	8000aa4 <LCD_WriteReg>
		//VCL -2.5V
		LCD_WriteReg(0xB200, 0x00);
 800352a:	2100      	movs	r1, #0
 800352c:	f44f 4032 	mov.w	r0, #45568	; 0xb200
 8003530:	f7fd fab8 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0xB201, 0x00);
 8003534:	2100      	movs	r1, #0
 8003536:	f24b 2001 	movw	r0, #45569	; 0xb201
 800353a:	f7fd fab3 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0xB202, 0x00);
 800353e:	2100      	movs	r1, #0
 8003540:	f24b 2002 	movw	r0, #45570	; 0xb202
 8003544:	f7fd faae 	bl	8000aa4 <LCD_WriteReg>
		//VCL ratio
		LCD_WriteReg(0xB800, 0x24);
 8003548:	2124      	movs	r1, #36	; 0x24
 800354a:	f44f 4038 	mov.w	r0, #47104	; 0xb800
 800354e:	f7fd faa9 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0xB801, 0x24);
 8003552:	2124      	movs	r1, #36	; 0x24
 8003554:	f64b 0001 	movw	r0, #47105	; 0xb801
 8003558:	f7fd faa4 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0xB802, 0x24);
 800355c:	2124      	movs	r1, #36	; 0x24
 800355e:	f64b 0002 	movw	r0, #47106	; 0xb802
 8003562:	f7fd fa9f 	bl	8000aa4 <LCD_WriteReg>
		//VGH 15V (Free pump)
		LCD_WriteReg(0xBF00, 0x01);
 8003566:	2101      	movs	r1, #1
 8003568:	f44f 403f 	mov.w	r0, #48896	; 0xbf00
 800356c:	f7fd fa9a 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0xB300, 0x0F);
 8003570:	210f      	movs	r1, #15
 8003572:	f44f 4033 	mov.w	r0, #45824	; 0xb300
 8003576:	f7fd fa95 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0xB301, 0x0F);
 800357a:	210f      	movs	r1, #15
 800357c:	f24b 3001 	movw	r0, #45825	; 0xb301
 8003580:	f7fd fa90 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0xB302, 0x0F);
 8003584:	210f      	movs	r1, #15
 8003586:	f24b 3002 	movw	r0, #45826	; 0xb302
 800358a:	f7fd fa8b 	bl	8000aa4 <LCD_WriteReg>
		//VGH ratio
		LCD_WriteReg(0xB900, 0x34);
 800358e:	2134      	movs	r1, #52	; 0x34
 8003590:	f44f 4039 	mov.w	r0, #47360	; 0xb900
 8003594:	f7fd fa86 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0xB901, 0x34);
 8003598:	2134      	movs	r1, #52	; 0x34
 800359a:	f64b 1001 	movw	r0, #47361	; 0xb901
 800359e:	f7fd fa81 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0xB902, 0x34);
 80035a2:	2134      	movs	r1, #52	; 0x34
 80035a4:	f64b 1002 	movw	r0, #47362	; 0xb902
 80035a8:	f7fd fa7c 	bl	8000aa4 <LCD_WriteReg>
		//VGL_REG -10V
		LCD_WriteReg(0xB500, 0x08);
 80035ac:	2108      	movs	r1, #8
 80035ae:	f44f 4035 	mov.w	r0, #46336	; 0xb500
 80035b2:	f7fd fa77 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0xB501, 0x08);
 80035b6:	2108      	movs	r1, #8
 80035b8:	f24b 5001 	movw	r0, #46337	; 0xb501
 80035bc:	f7fd fa72 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0xB502, 0x08);
 80035c0:	2108      	movs	r1, #8
 80035c2:	f24b 5002 	movw	r0, #46338	; 0xb502
 80035c6:	f7fd fa6d 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0xC200, 0x03);
 80035ca:	2103      	movs	r1, #3
 80035cc:	f44f 4042 	mov.w	r0, #49664	; 0xc200
 80035d0:	f7fd fa68 	bl	8000aa4 <LCD_WriteReg>
		//VGLX ratio
		LCD_WriteReg(0xBA00, 0x24);
 80035d4:	2124      	movs	r1, #36	; 0x24
 80035d6:	f44f 403a 	mov.w	r0, #47616	; 0xba00
 80035da:	f7fd fa63 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0xBA01, 0x24);
 80035de:	2124      	movs	r1, #36	; 0x24
 80035e0:	f64b 2001 	movw	r0, #47617	; 0xba01
 80035e4:	f7fd fa5e 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0xBA02, 0x24);
 80035e8:	2124      	movs	r1, #36	; 0x24
 80035ea:	f64b 2002 	movw	r0, #47618	; 0xba02
 80035ee:	f7fd fa59 	bl	8000aa4 <LCD_WriteReg>
		//VGMP/VGSP 4.5V/0V
		LCD_WriteReg(0xBC00, 0x00);
 80035f2:	2100      	movs	r1, #0
 80035f4:	f44f 403c 	mov.w	r0, #48128	; 0xbc00
 80035f8:	f7fd fa54 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0xBC01, 0x78);
 80035fc:	2178      	movs	r1, #120	; 0x78
 80035fe:	f64b 4001 	movw	r0, #48129	; 0xbc01
 8003602:	f7fd fa4f 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0xBC02, 0x00);
 8003606:	2100      	movs	r1, #0
 8003608:	f64b 4002 	movw	r0, #48130	; 0xbc02
 800360c:	f7fd fa4a 	bl	8000aa4 <LCD_WriteReg>
		//VGMN/VGSN -4.5V/0V
		LCD_WriteReg(0xBD00, 0x00);
 8003610:	2100      	movs	r1, #0
 8003612:	f44f 403d 	mov.w	r0, #48384	; 0xbd00
 8003616:	f7fd fa45 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0xBD01, 0x78);
 800361a:	2178      	movs	r1, #120	; 0x78
 800361c:	f64b 5001 	movw	r0, #48385	; 0xbd01
 8003620:	f7fd fa40 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0xBD02, 0x00);
 8003624:	2100      	movs	r1, #0
 8003626:	f64b 5002 	movw	r0, #48386	; 0xbd02
 800362a:	f7fd fa3b 	bl	8000aa4 <LCD_WriteReg>
		//VCOM
		LCD_WriteReg(0xBE00, 0x00);
 800362e:	2100      	movs	r1, #0
 8003630:	f44f 403e 	mov.w	r0, #48640	; 0xbe00
 8003634:	f7fd fa36 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0xBE01, 0x64);
 8003638:	2164      	movs	r1, #100	; 0x64
 800363a:	f64b 6001 	movw	r0, #48641	; 0xbe01
 800363e:	f7fd fa31 	bl	8000aa4 <LCD_WriteReg>
		//Gamma Setting
		LCD_WriteReg(0xD100, 0x00);
 8003642:	2100      	movs	r1, #0
 8003644:	f44f 4051 	mov.w	r0, #53504	; 0xd100
 8003648:	f7fd fa2c 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0xD101, 0x33);
 800364c:	2133      	movs	r1, #51	; 0x33
 800364e:	f24d 1001 	movw	r0, #53505	; 0xd101
 8003652:	f7fd fa27 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0xD102, 0x00);
 8003656:	2100      	movs	r1, #0
 8003658:	f24d 1002 	movw	r0, #53506	; 0xd102
 800365c:	f7fd fa22 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0xD103, 0x34);
 8003660:	2134      	movs	r1, #52	; 0x34
 8003662:	f24d 1003 	movw	r0, #53507	; 0xd103
 8003666:	f7fd fa1d 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0xD104, 0x00);
 800366a:	2100      	movs	r1, #0
 800366c:	f24d 1004 	movw	r0, #53508	; 0xd104
 8003670:	f7fd fa18 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0xD105, 0x3A);
 8003674:	213a      	movs	r1, #58	; 0x3a
 8003676:	f24d 1005 	movw	r0, #53509	; 0xd105
 800367a:	f7fd fa13 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0xD106, 0x00);
 800367e:	2100      	movs	r1, #0
 8003680:	f24d 1006 	movw	r0, #53510	; 0xd106
 8003684:	f7fd fa0e 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0xD107, 0x4A);
 8003688:	214a      	movs	r1, #74	; 0x4a
 800368a:	f24d 1007 	movw	r0, #53511	; 0xd107
 800368e:	f7fd fa09 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0xD108, 0x00);
 8003692:	2100      	movs	r1, #0
 8003694:	f24d 1008 	movw	r0, #53512	; 0xd108
 8003698:	f7fd fa04 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0xD109, 0x5C);
 800369c:	215c      	movs	r1, #92	; 0x5c
 800369e:	f24d 1009 	movw	r0, #53513	; 0xd109
 80036a2:	f7fd f9ff 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0xD10A, 0x00);
 80036a6:	2100      	movs	r1, #0
 80036a8:	f24d 100a 	movw	r0, #53514	; 0xd10a
 80036ac:	f7fd f9fa 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0xD10B, 0x81);
 80036b0:	2181      	movs	r1, #129	; 0x81
 80036b2:	f24d 100b 	movw	r0, #53515	; 0xd10b
 80036b6:	f7fd f9f5 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0xD10C, 0x00);
 80036ba:	2100      	movs	r1, #0
 80036bc:	f24d 100c 	movw	r0, #53516	; 0xd10c
 80036c0:	f7fd f9f0 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0xD10D, 0xA6);
 80036c4:	21a6      	movs	r1, #166	; 0xa6
 80036c6:	f24d 100d 	movw	r0, #53517	; 0xd10d
 80036ca:	f7fd f9eb 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0xD10E, 0x00);
 80036ce:	2100      	movs	r1, #0
 80036d0:	f24d 100e 	movw	r0, #53518	; 0xd10e
 80036d4:	f7fd f9e6 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0xD10F, 0xE5);
 80036d8:	21e5      	movs	r1, #229	; 0xe5
 80036da:	f24d 100f 	movw	r0, #53519	; 0xd10f
 80036de:	f7fd f9e1 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0xD110, 0x01);
 80036e2:	2101      	movs	r1, #1
 80036e4:	f24d 1010 	movw	r0, #53520	; 0xd110
 80036e8:	f7fd f9dc 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0xD111, 0x13);
 80036ec:	2113      	movs	r1, #19
 80036ee:	f24d 1011 	movw	r0, #53521	; 0xd111
 80036f2:	f7fd f9d7 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0xD112, 0x01);
 80036f6:	2101      	movs	r1, #1
 80036f8:	f24d 1012 	movw	r0, #53522	; 0xd112
 80036fc:	f7fd f9d2 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0xD113, 0x54);
 8003700:	2154      	movs	r1, #84	; 0x54
 8003702:	f24d 1013 	movw	r0, #53523	; 0xd113
 8003706:	f7fd f9cd 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0xD114, 0x01);
 800370a:	2101      	movs	r1, #1
 800370c:	f24d 1014 	movw	r0, #53524	; 0xd114
 8003710:	f7fd f9c8 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0xD115, 0x82);
 8003714:	2182      	movs	r1, #130	; 0x82
 8003716:	f24d 1015 	movw	r0, #53525	; 0xd115
 800371a:	f7fd f9c3 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0xD116, 0x01);
 800371e:	2101      	movs	r1, #1
 8003720:	f24d 1016 	movw	r0, #53526	; 0xd116
 8003724:	f7fd f9be 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0xD117, 0xCA);
 8003728:	21ca      	movs	r1, #202	; 0xca
 800372a:	f24d 1017 	movw	r0, #53527	; 0xd117
 800372e:	f7fd f9b9 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0xD118, 0x02);
 8003732:	2102      	movs	r1, #2
 8003734:	f24d 1018 	movw	r0, #53528	; 0xd118
 8003738:	f7fd f9b4 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0xD119, 0x00);
 800373c:	2100      	movs	r1, #0
 800373e:	f24d 1019 	movw	r0, #53529	; 0xd119
 8003742:	f7fd f9af 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0xD11A, 0x02);
 8003746:	2102      	movs	r1, #2
 8003748:	f24d 101a 	movw	r0, #53530	; 0xd11a
 800374c:	f7fd f9aa 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0xD11B, 0x01);
 8003750:	2101      	movs	r1, #1
 8003752:	f24d 101b 	movw	r0, #53531	; 0xd11b
 8003756:	f7fd f9a5 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0xD11C, 0x02);
 800375a:	2102      	movs	r1, #2
 800375c:	f24d 101c 	movw	r0, #53532	; 0xd11c
 8003760:	f7fd f9a0 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0xD11D, 0x34);
 8003764:	2134      	movs	r1, #52	; 0x34
 8003766:	f24d 101d 	movw	r0, #53533	; 0xd11d
 800376a:	f7fd f99b 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0xD11E, 0x02);
 800376e:	2102      	movs	r1, #2
 8003770:	f24d 101e 	movw	r0, #53534	; 0xd11e
 8003774:	f7fd f996 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0xD11F, 0x67);
 8003778:	2167      	movs	r1, #103	; 0x67
 800377a:	f24d 101f 	movw	r0, #53535	; 0xd11f
 800377e:	f7fd f991 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0xD120, 0x02);
 8003782:	2102      	movs	r1, #2
 8003784:	f24d 1020 	movw	r0, #53536	; 0xd120
 8003788:	f7fd f98c 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0xD121, 0x84);
 800378c:	2184      	movs	r1, #132	; 0x84
 800378e:	f24d 1021 	movw	r0, #53537	; 0xd121
 8003792:	f7fd f987 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0xD122, 0x02);
 8003796:	2102      	movs	r1, #2
 8003798:	f24d 1022 	movw	r0, #53538	; 0xd122
 800379c:	f7fd f982 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0xD123, 0xA4);
 80037a0:	21a4      	movs	r1, #164	; 0xa4
 80037a2:	f24d 1023 	movw	r0, #53539	; 0xd123
 80037a6:	f7fd f97d 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0xD124, 0x02);
 80037aa:	2102      	movs	r1, #2
 80037ac:	f24d 1024 	movw	r0, #53540	; 0xd124
 80037b0:	f7fd f978 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0xD125, 0xB7);
 80037b4:	21b7      	movs	r1, #183	; 0xb7
 80037b6:	f24d 1025 	movw	r0, #53541	; 0xd125
 80037ba:	f7fd f973 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0xD126, 0x02);
 80037be:	2102      	movs	r1, #2
 80037c0:	f24d 1026 	movw	r0, #53542	; 0xd126
 80037c4:	f7fd f96e 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0xD127, 0xCF);
 80037c8:	21cf      	movs	r1, #207	; 0xcf
 80037ca:	f24d 1027 	movw	r0, #53543	; 0xd127
 80037ce:	f7fd f969 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0xD128, 0x02);
 80037d2:	2102      	movs	r1, #2
 80037d4:	f24d 1028 	movw	r0, #53544	; 0xd128
 80037d8:	f7fd f964 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0xD129, 0xDE);
 80037dc:	21de      	movs	r1, #222	; 0xde
 80037de:	f24d 1029 	movw	r0, #53545	; 0xd129
 80037e2:	f7fd f95f 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0xD12A, 0x02);
 80037e6:	2102      	movs	r1, #2
 80037e8:	f24d 102a 	movw	r0, #53546	; 0xd12a
 80037ec:	f7fd f95a 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0xD12B, 0xF2);
 80037f0:	21f2      	movs	r1, #242	; 0xf2
 80037f2:	f24d 102b 	movw	r0, #53547	; 0xd12b
 80037f6:	f7fd f955 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0xD12C, 0x02);
 80037fa:	2102      	movs	r1, #2
 80037fc:	f24d 102c 	movw	r0, #53548	; 0xd12c
 8003800:	f7fd f950 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0xD12D, 0xFE);
 8003804:	21fe      	movs	r1, #254	; 0xfe
 8003806:	f24d 102d 	movw	r0, #53549	; 0xd12d
 800380a:	f7fd f94b 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0xD12E, 0x03);
 800380e:	2103      	movs	r1, #3
 8003810:	f24d 102e 	movw	r0, #53550	; 0xd12e
 8003814:	f7fd f946 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0xD12F, 0x10);
 8003818:	2110      	movs	r1, #16
 800381a:	f24d 102f 	movw	r0, #53551	; 0xd12f
 800381e:	f7fd f941 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0xD130, 0x03);
 8003822:	2103      	movs	r1, #3
 8003824:	f24d 1030 	movw	r0, #53552	; 0xd130
 8003828:	f7fd f93c 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0xD131, 0x33);
 800382c:	2133      	movs	r1, #51	; 0x33
 800382e:	f24d 1031 	movw	r0, #53553	; 0xd131
 8003832:	f7fd f937 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0xD132, 0x03);
 8003836:	2103      	movs	r1, #3
 8003838:	f24d 1032 	movw	r0, #53554	; 0xd132
 800383c:	f7fd f932 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0xD133, 0x6D);
 8003840:	216d      	movs	r1, #109	; 0x6d
 8003842:	f24d 1033 	movw	r0, #53555	; 0xd133
 8003846:	f7fd f92d 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0xD200, 0x00);
 800384a:	2100      	movs	r1, #0
 800384c:	f44f 4052 	mov.w	r0, #53760	; 0xd200
 8003850:	f7fd f928 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0xD201, 0x33);
 8003854:	2133      	movs	r1, #51	; 0x33
 8003856:	f24d 2001 	movw	r0, #53761	; 0xd201
 800385a:	f7fd f923 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0xD202, 0x00);
 800385e:	2100      	movs	r1, #0
 8003860:	f24d 2002 	movw	r0, #53762	; 0xd202
 8003864:	f7fd f91e 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0xD203, 0x34);
 8003868:	2134      	movs	r1, #52	; 0x34
 800386a:	f24d 2003 	movw	r0, #53763	; 0xd203
 800386e:	f7fd f919 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0xD204, 0x00);
 8003872:	2100      	movs	r1, #0
 8003874:	f24d 2004 	movw	r0, #53764	; 0xd204
 8003878:	f7fd f914 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0xD205, 0x3A);
 800387c:	213a      	movs	r1, #58	; 0x3a
 800387e:	f24d 2005 	movw	r0, #53765	; 0xd205
 8003882:	f7fd f90f 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0xD206, 0x00);
 8003886:	2100      	movs	r1, #0
 8003888:	f24d 2006 	movw	r0, #53766	; 0xd206
 800388c:	f7fd f90a 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0xD207, 0x4A);
 8003890:	214a      	movs	r1, #74	; 0x4a
 8003892:	f24d 2007 	movw	r0, #53767	; 0xd207
 8003896:	f7fd f905 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0xD208, 0x00);
 800389a:	2100      	movs	r1, #0
 800389c:	f24d 2008 	movw	r0, #53768	; 0xd208
 80038a0:	f7fd f900 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0xD209, 0x5C);
 80038a4:	215c      	movs	r1, #92	; 0x5c
 80038a6:	f24d 2009 	movw	r0, #53769	; 0xd209
 80038aa:	f7fd f8fb 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0xD20A, 0x00);
 80038ae:	2100      	movs	r1, #0
 80038b0:	f24d 200a 	movw	r0, #53770	; 0xd20a
 80038b4:	f7fd f8f6 	bl	8000aa4 <LCD_WriteReg>

		LCD_WriteReg(0xD20B, 0x81);
 80038b8:	2181      	movs	r1, #129	; 0x81
 80038ba:	f24d 200b 	movw	r0, #53771	; 0xd20b
 80038be:	f7fd f8f1 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0xD20C, 0x00);
 80038c2:	2100      	movs	r1, #0
 80038c4:	f24d 200c 	movw	r0, #53772	; 0xd20c
 80038c8:	f7fd f8ec 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0xD20D, 0xA6);
 80038cc:	21a6      	movs	r1, #166	; 0xa6
 80038ce:	f24d 200d 	movw	r0, #53773	; 0xd20d
 80038d2:	f7fd f8e7 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0xD20E, 0x00);
 80038d6:	2100      	movs	r1, #0
 80038d8:	f24d 200e 	movw	r0, #53774	; 0xd20e
 80038dc:	f7fd f8e2 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0xD20F, 0xE5);
 80038e0:	21e5      	movs	r1, #229	; 0xe5
 80038e2:	f24d 200f 	movw	r0, #53775	; 0xd20f
 80038e6:	f7fd f8dd 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0xD210, 0x01);
 80038ea:	2101      	movs	r1, #1
 80038ec:	f24d 2010 	movw	r0, #53776	; 0xd210
 80038f0:	f7fd f8d8 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0xD211, 0x13);
 80038f4:	2113      	movs	r1, #19
 80038f6:	f24d 2011 	movw	r0, #53777	; 0xd211
 80038fa:	f7fd f8d3 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0xD212, 0x01);
 80038fe:	2101      	movs	r1, #1
 8003900:	f24d 2012 	movw	r0, #53778	; 0xd212
 8003904:	f7fd f8ce 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0xD213, 0x54);
 8003908:	2154      	movs	r1, #84	; 0x54
 800390a:	f24d 2013 	movw	r0, #53779	; 0xd213
 800390e:	f7fd f8c9 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0xD214, 0x01);
 8003912:	2101      	movs	r1, #1
 8003914:	f24d 2014 	movw	r0, #53780	; 0xd214
 8003918:	f7fd f8c4 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0xD215, 0x82);
 800391c:	2182      	movs	r1, #130	; 0x82
 800391e:	f24d 2015 	movw	r0, #53781	; 0xd215
 8003922:	f7fd f8bf 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0xD216, 0x01);
 8003926:	2101      	movs	r1, #1
 8003928:	f24d 2016 	movw	r0, #53782	; 0xd216
 800392c:	f7fd f8ba 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0xD217, 0xCA);
 8003930:	21ca      	movs	r1, #202	; 0xca
 8003932:	f24d 2017 	movw	r0, #53783	; 0xd217
 8003936:	f7fd f8b5 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0xD218, 0x02);
 800393a:	2102      	movs	r1, #2
 800393c:	f24d 2018 	movw	r0, #53784	; 0xd218
 8003940:	f7fd f8b0 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0xD219, 0x00);
 8003944:	2100      	movs	r1, #0
 8003946:	f24d 2019 	movw	r0, #53785	; 0xd219
 800394a:	f7fd f8ab 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0xD21A, 0x02);
 800394e:	2102      	movs	r1, #2
 8003950:	f24d 201a 	movw	r0, #53786	; 0xd21a
 8003954:	f7fd f8a6 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0xD21B, 0x01);
 8003958:	2101      	movs	r1, #1
 800395a:	f24d 201b 	movw	r0, #53787	; 0xd21b
 800395e:	f7fd f8a1 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0xD21C, 0x02);
 8003962:	2102      	movs	r1, #2
 8003964:	f24d 201c 	movw	r0, #53788	; 0xd21c
 8003968:	f7fd f89c 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0xD21D, 0x34);
 800396c:	2134      	movs	r1, #52	; 0x34
 800396e:	f24d 201d 	movw	r0, #53789	; 0xd21d
 8003972:	f7fd f897 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0xD21E, 0x02);
 8003976:	2102      	movs	r1, #2
 8003978:	f24d 201e 	movw	r0, #53790	; 0xd21e
 800397c:	f7fd f892 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0xD21F, 0x67);
 8003980:	2167      	movs	r1, #103	; 0x67
 8003982:	f24d 201f 	movw	r0, #53791	; 0xd21f
 8003986:	f7fd f88d 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0xD220, 0x02);
 800398a:	2102      	movs	r1, #2
 800398c:	f24d 2020 	movw	r0, #53792	; 0xd220
 8003990:	f7fd f888 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0xD221, 0x84);
 8003994:	2184      	movs	r1, #132	; 0x84
 8003996:	f24d 2021 	movw	r0, #53793	; 0xd221
 800399a:	f7fd f883 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0xD222, 0x02);
 800399e:	2102      	movs	r1, #2
 80039a0:	f24d 2022 	movw	r0, #53794	; 0xd222
 80039a4:	f7fd f87e 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0xD223, 0xA4);
 80039a8:	21a4      	movs	r1, #164	; 0xa4
 80039aa:	f24d 2023 	movw	r0, #53795	; 0xd223
 80039ae:	f7fd f879 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0xD224, 0x02);
 80039b2:	2102      	movs	r1, #2
 80039b4:	f24d 2024 	movw	r0, #53796	; 0xd224
 80039b8:	f7fd f874 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0xD225, 0xB7);
 80039bc:	21b7      	movs	r1, #183	; 0xb7
 80039be:	f24d 2025 	movw	r0, #53797	; 0xd225
 80039c2:	f7fd f86f 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0xD226, 0x02);
 80039c6:	2102      	movs	r1, #2
 80039c8:	f24d 2026 	movw	r0, #53798	; 0xd226
 80039cc:	f7fd f86a 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0xD227, 0xCF);
 80039d0:	21cf      	movs	r1, #207	; 0xcf
 80039d2:	f24d 2027 	movw	r0, #53799	; 0xd227
 80039d6:	f7fd f865 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0xD228, 0x02);
 80039da:	2102      	movs	r1, #2
 80039dc:	f24d 2028 	movw	r0, #53800	; 0xd228
 80039e0:	f7fd f860 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0xD229, 0xDE);
 80039e4:	21de      	movs	r1, #222	; 0xde
 80039e6:	f24d 2029 	movw	r0, #53801	; 0xd229
 80039ea:	f7fd f85b 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0xD22A, 0x02);
 80039ee:	2102      	movs	r1, #2
 80039f0:	f24d 202a 	movw	r0, #53802	; 0xd22a
 80039f4:	f7fd f856 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0xD22B, 0xF2);
 80039f8:	21f2      	movs	r1, #242	; 0xf2
 80039fa:	f24d 202b 	movw	r0, #53803	; 0xd22b
 80039fe:	f7fd f851 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0xD22C, 0x02);
 8003a02:	2102      	movs	r1, #2
 8003a04:	f24d 202c 	movw	r0, #53804	; 0xd22c
 8003a08:	f7fd f84c 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0xD22D, 0xFE);
 8003a0c:	21fe      	movs	r1, #254	; 0xfe
 8003a0e:	f24d 202d 	movw	r0, #53805	; 0xd22d
 8003a12:	f7fd f847 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0xD22E, 0x03);
 8003a16:	2103      	movs	r1, #3
 8003a18:	f24d 202e 	movw	r0, #53806	; 0xd22e
 8003a1c:	f7fd f842 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0xD22F, 0x10);
 8003a20:	2110      	movs	r1, #16
 8003a22:	f24d 202f 	movw	r0, #53807	; 0xd22f
 8003a26:	f7fd f83d 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0xD230, 0x03);
 8003a2a:	2103      	movs	r1, #3
 8003a2c:	f24d 2030 	movw	r0, #53808	; 0xd230
 8003a30:	f7fd f838 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0xD231, 0x33);
 8003a34:	2133      	movs	r1, #51	; 0x33
 8003a36:	f24d 2031 	movw	r0, #53809	; 0xd231
 8003a3a:	f7fd f833 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0xD232, 0x03);
 8003a3e:	2103      	movs	r1, #3
 8003a40:	f24d 2032 	movw	r0, #53810	; 0xd232
 8003a44:	f7fd f82e 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0xD233, 0x6D);
 8003a48:	216d      	movs	r1, #109	; 0x6d
 8003a4a:	f24d 2033 	movw	r0, #53811	; 0xd233
 8003a4e:	f7fd f829 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0xD300, 0x00);
 8003a52:	2100      	movs	r1, #0
 8003a54:	f44f 4053 	mov.w	r0, #54016	; 0xd300
 8003a58:	f7fd f824 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0xD301, 0x33);
 8003a5c:	2133      	movs	r1, #51	; 0x33
 8003a5e:	f24d 3001 	movw	r0, #54017	; 0xd301
 8003a62:	f7fd f81f 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0xD302, 0x00);
 8003a66:	2100      	movs	r1, #0
 8003a68:	f24d 3002 	movw	r0, #54018	; 0xd302
 8003a6c:	f7fd f81a 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0xD303, 0x34);
 8003a70:	2134      	movs	r1, #52	; 0x34
 8003a72:	f24d 3003 	movw	r0, #54019	; 0xd303
 8003a76:	f7fd f815 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0xD304, 0x00);
 8003a7a:	2100      	movs	r1, #0
 8003a7c:	f24d 3004 	movw	r0, #54020	; 0xd304
 8003a80:	f7fd f810 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0xD305, 0x3A);
 8003a84:	213a      	movs	r1, #58	; 0x3a
 8003a86:	f24d 3005 	movw	r0, #54021	; 0xd305
 8003a8a:	f7fd f80b 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0xD306, 0x00);
 8003a8e:	2100      	movs	r1, #0
 8003a90:	f24d 3006 	movw	r0, #54022	; 0xd306
 8003a94:	f7fd f806 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0xD307, 0x4A);
 8003a98:	214a      	movs	r1, #74	; 0x4a
 8003a9a:	f24d 3007 	movw	r0, #54023	; 0xd307
 8003a9e:	f7fd f801 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0xD308, 0x00);
 8003aa2:	2100      	movs	r1, #0
 8003aa4:	f24d 3008 	movw	r0, #54024	; 0xd308
 8003aa8:	f7fc fffc 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0xD309, 0x5C);
 8003aac:	215c      	movs	r1, #92	; 0x5c
 8003aae:	f24d 3009 	movw	r0, #54025	; 0xd309
 8003ab2:	f7fc fff7 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0xD30A, 0x00);
 8003ab6:	2100      	movs	r1, #0
 8003ab8:	f24d 300a 	movw	r0, #54026	; 0xd30a
 8003abc:	f7fc fff2 	bl	8000aa4 <LCD_WriteReg>

		LCD_WriteReg(0xD30B, 0x81);
 8003ac0:	2181      	movs	r1, #129	; 0x81
 8003ac2:	f24d 300b 	movw	r0, #54027	; 0xd30b
 8003ac6:	f7fc ffed 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0xD30C, 0x00);
 8003aca:	2100      	movs	r1, #0
 8003acc:	f24d 300c 	movw	r0, #54028	; 0xd30c
 8003ad0:	f7fc ffe8 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0xD30D, 0xA6);
 8003ad4:	21a6      	movs	r1, #166	; 0xa6
 8003ad6:	f24d 300d 	movw	r0, #54029	; 0xd30d
 8003ada:	f7fc ffe3 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0xD30E, 0x00);
 8003ade:	2100      	movs	r1, #0
 8003ae0:	f24d 300e 	movw	r0, #54030	; 0xd30e
 8003ae4:	f7fc ffde 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0xD30F, 0xE5);
 8003ae8:	21e5      	movs	r1, #229	; 0xe5
 8003aea:	f24d 300f 	movw	r0, #54031	; 0xd30f
 8003aee:	f7fc ffd9 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0xD310, 0x01);
 8003af2:	2101      	movs	r1, #1
 8003af4:	f24d 3010 	movw	r0, #54032	; 0xd310
 8003af8:	f7fc ffd4 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0xD311, 0x13);
 8003afc:	2113      	movs	r1, #19
 8003afe:	f24d 3011 	movw	r0, #54033	; 0xd311
 8003b02:	f7fc ffcf 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0xD312, 0x01);
 8003b06:	2101      	movs	r1, #1
 8003b08:	f24d 3012 	movw	r0, #54034	; 0xd312
 8003b0c:	f7fc ffca 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0xD313, 0x54);
 8003b10:	2154      	movs	r1, #84	; 0x54
 8003b12:	f24d 3013 	movw	r0, #54035	; 0xd313
 8003b16:	f7fc ffc5 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0xD314, 0x01);
 8003b1a:	2101      	movs	r1, #1
 8003b1c:	f24d 3014 	movw	r0, #54036	; 0xd314
 8003b20:	f7fc ffc0 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0xD315, 0x82);
 8003b24:	2182      	movs	r1, #130	; 0x82
 8003b26:	f24d 3015 	movw	r0, #54037	; 0xd315
 8003b2a:	f7fc ffbb 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0xD316, 0x01);
 8003b2e:	2101      	movs	r1, #1
 8003b30:	f24d 3016 	movw	r0, #54038	; 0xd316
 8003b34:	f7fc ffb6 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0xD317, 0xCA);
 8003b38:	21ca      	movs	r1, #202	; 0xca
 8003b3a:	f24d 3017 	movw	r0, #54039	; 0xd317
 8003b3e:	f7fc ffb1 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0xD318, 0x02);
 8003b42:	2102      	movs	r1, #2
 8003b44:	f24d 3018 	movw	r0, #54040	; 0xd318
 8003b48:	f7fc ffac 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0xD319, 0x00);
 8003b4c:	2100      	movs	r1, #0
 8003b4e:	f24d 3019 	movw	r0, #54041	; 0xd319
 8003b52:	f7fc ffa7 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0xD31A, 0x02);
 8003b56:	2102      	movs	r1, #2
 8003b58:	f24d 301a 	movw	r0, #54042	; 0xd31a
 8003b5c:	f7fc ffa2 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0xD31B, 0x01);
 8003b60:	2101      	movs	r1, #1
 8003b62:	f24d 301b 	movw	r0, #54043	; 0xd31b
 8003b66:	f7fc ff9d 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0xD31C, 0x02);
 8003b6a:	2102      	movs	r1, #2
 8003b6c:	f24d 301c 	movw	r0, #54044	; 0xd31c
 8003b70:	f7fc ff98 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0xD31D, 0x34);
 8003b74:	2134      	movs	r1, #52	; 0x34
 8003b76:	f24d 301d 	movw	r0, #54045	; 0xd31d
 8003b7a:	f7fc ff93 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0xD31E, 0x02);
 8003b7e:	2102      	movs	r1, #2
 8003b80:	f24d 301e 	movw	r0, #54046	; 0xd31e
 8003b84:	f7fc ff8e 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0xD31F, 0x67);
 8003b88:	2167      	movs	r1, #103	; 0x67
 8003b8a:	f24d 301f 	movw	r0, #54047	; 0xd31f
 8003b8e:	f7fc ff89 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0xD320, 0x02);
 8003b92:	2102      	movs	r1, #2
 8003b94:	f24d 3020 	movw	r0, #54048	; 0xd320
 8003b98:	f7fc ff84 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0xD321, 0x84);
 8003b9c:	2184      	movs	r1, #132	; 0x84
 8003b9e:	f24d 3021 	movw	r0, #54049	; 0xd321
 8003ba2:	f7fc ff7f 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0xD322, 0x02);
 8003ba6:	2102      	movs	r1, #2
 8003ba8:	f24d 3022 	movw	r0, #54050	; 0xd322
 8003bac:	f7fc ff7a 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0xD323, 0xA4);
 8003bb0:	21a4      	movs	r1, #164	; 0xa4
 8003bb2:	f24d 3023 	movw	r0, #54051	; 0xd323
 8003bb6:	f7fc ff75 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0xD324, 0x02);
 8003bba:	2102      	movs	r1, #2
 8003bbc:	f24d 3024 	movw	r0, #54052	; 0xd324
 8003bc0:	f7fc ff70 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0xD325, 0xB7);
 8003bc4:	21b7      	movs	r1, #183	; 0xb7
 8003bc6:	f24d 3025 	movw	r0, #54053	; 0xd325
 8003bca:	f7fc ff6b 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0xD326, 0x02);
 8003bce:	2102      	movs	r1, #2
 8003bd0:	f24d 3026 	movw	r0, #54054	; 0xd326
 8003bd4:	f7fc ff66 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0xD327, 0xCF);
 8003bd8:	21cf      	movs	r1, #207	; 0xcf
 8003bda:	f24d 3027 	movw	r0, #54055	; 0xd327
 8003bde:	f7fc ff61 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0xD328, 0x02);
 8003be2:	2102      	movs	r1, #2
 8003be4:	f24d 3028 	movw	r0, #54056	; 0xd328
 8003be8:	f7fc ff5c 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0xD329, 0xDE);
 8003bec:	21de      	movs	r1, #222	; 0xde
 8003bee:	f24d 3029 	movw	r0, #54057	; 0xd329
 8003bf2:	f7fc ff57 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0xD32A, 0x02);
 8003bf6:	2102      	movs	r1, #2
 8003bf8:	f24d 302a 	movw	r0, #54058	; 0xd32a
 8003bfc:	f7fc ff52 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0xD32B, 0xF2);
 8003c00:	21f2      	movs	r1, #242	; 0xf2
 8003c02:	f24d 302b 	movw	r0, #54059	; 0xd32b
 8003c06:	f7fc ff4d 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0xD32C, 0x02);
 8003c0a:	2102      	movs	r1, #2
 8003c0c:	f24d 302c 	movw	r0, #54060	; 0xd32c
 8003c10:	f7fc ff48 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0xD32D, 0xFE);
 8003c14:	21fe      	movs	r1, #254	; 0xfe
 8003c16:	f24d 302d 	movw	r0, #54061	; 0xd32d
 8003c1a:	f7fc ff43 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0xD32E, 0x03);
 8003c1e:	2103      	movs	r1, #3
 8003c20:	f24d 302e 	movw	r0, #54062	; 0xd32e
 8003c24:	f7fc ff3e 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0xD32F, 0x10);
 8003c28:	2110      	movs	r1, #16
 8003c2a:	f24d 302f 	movw	r0, #54063	; 0xd32f
 8003c2e:	f7fc ff39 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0xD330, 0x03);
 8003c32:	2103      	movs	r1, #3
 8003c34:	f24d 3030 	movw	r0, #54064	; 0xd330
 8003c38:	f7fc ff34 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0xD331, 0x33);
 8003c3c:	2133      	movs	r1, #51	; 0x33
 8003c3e:	f24d 3031 	movw	r0, #54065	; 0xd331
 8003c42:	f7fc ff2f 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0xD332, 0x03);
 8003c46:	2103      	movs	r1, #3
 8003c48:	f24d 3032 	movw	r0, #54066	; 0xd332
 8003c4c:	f7fc ff2a 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0xD333, 0x6D);
 8003c50:	216d      	movs	r1, #109	; 0x6d
 8003c52:	f24d 3033 	movw	r0, #54067	; 0xd333
 8003c56:	f7fc ff25 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0xD400, 0x00);
 8003c5a:	2100      	movs	r1, #0
 8003c5c:	f44f 4054 	mov.w	r0, #54272	; 0xd400
 8003c60:	f7fc ff20 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0xD401, 0x33);
 8003c64:	2133      	movs	r1, #51	; 0x33
 8003c66:	f24d 4001 	movw	r0, #54273	; 0xd401
 8003c6a:	f7fc ff1b 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0xD402, 0x00);
 8003c6e:	2100      	movs	r1, #0
 8003c70:	f24d 4002 	movw	r0, #54274	; 0xd402
 8003c74:	f7fc ff16 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0xD403, 0x34);
 8003c78:	2134      	movs	r1, #52	; 0x34
 8003c7a:	f24d 4003 	movw	r0, #54275	; 0xd403
 8003c7e:	f7fc ff11 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0xD404, 0x00);
 8003c82:	2100      	movs	r1, #0
 8003c84:	f24d 4004 	movw	r0, #54276	; 0xd404
 8003c88:	f7fc ff0c 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0xD405, 0x3A);
 8003c8c:	213a      	movs	r1, #58	; 0x3a
 8003c8e:	f24d 4005 	movw	r0, #54277	; 0xd405
 8003c92:	f7fc ff07 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0xD406, 0x00);
 8003c96:	2100      	movs	r1, #0
 8003c98:	f24d 4006 	movw	r0, #54278	; 0xd406
 8003c9c:	f7fc ff02 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0xD407, 0x4A);
 8003ca0:	214a      	movs	r1, #74	; 0x4a
 8003ca2:	f24d 4007 	movw	r0, #54279	; 0xd407
 8003ca6:	f7fc fefd 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0xD408, 0x00);
 8003caa:	2100      	movs	r1, #0
 8003cac:	f24d 4008 	movw	r0, #54280	; 0xd408
 8003cb0:	f7fc fef8 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0xD409, 0x5C);
 8003cb4:	215c      	movs	r1, #92	; 0x5c
 8003cb6:	f24d 4009 	movw	r0, #54281	; 0xd409
 8003cba:	f7fc fef3 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0xD40A, 0x00);
 8003cbe:	2100      	movs	r1, #0
 8003cc0:	f24d 400a 	movw	r0, #54282	; 0xd40a
 8003cc4:	f7fc feee 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0xD40B, 0x81);
 8003cc8:	2181      	movs	r1, #129	; 0x81
 8003cca:	f24d 400b 	movw	r0, #54283	; 0xd40b
 8003cce:	f7fc fee9 	bl	8000aa4 <LCD_WriteReg>

		LCD_WriteReg(0xD40C, 0x00);
 8003cd2:	2100      	movs	r1, #0
 8003cd4:	f24d 400c 	movw	r0, #54284	; 0xd40c
 8003cd8:	f7fc fee4 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0xD40D, 0xA6);
 8003cdc:	21a6      	movs	r1, #166	; 0xa6
 8003cde:	f24d 400d 	movw	r0, #54285	; 0xd40d
 8003ce2:	f7fc fedf 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0xD40E, 0x00);
 8003ce6:	2100      	movs	r1, #0
 8003ce8:	f24d 400e 	movw	r0, #54286	; 0xd40e
 8003cec:	f7fc feda 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0xD40F, 0xE5);
 8003cf0:	21e5      	movs	r1, #229	; 0xe5
 8003cf2:	f24d 400f 	movw	r0, #54287	; 0xd40f
 8003cf6:	f7fc fed5 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0xD410, 0x01);
 8003cfa:	2101      	movs	r1, #1
 8003cfc:	f24d 4010 	movw	r0, #54288	; 0xd410
 8003d00:	f7fc fed0 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0xD411, 0x13);
 8003d04:	2113      	movs	r1, #19
 8003d06:	f24d 4011 	movw	r0, #54289	; 0xd411
 8003d0a:	f7fc fecb 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0xD412, 0x01);
 8003d0e:	2101      	movs	r1, #1
 8003d10:	f24d 4012 	movw	r0, #54290	; 0xd412
 8003d14:	f7fc fec6 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0xD413, 0x54);
 8003d18:	2154      	movs	r1, #84	; 0x54
 8003d1a:	f24d 4013 	movw	r0, #54291	; 0xd413
 8003d1e:	f7fc fec1 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0xD414, 0x01);
 8003d22:	2101      	movs	r1, #1
 8003d24:	f24d 4014 	movw	r0, #54292	; 0xd414
 8003d28:	f7fc febc 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0xD415, 0x82);
 8003d2c:	2182      	movs	r1, #130	; 0x82
 8003d2e:	f24d 4015 	movw	r0, #54293	; 0xd415
 8003d32:	f7fc feb7 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0xD416, 0x01);
 8003d36:	2101      	movs	r1, #1
 8003d38:	f24d 4016 	movw	r0, #54294	; 0xd416
 8003d3c:	f7fc feb2 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0xD417, 0xCA);
 8003d40:	21ca      	movs	r1, #202	; 0xca
 8003d42:	f24d 4017 	movw	r0, #54295	; 0xd417
 8003d46:	f7fc fead 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0xD418, 0x02);
 8003d4a:	2102      	movs	r1, #2
 8003d4c:	f24d 4018 	movw	r0, #54296	; 0xd418
 8003d50:	f7fc fea8 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0xD419, 0x00);
 8003d54:	2100      	movs	r1, #0
 8003d56:	f24d 4019 	movw	r0, #54297	; 0xd419
 8003d5a:	f7fc fea3 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0xD41A, 0x02);
 8003d5e:	2102      	movs	r1, #2
 8003d60:	f24d 401a 	movw	r0, #54298	; 0xd41a
 8003d64:	f7fc fe9e 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0xD41B, 0x01);
 8003d68:	2101      	movs	r1, #1
 8003d6a:	f24d 401b 	movw	r0, #54299	; 0xd41b
 8003d6e:	f7fc fe99 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0xD41C, 0x02);
 8003d72:	2102      	movs	r1, #2
 8003d74:	f24d 401c 	movw	r0, #54300	; 0xd41c
 8003d78:	f7fc fe94 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0xD41D, 0x34);
 8003d7c:	2134      	movs	r1, #52	; 0x34
 8003d7e:	f24d 401d 	movw	r0, #54301	; 0xd41d
 8003d82:	f7fc fe8f 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0xD41E, 0x02);
 8003d86:	2102      	movs	r1, #2
 8003d88:	f24d 401e 	movw	r0, #54302	; 0xd41e
 8003d8c:	f7fc fe8a 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0xD41F, 0x67);
 8003d90:	2167      	movs	r1, #103	; 0x67
 8003d92:	f24d 401f 	movw	r0, #54303	; 0xd41f
 8003d96:	f7fc fe85 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0xD420, 0x02);
 8003d9a:	2102      	movs	r1, #2
 8003d9c:	f24d 4020 	movw	r0, #54304	; 0xd420
 8003da0:	f7fc fe80 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0xD421, 0x84);
 8003da4:	2184      	movs	r1, #132	; 0x84
 8003da6:	f24d 4021 	movw	r0, #54305	; 0xd421
 8003daa:	f7fc fe7b 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0xD422, 0x02);
 8003dae:	2102      	movs	r1, #2
 8003db0:	f24d 4022 	movw	r0, #54306	; 0xd422
 8003db4:	f7fc fe76 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0xD423, 0xA4);
 8003db8:	21a4      	movs	r1, #164	; 0xa4
 8003dba:	f24d 4023 	movw	r0, #54307	; 0xd423
 8003dbe:	f7fc fe71 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0xD424, 0x02);
 8003dc2:	2102      	movs	r1, #2
 8003dc4:	f24d 4024 	movw	r0, #54308	; 0xd424
 8003dc8:	f7fc fe6c 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0xD425, 0xB7);
 8003dcc:	21b7      	movs	r1, #183	; 0xb7
 8003dce:	f24d 4025 	movw	r0, #54309	; 0xd425
 8003dd2:	f7fc fe67 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0xD426, 0x02);
 8003dd6:	2102      	movs	r1, #2
 8003dd8:	f24d 4026 	movw	r0, #54310	; 0xd426
 8003ddc:	f7fc fe62 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0xD427, 0xCF);
 8003de0:	21cf      	movs	r1, #207	; 0xcf
 8003de2:	f24d 4027 	movw	r0, #54311	; 0xd427
 8003de6:	f7fc fe5d 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0xD428, 0x02);
 8003dea:	2102      	movs	r1, #2
 8003dec:	f24d 4028 	movw	r0, #54312	; 0xd428
 8003df0:	f7fc fe58 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0xD429, 0xDE);
 8003df4:	21de      	movs	r1, #222	; 0xde
 8003df6:	f24d 4029 	movw	r0, #54313	; 0xd429
 8003dfa:	f7fc fe53 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0xD42A, 0x02);
 8003dfe:	2102      	movs	r1, #2
 8003e00:	f24d 402a 	movw	r0, #54314	; 0xd42a
 8003e04:	f7fc fe4e 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0xD42B, 0xF2);
 8003e08:	21f2      	movs	r1, #242	; 0xf2
 8003e0a:	f24d 402b 	movw	r0, #54315	; 0xd42b
 8003e0e:	f7fc fe49 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0xD42C, 0x02);
 8003e12:	2102      	movs	r1, #2
 8003e14:	f24d 402c 	movw	r0, #54316	; 0xd42c
 8003e18:	f7fc fe44 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0xD42D, 0xFE);
 8003e1c:	21fe      	movs	r1, #254	; 0xfe
 8003e1e:	f24d 402d 	movw	r0, #54317	; 0xd42d
 8003e22:	f7fc fe3f 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0xD42E, 0x03);
 8003e26:	2103      	movs	r1, #3
 8003e28:	f24d 402e 	movw	r0, #54318	; 0xd42e
 8003e2c:	f7fc fe3a 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0xD42F, 0x10);
 8003e30:	2110      	movs	r1, #16
 8003e32:	f24d 402f 	movw	r0, #54319	; 0xd42f
 8003e36:	f7fc fe35 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0xD430, 0x03);
 8003e3a:	2103      	movs	r1, #3
 8003e3c:	f24d 4030 	movw	r0, #54320	; 0xd430
 8003e40:	f7fc fe30 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0xD431, 0x33);
 8003e44:	2133      	movs	r1, #51	; 0x33
 8003e46:	f24d 4031 	movw	r0, #54321	; 0xd431
 8003e4a:	f7fc fe2b 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0xD432, 0x03);
 8003e4e:	2103      	movs	r1, #3
 8003e50:	f24d 4032 	movw	r0, #54322	; 0xd432
 8003e54:	f7fc fe26 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0xD433, 0x6D);
 8003e58:	216d      	movs	r1, #109	; 0x6d
 8003e5a:	f24d 4033 	movw	r0, #54323	; 0xd433
 8003e5e:	f7fc fe21 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0xD500, 0x00);
 8003e62:	2100      	movs	r1, #0
 8003e64:	f44f 4055 	mov.w	r0, #54528	; 0xd500
 8003e68:	f7fc fe1c 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0xD501, 0x33);
 8003e6c:	2133      	movs	r1, #51	; 0x33
 8003e6e:	f24d 5001 	movw	r0, #54529	; 0xd501
 8003e72:	f7fc fe17 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0xD502, 0x00);
 8003e76:	2100      	movs	r1, #0
 8003e78:	f24d 5002 	movw	r0, #54530	; 0xd502
 8003e7c:	f7fc fe12 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0xD503, 0x34);
 8003e80:	2134      	movs	r1, #52	; 0x34
 8003e82:	f24d 5003 	movw	r0, #54531	; 0xd503
 8003e86:	f7fc fe0d 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0xD504, 0x00);
 8003e8a:	2100      	movs	r1, #0
 8003e8c:	f24d 5004 	movw	r0, #54532	; 0xd504
 8003e90:	f7fc fe08 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0xD505, 0x3A);
 8003e94:	213a      	movs	r1, #58	; 0x3a
 8003e96:	f24d 5005 	movw	r0, #54533	; 0xd505
 8003e9a:	f7fc fe03 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0xD506, 0x00);
 8003e9e:	2100      	movs	r1, #0
 8003ea0:	f24d 5006 	movw	r0, #54534	; 0xd506
 8003ea4:	f7fc fdfe 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0xD507, 0x4A);
 8003ea8:	214a      	movs	r1, #74	; 0x4a
 8003eaa:	f24d 5007 	movw	r0, #54535	; 0xd507
 8003eae:	f7fc fdf9 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0xD508, 0x00);
 8003eb2:	2100      	movs	r1, #0
 8003eb4:	f24d 5008 	movw	r0, #54536	; 0xd508
 8003eb8:	f7fc fdf4 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0xD509, 0x5C);
 8003ebc:	215c      	movs	r1, #92	; 0x5c
 8003ebe:	f24d 5009 	movw	r0, #54537	; 0xd509
 8003ec2:	f7fc fdef 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0xD50A, 0x00);
 8003ec6:	2100      	movs	r1, #0
 8003ec8:	f24d 500a 	movw	r0, #54538	; 0xd50a
 8003ecc:	f7fc fdea 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0xD50B, 0x81);
 8003ed0:	2181      	movs	r1, #129	; 0x81
 8003ed2:	f24d 500b 	movw	r0, #54539	; 0xd50b
 8003ed6:	f7fc fde5 	bl	8000aa4 <LCD_WriteReg>

		LCD_WriteReg(0xD50C, 0x00);
 8003eda:	2100      	movs	r1, #0
 8003edc:	f24d 500c 	movw	r0, #54540	; 0xd50c
 8003ee0:	f7fc fde0 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0xD50D, 0xA6);
 8003ee4:	21a6      	movs	r1, #166	; 0xa6
 8003ee6:	f24d 500d 	movw	r0, #54541	; 0xd50d
 8003eea:	f7fc fddb 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0xD50E, 0x00);
 8003eee:	2100      	movs	r1, #0
 8003ef0:	f24d 500e 	movw	r0, #54542	; 0xd50e
 8003ef4:	f7fc fdd6 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0xD50F, 0xE5);
 8003ef8:	21e5      	movs	r1, #229	; 0xe5
 8003efa:	f24d 500f 	movw	r0, #54543	; 0xd50f
 8003efe:	f7fc fdd1 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0xD510, 0x01);
 8003f02:	2101      	movs	r1, #1
 8003f04:	f24d 5010 	movw	r0, #54544	; 0xd510
 8003f08:	f7fc fdcc 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0xD511, 0x13);
 8003f0c:	2113      	movs	r1, #19
 8003f0e:	f24d 5011 	movw	r0, #54545	; 0xd511
 8003f12:	f7fc fdc7 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0xD512, 0x01);
 8003f16:	2101      	movs	r1, #1
 8003f18:	f24d 5012 	movw	r0, #54546	; 0xd512
 8003f1c:	f7fc fdc2 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0xD513, 0x54);
 8003f20:	2154      	movs	r1, #84	; 0x54
 8003f22:	f24d 5013 	movw	r0, #54547	; 0xd513
 8003f26:	f7fc fdbd 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0xD514, 0x01);
 8003f2a:	2101      	movs	r1, #1
 8003f2c:	f24d 5014 	movw	r0, #54548	; 0xd514
 8003f30:	f7fc fdb8 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0xD515, 0x82);
 8003f34:	2182      	movs	r1, #130	; 0x82
 8003f36:	f24d 5015 	movw	r0, #54549	; 0xd515
 8003f3a:	f7fc fdb3 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0xD516, 0x01);
 8003f3e:	2101      	movs	r1, #1
 8003f40:	f24d 5016 	movw	r0, #54550	; 0xd516
 8003f44:	f7fc fdae 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0xD517, 0xCA);
 8003f48:	21ca      	movs	r1, #202	; 0xca
 8003f4a:	f24d 5017 	movw	r0, #54551	; 0xd517
 8003f4e:	f7fc fda9 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0xD518, 0x02);
 8003f52:	2102      	movs	r1, #2
 8003f54:	f24d 5018 	movw	r0, #54552	; 0xd518
 8003f58:	f7fc fda4 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0xD519, 0x00);
 8003f5c:	2100      	movs	r1, #0
 8003f5e:	f24d 5019 	movw	r0, #54553	; 0xd519
 8003f62:	f7fc fd9f 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0xD51A, 0x02);
 8003f66:	2102      	movs	r1, #2
 8003f68:	f24d 501a 	movw	r0, #54554	; 0xd51a
 8003f6c:	f7fc fd9a 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0xD51B, 0x01);
 8003f70:	2101      	movs	r1, #1
 8003f72:	f24d 501b 	movw	r0, #54555	; 0xd51b
 8003f76:	f7fc fd95 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0xD51C, 0x02);
 8003f7a:	2102      	movs	r1, #2
 8003f7c:	f24d 501c 	movw	r0, #54556	; 0xd51c
 8003f80:	f7fc fd90 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0xD51D, 0x34);
 8003f84:	2134      	movs	r1, #52	; 0x34
 8003f86:	f24d 501d 	movw	r0, #54557	; 0xd51d
 8003f8a:	f7fc fd8b 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0xD51E, 0x02);
 8003f8e:	2102      	movs	r1, #2
 8003f90:	f24d 501e 	movw	r0, #54558	; 0xd51e
 8003f94:	f7fc fd86 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0xD51F, 0x67);
 8003f98:	2167      	movs	r1, #103	; 0x67
 8003f9a:	f24d 501f 	movw	r0, #54559	; 0xd51f
 8003f9e:	f7fc fd81 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0xD520, 0x02);
 8003fa2:	2102      	movs	r1, #2
 8003fa4:	f24d 5020 	movw	r0, #54560	; 0xd520
 8003fa8:	f7fc fd7c 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0xD521, 0x84);
 8003fac:	2184      	movs	r1, #132	; 0x84
 8003fae:	f24d 5021 	movw	r0, #54561	; 0xd521
 8003fb2:	f7fc fd77 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0xD522, 0x02);
 8003fb6:	2102      	movs	r1, #2
 8003fb8:	f24d 5022 	movw	r0, #54562	; 0xd522
 8003fbc:	f7fc fd72 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0xD523, 0xA4);
 8003fc0:	21a4      	movs	r1, #164	; 0xa4
 8003fc2:	f24d 5023 	movw	r0, #54563	; 0xd523
 8003fc6:	f7fc fd6d 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0xD524, 0x02);
 8003fca:	2102      	movs	r1, #2
 8003fcc:	f24d 5024 	movw	r0, #54564	; 0xd524
 8003fd0:	f7fc fd68 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0xD525, 0xB7);
 8003fd4:	21b7      	movs	r1, #183	; 0xb7
 8003fd6:	f24d 5025 	movw	r0, #54565	; 0xd525
 8003fda:	f7fc fd63 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0xD526, 0x02);
 8003fde:	2102      	movs	r1, #2
 8003fe0:	f24d 5026 	movw	r0, #54566	; 0xd526
 8003fe4:	f7fc fd5e 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0xD527, 0xCF);
 8003fe8:	21cf      	movs	r1, #207	; 0xcf
 8003fea:	f24d 5027 	movw	r0, #54567	; 0xd527
 8003fee:	f7fc fd59 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0xD528, 0x02);
 8003ff2:	2102      	movs	r1, #2
 8003ff4:	f24d 5028 	movw	r0, #54568	; 0xd528
 8003ff8:	f7fc fd54 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0xD529, 0xDE);
 8003ffc:	21de      	movs	r1, #222	; 0xde
 8003ffe:	f24d 5029 	movw	r0, #54569	; 0xd529
 8004002:	f7fc fd4f 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0xD52A, 0x02);
 8004006:	2102      	movs	r1, #2
 8004008:	f24d 502a 	movw	r0, #54570	; 0xd52a
 800400c:	f7fc fd4a 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0xD52B, 0xF2);
 8004010:	21f2      	movs	r1, #242	; 0xf2
 8004012:	f24d 502b 	movw	r0, #54571	; 0xd52b
 8004016:	f7fc fd45 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0xD52C, 0x02);
 800401a:	2102      	movs	r1, #2
 800401c:	f24d 502c 	movw	r0, #54572	; 0xd52c
 8004020:	f7fc fd40 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0xD52D, 0xFE);
 8004024:	21fe      	movs	r1, #254	; 0xfe
 8004026:	f24d 502d 	movw	r0, #54573	; 0xd52d
 800402a:	f7fc fd3b 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0xD52E, 0x03);
 800402e:	2103      	movs	r1, #3
 8004030:	f24d 502e 	movw	r0, #54574	; 0xd52e
 8004034:	f7fc fd36 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0xD52F, 0x10);
 8004038:	2110      	movs	r1, #16
 800403a:	f24d 502f 	movw	r0, #54575	; 0xd52f
 800403e:	f7fc fd31 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0xD530, 0x03);
 8004042:	2103      	movs	r1, #3
 8004044:	f24d 5030 	movw	r0, #54576	; 0xd530
 8004048:	f7fc fd2c 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0xD531, 0x33);
 800404c:	2133      	movs	r1, #51	; 0x33
 800404e:	f24d 5031 	movw	r0, #54577	; 0xd531
 8004052:	f7fc fd27 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0xD532, 0x03);
 8004056:	2103      	movs	r1, #3
 8004058:	f24d 5032 	movw	r0, #54578	; 0xd532
 800405c:	f7fc fd22 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0xD533, 0x6D);
 8004060:	216d      	movs	r1, #109	; 0x6d
 8004062:	f24d 5033 	movw	r0, #54579	; 0xd533
 8004066:	f7fc fd1d 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0xD600, 0x00);
 800406a:	2100      	movs	r1, #0
 800406c:	f44f 4056 	mov.w	r0, #54784	; 0xd600
 8004070:	f7fc fd18 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0xD601, 0x33);
 8004074:	2133      	movs	r1, #51	; 0x33
 8004076:	f24d 6001 	movw	r0, #54785	; 0xd601
 800407a:	f7fc fd13 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0xD602, 0x00);
 800407e:	2100      	movs	r1, #0
 8004080:	f24d 6002 	movw	r0, #54786	; 0xd602
 8004084:	f7fc fd0e 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0xD603, 0x34);
 8004088:	2134      	movs	r1, #52	; 0x34
 800408a:	f24d 6003 	movw	r0, #54787	; 0xd603
 800408e:	f7fc fd09 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0xD604, 0x00);
 8004092:	2100      	movs	r1, #0
 8004094:	f24d 6004 	movw	r0, #54788	; 0xd604
 8004098:	f7fc fd04 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0xD605, 0x3A);
 800409c:	213a      	movs	r1, #58	; 0x3a
 800409e:	f24d 6005 	movw	r0, #54789	; 0xd605
 80040a2:	f7fc fcff 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0xD606, 0x00);
 80040a6:	2100      	movs	r1, #0
 80040a8:	f24d 6006 	movw	r0, #54790	; 0xd606
 80040ac:	f7fc fcfa 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0xD607, 0x4A);
 80040b0:	214a      	movs	r1, #74	; 0x4a
 80040b2:	f24d 6007 	movw	r0, #54791	; 0xd607
 80040b6:	f7fc fcf5 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0xD608, 0x00);
 80040ba:	2100      	movs	r1, #0
 80040bc:	f24d 6008 	movw	r0, #54792	; 0xd608
 80040c0:	f7fc fcf0 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0xD609, 0x5C);
 80040c4:	215c      	movs	r1, #92	; 0x5c
 80040c6:	f24d 6009 	movw	r0, #54793	; 0xd609
 80040ca:	f7fc fceb 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0xD60A, 0x00);
 80040ce:	2100      	movs	r1, #0
 80040d0:	f24d 600a 	movw	r0, #54794	; 0xd60a
 80040d4:	f7fc fce6 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0xD60B, 0x81);
 80040d8:	2181      	movs	r1, #129	; 0x81
 80040da:	f24d 600b 	movw	r0, #54795	; 0xd60b
 80040de:	f7fc fce1 	bl	8000aa4 <LCD_WriteReg>

		LCD_WriteReg(0xD60C, 0x00);
 80040e2:	2100      	movs	r1, #0
 80040e4:	f24d 600c 	movw	r0, #54796	; 0xd60c
 80040e8:	f7fc fcdc 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0xD60D, 0xA6);
 80040ec:	21a6      	movs	r1, #166	; 0xa6
 80040ee:	f24d 600d 	movw	r0, #54797	; 0xd60d
 80040f2:	f7fc fcd7 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0xD60E, 0x00);
 80040f6:	2100      	movs	r1, #0
 80040f8:	f24d 600e 	movw	r0, #54798	; 0xd60e
 80040fc:	f7fc fcd2 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0xD60F, 0xE5);
 8004100:	21e5      	movs	r1, #229	; 0xe5
 8004102:	f24d 600f 	movw	r0, #54799	; 0xd60f
 8004106:	f7fc fccd 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0xD610, 0x01);
 800410a:	2101      	movs	r1, #1
 800410c:	f24d 6010 	movw	r0, #54800	; 0xd610
 8004110:	f7fc fcc8 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0xD611, 0x13);
 8004114:	2113      	movs	r1, #19
 8004116:	f24d 6011 	movw	r0, #54801	; 0xd611
 800411a:	f7fc fcc3 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0xD612, 0x01);
 800411e:	2101      	movs	r1, #1
 8004120:	f24d 6012 	movw	r0, #54802	; 0xd612
 8004124:	f7fc fcbe 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0xD613, 0x54);
 8004128:	2154      	movs	r1, #84	; 0x54
 800412a:	f24d 6013 	movw	r0, #54803	; 0xd613
 800412e:	f7fc fcb9 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0xD614, 0x01);
 8004132:	2101      	movs	r1, #1
 8004134:	f24d 6014 	movw	r0, #54804	; 0xd614
 8004138:	f7fc fcb4 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0xD615, 0x82);
 800413c:	2182      	movs	r1, #130	; 0x82
 800413e:	f24d 6015 	movw	r0, #54805	; 0xd615
 8004142:	f7fc fcaf 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0xD616, 0x01);
 8004146:	2101      	movs	r1, #1
 8004148:	f24d 6016 	movw	r0, #54806	; 0xd616
 800414c:	f7fc fcaa 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0xD617, 0xCA);
 8004150:	21ca      	movs	r1, #202	; 0xca
 8004152:	f24d 6017 	movw	r0, #54807	; 0xd617
 8004156:	f7fc fca5 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0xD618, 0x02);
 800415a:	2102      	movs	r1, #2
 800415c:	f24d 6018 	movw	r0, #54808	; 0xd618
 8004160:	f7fc fca0 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0xD619, 0x00);
 8004164:	2100      	movs	r1, #0
 8004166:	f24d 6019 	movw	r0, #54809	; 0xd619
 800416a:	f7fc fc9b 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0xD61A, 0x02);
 800416e:	2102      	movs	r1, #2
 8004170:	f24d 601a 	movw	r0, #54810	; 0xd61a
 8004174:	f7fc fc96 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0xD61B, 0x01);
 8004178:	2101      	movs	r1, #1
 800417a:	f24d 601b 	movw	r0, #54811	; 0xd61b
 800417e:	f7fc fc91 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0xD61C, 0x02);
 8004182:	2102      	movs	r1, #2
 8004184:	f24d 601c 	movw	r0, #54812	; 0xd61c
 8004188:	f7fc fc8c 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0xD61D, 0x34);
 800418c:	2134      	movs	r1, #52	; 0x34
 800418e:	f24d 601d 	movw	r0, #54813	; 0xd61d
 8004192:	f7fc fc87 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0xD61E, 0x02);
 8004196:	2102      	movs	r1, #2
 8004198:	f24d 601e 	movw	r0, #54814	; 0xd61e
 800419c:	f7fc fc82 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0xD61F, 0x67);
 80041a0:	2167      	movs	r1, #103	; 0x67
 80041a2:	f24d 601f 	movw	r0, #54815	; 0xd61f
 80041a6:	f7fc fc7d 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0xD620, 0x02);
 80041aa:	2102      	movs	r1, #2
 80041ac:	f24d 6020 	movw	r0, #54816	; 0xd620
 80041b0:	f7fc fc78 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0xD621, 0x84);
 80041b4:	2184      	movs	r1, #132	; 0x84
 80041b6:	f24d 6021 	movw	r0, #54817	; 0xd621
 80041ba:	f7fc fc73 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0xD622, 0x02);
 80041be:	2102      	movs	r1, #2
 80041c0:	f24d 6022 	movw	r0, #54818	; 0xd622
 80041c4:	f7fc fc6e 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0xD623, 0xA4);
 80041c8:	21a4      	movs	r1, #164	; 0xa4
 80041ca:	f24d 6023 	movw	r0, #54819	; 0xd623
 80041ce:	f7fc fc69 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0xD624, 0x02);
 80041d2:	2102      	movs	r1, #2
 80041d4:	f24d 6024 	movw	r0, #54820	; 0xd624
 80041d8:	f7fc fc64 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0xD625, 0xB7);
 80041dc:	21b7      	movs	r1, #183	; 0xb7
 80041de:	f24d 6025 	movw	r0, #54821	; 0xd625
 80041e2:	f7fc fc5f 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0xD626, 0x02);
 80041e6:	2102      	movs	r1, #2
 80041e8:	f24d 6026 	movw	r0, #54822	; 0xd626
 80041ec:	f7fc fc5a 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0xD627, 0xCF);
 80041f0:	21cf      	movs	r1, #207	; 0xcf
 80041f2:	f24d 6027 	movw	r0, #54823	; 0xd627
 80041f6:	f7fc fc55 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0xD628, 0x02);
 80041fa:	2102      	movs	r1, #2
 80041fc:	f24d 6028 	movw	r0, #54824	; 0xd628
 8004200:	f7fc fc50 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0xD629, 0xDE);
 8004204:	21de      	movs	r1, #222	; 0xde
 8004206:	f24d 6029 	movw	r0, #54825	; 0xd629
 800420a:	f7fc fc4b 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0xD62A, 0x02);
 800420e:	2102      	movs	r1, #2
 8004210:	f24d 602a 	movw	r0, #54826	; 0xd62a
 8004214:	f7fc fc46 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0xD62B, 0xF2);
 8004218:	21f2      	movs	r1, #242	; 0xf2
 800421a:	f24d 602b 	movw	r0, #54827	; 0xd62b
 800421e:	f7fc fc41 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0xD62C, 0x02);
 8004222:	2102      	movs	r1, #2
 8004224:	f24d 602c 	movw	r0, #54828	; 0xd62c
 8004228:	f7fc fc3c 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0xD62D, 0xFE);
 800422c:	21fe      	movs	r1, #254	; 0xfe
 800422e:	f24d 602d 	movw	r0, #54829	; 0xd62d
 8004232:	f7fc fc37 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0xD62E, 0x03);
 8004236:	2103      	movs	r1, #3
 8004238:	f24d 602e 	movw	r0, #54830	; 0xd62e
 800423c:	f7fc fc32 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0xD62F, 0x10);
 8004240:	2110      	movs	r1, #16
 8004242:	f24d 602f 	movw	r0, #54831	; 0xd62f
 8004246:	f7fc fc2d 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0xD630, 0x03);
 800424a:	2103      	movs	r1, #3
 800424c:	f24d 6030 	movw	r0, #54832	; 0xd630
 8004250:	f7fc fc28 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0xD631, 0x33);
 8004254:	2133      	movs	r1, #51	; 0x33
 8004256:	f24d 6031 	movw	r0, #54833	; 0xd631
 800425a:	f7fc fc23 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0xD632, 0x03);
 800425e:	2103      	movs	r1, #3
 8004260:	f24d 6032 	movw	r0, #54834	; 0xd632
 8004264:	f7fc fc1e 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0xD633, 0x6D);
 8004268:	216d      	movs	r1, #109	; 0x6d
 800426a:	f24d 6033 	movw	r0, #54835	; 0xd633
 800426e:	f7fc fc19 	bl	8000aa4 <LCD_WriteReg>
		//LV2 Page 0 enable
		LCD_WriteReg(0xF000, 0x55);
 8004272:	2155      	movs	r1, #85	; 0x55
 8004274:	f44f 4070 	mov.w	r0, #61440	; 0xf000
 8004278:	f7fc fc14 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0xF001, 0xAA);
 800427c:	21aa      	movs	r1, #170	; 0xaa
 800427e:	f24f 0001 	movw	r0, #61441	; 0xf001
 8004282:	f7fc fc0f 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0xF002, 0x52);
 8004286:	2152      	movs	r1, #82	; 0x52
 8004288:	f24f 0002 	movw	r0, #61442	; 0xf002
 800428c:	f7fc fc0a 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0xF003, 0x08);
 8004290:	2108      	movs	r1, #8
 8004292:	f24f 0003 	movw	r0, #61443	; 0xf003
 8004296:	f7fc fc05 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0xF004, 0x00);
 800429a:	2100      	movs	r1, #0
 800429c:	f24f 0004 	movw	r0, #61444	; 0xf004
 80042a0:	f7fc fc00 	bl	8000aa4 <LCD_WriteReg>
		//Display control
		LCD_WriteReg(0xB100, 0xCC);
 80042a4:	21cc      	movs	r1, #204	; 0xcc
 80042a6:	f44f 4031 	mov.w	r0, #45312	; 0xb100
 80042aa:	f7fc fbfb 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0xB101, 0x00);
 80042ae:	2100      	movs	r1, #0
 80042b0:	f24b 1001 	movw	r0, #45313	; 0xb101
 80042b4:	f7fc fbf6 	bl	8000aa4 <LCD_WriteReg>
		//Source hold time
		LCD_WriteReg(0xB600, 0x05);
 80042b8:	2105      	movs	r1, #5
 80042ba:	f44f 4036 	mov.w	r0, #46592	; 0xb600
 80042be:	f7fc fbf1 	bl	8000aa4 <LCD_WriteReg>
		//Gate EQ control
		LCD_WriteReg(0xB700, 0x70);
 80042c2:	2170      	movs	r1, #112	; 0x70
 80042c4:	f44f 4037 	mov.w	r0, #46848	; 0xb700
 80042c8:	f7fc fbec 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0xB701, 0x70);
 80042cc:	2170      	movs	r1, #112	; 0x70
 80042ce:	f24b 7001 	movw	r0, #46849	; 0xb701
 80042d2:	f7fc fbe7 	bl	8000aa4 <LCD_WriteReg>
		//Source EQ control (Mode 2)
		LCD_WriteReg(0xB800, 0x01);
 80042d6:	2101      	movs	r1, #1
 80042d8:	f44f 4038 	mov.w	r0, #47104	; 0xb800
 80042dc:	f7fc fbe2 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0xB801, 0x03);
 80042e0:	2103      	movs	r1, #3
 80042e2:	f64b 0001 	movw	r0, #47105	; 0xb801
 80042e6:	f7fc fbdd 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0xB802, 0x03);
 80042ea:	2103      	movs	r1, #3
 80042ec:	f64b 0002 	movw	r0, #47106	; 0xb802
 80042f0:	f7fc fbd8 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0xB803, 0x03);
 80042f4:	2103      	movs	r1, #3
 80042f6:	f64b 0003 	movw	r0, #47107	; 0xb803
 80042fa:	f7fc fbd3 	bl	8000aa4 <LCD_WriteReg>
		//Inversion mode (2-dot)
		LCD_WriteReg(0xBC00, 0x02);
 80042fe:	2102      	movs	r1, #2
 8004300:	f44f 403c 	mov.w	r0, #48128	; 0xbc00
 8004304:	f7fc fbce 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0xBC01, 0x00);
 8004308:	2100      	movs	r1, #0
 800430a:	f64b 4001 	movw	r0, #48129	; 0xbc01
 800430e:	f7fc fbc9 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0xBC02, 0x00);
 8004312:	2100      	movs	r1, #0
 8004314:	f64b 4002 	movw	r0, #48130	; 0xbc02
 8004318:	f7fc fbc4 	bl	8000aa4 <LCD_WriteReg>
		//Timing control 4H w/ 4-delay
		LCD_WriteReg(0xC900, 0xD0);
 800431c:	21d0      	movs	r1, #208	; 0xd0
 800431e:	f44f 4049 	mov.w	r0, #51456	; 0xc900
 8004322:	f7fc fbbf 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0xC901, 0x02);
 8004326:	2102      	movs	r1, #2
 8004328:	f64c 1001 	movw	r0, #51457	; 0xc901
 800432c:	f7fc fbba 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0xC902, 0x50);
 8004330:	2150      	movs	r1, #80	; 0x50
 8004332:	f64c 1002 	movw	r0, #51458	; 0xc902
 8004336:	f7fc fbb5 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0xC903, 0x50);
 800433a:	2150      	movs	r1, #80	; 0x50
 800433c:	f64c 1003 	movw	r0, #51459	; 0xc903
 8004340:	f7fc fbb0 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0xC904, 0x50);
 8004344:	2150      	movs	r1, #80	; 0x50
 8004346:	f64c 1004 	movw	r0, #51460	; 0xc904
 800434a:	f7fc fbab 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0x3500, 0x00);
 800434e:	2100      	movs	r1, #0
 8004350:	f44f 5054 	mov.w	r0, #13568	; 0x3500
 8004354:	f7fc fba6 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0x3A00, 0x55);  //16-bit/pixel
 8004358:	2155      	movs	r1, #85	; 0x55
 800435a:	f44f 5068 	mov.w	r0, #14848	; 0x3a00
 800435e:	f7fc fba1 	bl	8000aa4 <LCD_WriteReg>
		LCD_WR_REG(0x1100);
 8004362:	f44f 5088 	mov.w	r0, #4352	; 0x1100
 8004366:	f7fc fb11 	bl	800098c <LCD_WR_REG>
//		delay_us(120); // us
		HAL_Delay(1);
 800436a:	2001      	movs	r0, #1
 800436c:	f002 fc08 	bl	8006b80 <HAL_Delay>
		LCD_WR_REG(0x2900);
 8004370:	f44f 5024 	mov.w	r0, #10496	; 0x2900
 8004374:	f7fc fb0a 	bl	800098c <LCD_WR_REG>
 8004378:	f001 bd18 	b.w	8005dac <LCD_Init+0x3e34>
	} else if (lcddev.id == 0x9325)  //9325
 800437c:	4bec      	ldr	r3, [pc, #944]	; (8004730 <LCD_Init+0x27b8>)
 800437e:	889b      	ldrh	r3, [r3, #4]
 8004380:	f249 3225 	movw	r2, #37669	; 0x9325
 8004384:	4293      	cmp	r3, r2
 8004386:	f040 80d7 	bne.w	8004538 <LCD_Init+0x25c0>
			{
		LCD_WriteReg(0x00E5, 0x78F0);
 800438a:	f647 01f0 	movw	r1, #30960	; 0x78f0
 800438e:	20e5      	movs	r0, #229	; 0xe5
 8004390:	f7fc fb88 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0x0001, 0x0100);
 8004394:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004398:	2001      	movs	r0, #1
 800439a:	f7fc fb83 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0x0002, 0x0700);
 800439e:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 80043a2:	2002      	movs	r0, #2
 80043a4:	f7fc fb7e 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0x0003, 0x1030);
 80043a8:	f241 0130 	movw	r1, #4144	; 0x1030
 80043ac:	2003      	movs	r0, #3
 80043ae:	f7fc fb79 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0x0004, 0x0000);
 80043b2:	2100      	movs	r1, #0
 80043b4:	2004      	movs	r0, #4
 80043b6:	f7fc fb75 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0x0008, 0x0202);
 80043ba:	f240 2102 	movw	r1, #514	; 0x202
 80043be:	2008      	movs	r0, #8
 80043c0:	f7fc fb70 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0x0009, 0x0000);
 80043c4:	2100      	movs	r1, #0
 80043c6:	2009      	movs	r0, #9
 80043c8:	f7fc fb6c 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0x000A, 0x0000);
 80043cc:	2100      	movs	r1, #0
 80043ce:	200a      	movs	r0, #10
 80043d0:	f7fc fb68 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0x000C, 0x0000);
 80043d4:	2100      	movs	r1, #0
 80043d6:	200c      	movs	r0, #12
 80043d8:	f7fc fb64 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0x000D, 0x0000);
 80043dc:	2100      	movs	r1, #0
 80043de:	200d      	movs	r0, #13
 80043e0:	f7fc fb60 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0x000F, 0x0000);
 80043e4:	2100      	movs	r1, #0
 80043e6:	200f      	movs	r0, #15
 80043e8:	f7fc fb5c 	bl	8000aa4 <LCD_WriteReg>
		//power on sequence VGHVGL
		LCD_WriteReg(0x0010, 0x0000);
 80043ec:	2100      	movs	r1, #0
 80043ee:	2010      	movs	r0, #16
 80043f0:	f7fc fb58 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0x0011, 0x0007);
 80043f4:	2107      	movs	r1, #7
 80043f6:	2011      	movs	r0, #17
 80043f8:	f7fc fb54 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0x0012, 0x0000);
 80043fc:	2100      	movs	r1, #0
 80043fe:	2012      	movs	r0, #18
 8004400:	f7fc fb50 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0x0013, 0x0000);
 8004404:	2100      	movs	r1, #0
 8004406:	2013      	movs	r0, #19
 8004408:	f7fc fb4c 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0x0007, 0x0000);
 800440c:	2100      	movs	r1, #0
 800440e:	2007      	movs	r0, #7
 8004410:	f7fc fb48 	bl	8000aa4 <LCD_WriteReg>
		//vgh 
		LCD_WriteReg(0x0010, 0x1690);
 8004414:	f241 6190 	movw	r1, #5776	; 0x1690
 8004418:	2010      	movs	r0, #16
 800441a:	f7fc fb43 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0x0011, 0x0227);
 800441e:	f240 2127 	movw	r1, #551	; 0x227
 8004422:	2011      	movs	r0, #17
 8004424:	f7fc fb3e 	bl	8000aa4 <LCD_WriteReg>
		//delayms(100);
		//vregiout 
		LCD_WriteReg(0x0012, 0x009D); //0x001b
 8004428:	219d      	movs	r1, #157	; 0x9d
 800442a:	2012      	movs	r0, #18
 800442c:	f7fc fb3a 	bl	8000aa4 <LCD_WriteReg>
		//delayms(100); 
		//vom amplitude
		LCD_WriteReg(0x0013, 0x1900);
 8004430:	f44f 51c8 	mov.w	r1, #6400	; 0x1900
 8004434:	2013      	movs	r0, #19
 8004436:	f7fc fb35 	bl	8000aa4 <LCD_WriteReg>
		//delayms(100); 
		//vom H
		LCD_WriteReg(0x0029, 0x0025);
 800443a:	2125      	movs	r1, #37	; 0x25
 800443c:	2029      	movs	r0, #41	; 0x29
 800443e:	f7fc fb31 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0x002B, 0x000D);
 8004442:	210d      	movs	r1, #13
 8004444:	202b      	movs	r0, #43	; 0x2b
 8004446:	f7fc fb2d 	bl	8000aa4 <LCD_WriteReg>
		//gamma
		LCD_WriteReg(0x0030, 0x0007);
 800444a:	2107      	movs	r1, #7
 800444c:	2030      	movs	r0, #48	; 0x30
 800444e:	f7fc fb29 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0x0031, 0x0303);
 8004452:	f240 3103 	movw	r1, #771	; 0x303
 8004456:	2031      	movs	r0, #49	; 0x31
 8004458:	f7fc fb24 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0x0032, 0x0003);		// 0006
 800445c:	2103      	movs	r1, #3
 800445e:	2032      	movs	r0, #50	; 0x32
 8004460:	f7fc fb20 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0x0035, 0x0206);
 8004464:	f240 2106 	movw	r1, #518	; 0x206
 8004468:	2035      	movs	r0, #53	; 0x35
 800446a:	f7fc fb1b 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0x0036, 0x0008);
 800446e:	2108      	movs	r1, #8
 8004470:	2036      	movs	r0, #54	; 0x36
 8004472:	f7fc fb17 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0x0037, 0x0406);
 8004476:	f240 4106 	movw	r1, #1030	; 0x406
 800447a:	2037      	movs	r0, #55	; 0x37
 800447c:	f7fc fb12 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0x0038, 0x0304);		//0200
 8004480:	f44f 7141 	mov.w	r1, #772	; 0x304
 8004484:	2038      	movs	r0, #56	; 0x38
 8004486:	f7fc fb0d 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0x0039, 0x0007);
 800448a:	2107      	movs	r1, #7
 800448c:	2039      	movs	r0, #57	; 0x39
 800448e:	f7fc fb09 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0x003C, 0x0602);		// 0504
 8004492:	f240 6102 	movw	r1, #1538	; 0x602
 8004496:	203c      	movs	r0, #60	; 0x3c
 8004498:	f7fc fb04 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0x003D, 0x0008);
 800449c:	2108      	movs	r1, #8
 800449e:	203d      	movs	r0, #61	; 0x3d
 80044a0:	f7fc fb00 	bl	8000aa4 <LCD_WriteReg>
		//ram
		LCD_WriteReg(0x0050, 0x0000);
 80044a4:	2100      	movs	r1, #0
 80044a6:	2050      	movs	r0, #80	; 0x50
 80044a8:	f7fc fafc 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0x0051, 0x00EF);
 80044ac:	21ef      	movs	r1, #239	; 0xef
 80044ae:	2051      	movs	r0, #81	; 0x51
 80044b0:	f7fc faf8 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0x0052, 0x0000);
 80044b4:	2100      	movs	r1, #0
 80044b6:	2052      	movs	r0, #82	; 0x52
 80044b8:	f7fc faf4 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0x0053, 0x013F);
 80044bc:	f240 113f 	movw	r1, #319	; 0x13f
 80044c0:	2053      	movs	r0, #83	; 0x53
 80044c2:	f7fc faef 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0x0060, 0xA700);
 80044c6:	f44f 4127 	mov.w	r1, #42752	; 0xa700
 80044ca:	2060      	movs	r0, #96	; 0x60
 80044cc:	f7fc faea 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0x0061, 0x0001);
 80044d0:	2101      	movs	r1, #1
 80044d2:	2061      	movs	r0, #97	; 0x61
 80044d4:	f7fc fae6 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0x006A, 0x0000);
 80044d8:	2100      	movs	r1, #0
 80044da:	206a      	movs	r0, #106	; 0x6a
 80044dc:	f7fc fae2 	bl	8000aa4 <LCD_WriteReg>
		//
		LCD_WriteReg(0x0080, 0x0000);
 80044e0:	2100      	movs	r1, #0
 80044e2:	2080      	movs	r0, #128	; 0x80
 80044e4:	f7fc fade 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0x0081, 0x0000);
 80044e8:	2100      	movs	r1, #0
 80044ea:	2081      	movs	r0, #129	; 0x81
 80044ec:	f7fc fada 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0x0082, 0x0000);
 80044f0:	2100      	movs	r1, #0
 80044f2:	2082      	movs	r0, #130	; 0x82
 80044f4:	f7fc fad6 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0x0083, 0x0000);
 80044f8:	2100      	movs	r1, #0
 80044fa:	2083      	movs	r0, #131	; 0x83
 80044fc:	f7fc fad2 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0x0084, 0x0000);
 8004500:	2100      	movs	r1, #0
 8004502:	2084      	movs	r0, #132	; 0x84
 8004504:	f7fc face 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0x0085, 0x0000);
 8004508:	2100      	movs	r1, #0
 800450a:	2085      	movs	r0, #133	; 0x85
 800450c:	f7fc faca 	bl	8000aa4 <LCD_WriteReg>
		//
		LCD_WriteReg(0x0090, 0x0010);
 8004510:	2110      	movs	r1, #16
 8004512:	2090      	movs	r0, #144	; 0x90
 8004514:	f7fc fac6 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0x0092, 0x0600);
 8004518:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800451c:	2092      	movs	r0, #146	; 0x92
 800451e:	f7fc fac1 	bl	8000aa4 <LCD_WriteReg>

		LCD_WriteReg(0x0007, 0x0133);
 8004522:	f240 1133 	movw	r1, #307	; 0x133
 8004526:	2007      	movs	r0, #7
 8004528:	f7fc fabc 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0x00, 0x0022);		//
 800452c:	2122      	movs	r1, #34	; 0x22
 800452e:	2000      	movs	r0, #0
 8004530:	f7fc fab8 	bl	8000aa4 <LCD_WriteReg>
 8004534:	f001 bc3a 	b.w	8005dac <LCD_Init+0x3e34>
	} else if (lcddev.id == 0x9328)		//ILI9328   OK
 8004538:	4b7d      	ldr	r3, [pc, #500]	; (8004730 <LCD_Init+0x27b8>)
 800453a:	889b      	ldrh	r3, [r3, #4]
 800453c:	f249 3228 	movw	r2, #37672	; 0x9328
 8004540:	4293      	cmp	r3, r2
 8004542:	f040 80f7 	bne.w	8004734 <LCD_Init+0x27bc>
			{
		LCD_WriteReg(0x00EC, 0x108F);		// internal timeing
 8004546:	f241 018f 	movw	r1, #4239	; 0x108f
 800454a:	20ec      	movs	r0, #236	; 0xec
 800454c:	f7fc faaa 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0x00EF, 0x1234);		// ADD
 8004550:	f241 2134 	movw	r1, #4660	; 0x1234
 8004554:	20ef      	movs	r0, #239	; 0xef
 8004556:	f7fc faa5 	bl	8000aa4 <LCD_WriteReg>
		//LCD_WriteReg(0x00e7,0x0010);      
		//LCD_WriteReg(0x0000,0x0001);//开启内部时钟
		LCD_WriteReg(0x0001, 0x0100);
 800455a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800455e:	2001      	movs	r0, #1
 8004560:	f7fc faa0 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0x0002, 0x0700);        //电源开启
 8004564:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 8004568:	2002      	movs	r0, #2
 800456a:	f7fc fa9b 	bl	8000aa4 <LCD_WriteReg>
		// 1  1   0    D->U	L->R
		// 0  0   1	   R->L U->D
		// 1  0   1    U->D	R->L
		// 0  1   1    L->R U->D 正常就用这个.
		// 1  1   1	   U->D	L->R
		LCD_WriteReg(0x0003, (1 << 12) | (3 << 4) | (0 << 3));		//65K
 800456e:	f241 0130 	movw	r1, #4144	; 0x1030
 8004572:	2003      	movs	r0, #3
 8004574:	f7fc fa96 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0x0004, 0x0000);
 8004578:	2100      	movs	r1, #0
 800457a:	2004      	movs	r0, #4
 800457c:	f7fc fa92 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0x0008, 0x0202);
 8004580:	f240 2102 	movw	r1, #514	; 0x202
 8004584:	2008      	movs	r0, #8
 8004586:	f7fc fa8d 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0x0009, 0x0000);
 800458a:	2100      	movs	r1, #0
 800458c:	2009      	movs	r0, #9
 800458e:	f7fc fa89 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0x000a, 0x0000);		//display setting
 8004592:	2100      	movs	r1, #0
 8004594:	200a      	movs	r0, #10
 8004596:	f7fc fa85 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0x000c, 0x0001);		//display setting
 800459a:	2101      	movs	r1, #1
 800459c:	200c      	movs	r0, #12
 800459e:	f7fc fa81 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0x000d, 0x0000);		//0f3c
 80045a2:	2100      	movs	r1, #0
 80045a4:	200d      	movs	r0, #13
 80045a6:	f7fc fa7d 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0x000f, 0x0000);
 80045aa:	2100      	movs	r1, #0
 80045ac:	200f      	movs	r0, #15
 80045ae:	f7fc fa79 	bl	8000aa4 <LCD_WriteReg>
		//电源配置
		LCD_WriteReg(0x0010, 0x0000);
 80045b2:	2100      	movs	r1, #0
 80045b4:	2010      	movs	r0, #16
 80045b6:	f7fc fa75 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0x0011, 0x0007);
 80045ba:	2107      	movs	r1, #7
 80045bc:	2011      	movs	r0, #17
 80045be:	f7fc fa71 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0x0012, 0x0000);
 80045c2:	2100      	movs	r1, #0
 80045c4:	2012      	movs	r0, #18
 80045c6:	f7fc fa6d 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0x0013, 0x0000);
 80045ca:	2100      	movs	r1, #0
 80045cc:	2013      	movs	r0, #19
 80045ce:	f7fc fa69 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0x0007, 0x0001);
 80045d2:	2101      	movs	r1, #1
 80045d4:	2007      	movs	r0, #7
 80045d6:	f7fc fa65 	bl	8000aa4 <LCD_WriteReg>
		HAL_Delay(50);
 80045da:	2032      	movs	r0, #50	; 0x32
 80045dc:	f002 fad0 	bl	8006b80 <HAL_Delay>
		LCD_WriteReg(0x0010, 0x1490);
 80045e0:	f241 4190 	movw	r1, #5264	; 0x1490
 80045e4:	2010      	movs	r0, #16
 80045e6:	f7fc fa5d 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0x0011, 0x0227);
 80045ea:	f240 2127 	movw	r1, #551	; 0x227
 80045ee:	2011      	movs	r0, #17
 80045f0:	f7fc fa58 	bl	8000aa4 <LCD_WriteReg>
		HAL_Delay(50);
 80045f4:	2032      	movs	r0, #50	; 0x32
 80045f6:	f002 fac3 	bl	8006b80 <HAL_Delay>
		LCD_WriteReg(0x0012, 0x008A);
 80045fa:	218a      	movs	r1, #138	; 0x8a
 80045fc:	2012      	movs	r0, #18
 80045fe:	f7fc fa51 	bl	8000aa4 <LCD_WriteReg>
		HAL_Delay(50);
 8004602:	2032      	movs	r0, #50	; 0x32
 8004604:	f002 fabc 	bl	8006b80 <HAL_Delay>
		LCD_WriteReg(0x0013, 0x1a00);
 8004608:	f44f 51d0 	mov.w	r1, #6656	; 0x1a00
 800460c:	2013      	movs	r0, #19
 800460e:	f7fc fa49 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0x0029, 0x0006);
 8004612:	2106      	movs	r1, #6
 8004614:	2029      	movs	r0, #41	; 0x29
 8004616:	f7fc fa45 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0x002b, 0x000d);
 800461a:	210d      	movs	r1, #13
 800461c:	202b      	movs	r0, #43	; 0x2b
 800461e:	f7fc fa41 	bl	8000aa4 <LCD_WriteReg>
		HAL_Delay(50);
 8004622:	2032      	movs	r0, #50	; 0x32
 8004624:	f002 faac 	bl	8006b80 <HAL_Delay>
		LCD_WriteReg(0x0020, 0x0000);
 8004628:	2100      	movs	r1, #0
 800462a:	2020      	movs	r0, #32
 800462c:	f7fc fa3a 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0x0021, 0x0000);
 8004630:	2100      	movs	r1, #0
 8004632:	2021      	movs	r0, #33	; 0x21
 8004634:	f7fc fa36 	bl	8000aa4 <LCD_WriteReg>
		HAL_Delay(50);
 8004638:	2032      	movs	r0, #50	; 0x32
 800463a:	f002 faa1 	bl	8006b80 <HAL_Delay>
		//伽马校正
		LCD_WriteReg(0x0030, 0x0000);
 800463e:	2100      	movs	r1, #0
 8004640:	2030      	movs	r0, #48	; 0x30
 8004642:	f7fc fa2f 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0x0031, 0x0604);
 8004646:	f240 6104 	movw	r1, #1540	; 0x604
 800464a:	2031      	movs	r0, #49	; 0x31
 800464c:	f7fc fa2a 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0x0032, 0x0305);
 8004650:	f240 3105 	movw	r1, #773	; 0x305
 8004654:	2032      	movs	r0, #50	; 0x32
 8004656:	f7fc fa25 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0x0035, 0x0000);
 800465a:	2100      	movs	r1, #0
 800465c:	2035      	movs	r0, #53	; 0x35
 800465e:	f7fc fa21 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0x0036, 0x0C09);
 8004662:	f640 4109 	movw	r1, #3081	; 0xc09
 8004666:	2036      	movs	r0, #54	; 0x36
 8004668:	f7fc fa1c 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0x0037, 0x0204);
 800466c:	f44f 7101 	mov.w	r1, #516	; 0x204
 8004670:	2037      	movs	r0, #55	; 0x37
 8004672:	f7fc fa17 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0x0038, 0x0301);
 8004676:	f240 3101 	movw	r1, #769	; 0x301
 800467a:	2038      	movs	r0, #56	; 0x38
 800467c:	f7fc fa12 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0x0039, 0x0707);
 8004680:	f240 7107 	movw	r1, #1799	; 0x707
 8004684:	2039      	movs	r0, #57	; 0x39
 8004686:	f7fc fa0d 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0x003c, 0x0000);
 800468a:	2100      	movs	r1, #0
 800468c:	203c      	movs	r0, #60	; 0x3c
 800468e:	f7fc fa09 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0x003d, 0x0a0a);
 8004692:	f640 210a 	movw	r1, #2570	; 0xa0a
 8004696:	203d      	movs	r0, #61	; 0x3d
 8004698:	f7fc fa04 	bl	8000aa4 <LCD_WriteReg>
		HAL_Delay(50);
 800469c:	2032      	movs	r0, #50	; 0x32
 800469e:	f002 fa6f 	bl	8006b80 <HAL_Delay>
		LCD_WriteReg(0x0050, 0x0000); //水平GRAM起始位置
 80046a2:	2100      	movs	r1, #0
 80046a4:	2050      	movs	r0, #80	; 0x50
 80046a6:	f7fc f9fd 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0x0051, 0x00ef); //水平GRAM终止位置
 80046aa:	21ef      	movs	r1, #239	; 0xef
 80046ac:	2051      	movs	r0, #81	; 0x51
 80046ae:	f7fc f9f9 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0x0052, 0x0000); //垂直GRAM起始位置
 80046b2:	2100      	movs	r1, #0
 80046b4:	2052      	movs	r0, #82	; 0x52
 80046b6:	f7fc f9f5 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0x0053, 0x013f); //垂直GRAM终止位置
 80046ba:	f240 113f 	movw	r1, #319	; 0x13f
 80046be:	2053      	movs	r0, #83	; 0x53
 80046c0:	f7fc f9f0 	bl	8000aa4 <LCD_WriteReg>

		LCD_WriteReg(0x0060, 0xa700);
 80046c4:	f44f 4127 	mov.w	r1, #42752	; 0xa700
 80046c8:	2060      	movs	r0, #96	; 0x60
 80046ca:	f7fc f9eb 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0x0061, 0x0001);
 80046ce:	2101      	movs	r1, #1
 80046d0:	2061      	movs	r0, #97	; 0x61
 80046d2:	f7fc f9e7 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0x006a, 0x0000);
 80046d6:	2100      	movs	r1, #0
 80046d8:	206a      	movs	r0, #106	; 0x6a
 80046da:	f7fc f9e3 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0x0080, 0x0000);
 80046de:	2100      	movs	r1, #0
 80046e0:	2080      	movs	r0, #128	; 0x80
 80046e2:	f7fc f9df 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0x0081, 0x0000);
 80046e6:	2100      	movs	r1, #0
 80046e8:	2081      	movs	r0, #129	; 0x81
 80046ea:	f7fc f9db 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0x0082, 0x0000);
 80046ee:	2100      	movs	r1, #0
 80046f0:	2082      	movs	r0, #130	; 0x82
 80046f2:	f7fc f9d7 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0x0083, 0x0000);
 80046f6:	2100      	movs	r1, #0
 80046f8:	2083      	movs	r0, #131	; 0x83
 80046fa:	f7fc f9d3 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0x0084, 0x0000);
 80046fe:	2100      	movs	r1, #0
 8004700:	2084      	movs	r0, #132	; 0x84
 8004702:	f7fc f9cf 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0x0085, 0x0000);
 8004706:	2100      	movs	r1, #0
 8004708:	2085      	movs	r0, #133	; 0x85
 800470a:	f7fc f9cb 	bl	8000aa4 <LCD_WriteReg>

		LCD_WriteReg(0x0090, 0x0010);
 800470e:	2110      	movs	r1, #16
 8004710:	2090      	movs	r0, #144	; 0x90
 8004712:	f7fc f9c7 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0x0092, 0x0600);
 8004716:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800471a:	2092      	movs	r0, #146	; 0x92
 800471c:	f7fc f9c2 	bl	8000aa4 <LCD_WriteReg>
		//开启显示设置
		LCD_WriteReg(0x0007, 0x0133);
 8004720:	f240 1133 	movw	r1, #307	; 0x133
 8004724:	2007      	movs	r0, #7
 8004726:	f7fc f9bd 	bl	8000aa4 <LCD_WriteReg>
 800472a:	f001 bb3f 	b.w	8005dac <LCD_Init+0x3e34>
 800472e:	bf00      	nop
 8004730:	20000080 	.word	0x20000080
	} else if (lcddev.id == 0x9320) //测试OK.
 8004734:	4bce      	ldr	r3, [pc, #824]	; (8004a70 <LCD_Init+0x2af8>)
 8004736:	889b      	ldrh	r3, [r3, #4]
 8004738:	f249 3220 	movw	r2, #37664	; 0x9320
 800473c:	4293      	cmp	r3, r2
 800473e:	f040 80ad 	bne.w	800489c <LCD_Init+0x2924>
			{
		LCD_WriteReg(0x00, 0x0000);
 8004742:	2100      	movs	r1, #0
 8004744:	2000      	movs	r0, #0
 8004746:	f7fc f9ad 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0x01, 0x0100);	//Driver Output Contral.
 800474a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800474e:	2001      	movs	r0, #1
 8004750:	f7fc f9a8 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0x02, 0x0700);	//LCD Driver Waveform Contral.
 8004754:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 8004758:	2002      	movs	r0, #2
 800475a:	f7fc f9a3 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0x03, 0x1030);	//Entry Mode Set.
 800475e:	f241 0130 	movw	r1, #4144	; 0x1030
 8004762:	2003      	movs	r0, #3
 8004764:	f7fc f99e 	bl	8000aa4 <LCD_WriteReg>
		//LCD_WriteReg(0x03,0x1018);	//Entry Mode Set.

		LCD_WriteReg(0x04, 0x0000);	//Scalling Contral.
 8004768:	2100      	movs	r1, #0
 800476a:	2004      	movs	r0, #4
 800476c:	f7fc f99a 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0x08, 0x0202);	//Display Contral 2.(0x0207)
 8004770:	f240 2102 	movw	r1, #514	; 0x202
 8004774:	2008      	movs	r0, #8
 8004776:	f7fc f995 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0x09, 0x0000);	//Display Contral 3.(0x0000)
 800477a:	2100      	movs	r1, #0
 800477c:	2009      	movs	r0, #9
 800477e:	f7fc f991 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0x0a, 0x0000);	//Frame Cycle Contal.(0x0000)
 8004782:	2100      	movs	r1, #0
 8004784:	200a      	movs	r0, #10
 8004786:	f7fc f98d 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0x0c, (1 << 0));	//Extern Display Interface Contral 1.(0x0000)
 800478a:	2101      	movs	r1, #1
 800478c:	200c      	movs	r0, #12
 800478e:	f7fc f989 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0x0d, 0x0000);	//Frame Maker Position.
 8004792:	2100      	movs	r1, #0
 8004794:	200d      	movs	r0, #13
 8004796:	f7fc f985 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0x0f, 0x0000);	//Extern Display Interface Contral 2.
 800479a:	2100      	movs	r1, #0
 800479c:	200f      	movs	r0, #15
 800479e:	f7fc f981 	bl	8000aa4 <LCD_WriteReg>
		HAL_Delay(50);
 80047a2:	2032      	movs	r0, #50	; 0x32
 80047a4:	f002 f9ec 	bl	8006b80 <HAL_Delay>
		LCD_WriteReg(0x07, 0x0101);	//Display Contral.
 80047a8:	f240 1101 	movw	r1, #257	; 0x101
 80047ac:	2007      	movs	r0, #7
 80047ae:	f7fc f979 	bl	8000aa4 <LCD_WriteReg>
		HAL_Delay(50);
 80047b2:	2032      	movs	r0, #50	; 0x32
 80047b4:	f002 f9e4 	bl	8006b80 <HAL_Delay>
		LCD_WriteReg(0x10, (1 << 12) | (0 << 8) | (1 << 7) | (1 << 6) | (0 << 4));//Power Control 1.(0x16b0)
 80047b8:	f44f 5186 	mov.w	r1, #4288	; 0x10c0
 80047bc:	2010      	movs	r0, #16
 80047be:	f7fc f971 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0x11, 0x0007);								//Power Control 2.(0x0001)
 80047c2:	2107      	movs	r1, #7
 80047c4:	2011      	movs	r0, #17
 80047c6:	f7fc f96d 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0x12, (1 << 8) | (1 << 4) | (0 << 0));	//Power Control 3.(0x0138)
 80047ca:	f44f 7188 	mov.w	r1, #272	; 0x110
 80047ce:	2012      	movs	r0, #18
 80047d0:	f7fc f968 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0x13, 0x0b00);								//Power Control 4.
 80047d4:	f44f 6130 	mov.w	r1, #2816	; 0xb00
 80047d8:	2013      	movs	r0, #19
 80047da:	f7fc f963 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0x29, 0x0000);								//Power Control 7.
 80047de:	2100      	movs	r1, #0
 80047e0:	2029      	movs	r0, #41	; 0x29
 80047e2:	f7fc f95f 	bl	8000aa4 <LCD_WriteReg>

		LCD_WriteReg(0x2b, (1 << 14) | (1 << 4));
 80047e6:	f244 0110 	movw	r1, #16400	; 0x4010
 80047ea:	202b      	movs	r0, #43	; 0x2b
 80047ec:	f7fc f95a 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0x50, 0);	//Set X Star
 80047f0:	2100      	movs	r1, #0
 80047f2:	2050      	movs	r0, #80	; 0x50
 80047f4:	f7fc f956 	bl	8000aa4 <LCD_WriteReg>
		//水平GRAM终止位置Set X End.
		LCD_WriteReg(0x51, 239);	//Set Y Star
 80047f8:	21ef      	movs	r1, #239	; 0xef
 80047fa:	2051      	movs	r0, #81	; 0x51
 80047fc:	f7fc f952 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0x52, 0);	//Set Y End.t.
 8004800:	2100      	movs	r1, #0
 8004802:	2052      	movs	r0, #82	; 0x52
 8004804:	f7fc f94e 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0x53, 319);	//
 8004808:	f240 113f 	movw	r1, #319	; 0x13f
 800480c:	2053      	movs	r0, #83	; 0x53
 800480e:	f7fc f949 	bl	8000aa4 <LCD_WriteReg>

		LCD_WriteReg(0x60, 0x2700);	//Driver Output Control.
 8004812:	f44f 511c 	mov.w	r1, #9984	; 0x2700
 8004816:	2060      	movs	r0, #96	; 0x60
 8004818:	f7fc f944 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0x61, 0x0001);	//Driver Output Control.
 800481c:	2101      	movs	r1, #1
 800481e:	2061      	movs	r0, #97	; 0x61
 8004820:	f7fc f940 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0x6a, 0x0000);	//Vertical Srcoll Control.
 8004824:	2100      	movs	r1, #0
 8004826:	206a      	movs	r0, #106	; 0x6a
 8004828:	f7fc f93c 	bl	8000aa4 <LCD_WriteReg>

		LCD_WriteReg(0x80, 0x0000);	//Display Position? Partial Display 1.
 800482c:	2100      	movs	r1, #0
 800482e:	2080      	movs	r0, #128	; 0x80
 8004830:	f7fc f938 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0x81, 0x0000);	//RAM Address Start? Partial Display 1.
 8004834:	2100      	movs	r1, #0
 8004836:	2081      	movs	r0, #129	; 0x81
 8004838:	f7fc f934 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0x82, 0x0000);	//RAM Address End-Partial Display 1.
 800483c:	2100      	movs	r1, #0
 800483e:	2082      	movs	r0, #130	; 0x82
 8004840:	f7fc f930 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0x83, 0x0000);	//Displsy Position? Partial Display 2.
 8004844:	2100      	movs	r1, #0
 8004846:	2083      	movs	r0, #131	; 0x83
 8004848:	f7fc f92c 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0x84, 0x0000);	//RAM Address Start? Partial Display 2.
 800484c:	2100      	movs	r1, #0
 800484e:	2084      	movs	r0, #132	; 0x84
 8004850:	f7fc f928 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0x85, 0x0000);	//RAM Address End? Partial Display 2.
 8004854:	2100      	movs	r1, #0
 8004856:	2085      	movs	r0, #133	; 0x85
 8004858:	f7fc f924 	bl	8000aa4 <LCD_WriteReg>

		LCD_WriteReg(0x90, (0 << 7) | (16 << 0));	//Frame Cycle Contral.(0x0013)
 800485c:	2110      	movs	r1, #16
 800485e:	2090      	movs	r0, #144	; 0x90
 8004860:	f7fc f920 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0x92, 0x0000);	//Panel Interface Contral 2.(0x0000)
 8004864:	2100      	movs	r1, #0
 8004866:	2092      	movs	r0, #146	; 0x92
 8004868:	f7fc f91c 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0x93, 0x0001);	//Panel Interface Contral 3.
 800486c:	2101      	movs	r1, #1
 800486e:	2093      	movs	r0, #147	; 0x93
 8004870:	f7fc f918 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0x95, 0x0110);	//Frame Cycle Contral.(0x0110)
 8004874:	f44f 7188 	mov.w	r1, #272	; 0x110
 8004878:	2095      	movs	r0, #149	; 0x95
 800487a:	f7fc f913 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0x97, (0 << 8));	//
 800487e:	2100      	movs	r1, #0
 8004880:	2097      	movs	r0, #151	; 0x97
 8004882:	f7fc f90f 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0x98, 0x0000);	//Frame Cycle Contral.
 8004886:	2100      	movs	r1, #0
 8004888:	2098      	movs	r0, #152	; 0x98
 800488a:	f7fc f90b 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0x07, 0x0173);	//(0x0173)
 800488e:	f240 1173 	movw	r1, #371	; 0x173
 8004892:	2007      	movs	r0, #7
 8004894:	f7fc f906 	bl	8000aa4 <LCD_WriteReg>
 8004898:	f001 ba88 	b.w	8005dac <LCD_Init+0x3e34>
	} else if (lcddev.id == 0X9331)	//OK |/|/|
 800489c:	4b74      	ldr	r3, [pc, #464]	; (8004a70 <LCD_Init+0x2af8>)
 800489e:	889b      	ldrh	r3, [r3, #4]
 80048a0:	f249 3231 	movw	r2, #37681	; 0x9331
 80048a4:	4293      	cmp	r3, r2
 80048a6:	f040 80e5 	bne.w	8004a74 <LCD_Init+0x2afc>
			{
		LCD_WriteReg(0x00E7, 0x1014);
 80048aa:	f241 0114 	movw	r1, #4116	; 0x1014
 80048ae:	20e7      	movs	r0, #231	; 0xe7
 80048b0:	f7fc f8f8 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0x0001, 0x0100); // set SS and SM bit
 80048b4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80048b8:	2001      	movs	r0, #1
 80048ba:	f7fc f8f3 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0x0002, 0x0200); // set 1 line inversion
 80048be:	f44f 7100 	mov.w	r1, #512	; 0x200
 80048c2:	2002      	movs	r0, #2
 80048c4:	f7fc f8ee 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0x0003, (1 << 12) | (3 << 4) | (1 << 3)); //65K
 80048c8:	f241 0138 	movw	r1, #4152	; 0x1038
 80048cc:	2003      	movs	r0, #3
 80048ce:	f7fc f8e9 	bl	8000aa4 <LCD_WriteReg>
		//LCD_WriteReg(0x0003, 0x1030); // set GRAM write direction and BGR=1.
		LCD_WriteReg(0x0008, 0x0202); // set the back porch and front porch
 80048d2:	f240 2102 	movw	r1, #514	; 0x202
 80048d6:	2008      	movs	r0, #8
 80048d8:	f7fc f8e4 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0x0009, 0x0000); // set non-display area refresh cycle ISC[3:0]
 80048dc:	2100      	movs	r1, #0
 80048de:	2009      	movs	r0, #9
 80048e0:	f7fc f8e0 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0x000A, 0x0000); // FMARK function
 80048e4:	2100      	movs	r1, #0
 80048e6:	200a      	movs	r0, #10
 80048e8:	f7fc f8dc 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0x000C, 0x0000); // RGB interface setting
 80048ec:	2100      	movs	r1, #0
 80048ee:	200c      	movs	r0, #12
 80048f0:	f7fc f8d8 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0x000D, 0x0000); // Frame marker Position
 80048f4:	2100      	movs	r1, #0
 80048f6:	200d      	movs	r0, #13
 80048f8:	f7fc f8d4 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0x000F, 0x0000); // RGB interface polarity
 80048fc:	2100      	movs	r1, #0
 80048fe:	200f      	movs	r0, #15
 8004900:	f7fc f8d0 	bl	8000aa4 <LCD_WriteReg>
		//*************Power On sequence ****************//
		LCD_WriteReg(0x0010, 0x0000); // SAP, BT[3:0], AP, DSTB, SLP, STB
 8004904:	2100      	movs	r1, #0
 8004906:	2010      	movs	r0, #16
 8004908:	f7fc f8cc 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0x0011, 0x0007); // DC1[2:0], DC0[2:0], VC[2:0]
 800490c:	2107      	movs	r1, #7
 800490e:	2011      	movs	r0, #17
 8004910:	f7fc f8c8 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0x0012, 0x0000); // VREG1OUT voltage
 8004914:	2100      	movs	r1, #0
 8004916:	2012      	movs	r0, #18
 8004918:	f7fc f8c4 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0x0013, 0x0000); // VDV[4:0] for VCOM amplitude
 800491c:	2100      	movs	r1, #0
 800491e:	2013      	movs	r0, #19
 8004920:	f7fc f8c0 	bl	8000aa4 <LCD_WriteReg>
		HAL_Delay(200); // Dis-charge capacitor power voltage
 8004924:	20c8      	movs	r0, #200	; 0xc8
 8004926:	f002 f92b 	bl	8006b80 <HAL_Delay>
		LCD_WriteReg(0x0010, 0x1690); // SAP, BT[3:0], AP, DSTB, SLP, STB
 800492a:	f241 6190 	movw	r1, #5776	; 0x1690
 800492e:	2010      	movs	r0, #16
 8004930:	f7fc f8b8 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0x0011, 0x0227); // DC1[2:0], DC0[2:0], VC[2:0]
 8004934:	f240 2127 	movw	r1, #551	; 0x227
 8004938:	2011      	movs	r0, #17
 800493a:	f7fc f8b3 	bl	8000aa4 <LCD_WriteReg>
		HAL_Delay(50); // Delay 50ms
 800493e:	2032      	movs	r0, #50	; 0x32
 8004940:	f002 f91e 	bl	8006b80 <HAL_Delay>
		LCD_WriteReg(0x0012, 0x000C); // Internal reference voltage= Vci;
 8004944:	210c      	movs	r1, #12
 8004946:	2012      	movs	r0, #18
 8004948:	f7fc f8ac 	bl	8000aa4 <LCD_WriteReg>
		HAL_Delay(50); // Delay 50ms
 800494c:	2032      	movs	r0, #50	; 0x32
 800494e:	f002 f917 	bl	8006b80 <HAL_Delay>
		LCD_WriteReg(0x0013, 0x0800); // Set VDV[4:0] for VCOM amplitude
 8004952:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8004956:	2013      	movs	r0, #19
 8004958:	f7fc f8a4 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0x0029, 0x0011); // Set VCM[5:0] for VCOMH
 800495c:	2111      	movs	r1, #17
 800495e:	2029      	movs	r0, #41	; 0x29
 8004960:	f7fc f8a0 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0x002B, 0x000B); // Set Frame Rate
 8004964:	210b      	movs	r1, #11
 8004966:	202b      	movs	r0, #43	; 0x2b
 8004968:	f7fc f89c 	bl	8000aa4 <LCD_WriteReg>
		HAL_Delay(50); // Delay 50ms
 800496c:	2032      	movs	r0, #50	; 0x32
 800496e:	f002 f907 	bl	8006b80 <HAL_Delay>
		LCD_WriteReg(0x0020, 0x0000); // GRAM horizontal Address
 8004972:	2100      	movs	r1, #0
 8004974:	2020      	movs	r0, #32
 8004976:	f7fc f895 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0x0021, 0x013f); // GRAM Vertical Address
 800497a:	f240 113f 	movw	r1, #319	; 0x13f
 800497e:	2021      	movs	r0, #33	; 0x21
 8004980:	f7fc f890 	bl	8000aa4 <LCD_WriteReg>
		// ----------- Adjust the Gamma Curve ----------//
		LCD_WriteReg(0x0030, 0x0000);
 8004984:	2100      	movs	r1, #0
 8004986:	2030      	movs	r0, #48	; 0x30
 8004988:	f7fc f88c 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0x0031, 0x0106);
 800498c:	f44f 7183 	mov.w	r1, #262	; 0x106
 8004990:	2031      	movs	r0, #49	; 0x31
 8004992:	f7fc f887 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0x0032, 0x0000);
 8004996:	2100      	movs	r1, #0
 8004998:	2032      	movs	r0, #50	; 0x32
 800499a:	f7fc f883 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0x0035, 0x0204);
 800499e:	f44f 7101 	mov.w	r1, #516	; 0x204
 80049a2:	2035      	movs	r0, #53	; 0x35
 80049a4:	f7fc f87e 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0x0036, 0x160A);
 80049a8:	f241 610a 	movw	r1, #5642	; 0x160a
 80049ac:	2036      	movs	r0, #54	; 0x36
 80049ae:	f7fc f879 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0x0037, 0x0707);
 80049b2:	f240 7107 	movw	r1, #1799	; 0x707
 80049b6:	2037      	movs	r0, #55	; 0x37
 80049b8:	f7fc f874 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0x0038, 0x0106);
 80049bc:	f44f 7183 	mov.w	r1, #262	; 0x106
 80049c0:	2038      	movs	r0, #56	; 0x38
 80049c2:	f7fc f86f 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0x0039, 0x0707);
 80049c6:	f240 7107 	movw	r1, #1799	; 0x707
 80049ca:	2039      	movs	r0, #57	; 0x39
 80049cc:	f7fc f86a 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0x003C, 0x0402);
 80049d0:	f240 4102 	movw	r1, #1026	; 0x402
 80049d4:	203c      	movs	r0, #60	; 0x3c
 80049d6:	f7fc f865 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0x003D, 0x0C0F);
 80049da:	f640 410f 	movw	r1, #3087	; 0xc0f
 80049de:	203d      	movs	r0, #61	; 0x3d
 80049e0:	f7fc f860 	bl	8000aa4 <LCD_WriteReg>
		//------------------ Set GRAM area ---------------//
		LCD_WriteReg(0x0050, 0x0000); // Horizontal GRAM Start Address
 80049e4:	2100      	movs	r1, #0
 80049e6:	2050      	movs	r0, #80	; 0x50
 80049e8:	f7fc f85c 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0x0051, 0x00EF); // Horizontal GRAM End Address
 80049ec:	21ef      	movs	r1, #239	; 0xef
 80049ee:	2051      	movs	r0, #81	; 0x51
 80049f0:	f7fc f858 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0x0052, 0x0000); // Vertical GRAM Start Address
 80049f4:	2100      	movs	r1, #0
 80049f6:	2052      	movs	r0, #82	; 0x52
 80049f8:	f7fc f854 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0x0053, 0x013F); // Vertical GRAM Start Address
 80049fc:	f240 113f 	movw	r1, #319	; 0x13f
 8004a00:	2053      	movs	r0, #83	; 0x53
 8004a02:	f7fc f84f 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0x0060, 0x2700); // Gate Scan Line
 8004a06:	f44f 511c 	mov.w	r1, #9984	; 0x2700
 8004a0a:	2060      	movs	r0, #96	; 0x60
 8004a0c:	f7fc f84a 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0x0061, 0x0001); // NDL,VLE, REV 
 8004a10:	2101      	movs	r1, #1
 8004a12:	2061      	movs	r0, #97	; 0x61
 8004a14:	f7fc f846 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0x006A, 0x0000); // set scrolling line
 8004a18:	2100      	movs	r1, #0
 8004a1a:	206a      	movs	r0, #106	; 0x6a
 8004a1c:	f7fc f842 	bl	8000aa4 <LCD_WriteReg>
		//-------------- Partial Display Control ---------//
		LCD_WriteReg(0x0080, 0x0000);
 8004a20:	2100      	movs	r1, #0
 8004a22:	2080      	movs	r0, #128	; 0x80
 8004a24:	f7fc f83e 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0x0081, 0x0000);
 8004a28:	2100      	movs	r1, #0
 8004a2a:	2081      	movs	r0, #129	; 0x81
 8004a2c:	f7fc f83a 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0x0082, 0x0000);
 8004a30:	2100      	movs	r1, #0
 8004a32:	2082      	movs	r0, #130	; 0x82
 8004a34:	f7fc f836 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0x0083, 0x0000);
 8004a38:	2100      	movs	r1, #0
 8004a3a:	2083      	movs	r0, #131	; 0x83
 8004a3c:	f7fc f832 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0x0084, 0x0000);
 8004a40:	2100      	movs	r1, #0
 8004a42:	2084      	movs	r0, #132	; 0x84
 8004a44:	f7fc f82e 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0x0085, 0x0000);
 8004a48:	2100      	movs	r1, #0
 8004a4a:	2085      	movs	r0, #133	; 0x85
 8004a4c:	f7fc f82a 	bl	8000aa4 <LCD_WriteReg>
		//-------------- Panel Control -------------------//
		LCD_WriteReg(0x0090, 0x0010);
 8004a50:	2110      	movs	r1, #16
 8004a52:	2090      	movs	r0, #144	; 0x90
 8004a54:	f7fc f826 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0x0092, 0x0600);
 8004a58:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8004a5c:	2092      	movs	r0, #146	; 0x92
 8004a5e:	f7fc f821 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0x0007, 0x0133); // 262K color and display ON
 8004a62:	f240 1133 	movw	r1, #307	; 0x133
 8004a66:	2007      	movs	r0, #7
 8004a68:	f7fc f81c 	bl	8000aa4 <LCD_WriteReg>
 8004a6c:	f001 b99e 	b.w	8005dac <LCD_Init+0x3e34>
 8004a70:	20000080 	.word	0x20000080
	} else if (lcddev.id == 0x5408) {
 8004a74:	4be2      	ldr	r3, [pc, #904]	; (8004e00 <LCD_Init+0x2e88>)
 8004a76:	889b      	ldrh	r3, [r3, #4]
 8004a78:	f245 4208 	movw	r2, #21512	; 0x5408
 8004a7c:	4293      	cmp	r3, r2
 8004a7e:	f040 80a3 	bne.w	8004bc8 <LCD_Init+0x2c50>
		LCD_WriteReg(0x01, 0x0100);
 8004a82:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004a86:	2001      	movs	r0, #1
 8004a88:	f7fc f80c 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0x02, 0x0700); //LCD Driving Waveform Contral
 8004a8c:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 8004a90:	2002      	movs	r0, #2
 8004a92:	f7fc f807 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0x03, 0x1030); //Entry Mode设置
 8004a96:	f241 0130 	movw	r1, #4144	; 0x1030
 8004a9a:	2003      	movs	r0, #3
 8004a9c:	f7fc f802 	bl	8000aa4 <LCD_WriteReg>
		//指针从左至右自上而下的自动增模式
		//Normal Mode(Window Mode disable)
		//RGB格式
		//16位数据2次传输的8总线设置
		LCD_WriteReg(0x04, 0x0000); //Scalling Control register
 8004aa0:	2100      	movs	r1, #0
 8004aa2:	2004      	movs	r0, #4
 8004aa4:	f7fb fffe 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0x08, 0x0207); //Display Control 2
 8004aa8:	f240 2107 	movw	r1, #519	; 0x207
 8004aac:	2008      	movs	r0, #8
 8004aae:	f7fb fff9 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0x09, 0x0000); //Display Control 3
 8004ab2:	2100      	movs	r1, #0
 8004ab4:	2009      	movs	r0, #9
 8004ab6:	f7fb fff5 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0x0A, 0x0000); //Frame Cycle Control
 8004aba:	2100      	movs	r1, #0
 8004abc:	200a      	movs	r0, #10
 8004abe:	f7fb fff1 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0x0C, 0x0000); //External Display Interface Control 1
 8004ac2:	2100      	movs	r1, #0
 8004ac4:	200c      	movs	r0, #12
 8004ac6:	f7fb ffed 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0x0D, 0x0000); //Frame Maker Position
 8004aca:	2100      	movs	r1, #0
 8004acc:	200d      	movs	r0, #13
 8004ace:	f7fb ffe9 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0x0F, 0x0000); //External Display Interface Control 2
 8004ad2:	2100      	movs	r1, #0
 8004ad4:	200f      	movs	r0, #15
 8004ad6:	f7fb ffe5 	bl	8000aa4 <LCD_WriteReg>
		HAL_Delay(20);
 8004ada:	2014      	movs	r0, #20
 8004adc:	f002 f850 	bl	8006b80 <HAL_Delay>
		//TFT 液晶彩色图像显示方法14
		LCD_WriteReg(0x10, 0x16B0); //0x14B0 //Power Control 1
 8004ae0:	f241 61b0 	movw	r1, #5808	; 0x16b0
 8004ae4:	2010      	movs	r0, #16
 8004ae6:	f7fb ffdd 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0x11, 0x0001); //0x0007 //Power Control 2
 8004aea:	2101      	movs	r1, #1
 8004aec:	2011      	movs	r0, #17
 8004aee:	f7fb ffd9 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0x17, 0x0001); //0x0000 //Power Control 3
 8004af2:	2101      	movs	r1, #1
 8004af4:	2017      	movs	r0, #23
 8004af6:	f7fb ffd5 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0x12, 0x0138); //0x013B //Power Control 4
 8004afa:	f44f 719c 	mov.w	r1, #312	; 0x138
 8004afe:	2012      	movs	r0, #18
 8004b00:	f7fb ffd0 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0x13, 0x0800); //0x0800 //Power Control 5
 8004b04:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8004b08:	2013      	movs	r0, #19
 8004b0a:	f7fb ffcb 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0x29, 0x0009); //NVM read data 2
 8004b0e:	2109      	movs	r1, #9
 8004b10:	2029      	movs	r0, #41	; 0x29
 8004b12:	f7fb ffc7 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0x2a, 0x0009); //NVM read data 3
 8004b16:	2109      	movs	r1, #9
 8004b18:	202a      	movs	r0, #42	; 0x2a
 8004b1a:	f7fb ffc3 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0xa4, 0x0000);
 8004b1e:	2100      	movs	r1, #0
 8004b20:	20a4      	movs	r0, #164	; 0xa4
 8004b22:	f7fb ffbf 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0x50, 0x0000); //设置操作窗口的X轴开始列
 8004b26:	2100      	movs	r1, #0
 8004b28:	2050      	movs	r0, #80	; 0x50
 8004b2a:	f7fb ffbb 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0x51, 0x00EF); //设置操作窗口的X轴结束列
 8004b2e:	21ef      	movs	r1, #239	; 0xef
 8004b30:	2051      	movs	r0, #81	; 0x51
 8004b32:	f7fb ffb7 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0x52, 0x0000); //设置操作窗口的Y轴开始行
 8004b36:	2100      	movs	r1, #0
 8004b38:	2052      	movs	r0, #82	; 0x52
 8004b3a:	f7fb ffb3 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0x53, 0x013F); //设置操作窗口的Y轴结束行
 8004b3e:	f240 113f 	movw	r1, #319	; 0x13f
 8004b42:	2053      	movs	r0, #83	; 0x53
 8004b44:	f7fb ffae 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0x60, 0x2700); //Driver Output Control
 8004b48:	f44f 511c 	mov.w	r1, #9984	; 0x2700
 8004b4c:	2060      	movs	r0, #96	; 0x60
 8004b4e:	f7fb ffa9 	bl	8000aa4 <LCD_WriteReg>
		//设置屏幕的点数以及扫描的起始行
		LCD_WriteReg(0x61, 0x0001); //Driver Output Control
 8004b52:	2101      	movs	r1, #1
 8004b54:	2061      	movs	r0, #97	; 0x61
 8004b56:	f7fb ffa5 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0x6A, 0x0000); //Vertical Scroll Control
 8004b5a:	2100      	movs	r1, #0
 8004b5c:	206a      	movs	r0, #106	; 0x6a
 8004b5e:	f7fb ffa1 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0x80, 0x0000); //Display Position – Partial Display 1
 8004b62:	2100      	movs	r1, #0
 8004b64:	2080      	movs	r0, #128	; 0x80
 8004b66:	f7fb ff9d 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0x81, 0x0000); //RAM Address Start – Partial Display 1
 8004b6a:	2100      	movs	r1, #0
 8004b6c:	2081      	movs	r0, #129	; 0x81
 8004b6e:	f7fb ff99 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0x82, 0x0000); //RAM address End - Partial Display 1
 8004b72:	2100      	movs	r1, #0
 8004b74:	2082      	movs	r0, #130	; 0x82
 8004b76:	f7fb ff95 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0x83, 0x0000); //Display Position – Partial Display 2
 8004b7a:	2100      	movs	r1, #0
 8004b7c:	2083      	movs	r0, #131	; 0x83
 8004b7e:	f7fb ff91 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0x84, 0x0000); //RAM Address Start – Partial Display 2
 8004b82:	2100      	movs	r1, #0
 8004b84:	2084      	movs	r0, #132	; 0x84
 8004b86:	f7fb ff8d 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0x85, 0x0000); //RAM address End – Partail Display2
 8004b8a:	2100      	movs	r1, #0
 8004b8c:	2085      	movs	r0, #133	; 0x85
 8004b8e:	f7fb ff89 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0x90, 0x0013); //Frame Cycle Control
 8004b92:	2113      	movs	r1, #19
 8004b94:	2090      	movs	r0, #144	; 0x90
 8004b96:	f7fb ff85 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0x92, 0x0000);  //Panel Interface Control 2
 8004b9a:	2100      	movs	r1, #0
 8004b9c:	2092      	movs	r0, #146	; 0x92
 8004b9e:	f7fb ff81 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0x93, 0x0003); //Panel Interface control 3
 8004ba2:	2103      	movs	r1, #3
 8004ba4:	2093      	movs	r0, #147	; 0x93
 8004ba6:	f7fb ff7d 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0x95, 0x0110);  //Frame Cycle Control
 8004baa:	f44f 7188 	mov.w	r1, #272	; 0x110
 8004bae:	2095      	movs	r0, #149	; 0x95
 8004bb0:	f7fb ff78 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0x07, 0x0173);
 8004bb4:	f240 1173 	movw	r1, #371	; 0x173
 8004bb8:	2007      	movs	r0, #7
 8004bba:	f7fb ff73 	bl	8000aa4 <LCD_WriteReg>
		HAL_Delay(50);
 8004bbe:	2032      	movs	r0, #50	; 0x32
 8004bc0:	f001 ffde 	bl	8006b80 <HAL_Delay>
 8004bc4:	f001 b8f2 	b.w	8005dac <LCD_Init+0x3e34>
	} else if (lcddev.id == 0x1505)  //OK
 8004bc8:	4b8d      	ldr	r3, [pc, #564]	; (8004e00 <LCD_Init+0x2e88>)
 8004bca:	889b      	ldrh	r3, [r3, #4]
 8004bcc:	f241 5205 	movw	r2, #5381	; 0x1505
 8004bd0:	4293      	cmp	r3, r2
 8004bd2:	f040 8117 	bne.w	8004e04 <LCD_Init+0x2e8c>
			{
		// second release on 3/5  ,luminance is acceptable,water wave appear during camera preview
		LCD_WriteReg(0x0007, 0x0000);
 8004bd6:	2100      	movs	r1, #0
 8004bd8:	2007      	movs	r0, #7
 8004bda:	f7fb ff63 	bl	8000aa4 <LCD_WriteReg>
		HAL_Delay(50);
 8004bde:	2032      	movs	r0, #50	; 0x32
 8004be0:	f001 ffce 	bl	8006b80 <HAL_Delay>
		LCD_WriteReg(0x0012, 0x011C);  //0x011A   why need to set several times?
 8004be4:	f44f 718e 	mov.w	r1, #284	; 0x11c
 8004be8:	2012      	movs	r0, #18
 8004bea:	f7fb ff5b 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0x00A4, 0x0001);  //NVM
 8004bee:	2101      	movs	r1, #1
 8004bf0:	20a4      	movs	r0, #164	; 0xa4
 8004bf2:	f7fb ff57 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0x0008, 0x000F);
 8004bf6:	210f      	movs	r1, #15
 8004bf8:	2008      	movs	r0, #8
 8004bfa:	f7fb ff53 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0x000A, 0x0008);
 8004bfe:	2108      	movs	r1, #8
 8004c00:	200a      	movs	r0, #10
 8004c02:	f7fb ff4f 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0x000D, 0x0008);
 8004c06:	2108      	movs	r1, #8
 8004c08:	200d      	movs	r0, #13
 8004c0a:	f7fb ff4b 	bl	8000aa4 <LCD_WriteReg>
		//伽马校正
		LCD_WriteReg(0x0030, 0x0707);
 8004c0e:	f240 7107 	movw	r1, #1799	; 0x707
 8004c12:	2030      	movs	r0, #48	; 0x30
 8004c14:	f7fb ff46 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0x0031, 0x0007); //0x0707
 8004c18:	2107      	movs	r1, #7
 8004c1a:	2031      	movs	r0, #49	; 0x31
 8004c1c:	f7fb ff42 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0x0032, 0x0603);
 8004c20:	f240 6103 	movw	r1, #1539	; 0x603
 8004c24:	2032      	movs	r0, #50	; 0x32
 8004c26:	f7fb ff3d 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0x0033, 0x0700);
 8004c2a:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 8004c2e:	2033      	movs	r0, #51	; 0x33
 8004c30:	f7fb ff38 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0x0034, 0x0202);
 8004c34:	f240 2102 	movw	r1, #514	; 0x202
 8004c38:	2034      	movs	r0, #52	; 0x34
 8004c3a:	f7fb ff33 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0x0035, 0x0002); //?0x0606
 8004c3e:	2102      	movs	r1, #2
 8004c40:	2035      	movs	r0, #53	; 0x35
 8004c42:	f7fb ff2f 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0x0036, 0x1F0F);
 8004c46:	f641 710f 	movw	r1, #7951	; 0x1f0f
 8004c4a:	2036      	movs	r0, #54	; 0x36
 8004c4c:	f7fb ff2a 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0x0037, 0x0707); //0x0f0f  0x0105
 8004c50:	f240 7107 	movw	r1, #1799	; 0x707
 8004c54:	2037      	movs	r0, #55	; 0x37
 8004c56:	f7fb ff25 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0x0038, 0x0000);
 8004c5a:	2100      	movs	r1, #0
 8004c5c:	2038      	movs	r0, #56	; 0x38
 8004c5e:	f7fb ff21 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0x0039, 0x0000);
 8004c62:	2100      	movs	r1, #0
 8004c64:	2039      	movs	r0, #57	; 0x39
 8004c66:	f7fb ff1d 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0x003A, 0x0707);
 8004c6a:	f240 7107 	movw	r1, #1799	; 0x707
 8004c6e:	203a      	movs	r0, #58	; 0x3a
 8004c70:	f7fb ff18 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0x003B, 0x0000); //0x0303
 8004c74:	2100      	movs	r1, #0
 8004c76:	203b      	movs	r0, #59	; 0x3b
 8004c78:	f7fb ff14 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0x003C, 0x0007); //?0x0707
 8004c7c:	2107      	movs	r1, #7
 8004c7e:	203c      	movs	r0, #60	; 0x3c
 8004c80:	f7fb ff10 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0x003D, 0x0000); //0x1313//0x1f08
 8004c84:	2100      	movs	r1, #0
 8004c86:	203d      	movs	r0, #61	; 0x3d
 8004c88:	f7fb ff0c 	bl	8000aa4 <LCD_WriteReg>
		HAL_Delay(50);
 8004c8c:	2032      	movs	r0, #50	; 0x32
 8004c8e:	f001 ff77 	bl	8006b80 <HAL_Delay>
		LCD_WriteReg(0x0007, 0x0001);
 8004c92:	2101      	movs	r1, #1
 8004c94:	2007      	movs	r0, #7
 8004c96:	f7fb ff05 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0x0017, 0x0001); //开启电源
 8004c9a:	2101      	movs	r1, #1
 8004c9c:	2017      	movs	r0, #23
 8004c9e:	f7fb ff01 	bl	8000aa4 <LCD_WriteReg>
		HAL_Delay(50);
 8004ca2:	2032      	movs	r0, #50	; 0x32
 8004ca4:	f001 ff6c 	bl	8006b80 <HAL_Delay>
		//电源配置
		LCD_WriteReg(0x0010, 0x17A0);
 8004ca8:	f44f 51bd 	mov.w	r1, #6048	; 0x17a0
 8004cac:	2010      	movs	r0, #16
 8004cae:	f7fb fef9 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0x0011, 0x0217); //reference voltage VC[2:0]   Vciout = 1.00*Vcivl
 8004cb2:	f240 2117 	movw	r1, #535	; 0x217
 8004cb6:	2011      	movs	r0, #17
 8004cb8:	f7fb fef4 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0x0012, 0x011E); //0x011c  //Vreg1out = Vcilvl*1.80   is it the same as Vgama1out ?
 8004cbc:	f44f 718f 	mov.w	r1, #286	; 0x11e
 8004cc0:	2012      	movs	r0, #18
 8004cc2:	f7fb feef 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0x0013, 0x0F00); //VDV[4:0]-->VCOM Amplitude VcomL = VcomH - Vcom Ampl
 8004cc6:	f44f 6170 	mov.w	r1, #3840	; 0xf00
 8004cca:	2013      	movs	r0, #19
 8004ccc:	f7fb feea 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0x002A, 0x0000);
 8004cd0:	2100      	movs	r1, #0
 8004cd2:	202a      	movs	r0, #42	; 0x2a
 8004cd4:	f7fb fee6 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0x0029, 0x000A); //0x0001F  Vcomh = VCM1[4:0]*Vreg1out    gate source voltage??
 8004cd8:	210a      	movs	r1, #10
 8004cda:	2029      	movs	r0, #41	; 0x29
 8004cdc:	f7fb fee2 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0x0012, 0x013E); // 0x013C  power supply on
 8004ce0:	f44f 719f 	mov.w	r1, #318	; 0x13e
 8004ce4:	2012      	movs	r0, #18
 8004ce6:	f7fb fedd 	bl	8000aa4 <LCD_WriteReg>
		//Coordinates Control//
		LCD_WriteReg(0x0050, 0x0000);        //0x0e00
 8004cea:	2100      	movs	r1, #0
 8004cec:	2050      	movs	r0, #80	; 0x50
 8004cee:	f7fb fed9 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0x0051, 0x00EF);
 8004cf2:	21ef      	movs	r1, #239	; 0xef
 8004cf4:	2051      	movs	r0, #81	; 0x51
 8004cf6:	f7fb fed5 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0x0052, 0x0000);
 8004cfa:	2100      	movs	r1, #0
 8004cfc:	2052      	movs	r0, #82	; 0x52
 8004cfe:	f7fb fed1 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0x0053, 0x013F);
 8004d02:	f240 113f 	movw	r1, #319	; 0x13f
 8004d06:	2053      	movs	r0, #83	; 0x53
 8004d08:	f7fb fecc 	bl	8000aa4 <LCD_WriteReg>
		//Pannel Image Control//
		LCD_WriteReg(0x0060, 0x2700);
 8004d0c:	f44f 511c 	mov.w	r1, #9984	; 0x2700
 8004d10:	2060      	movs	r0, #96	; 0x60
 8004d12:	f7fb fec7 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0x0061, 0x0001);
 8004d16:	2101      	movs	r1, #1
 8004d18:	2061      	movs	r0, #97	; 0x61
 8004d1a:	f7fb fec3 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0x006A, 0x0000);
 8004d1e:	2100      	movs	r1, #0
 8004d20:	206a      	movs	r0, #106	; 0x6a
 8004d22:	f7fb febf 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0x0080, 0x0000);
 8004d26:	2100      	movs	r1, #0
 8004d28:	2080      	movs	r0, #128	; 0x80
 8004d2a:	f7fb febb 	bl	8000aa4 <LCD_WriteReg>
		//Partial Image Control//
		LCD_WriteReg(0x0081, 0x0000);
 8004d2e:	2100      	movs	r1, #0
 8004d30:	2081      	movs	r0, #129	; 0x81
 8004d32:	f7fb feb7 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0x0082, 0x0000);
 8004d36:	2100      	movs	r1, #0
 8004d38:	2082      	movs	r0, #130	; 0x82
 8004d3a:	f7fb feb3 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0x0083, 0x0000);
 8004d3e:	2100      	movs	r1, #0
 8004d40:	2083      	movs	r0, #131	; 0x83
 8004d42:	f7fb feaf 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0x0084, 0x0000);
 8004d46:	2100      	movs	r1, #0
 8004d48:	2084      	movs	r0, #132	; 0x84
 8004d4a:	f7fb feab 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0x0085, 0x0000);
 8004d4e:	2100      	movs	r1, #0
 8004d50:	2085      	movs	r0, #133	; 0x85
 8004d52:	f7fb fea7 	bl	8000aa4 <LCD_WriteReg>
		//Panel Interface Control//
		LCD_WriteReg(0x0090, 0x0013);        //0x0010 frenqucy
 8004d56:	2113      	movs	r1, #19
 8004d58:	2090      	movs	r0, #144	; 0x90
 8004d5a:	f7fb fea3 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0x0092, 0x0300);
 8004d5e:	f44f 7140 	mov.w	r1, #768	; 0x300
 8004d62:	2092      	movs	r0, #146	; 0x92
 8004d64:	f7fb fe9e 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0x0093, 0x0005);
 8004d68:	2105      	movs	r1, #5
 8004d6a:	2093      	movs	r0, #147	; 0x93
 8004d6c:	f7fb fe9a 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0x0095, 0x0000);
 8004d70:	2100      	movs	r1, #0
 8004d72:	2095      	movs	r0, #149	; 0x95
 8004d74:	f7fb fe96 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0x0097, 0x0000);
 8004d78:	2100      	movs	r1, #0
 8004d7a:	2097      	movs	r0, #151	; 0x97
 8004d7c:	f7fb fe92 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0x0098, 0x0000);
 8004d80:	2100      	movs	r1, #0
 8004d82:	2098      	movs	r0, #152	; 0x98
 8004d84:	f7fb fe8e 	bl	8000aa4 <LCD_WriteReg>

		LCD_WriteReg(0x0001, 0x0100);
 8004d88:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004d8c:	2001      	movs	r0, #1
 8004d8e:	f7fb fe89 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0x0002, 0x0700);
 8004d92:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 8004d96:	2002      	movs	r0, #2
 8004d98:	f7fb fe84 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0x0003, 0x1038);        //扫描方向 上->下  左->右
 8004d9c:	f241 0138 	movw	r1, #4152	; 0x1038
 8004da0:	2003      	movs	r0, #3
 8004da2:	f7fb fe7f 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0x0004, 0x0000);
 8004da6:	2100      	movs	r1, #0
 8004da8:	2004      	movs	r0, #4
 8004daa:	f7fb fe7b 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0x000C, 0x0000);
 8004dae:	2100      	movs	r1, #0
 8004db0:	200c      	movs	r0, #12
 8004db2:	f7fb fe77 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0x000F, 0x0000);
 8004db6:	2100      	movs	r1, #0
 8004db8:	200f      	movs	r0, #15
 8004dba:	f7fb fe73 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0x0020, 0x0000);
 8004dbe:	2100      	movs	r1, #0
 8004dc0:	2020      	movs	r0, #32
 8004dc2:	f7fb fe6f 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0x0021, 0x0000);
 8004dc6:	2100      	movs	r1, #0
 8004dc8:	2021      	movs	r0, #33	; 0x21
 8004dca:	f7fb fe6b 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0x0007, 0x0021);
 8004dce:	2121      	movs	r1, #33	; 0x21
 8004dd0:	2007      	movs	r0, #7
 8004dd2:	f7fb fe67 	bl	8000aa4 <LCD_WriteReg>
		HAL_Delay(20);
 8004dd6:	2014      	movs	r0, #20
 8004dd8:	f001 fed2 	bl	8006b80 <HAL_Delay>
		LCD_WriteReg(0x0007, 0x0061);
 8004ddc:	2161      	movs	r1, #97	; 0x61
 8004dde:	2007      	movs	r0, #7
 8004de0:	f7fb fe60 	bl	8000aa4 <LCD_WriteReg>
		HAL_Delay(20);
 8004de4:	2014      	movs	r0, #20
 8004de6:	f001 fecb 	bl	8006b80 <HAL_Delay>
		LCD_WriteReg(0x0007, 0x0173);
 8004dea:	f240 1173 	movw	r1, #371	; 0x173
 8004dee:	2007      	movs	r0, #7
 8004df0:	f7fb fe58 	bl	8000aa4 <LCD_WriteReg>
		HAL_Delay(20);
 8004df4:	2014      	movs	r0, #20
 8004df6:	f001 fec3 	bl	8006b80 <HAL_Delay>
 8004dfa:	f000 bfd7 	b.w	8005dac <LCD_Init+0x3e34>
 8004dfe:	bf00      	nop
 8004e00:	20000080 	.word	0x20000080
	} else if (lcddev.id == 0xB505) {
 8004e04:	4bf0      	ldr	r3, [pc, #960]	; (80051c8 <LCD_Init+0x3250>)
 8004e06:	889b      	ldrh	r3, [r3, #4]
 8004e08:	f24b 5205 	movw	r2, #46341	; 0xb505
 8004e0c:	4293      	cmp	r3, r2
 8004e0e:	f040 8103 	bne.w	8005018 <LCD_Init+0x30a0>
		LCD_WriteReg(0x0000, 0x0000);
 8004e12:	2100      	movs	r1, #0
 8004e14:	2000      	movs	r0, #0
 8004e16:	f7fb fe45 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0x0000, 0x0000);
 8004e1a:	2100      	movs	r1, #0
 8004e1c:	2000      	movs	r0, #0
 8004e1e:	f7fb fe41 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0x0000, 0x0000);
 8004e22:	2100      	movs	r1, #0
 8004e24:	2000      	movs	r0, #0
 8004e26:	f7fb fe3d 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0x0000, 0x0000);
 8004e2a:	2100      	movs	r1, #0
 8004e2c:	2000      	movs	r0, #0
 8004e2e:	f7fb fe39 	bl	8000aa4 <LCD_WriteReg>

		LCD_WriteReg(0x00a4, 0x0001);
 8004e32:	2101      	movs	r1, #1
 8004e34:	20a4      	movs	r0, #164	; 0xa4
 8004e36:	f7fb fe35 	bl	8000aa4 <LCD_WriteReg>
		HAL_Delay(20);
 8004e3a:	2014      	movs	r0, #20
 8004e3c:	f001 fea0 	bl	8006b80 <HAL_Delay>
		LCD_WriteReg(0x0060, 0x2700);
 8004e40:	f44f 511c 	mov.w	r1, #9984	; 0x2700
 8004e44:	2060      	movs	r0, #96	; 0x60
 8004e46:	f7fb fe2d 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0x0008, 0x0202);
 8004e4a:	f240 2102 	movw	r1, #514	; 0x202
 8004e4e:	2008      	movs	r0, #8
 8004e50:	f7fb fe28 	bl	8000aa4 <LCD_WriteReg>

		LCD_WriteReg(0x0030, 0x0214);
 8004e54:	f44f 7105 	mov.w	r1, #532	; 0x214
 8004e58:	2030      	movs	r0, #48	; 0x30
 8004e5a:	f7fb fe23 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0x0031, 0x3715);
 8004e5e:	f243 7115 	movw	r1, #14101	; 0x3715
 8004e62:	2031      	movs	r0, #49	; 0x31
 8004e64:	f7fb fe1e 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0x0032, 0x0604);
 8004e68:	f240 6104 	movw	r1, #1540	; 0x604
 8004e6c:	2032      	movs	r0, #50	; 0x32
 8004e6e:	f7fb fe19 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0x0033, 0x0e16);
 8004e72:	f640 6116 	movw	r1, #3606	; 0xe16
 8004e76:	2033      	movs	r0, #51	; 0x33
 8004e78:	f7fb fe14 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0x0034, 0x2211);
 8004e7c:	f242 2111 	movw	r1, #8721	; 0x2211
 8004e80:	2034      	movs	r0, #52	; 0x34
 8004e82:	f7fb fe0f 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0x0035, 0x1500);
 8004e86:	f44f 51a8 	mov.w	r1, #5376	; 0x1500
 8004e8a:	2035      	movs	r0, #53	; 0x35
 8004e8c:	f7fb fe0a 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0x0036, 0x8507);
 8004e90:	f248 5107 	movw	r1, #34055	; 0x8507
 8004e94:	2036      	movs	r0, #54	; 0x36
 8004e96:	f7fb fe05 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0x0037, 0x1407);
 8004e9a:	f241 4107 	movw	r1, #5127	; 0x1407
 8004e9e:	2037      	movs	r0, #55	; 0x37
 8004ea0:	f7fb fe00 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0x0038, 0x1403);
 8004ea4:	f241 4103 	movw	r1, #5123	; 0x1403
 8004ea8:	2038      	movs	r0, #56	; 0x38
 8004eaa:	f7fb fdfb 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0x0039, 0x0020);
 8004eae:	2120      	movs	r1, #32
 8004eb0:	2039      	movs	r0, #57	; 0x39
 8004eb2:	f7fb fdf7 	bl	8000aa4 <LCD_WriteReg>

		LCD_WriteReg(0x0090, 0x001a);
 8004eb6:	211a      	movs	r1, #26
 8004eb8:	2090      	movs	r0, #144	; 0x90
 8004eba:	f7fb fdf3 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0x0010, 0x0000);
 8004ebe:	2100      	movs	r1, #0
 8004ec0:	2010      	movs	r0, #16
 8004ec2:	f7fb fdef 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0x0011, 0x0007);
 8004ec6:	2107      	movs	r1, #7
 8004ec8:	2011      	movs	r0, #17
 8004eca:	f7fb fdeb 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0x0012, 0x0000);
 8004ece:	2100      	movs	r1, #0
 8004ed0:	2012      	movs	r0, #18
 8004ed2:	f7fb fde7 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0x0013, 0x0000);
 8004ed6:	2100      	movs	r1, #0
 8004ed8:	2013      	movs	r0, #19
 8004eda:	f7fb fde3 	bl	8000aa4 <LCD_WriteReg>
		HAL_Delay(20);
 8004ede:	2014      	movs	r0, #20
 8004ee0:	f001 fe4e 	bl	8006b80 <HAL_Delay>

		LCD_WriteReg(0x0010, 0x0730);
 8004ee4:	f44f 61e6 	mov.w	r1, #1840	; 0x730
 8004ee8:	2010      	movs	r0, #16
 8004eea:	f7fb fddb 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0x0011, 0x0137);
 8004eee:	f240 1137 	movw	r1, #311	; 0x137
 8004ef2:	2011      	movs	r0, #17
 8004ef4:	f7fb fdd6 	bl	8000aa4 <LCD_WriteReg>
		HAL_Delay(20);
 8004ef8:	2014      	movs	r0, #20
 8004efa:	f001 fe41 	bl	8006b80 <HAL_Delay>

		LCD_WriteReg(0x0012, 0x01b8);
 8004efe:	f44f 71dc 	mov.w	r1, #440	; 0x1b8
 8004f02:	2012      	movs	r0, #18
 8004f04:	f7fb fdce 	bl	8000aa4 <LCD_WriteReg>
		HAL_Delay(20);
 8004f08:	2014      	movs	r0, #20
 8004f0a:	f001 fe39 	bl	8006b80 <HAL_Delay>

		LCD_WriteReg(0x0013, 0x0f00);
 8004f0e:	f44f 6170 	mov.w	r1, #3840	; 0xf00
 8004f12:	2013      	movs	r0, #19
 8004f14:	f7fb fdc6 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0x002a, 0x0080);
 8004f18:	2180      	movs	r1, #128	; 0x80
 8004f1a:	202a      	movs	r0, #42	; 0x2a
 8004f1c:	f7fb fdc2 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0x0029, 0x0048);
 8004f20:	2148      	movs	r1, #72	; 0x48
 8004f22:	2029      	movs	r0, #41	; 0x29
 8004f24:	f7fb fdbe 	bl	8000aa4 <LCD_WriteReg>
		HAL_Delay(20);
 8004f28:	2014      	movs	r0, #20
 8004f2a:	f001 fe29 	bl	8006b80 <HAL_Delay>

		LCD_WriteReg(0x0001, 0x0100);
 8004f2e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004f32:	2001      	movs	r0, #1
 8004f34:	f7fb fdb6 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0x0002, 0x0700);
 8004f38:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 8004f3c:	2002      	movs	r0, #2
 8004f3e:	f7fb fdb1 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0x0003, 0x1038);        //扫描方向 上->下  左->右
 8004f42:	f241 0138 	movw	r1, #4152	; 0x1038
 8004f46:	2003      	movs	r0, #3
 8004f48:	f7fb fdac 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0x0008, 0x0202);
 8004f4c:	f240 2102 	movw	r1, #514	; 0x202
 8004f50:	2008      	movs	r0, #8
 8004f52:	f7fb fda7 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0x000a, 0x0000);
 8004f56:	2100      	movs	r1, #0
 8004f58:	200a      	movs	r0, #10
 8004f5a:	f7fb fda3 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0x000c, 0x0000);
 8004f5e:	2100      	movs	r1, #0
 8004f60:	200c      	movs	r0, #12
 8004f62:	f7fb fd9f 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0x000d, 0x0000);
 8004f66:	2100      	movs	r1, #0
 8004f68:	200d      	movs	r0, #13
 8004f6a:	f7fb fd9b 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0x000e, 0x0030);
 8004f6e:	2130      	movs	r1, #48	; 0x30
 8004f70:	200e      	movs	r0, #14
 8004f72:	f7fb fd97 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0x0050, 0x0000);
 8004f76:	2100      	movs	r1, #0
 8004f78:	2050      	movs	r0, #80	; 0x50
 8004f7a:	f7fb fd93 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0x0051, 0x00ef);
 8004f7e:	21ef      	movs	r1, #239	; 0xef
 8004f80:	2051      	movs	r0, #81	; 0x51
 8004f82:	f7fb fd8f 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0x0052, 0x0000);
 8004f86:	2100      	movs	r1, #0
 8004f88:	2052      	movs	r0, #82	; 0x52
 8004f8a:	f7fb fd8b 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0x0053, 0x013f);
 8004f8e:	f240 113f 	movw	r1, #319	; 0x13f
 8004f92:	2053      	movs	r0, #83	; 0x53
 8004f94:	f7fb fd86 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0x0060, 0x2700);
 8004f98:	f44f 511c 	mov.w	r1, #9984	; 0x2700
 8004f9c:	2060      	movs	r0, #96	; 0x60
 8004f9e:	f7fb fd81 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0x0061, 0x0001);
 8004fa2:	2101      	movs	r1, #1
 8004fa4:	2061      	movs	r0, #97	; 0x61
 8004fa6:	f7fb fd7d 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0x006a, 0x0000);
 8004faa:	2100      	movs	r1, #0
 8004fac:	206a      	movs	r0, #106	; 0x6a
 8004fae:	f7fb fd79 	bl	8000aa4 <LCD_WriteReg>
		//LCD_WriteReg(0x0080,0x0000);
		//LCD_WriteReg(0x0081,0x0000);
		LCD_WriteReg(0x0090, 0X0011);
 8004fb2:	2111      	movs	r1, #17
 8004fb4:	2090      	movs	r0, #144	; 0x90
 8004fb6:	f7fb fd75 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0x0092, 0x0600);
 8004fba:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8004fbe:	2092      	movs	r0, #146	; 0x92
 8004fc0:	f7fb fd70 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0x0093, 0x0402);
 8004fc4:	f240 4102 	movw	r1, #1026	; 0x402
 8004fc8:	2093      	movs	r0, #147	; 0x93
 8004fca:	f7fb fd6b 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0x0094, 0x0002);
 8004fce:	2102      	movs	r1, #2
 8004fd0:	2094      	movs	r0, #148	; 0x94
 8004fd2:	f7fb fd67 	bl	8000aa4 <LCD_WriteReg>
		HAL_Delay(20);
 8004fd6:	2014      	movs	r0, #20
 8004fd8:	f001 fdd2 	bl	8006b80 <HAL_Delay>

		LCD_WriteReg(0x0007, 0x0001);
 8004fdc:	2101      	movs	r1, #1
 8004fde:	2007      	movs	r0, #7
 8004fe0:	f7fb fd60 	bl	8000aa4 <LCD_WriteReg>
		HAL_Delay(20);
 8004fe4:	2014      	movs	r0, #20
 8004fe6:	f001 fdcb 	bl	8006b80 <HAL_Delay>
		LCD_WriteReg(0x0007, 0x0061);
 8004fea:	2161      	movs	r1, #97	; 0x61
 8004fec:	2007      	movs	r0, #7
 8004fee:	f7fb fd59 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0x0007, 0x0173);
 8004ff2:	f240 1173 	movw	r1, #371	; 0x173
 8004ff6:	2007      	movs	r0, #7
 8004ff8:	f7fb fd54 	bl	8000aa4 <LCD_WriteReg>

		LCD_WriteReg(0x0020, 0x0000);
 8004ffc:	2100      	movs	r1, #0
 8004ffe:	2020      	movs	r0, #32
 8005000:	f7fb fd50 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0x0021, 0x0000);
 8005004:	2100      	movs	r1, #0
 8005006:	2021      	movs	r0, #33	; 0x21
 8005008:	f7fb fd4c 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0x00, 0x22);
 800500c:	2122      	movs	r1, #34	; 0x22
 800500e:	2000      	movs	r0, #0
 8005010:	f7fb fd48 	bl	8000aa4 <LCD_WriteReg>
 8005014:	f000 beca 	b.w	8005dac <LCD_Init+0x3e34>
	} else if (lcddev.id == 0xC505) {
 8005018:	4b6b      	ldr	r3, [pc, #428]	; (80051c8 <LCD_Init+0x3250>)
 800501a:	889b      	ldrh	r3, [r3, #4]
 800501c:	f24c 5205 	movw	r2, #50437	; 0xc505
 8005020:	4293      	cmp	r3, r2
 8005022:	f040 80d3 	bne.w	80051cc <LCD_Init+0x3254>
		LCD_WriteReg(0x0000, 0x0000);
 8005026:	2100      	movs	r1, #0
 8005028:	2000      	movs	r0, #0
 800502a:	f7fb fd3b 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0x0000, 0x0000);
 800502e:	2100      	movs	r1, #0
 8005030:	2000      	movs	r0, #0
 8005032:	f7fb fd37 	bl	8000aa4 <LCD_WriteReg>
		HAL_Delay(20);
 8005036:	2014      	movs	r0, #20
 8005038:	f001 fda2 	bl	8006b80 <HAL_Delay>
		LCD_WriteReg(0x0000, 0x0000);
 800503c:	2100      	movs	r1, #0
 800503e:	2000      	movs	r0, #0
 8005040:	f7fb fd30 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0x0000, 0x0000);
 8005044:	2100      	movs	r1, #0
 8005046:	2000      	movs	r0, #0
 8005048:	f7fb fd2c 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0x0000, 0x0000);
 800504c:	2100      	movs	r1, #0
 800504e:	2000      	movs	r0, #0
 8005050:	f7fb fd28 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0x0000, 0x0000);
 8005054:	2100      	movs	r1, #0
 8005056:	2000      	movs	r0, #0
 8005058:	f7fb fd24 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0x00a4, 0x0001);
 800505c:	2101      	movs	r1, #1
 800505e:	20a4      	movs	r0, #164	; 0xa4
 8005060:	f7fb fd20 	bl	8000aa4 <LCD_WriteReg>
		HAL_Delay(20);
 8005064:	2014      	movs	r0, #20
 8005066:	f001 fd8b 	bl	8006b80 <HAL_Delay>
		LCD_WriteReg(0x0060, 0x2700);
 800506a:	f44f 511c 	mov.w	r1, #9984	; 0x2700
 800506e:	2060      	movs	r0, #96	; 0x60
 8005070:	f7fb fd18 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0x0008, 0x0806);
 8005074:	f640 0106 	movw	r1, #2054	; 0x806
 8005078:	2008      	movs	r0, #8
 800507a:	f7fb fd13 	bl	8000aa4 <LCD_WriteReg>

		LCD_WriteReg(0x0030, 0x0703);		//gamma setting
 800507e:	f240 7103 	movw	r1, #1795	; 0x703
 8005082:	2030      	movs	r0, #48	; 0x30
 8005084:	f7fb fd0e 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0x0031, 0x0001);
 8005088:	2101      	movs	r1, #1
 800508a:	2031      	movs	r0, #49	; 0x31
 800508c:	f7fb fd0a 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0x0032, 0x0004);
 8005090:	2104      	movs	r1, #4
 8005092:	2032      	movs	r0, #50	; 0x32
 8005094:	f7fb fd06 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0x0033, 0x0102);
 8005098:	f44f 7181 	mov.w	r1, #258	; 0x102
 800509c:	2033      	movs	r0, #51	; 0x33
 800509e:	f7fb fd01 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0x0034, 0x0300);
 80050a2:	f44f 7140 	mov.w	r1, #768	; 0x300
 80050a6:	2034      	movs	r0, #52	; 0x34
 80050a8:	f7fb fcfc 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0x0035, 0x0103);
 80050ac:	f240 1103 	movw	r1, #259	; 0x103
 80050b0:	2035      	movs	r0, #53	; 0x35
 80050b2:	f7fb fcf7 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0x0036, 0x001F);
 80050b6:	211f      	movs	r1, #31
 80050b8:	2036      	movs	r0, #54	; 0x36
 80050ba:	f7fb fcf3 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0x0037, 0x0703);
 80050be:	f240 7103 	movw	r1, #1795	; 0x703
 80050c2:	2037      	movs	r0, #55	; 0x37
 80050c4:	f7fb fcee 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0x0038, 0x0001);
 80050c8:	2101      	movs	r1, #1
 80050ca:	2038      	movs	r0, #56	; 0x38
 80050cc:	f7fb fcea 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0x0039, 0x0004);
 80050d0:	2104      	movs	r1, #4
 80050d2:	2039      	movs	r0, #57	; 0x39
 80050d4:	f7fb fce6 	bl	8000aa4 <LCD_WriteReg>

		LCD_WriteReg(0x0090, 0x0015);	//80Hz
 80050d8:	2115      	movs	r1, #21
 80050da:	2090      	movs	r0, #144	; 0x90
 80050dc:	f7fb fce2 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0x0010, 0X0410);	//BT,AP
 80050e0:	f44f 6182 	mov.w	r1, #1040	; 0x410
 80050e4:	2010      	movs	r0, #16
 80050e6:	f7fb fcdd 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0x0011, 0x0247);	//DC1,DC0,VC
 80050ea:	f240 2147 	movw	r1, #583	; 0x247
 80050ee:	2011      	movs	r0, #17
 80050f0:	f7fb fcd8 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0x0012, 0x01BC);
 80050f4:	f44f 71de 	mov.w	r1, #444	; 0x1bc
 80050f8:	2012      	movs	r0, #18
 80050fa:	f7fb fcd3 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0x0013, 0x0e00);
 80050fe:	f44f 6160 	mov.w	r1, #3584	; 0xe00
 8005102:	2013      	movs	r0, #19
 8005104:	f7fb fcce 	bl	8000aa4 <LCD_WriteReg>
		HAL_Delay(120);
 8005108:	2078      	movs	r0, #120	; 0x78
 800510a:	f001 fd39 	bl	8006b80 <HAL_Delay>
		LCD_WriteReg(0x0001, 0x0100);
 800510e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8005112:	2001      	movs	r0, #1
 8005114:	f7fb fcc6 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0x0002, 0x0200);
 8005118:	f44f 7100 	mov.w	r1, #512	; 0x200
 800511c:	2002      	movs	r0, #2
 800511e:	f7fb fcc1 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0x0003, 0x1030);
 8005122:	f241 0130 	movw	r1, #4144	; 0x1030
 8005126:	2003      	movs	r0, #3
 8005128:	f7fb fcbc 	bl	8000aa4 <LCD_WriteReg>

		LCD_WriteReg(0x000A, 0x0008);
 800512c:	2108      	movs	r1, #8
 800512e:	200a      	movs	r0, #10
 8005130:	f7fb fcb8 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0x000C, 0x0000);
 8005134:	2100      	movs	r1, #0
 8005136:	200c      	movs	r0, #12
 8005138:	f7fb fcb4 	bl	8000aa4 <LCD_WriteReg>

		LCD_WriteReg(0x000E, 0x0020);
 800513c:	2120      	movs	r1, #32
 800513e:	200e      	movs	r0, #14
 8005140:	f7fb fcb0 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0x000F, 0x0000);
 8005144:	2100      	movs	r1, #0
 8005146:	200f      	movs	r0, #15
 8005148:	f7fb fcac 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0x0020, 0x0000);	//H Start
 800514c:	2100      	movs	r1, #0
 800514e:	2020      	movs	r0, #32
 8005150:	f7fb fca8 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0x0021, 0x0000);	//V Start
 8005154:	2100      	movs	r1, #0
 8005156:	2021      	movs	r0, #33	; 0x21
 8005158:	f7fb fca4 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0x002A, 0x003D);	//vcom2
 800515c:	213d      	movs	r1, #61	; 0x3d
 800515e:	202a      	movs	r0, #42	; 0x2a
 8005160:	f7fb fca0 	bl	8000aa4 <LCD_WriteReg>
		HAL_Delay(20);
 8005164:	2014      	movs	r0, #20
 8005166:	f001 fd0b 	bl	8006b80 <HAL_Delay>
		LCD_WriteReg(0x0029, 0x002d);
 800516a:	212d      	movs	r1, #45	; 0x2d
 800516c:	2029      	movs	r0, #41	; 0x29
 800516e:	f7fb fc99 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0x0050, 0x0000);
 8005172:	2100      	movs	r1, #0
 8005174:	2050      	movs	r0, #80	; 0x50
 8005176:	f7fb fc95 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0x0051, 0xD0EF);
 800517a:	f24d 01ef 	movw	r1, #53487	; 0xd0ef
 800517e:	2051      	movs	r0, #81	; 0x51
 8005180:	f7fb fc90 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0x0052, 0x0000);
 8005184:	2100      	movs	r1, #0
 8005186:	2052      	movs	r0, #82	; 0x52
 8005188:	f7fb fc8c 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0x0053, 0x013F);
 800518c:	f240 113f 	movw	r1, #319	; 0x13f
 8005190:	2053      	movs	r0, #83	; 0x53
 8005192:	f7fb fc87 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0x0061, 0x0000);
 8005196:	2100      	movs	r1, #0
 8005198:	2061      	movs	r0, #97	; 0x61
 800519a:	f7fb fc83 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0x006A, 0x0000);
 800519e:	2100      	movs	r1, #0
 80051a0:	206a      	movs	r0, #106	; 0x6a
 80051a2:	f7fb fc7f 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0x0092, 0x0300);
 80051a6:	f44f 7140 	mov.w	r1, #768	; 0x300
 80051aa:	2092      	movs	r0, #146	; 0x92
 80051ac:	f7fb fc7a 	bl	8000aa4 <LCD_WriteReg>

		LCD_WriteReg(0x0093, 0x0005);
 80051b0:	2105      	movs	r1, #5
 80051b2:	2093      	movs	r0, #147	; 0x93
 80051b4:	f7fb fc76 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0x0007, 0x0100);
 80051b8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80051bc:	2007      	movs	r0, #7
 80051be:	f7fb fc71 	bl	8000aa4 <LCD_WriteReg>
 80051c2:	f000 bdf3 	b.w	8005dac <LCD_Init+0x3e34>
 80051c6:	bf00      	nop
 80051c8:	20000080 	.word	0x20000080
	} else if (lcddev.id == 0x8989)	//OK |/|/|
 80051cc:	4bc2      	ldr	r3, [pc, #776]	; (80054d8 <LCD_Init+0x3560>)
 80051ce:	889b      	ldrh	r3, [r3, #4]
 80051d0:	f648 1289 	movw	r2, #35209	; 0x8989
 80051d4:	4293      	cmp	r3, r2
 80051d6:	f040 80bc 	bne.w	8005352 <LCD_Init+0x33da>
			{
		LCD_WriteReg(0x0000, 0x0001);	//打开晶振
 80051da:	2101      	movs	r1, #1
 80051dc:	2000      	movs	r0, #0
 80051de:	f7fb fc61 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0x0003, 0xA8A4);	//0xA8A4
 80051e2:	f64a 01a4 	movw	r1, #43172	; 0xa8a4
 80051e6:	2003      	movs	r0, #3
 80051e8:	f7fb fc5c 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0x000C, 0x0000);
 80051ec:	2100      	movs	r1, #0
 80051ee:	200c      	movs	r0, #12
 80051f0:	f7fb fc58 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0x000D, 0x080C);
 80051f4:	f640 010c 	movw	r1, #2060	; 0x80c
 80051f8:	200d      	movs	r0, #13
 80051fa:	f7fb fc53 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0x000E, 0x2B00);
 80051fe:	f44f 512c 	mov.w	r1, #11008	; 0x2b00
 8005202:	200e      	movs	r0, #14
 8005204:	f7fb fc4e 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0x001E, 0x00B0);
 8005208:	21b0      	movs	r1, #176	; 0xb0
 800520a:	201e      	movs	r0, #30
 800520c:	f7fb fc4a 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0x0001, 0x2B3F);	//驱动输出控制320*240  0x6B3F
 8005210:	f642 313f 	movw	r1, #11071	; 0x2b3f
 8005214:	2001      	movs	r0, #1
 8005216:	f7fb fc45 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0x0002, 0x0600);
 800521a:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800521e:	2002      	movs	r0, #2
 8005220:	f7fb fc40 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0x0010, 0x0000);
 8005224:	2100      	movs	r1, #0
 8005226:	2010      	movs	r0, #16
 8005228:	f7fb fc3c 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0x0011, 0x6078); //定义数据格式  16位色 		横屏 0x6058
 800522c:	f246 0178 	movw	r1, #24696	; 0x6078
 8005230:	2011      	movs	r0, #17
 8005232:	f7fb fc37 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0x0005, 0x0000);
 8005236:	2100      	movs	r1, #0
 8005238:	2005      	movs	r0, #5
 800523a:	f7fb fc33 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0x0006, 0x0000);
 800523e:	2100      	movs	r1, #0
 8005240:	2006      	movs	r0, #6
 8005242:	f7fb fc2f 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0x0016, 0xEF1C);
 8005246:	f64e 711c 	movw	r1, #61212	; 0xef1c
 800524a:	2016      	movs	r0, #22
 800524c:	f7fb fc2a 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0x0017, 0x0003);
 8005250:	2103      	movs	r1, #3
 8005252:	2017      	movs	r0, #23
 8005254:	f7fb fc26 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0x0007, 0x0233); //0x0233
 8005258:	f240 2133 	movw	r1, #563	; 0x233
 800525c:	2007      	movs	r0, #7
 800525e:	f7fb fc21 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0x000B, 0x0000);
 8005262:	2100      	movs	r1, #0
 8005264:	200b      	movs	r0, #11
 8005266:	f7fb fc1d 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0x000F, 0x0000); //扫描开始地址
 800526a:	2100      	movs	r1, #0
 800526c:	200f      	movs	r0, #15
 800526e:	f7fb fc19 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0x0041, 0x0000);
 8005272:	2100      	movs	r1, #0
 8005274:	2041      	movs	r0, #65	; 0x41
 8005276:	f7fb fc15 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0x0042, 0x0000);
 800527a:	2100      	movs	r1, #0
 800527c:	2042      	movs	r0, #66	; 0x42
 800527e:	f7fb fc11 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0x0048, 0x0000);
 8005282:	2100      	movs	r1, #0
 8005284:	2048      	movs	r0, #72	; 0x48
 8005286:	f7fb fc0d 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0x0049, 0x013F);
 800528a:	f240 113f 	movw	r1, #319	; 0x13f
 800528e:	2049      	movs	r0, #73	; 0x49
 8005290:	f7fb fc08 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0x004A, 0x0000);
 8005294:	2100      	movs	r1, #0
 8005296:	204a      	movs	r0, #74	; 0x4a
 8005298:	f7fb fc04 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0x004B, 0x0000);
 800529c:	2100      	movs	r1, #0
 800529e:	204b      	movs	r0, #75	; 0x4b
 80052a0:	f7fb fc00 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0x0044, 0xEF00);
 80052a4:	f44f 416f 	mov.w	r1, #61184	; 0xef00
 80052a8:	2044      	movs	r0, #68	; 0x44
 80052aa:	f7fb fbfb 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0x0045, 0x0000);
 80052ae:	2100      	movs	r1, #0
 80052b0:	2045      	movs	r0, #69	; 0x45
 80052b2:	f7fb fbf7 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0x0046, 0x013F);
 80052b6:	f240 113f 	movw	r1, #319	; 0x13f
 80052ba:	2046      	movs	r0, #70	; 0x46
 80052bc:	f7fb fbf2 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0x0030, 0x0707);
 80052c0:	f240 7107 	movw	r1, #1799	; 0x707
 80052c4:	2030      	movs	r0, #48	; 0x30
 80052c6:	f7fb fbed 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0x0031, 0x0204);
 80052ca:	f44f 7101 	mov.w	r1, #516	; 0x204
 80052ce:	2031      	movs	r0, #49	; 0x31
 80052d0:	f7fb fbe8 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0x0032, 0x0204);
 80052d4:	f44f 7101 	mov.w	r1, #516	; 0x204
 80052d8:	2032      	movs	r0, #50	; 0x32
 80052da:	f7fb fbe3 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0x0033, 0x0502);
 80052de:	f240 5102 	movw	r1, #1282	; 0x502
 80052e2:	2033      	movs	r0, #51	; 0x33
 80052e4:	f7fb fbde 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0x0034, 0x0507);
 80052e8:	f240 5107 	movw	r1, #1287	; 0x507
 80052ec:	2034      	movs	r0, #52	; 0x34
 80052ee:	f7fb fbd9 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0x0035, 0x0204);
 80052f2:	f44f 7101 	mov.w	r1, #516	; 0x204
 80052f6:	2035      	movs	r0, #53	; 0x35
 80052f8:	f7fb fbd4 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0x0036, 0x0204);
 80052fc:	f44f 7101 	mov.w	r1, #516	; 0x204
 8005300:	2036      	movs	r0, #54	; 0x36
 8005302:	f7fb fbcf 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0x0037, 0x0502);
 8005306:	f240 5102 	movw	r1, #1282	; 0x502
 800530a:	2037      	movs	r0, #55	; 0x37
 800530c:	f7fb fbca 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0x003A, 0x0302);
 8005310:	f240 3102 	movw	r1, #770	; 0x302
 8005314:	203a      	movs	r0, #58	; 0x3a
 8005316:	f7fb fbc5 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0x003B, 0x0302);
 800531a:	f240 3102 	movw	r1, #770	; 0x302
 800531e:	203b      	movs	r0, #59	; 0x3b
 8005320:	f7fb fbc0 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0x0023, 0x0000);
 8005324:	2100      	movs	r1, #0
 8005326:	2023      	movs	r0, #35	; 0x23
 8005328:	f7fb fbbc 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0x0024, 0x0000);
 800532c:	2100      	movs	r1, #0
 800532e:	2024      	movs	r0, #36	; 0x24
 8005330:	f7fb fbb8 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0x0025, 0x8000);
 8005334:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005338:	2025      	movs	r0, #37	; 0x25
 800533a:	f7fb fbb3 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0x004f, 0);        //行首址0
 800533e:	2100      	movs	r1, #0
 8005340:	204f      	movs	r0, #79	; 0x4f
 8005342:	f7fb fbaf 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0x004e, 0);        //列首址0
 8005346:	2100      	movs	r1, #0
 8005348:	204e      	movs	r0, #78	; 0x4e
 800534a:	f7fb fbab 	bl	8000aa4 <LCD_WriteReg>
 800534e:	f000 bd2d 	b.w	8005dac <LCD_Init+0x3e34>
	} else if (lcddev.id == 0x4531)        //OK |/|/|
 8005352:	4b61      	ldr	r3, [pc, #388]	; (80054d8 <LCD_Init+0x3560>)
 8005354:	889b      	ldrh	r3, [r3, #4]
 8005356:	f244 5231 	movw	r2, #17713	; 0x4531
 800535a:	4293      	cmp	r3, r2
 800535c:	f040 80be 	bne.w	80054dc <LCD_Init+0x3564>
			{
		LCD_WriteReg(0X00, 0X0001);
 8005360:	2101      	movs	r1, #1
 8005362:	2000      	movs	r0, #0
 8005364:	f7fb fb9e 	bl	8000aa4 <LCD_WriteReg>
		HAL_Delay(10);
 8005368:	200a      	movs	r0, #10
 800536a:	f001 fc09 	bl	8006b80 <HAL_Delay>
		LCD_WriteReg(0X10, 0X1628);
 800536e:	f241 6128 	movw	r1, #5672	; 0x1628
 8005372:	2010      	movs	r0, #16
 8005374:	f7fb fb96 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0X12, 0X000e);        //0x0006
 8005378:	210e      	movs	r1, #14
 800537a:	2012      	movs	r0, #18
 800537c:	f7fb fb92 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0X13, 0X0A39);
 8005380:	f640 2139 	movw	r1, #2617	; 0xa39
 8005384:	2013      	movs	r0, #19
 8005386:	f7fb fb8d 	bl	8000aa4 <LCD_WriteReg>
		HAL_Delay(10);
 800538a:	200a      	movs	r0, #10
 800538c:	f001 fbf8 	bl	8006b80 <HAL_Delay>
		LCD_WriteReg(0X11, 0X0040);
 8005390:	2140      	movs	r1, #64	; 0x40
 8005392:	2011      	movs	r0, #17
 8005394:	f7fb fb86 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0X15, 0X0050);
 8005398:	2150      	movs	r1, #80	; 0x50
 800539a:	2015      	movs	r0, #21
 800539c:	f7fb fb82 	bl	8000aa4 <LCD_WriteReg>
		HAL_Delay(10);
 80053a0:	200a      	movs	r0, #10
 80053a2:	f001 fbed 	bl	8006b80 <HAL_Delay>
		LCD_WriteReg(0X12, 0X001e);        //16
 80053a6:	211e      	movs	r1, #30
 80053a8:	2012      	movs	r0, #18
 80053aa:	f7fb fb7b 	bl	8000aa4 <LCD_WriteReg>
		HAL_Delay(10);
 80053ae:	200a      	movs	r0, #10
 80053b0:	f001 fbe6 	bl	8006b80 <HAL_Delay>
		LCD_WriteReg(0X10, 0X1620);
 80053b4:	f44f 51b1 	mov.w	r1, #5664	; 0x1620
 80053b8:	2010      	movs	r0, #16
 80053ba:	f7fb fb73 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0X13, 0X2A39);
 80053be:	f642 2139 	movw	r1, #10809	; 0x2a39
 80053c2:	2013      	movs	r0, #19
 80053c4:	f7fb fb6e 	bl	8000aa4 <LCD_WriteReg>
		HAL_Delay(10);
 80053c8:	200a      	movs	r0, #10
 80053ca:	f001 fbd9 	bl	8006b80 <HAL_Delay>
		LCD_WriteReg(0X01, 0X0100);
 80053ce:	f44f 7180 	mov.w	r1, #256	; 0x100
 80053d2:	2001      	movs	r0, #1
 80053d4:	f7fb fb66 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0X02, 0X0300);
 80053d8:	f44f 7140 	mov.w	r1, #768	; 0x300
 80053dc:	2002      	movs	r0, #2
 80053de:	f7fb fb61 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0X03, 0X1038);        //改变方向的
 80053e2:	f241 0138 	movw	r1, #4152	; 0x1038
 80053e6:	2003      	movs	r0, #3
 80053e8:	f7fb fb5c 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0X08, 0X0202);
 80053ec:	f240 2102 	movw	r1, #514	; 0x202
 80053f0:	2008      	movs	r0, #8
 80053f2:	f7fb fb57 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0X0A, 0X0008);
 80053f6:	2108      	movs	r1, #8
 80053f8:	200a      	movs	r0, #10
 80053fa:	f7fb fb53 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0X30, 0X0000);
 80053fe:	2100      	movs	r1, #0
 8005400:	2030      	movs	r0, #48	; 0x30
 8005402:	f7fb fb4f 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0X31, 0X0402);
 8005406:	f240 4102 	movw	r1, #1026	; 0x402
 800540a:	2031      	movs	r0, #49	; 0x31
 800540c:	f7fb fb4a 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0X32, 0X0106);
 8005410:	f44f 7183 	mov.w	r1, #262	; 0x106
 8005414:	2032      	movs	r0, #50	; 0x32
 8005416:	f7fb fb45 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0X33, 0X0503);
 800541a:	f240 5103 	movw	r1, #1283	; 0x503
 800541e:	2033      	movs	r0, #51	; 0x33
 8005420:	f7fb fb40 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0X34, 0X0104);
 8005424:	f44f 7182 	mov.w	r1, #260	; 0x104
 8005428:	2034      	movs	r0, #52	; 0x34
 800542a:	f7fb fb3b 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0X35, 0X0301);
 800542e:	f240 3101 	movw	r1, #769	; 0x301
 8005432:	2035      	movs	r0, #53	; 0x35
 8005434:	f7fb fb36 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0X36, 0X0707);
 8005438:	f240 7107 	movw	r1, #1799	; 0x707
 800543c:	2036      	movs	r0, #54	; 0x36
 800543e:	f7fb fb31 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0X37, 0X0305);
 8005442:	f240 3105 	movw	r1, #773	; 0x305
 8005446:	2037      	movs	r0, #55	; 0x37
 8005448:	f7fb fb2c 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0X38, 0X0208);
 800544c:	f44f 7102 	mov.w	r1, #520	; 0x208
 8005450:	2038      	movs	r0, #56	; 0x38
 8005452:	f7fb fb27 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0X39, 0X0F0B);
 8005456:	f640 710b 	movw	r1, #3851	; 0xf0b
 800545a:	2039      	movs	r0, #57	; 0x39
 800545c:	f7fb fb22 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0X41, 0X0002);
 8005460:	2102      	movs	r1, #2
 8005462:	2041      	movs	r0, #65	; 0x41
 8005464:	f7fb fb1e 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0X60, 0X2700);
 8005468:	f44f 511c 	mov.w	r1, #9984	; 0x2700
 800546c:	2060      	movs	r0, #96	; 0x60
 800546e:	f7fb fb19 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0X61, 0X0001);
 8005472:	2101      	movs	r1, #1
 8005474:	2061      	movs	r0, #97	; 0x61
 8005476:	f7fb fb15 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0X90, 0X0210);
 800547a:	f44f 7104 	mov.w	r1, #528	; 0x210
 800547e:	2090      	movs	r0, #144	; 0x90
 8005480:	f7fb fb10 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0X92, 0X010A);
 8005484:	f44f 7185 	mov.w	r1, #266	; 0x10a
 8005488:	2092      	movs	r0, #146	; 0x92
 800548a:	f7fb fb0b 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0X93, 0X0004);
 800548e:	2104      	movs	r1, #4
 8005490:	2093      	movs	r0, #147	; 0x93
 8005492:	f7fb fb07 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0XA0, 0X0100);
 8005496:	f44f 7180 	mov.w	r1, #256	; 0x100
 800549a:	20a0      	movs	r0, #160	; 0xa0
 800549c:	f7fb fb02 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0X07, 0X0001);
 80054a0:	2101      	movs	r1, #1
 80054a2:	2007      	movs	r0, #7
 80054a4:	f7fb fafe 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0X07, 0X0021);
 80054a8:	2121      	movs	r1, #33	; 0x21
 80054aa:	2007      	movs	r0, #7
 80054ac:	f7fb fafa 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0X07, 0X0023);
 80054b0:	2123      	movs	r1, #35	; 0x23
 80054b2:	2007      	movs	r0, #7
 80054b4:	f7fb faf6 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0X07, 0X0033);
 80054b8:	2133      	movs	r1, #51	; 0x33
 80054ba:	2007      	movs	r0, #7
 80054bc:	f7fb faf2 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0X07, 0X0133);
 80054c0:	f240 1133 	movw	r1, #307	; 0x133
 80054c4:	2007      	movs	r0, #7
 80054c6:	f7fb faed 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0XA0, 0X0000);
 80054ca:	2100      	movs	r1, #0
 80054cc:	20a0      	movs	r0, #160	; 0xa0
 80054ce:	f7fb fae9 	bl	8000aa4 <LCD_WriteReg>
 80054d2:	f000 bc6b 	b.w	8005dac <LCD_Init+0x3e34>
 80054d6:	bf00      	nop
 80054d8:	20000080 	.word	0x20000080
	} else if (lcddev.id == 0x4535) {
 80054dc:	4b5b      	ldr	r3, [pc, #364]	; (800564c <LCD_Init+0x36d4>)
 80054de:	889b      	ldrh	r3, [r3, #4]
 80054e0:	f244 5235 	movw	r2, #17717	; 0x4535
 80054e4:	4293      	cmp	r3, r2
 80054e6:	f040 80b3 	bne.w	8005650 <LCD_Init+0x36d8>
		LCD_WriteReg(0X15, 0X0030);
 80054ea:	2130      	movs	r1, #48	; 0x30
 80054ec:	2015      	movs	r0, #21
 80054ee:	f7fb fad9 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0X9A, 0X0010);
 80054f2:	2110      	movs	r1, #16
 80054f4:	209a      	movs	r0, #154	; 0x9a
 80054f6:	f7fb fad5 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0X11, 0X0020);
 80054fa:	2120      	movs	r1, #32
 80054fc:	2011      	movs	r0, #17
 80054fe:	f7fb fad1 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0X10, 0X3428);
 8005502:	f243 4128 	movw	r1, #13352	; 0x3428
 8005506:	2010      	movs	r0, #16
 8005508:	f7fb facc 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0X12, 0X0002);        //16
 800550c:	2102      	movs	r1, #2
 800550e:	2012      	movs	r0, #18
 8005510:	f7fb fac8 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0X13, 0X1038);
 8005514:	f241 0138 	movw	r1, #4152	; 0x1038
 8005518:	2013      	movs	r0, #19
 800551a:	f7fb fac3 	bl	8000aa4 <LCD_WriteReg>
		HAL_Delay(40);
 800551e:	2028      	movs	r0, #40	; 0x28
 8005520:	f001 fb2e 	bl	8006b80 <HAL_Delay>
		LCD_WriteReg(0X12, 0X0012);        //16
 8005524:	2112      	movs	r1, #18
 8005526:	2012      	movs	r0, #18
 8005528:	f7fb fabc 	bl	8000aa4 <LCD_WriteReg>
		HAL_Delay(40);
 800552c:	2028      	movs	r0, #40	; 0x28
 800552e:	f001 fb27 	bl	8006b80 <HAL_Delay>
		LCD_WriteReg(0X10, 0X3420);
 8005532:	f243 4120 	movw	r1, #13344	; 0x3420
 8005536:	2010      	movs	r0, #16
 8005538:	f7fb fab4 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0X13, 0X3038);
 800553c:	f243 0138 	movw	r1, #12344	; 0x3038
 8005540:	2013      	movs	r0, #19
 8005542:	f7fb faaf 	bl	8000aa4 <LCD_WriteReg>
		HAL_Delay(70);
 8005546:	2046      	movs	r0, #70	; 0x46
 8005548:	f001 fb1a 	bl	8006b80 <HAL_Delay>
		LCD_WriteReg(0X30, 0X0000);
 800554c:	2100      	movs	r1, #0
 800554e:	2030      	movs	r0, #48	; 0x30
 8005550:	f7fb faa8 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0X31, 0X0402);
 8005554:	f240 4102 	movw	r1, #1026	; 0x402
 8005558:	2031      	movs	r0, #49	; 0x31
 800555a:	f7fb faa3 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0X32, 0X0307);
 800555e:	f240 3107 	movw	r1, #775	; 0x307
 8005562:	2032      	movs	r0, #50	; 0x32
 8005564:	f7fb fa9e 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0X33, 0X0304);
 8005568:	f44f 7141 	mov.w	r1, #772	; 0x304
 800556c:	2033      	movs	r0, #51	; 0x33
 800556e:	f7fb fa99 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0X34, 0X0004);
 8005572:	2104      	movs	r1, #4
 8005574:	2034      	movs	r0, #52	; 0x34
 8005576:	f7fb fa95 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0X35, 0X0401);
 800557a:	f240 4101 	movw	r1, #1025	; 0x401
 800557e:	2035      	movs	r0, #53	; 0x35
 8005580:	f7fb fa90 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0X36, 0X0707);
 8005584:	f240 7107 	movw	r1, #1799	; 0x707
 8005588:	2036      	movs	r0, #54	; 0x36
 800558a:	f7fb fa8b 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0X37, 0X0305);
 800558e:	f240 3105 	movw	r1, #773	; 0x305
 8005592:	2037      	movs	r0, #55	; 0x37
 8005594:	f7fb fa86 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0X38, 0X0610);
 8005598:	f44f 61c2 	mov.w	r1, #1552	; 0x610
 800559c:	2038      	movs	r0, #56	; 0x38
 800559e:	f7fb fa81 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0X39, 0X0610);
 80055a2:	f44f 61c2 	mov.w	r1, #1552	; 0x610
 80055a6:	2039      	movs	r0, #57	; 0x39
 80055a8:	f7fb fa7c 	bl	8000aa4 <LCD_WriteReg>

		LCD_WriteReg(0X01, 0X0100);
 80055ac:	f44f 7180 	mov.w	r1, #256	; 0x100
 80055b0:	2001      	movs	r0, #1
 80055b2:	f7fb fa77 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0X02, 0X0300);
 80055b6:	f44f 7140 	mov.w	r1, #768	; 0x300
 80055ba:	2002      	movs	r0, #2
 80055bc:	f7fb fa72 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0X03, 0X1030);        //改变方向的
 80055c0:	f241 0130 	movw	r1, #4144	; 0x1030
 80055c4:	2003      	movs	r0, #3
 80055c6:	f7fb fa6d 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0X08, 0X0808);
 80055ca:	f640 0108 	movw	r1, #2056	; 0x808
 80055ce:	2008      	movs	r0, #8
 80055d0:	f7fb fa68 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0X0A, 0X0008);
 80055d4:	2108      	movs	r1, #8
 80055d6:	200a      	movs	r0, #10
 80055d8:	f7fb fa64 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0X60, 0X2700);
 80055dc:	f44f 511c 	mov.w	r1, #9984	; 0x2700
 80055e0:	2060      	movs	r0, #96	; 0x60
 80055e2:	f7fb fa5f 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0X61, 0X0001);
 80055e6:	2101      	movs	r1, #1
 80055e8:	2061      	movs	r0, #97	; 0x61
 80055ea:	f7fb fa5b 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0X90, 0X013E);
 80055ee:	f44f 719f 	mov.w	r1, #318	; 0x13e
 80055f2:	2090      	movs	r0, #144	; 0x90
 80055f4:	f7fb fa56 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0X92, 0X0100);
 80055f8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80055fc:	2092      	movs	r0, #146	; 0x92
 80055fe:	f7fb fa51 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0X93, 0X0100);
 8005602:	f44f 7180 	mov.w	r1, #256	; 0x100
 8005606:	2093      	movs	r0, #147	; 0x93
 8005608:	f7fb fa4c 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0XA0, 0X3000);
 800560c:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 8005610:	20a0      	movs	r0, #160	; 0xa0
 8005612:	f7fb fa47 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0XA3, 0X0010);
 8005616:	2110      	movs	r1, #16
 8005618:	20a3      	movs	r0, #163	; 0xa3
 800561a:	f7fb fa43 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0X07, 0X0001);
 800561e:	2101      	movs	r1, #1
 8005620:	2007      	movs	r0, #7
 8005622:	f7fb fa3f 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0X07, 0X0021);
 8005626:	2121      	movs	r1, #33	; 0x21
 8005628:	2007      	movs	r0, #7
 800562a:	f7fb fa3b 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0X07, 0X0023);
 800562e:	2123      	movs	r1, #35	; 0x23
 8005630:	2007      	movs	r0, #7
 8005632:	f7fb fa37 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0X07, 0X0033);
 8005636:	2133      	movs	r1, #51	; 0x33
 8005638:	2007      	movs	r0, #7
 800563a:	f7fb fa33 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0X07, 0X0133);
 800563e:	f240 1133 	movw	r1, #307	; 0x133
 8005642:	2007      	movs	r0, #7
 8005644:	f7fb fa2e 	bl	8000aa4 <LCD_WriteReg>
 8005648:	e3b0      	b.n	8005dac <LCD_Init+0x3e34>
 800564a:	bf00      	nop
 800564c:	20000080 	.word	0x20000080
	} else if (lcddev.id == 0X1963) {
 8005650:	4ba8      	ldr	r3, [pc, #672]	; (80058f4 <LCD_Init+0x397c>)
 8005652:	889b      	ldrh	r3, [r3, #4]
 8005654:	f641 1263 	movw	r2, #6499	; 0x1963
 8005658:	4293      	cmp	r3, r2
 800565a:	f040 83a7 	bne.w	8005dac <LCD_Init+0x3e34>
		LCD_WR_REG(0xE2);	//Set PLL with OSC = 10MHz (hardware),	Multiplier N = 35, 250MHz < VCO < 800MHz = OSC*(N+1), VCO = 300MHz
 800565e:	20e2      	movs	r0, #226	; 0xe2
 8005660:	f7fb f994 	bl	800098c <LCD_WR_REG>
		LCD_WR_DATA(0x1D);		//参数1 
 8005664:	4ba4      	ldr	r3, [pc, #656]	; (80058f8 <LCD_Init+0x3980>)
 8005666:	f44f 7280 	mov.w	r2, #256	; 0x100
 800566a:	611a      	str	r2, [r3, #16]
 800566c:	4ba2      	ldr	r3, [pc, #648]	; (80058f8 <LCD_Init+0x3980>)
 800566e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005672:	615a      	str	r2, [r3, #20]
 8005674:	4ba1      	ldr	r3, [pc, #644]	; (80058fc <LCD_Init+0x3984>)
 8005676:	221d      	movs	r2, #29
 8005678:	60da      	str	r2, [r3, #12]
 800567a:	4b9f      	ldr	r3, [pc, #636]	; (80058f8 <LCD_Init+0x3980>)
 800567c:	2280      	movs	r2, #128	; 0x80
 800567e:	615a      	str	r2, [r3, #20]
 8005680:	4b9d      	ldr	r3, [pc, #628]	; (80058f8 <LCD_Init+0x3980>)
 8005682:	2280      	movs	r2, #128	; 0x80
 8005684:	611a      	str	r2, [r3, #16]
 8005686:	4b9c      	ldr	r3, [pc, #624]	; (80058f8 <LCD_Init+0x3980>)
 8005688:	f44f 7200 	mov.w	r2, #512	; 0x200
 800568c:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(0x02);		//参数2 Divider M = 2, PLL = 300/(M+1) = 100MHz
 800568e:	4b9a      	ldr	r3, [pc, #616]	; (80058f8 <LCD_Init+0x3980>)
 8005690:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005694:	611a      	str	r2, [r3, #16]
 8005696:	4b98      	ldr	r3, [pc, #608]	; (80058f8 <LCD_Init+0x3980>)
 8005698:	f44f 7200 	mov.w	r2, #512	; 0x200
 800569c:	615a      	str	r2, [r3, #20]
 800569e:	4b97      	ldr	r3, [pc, #604]	; (80058fc <LCD_Init+0x3984>)
 80056a0:	2202      	movs	r2, #2
 80056a2:	60da      	str	r2, [r3, #12]
 80056a4:	4b94      	ldr	r3, [pc, #592]	; (80058f8 <LCD_Init+0x3980>)
 80056a6:	2280      	movs	r2, #128	; 0x80
 80056a8:	615a      	str	r2, [r3, #20]
 80056aa:	4b93      	ldr	r3, [pc, #588]	; (80058f8 <LCD_Init+0x3980>)
 80056ac:	2280      	movs	r2, #128	; 0x80
 80056ae:	611a      	str	r2, [r3, #16]
 80056b0:	4b91      	ldr	r3, [pc, #580]	; (80058f8 <LCD_Init+0x3980>)
 80056b2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80056b6:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(0x04);		//参数3 Validate M and N values   
 80056b8:	4b8f      	ldr	r3, [pc, #572]	; (80058f8 <LCD_Init+0x3980>)
 80056ba:	f44f 7280 	mov.w	r2, #256	; 0x100
 80056be:	611a      	str	r2, [r3, #16]
 80056c0:	4b8d      	ldr	r3, [pc, #564]	; (80058f8 <LCD_Init+0x3980>)
 80056c2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80056c6:	615a      	str	r2, [r3, #20]
 80056c8:	4b8c      	ldr	r3, [pc, #560]	; (80058fc <LCD_Init+0x3984>)
 80056ca:	2204      	movs	r2, #4
 80056cc:	60da      	str	r2, [r3, #12]
 80056ce:	4b8a      	ldr	r3, [pc, #552]	; (80058f8 <LCD_Init+0x3980>)
 80056d0:	2280      	movs	r2, #128	; 0x80
 80056d2:	615a      	str	r2, [r3, #20]
 80056d4:	4b88      	ldr	r3, [pc, #544]	; (80058f8 <LCD_Init+0x3980>)
 80056d6:	2280      	movs	r2, #128	; 0x80
 80056d8:	611a      	str	r2, [r3, #16]
 80056da:	4b87      	ldr	r3, [pc, #540]	; (80058f8 <LCD_Init+0x3980>)
 80056dc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80056e0:	611a      	str	r2, [r3, #16]
//		delay_us(100);
		HAL_Delay(1);
 80056e2:	2001      	movs	r0, #1
 80056e4:	f001 fa4c 	bl	8006b80 <HAL_Delay>
		LCD_WR_REG(0xE0);		// Start PLL command
 80056e8:	20e0      	movs	r0, #224	; 0xe0
 80056ea:	f7fb f94f 	bl	800098c <LCD_WR_REG>
		LCD_WR_DATA(0x01);		// enable PLL
 80056ee:	4b82      	ldr	r3, [pc, #520]	; (80058f8 <LCD_Init+0x3980>)
 80056f0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80056f4:	611a      	str	r2, [r3, #16]
 80056f6:	4b80      	ldr	r3, [pc, #512]	; (80058f8 <LCD_Init+0x3980>)
 80056f8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80056fc:	615a      	str	r2, [r3, #20]
 80056fe:	4b7f      	ldr	r3, [pc, #508]	; (80058fc <LCD_Init+0x3984>)
 8005700:	2201      	movs	r2, #1
 8005702:	60da      	str	r2, [r3, #12]
 8005704:	4b7c      	ldr	r3, [pc, #496]	; (80058f8 <LCD_Init+0x3980>)
 8005706:	2280      	movs	r2, #128	; 0x80
 8005708:	615a      	str	r2, [r3, #20]
 800570a:	4b7b      	ldr	r3, [pc, #492]	; (80058f8 <LCD_Init+0x3980>)
 800570c:	2280      	movs	r2, #128	; 0x80
 800570e:	611a      	str	r2, [r3, #16]
 8005710:	4b79      	ldr	r3, [pc, #484]	; (80058f8 <LCD_Init+0x3980>)
 8005712:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005716:	611a      	str	r2, [r3, #16]
		HAL_Delay(10);
 8005718:	200a      	movs	r0, #10
 800571a:	f001 fa31 	bl	8006b80 <HAL_Delay>
		LCD_WR_REG(0xE0);		// Start PLL command again
 800571e:	20e0      	movs	r0, #224	; 0xe0
 8005720:	f7fb f934 	bl	800098c <LCD_WR_REG>
		LCD_WR_DATA(0x03);		// now, use PLL output as system clock	
 8005724:	4b74      	ldr	r3, [pc, #464]	; (80058f8 <LCD_Init+0x3980>)
 8005726:	f44f 7280 	mov.w	r2, #256	; 0x100
 800572a:	611a      	str	r2, [r3, #16]
 800572c:	4b72      	ldr	r3, [pc, #456]	; (80058f8 <LCD_Init+0x3980>)
 800572e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005732:	615a      	str	r2, [r3, #20]
 8005734:	4b71      	ldr	r3, [pc, #452]	; (80058fc <LCD_Init+0x3984>)
 8005736:	2203      	movs	r2, #3
 8005738:	60da      	str	r2, [r3, #12]
 800573a:	4b6f      	ldr	r3, [pc, #444]	; (80058f8 <LCD_Init+0x3980>)
 800573c:	2280      	movs	r2, #128	; 0x80
 800573e:	615a      	str	r2, [r3, #20]
 8005740:	4b6d      	ldr	r3, [pc, #436]	; (80058f8 <LCD_Init+0x3980>)
 8005742:	2280      	movs	r2, #128	; 0x80
 8005744:	611a      	str	r2, [r3, #16]
 8005746:	4b6c      	ldr	r3, [pc, #432]	; (80058f8 <LCD_Init+0x3980>)
 8005748:	f44f 7200 	mov.w	r2, #512	; 0x200
 800574c:	611a      	str	r2, [r3, #16]
		HAL_Delay(12);
 800574e:	200c      	movs	r0, #12
 8005750:	f001 fa16 	bl	8006b80 <HAL_Delay>
		LCD_WR_REG(0x01);		//软复位
 8005754:	2001      	movs	r0, #1
 8005756:	f7fb f919 	bl	800098c <LCD_WR_REG>
		HAL_Delay(10);
 800575a:	200a      	movs	r0, #10
 800575c:	f001 fa10 	bl	8006b80 <HAL_Delay>

		LCD_WR_REG(0xE6);		//设置像素频率,33Mhz
 8005760:	20e6      	movs	r0, #230	; 0xe6
 8005762:	f7fb f913 	bl	800098c <LCD_WR_REG>
		LCD_WR_DATA(0x2F);
 8005766:	4b64      	ldr	r3, [pc, #400]	; (80058f8 <LCD_Init+0x3980>)
 8005768:	f44f 7280 	mov.w	r2, #256	; 0x100
 800576c:	611a      	str	r2, [r3, #16]
 800576e:	4b62      	ldr	r3, [pc, #392]	; (80058f8 <LCD_Init+0x3980>)
 8005770:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005774:	615a      	str	r2, [r3, #20]
 8005776:	4b61      	ldr	r3, [pc, #388]	; (80058fc <LCD_Init+0x3984>)
 8005778:	222f      	movs	r2, #47	; 0x2f
 800577a:	60da      	str	r2, [r3, #12]
 800577c:	4b5e      	ldr	r3, [pc, #376]	; (80058f8 <LCD_Init+0x3980>)
 800577e:	2280      	movs	r2, #128	; 0x80
 8005780:	615a      	str	r2, [r3, #20]
 8005782:	4b5d      	ldr	r3, [pc, #372]	; (80058f8 <LCD_Init+0x3980>)
 8005784:	2280      	movs	r2, #128	; 0x80
 8005786:	611a      	str	r2, [r3, #16]
 8005788:	4b5b      	ldr	r3, [pc, #364]	; (80058f8 <LCD_Init+0x3980>)
 800578a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800578e:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(0xFF);
 8005790:	4b59      	ldr	r3, [pc, #356]	; (80058f8 <LCD_Init+0x3980>)
 8005792:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005796:	611a      	str	r2, [r3, #16]
 8005798:	4b57      	ldr	r3, [pc, #348]	; (80058f8 <LCD_Init+0x3980>)
 800579a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800579e:	615a      	str	r2, [r3, #20]
 80057a0:	4b56      	ldr	r3, [pc, #344]	; (80058fc <LCD_Init+0x3984>)
 80057a2:	22ff      	movs	r2, #255	; 0xff
 80057a4:	60da      	str	r2, [r3, #12]
 80057a6:	4b54      	ldr	r3, [pc, #336]	; (80058f8 <LCD_Init+0x3980>)
 80057a8:	2280      	movs	r2, #128	; 0x80
 80057aa:	615a      	str	r2, [r3, #20]
 80057ac:	4b52      	ldr	r3, [pc, #328]	; (80058f8 <LCD_Init+0x3980>)
 80057ae:	2280      	movs	r2, #128	; 0x80
 80057b0:	611a      	str	r2, [r3, #16]
 80057b2:	4b51      	ldr	r3, [pc, #324]	; (80058f8 <LCD_Init+0x3980>)
 80057b4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80057b8:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(0xFF);
 80057ba:	4b4f      	ldr	r3, [pc, #316]	; (80058f8 <LCD_Init+0x3980>)
 80057bc:	f44f 7280 	mov.w	r2, #256	; 0x100
 80057c0:	611a      	str	r2, [r3, #16]
 80057c2:	4b4d      	ldr	r3, [pc, #308]	; (80058f8 <LCD_Init+0x3980>)
 80057c4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80057c8:	615a      	str	r2, [r3, #20]
 80057ca:	4b4c      	ldr	r3, [pc, #304]	; (80058fc <LCD_Init+0x3984>)
 80057cc:	22ff      	movs	r2, #255	; 0xff
 80057ce:	60da      	str	r2, [r3, #12]
 80057d0:	4b49      	ldr	r3, [pc, #292]	; (80058f8 <LCD_Init+0x3980>)
 80057d2:	2280      	movs	r2, #128	; 0x80
 80057d4:	615a      	str	r2, [r3, #20]
 80057d6:	4b48      	ldr	r3, [pc, #288]	; (80058f8 <LCD_Init+0x3980>)
 80057d8:	2280      	movs	r2, #128	; 0x80
 80057da:	611a      	str	r2, [r3, #16]
 80057dc:	4b46      	ldr	r3, [pc, #280]	; (80058f8 <LCD_Init+0x3980>)
 80057de:	f44f 7200 	mov.w	r2, #512	; 0x200
 80057e2:	611a      	str	r2, [r3, #16]

		LCD_WR_REG(0xB0);		//设置LCD模式
 80057e4:	20b0      	movs	r0, #176	; 0xb0
 80057e6:	f7fb f8d1 	bl	800098c <LCD_WR_REG>
		LCD_WR_DATA(0x20);		//24位模式
 80057ea:	4b43      	ldr	r3, [pc, #268]	; (80058f8 <LCD_Init+0x3980>)
 80057ec:	f44f 7280 	mov.w	r2, #256	; 0x100
 80057f0:	611a      	str	r2, [r3, #16]
 80057f2:	4b41      	ldr	r3, [pc, #260]	; (80058f8 <LCD_Init+0x3980>)
 80057f4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80057f8:	615a      	str	r2, [r3, #20]
 80057fa:	4b40      	ldr	r3, [pc, #256]	; (80058fc <LCD_Init+0x3984>)
 80057fc:	2220      	movs	r2, #32
 80057fe:	60da      	str	r2, [r3, #12]
 8005800:	4b3d      	ldr	r3, [pc, #244]	; (80058f8 <LCD_Init+0x3980>)
 8005802:	2280      	movs	r2, #128	; 0x80
 8005804:	615a      	str	r2, [r3, #20]
 8005806:	4b3c      	ldr	r3, [pc, #240]	; (80058f8 <LCD_Init+0x3980>)
 8005808:	2280      	movs	r2, #128	; 0x80
 800580a:	611a      	str	r2, [r3, #16]
 800580c:	4b3a      	ldr	r3, [pc, #232]	; (80058f8 <LCD_Init+0x3980>)
 800580e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005812:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(0x00);		//TFT 模式 
 8005814:	4b38      	ldr	r3, [pc, #224]	; (80058f8 <LCD_Init+0x3980>)
 8005816:	f44f 7280 	mov.w	r2, #256	; 0x100
 800581a:	611a      	str	r2, [r3, #16]
 800581c:	4b36      	ldr	r3, [pc, #216]	; (80058f8 <LCD_Init+0x3980>)
 800581e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005822:	615a      	str	r2, [r3, #20]
 8005824:	4b35      	ldr	r3, [pc, #212]	; (80058fc <LCD_Init+0x3984>)
 8005826:	2200      	movs	r2, #0
 8005828:	60da      	str	r2, [r3, #12]
 800582a:	4b33      	ldr	r3, [pc, #204]	; (80058f8 <LCD_Init+0x3980>)
 800582c:	2280      	movs	r2, #128	; 0x80
 800582e:	615a      	str	r2, [r3, #20]
 8005830:	4b31      	ldr	r3, [pc, #196]	; (80058f8 <LCD_Init+0x3980>)
 8005832:	2280      	movs	r2, #128	; 0x80
 8005834:	611a      	str	r2, [r3, #16]
 8005836:	4b30      	ldr	r3, [pc, #192]	; (80058f8 <LCD_Init+0x3980>)
 8005838:	f44f 7200 	mov.w	r2, #512	; 0x200
 800583c:	611a      	str	r2, [r3, #16]

		LCD_WR_DATA((SSD_HOR_RESOLUTION-1)>>8);		//设置LCD水平像素
 800583e:	4b2e      	ldr	r3, [pc, #184]	; (80058f8 <LCD_Init+0x3980>)
 8005840:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005844:	611a      	str	r2, [r3, #16]
 8005846:	4b2c      	ldr	r3, [pc, #176]	; (80058f8 <LCD_Init+0x3980>)
 8005848:	f44f 7200 	mov.w	r2, #512	; 0x200
 800584c:	615a      	str	r2, [r3, #20]
 800584e:	4b2b      	ldr	r3, [pc, #172]	; (80058fc <LCD_Init+0x3984>)
 8005850:	2203      	movs	r2, #3
 8005852:	60da      	str	r2, [r3, #12]
 8005854:	4b28      	ldr	r3, [pc, #160]	; (80058f8 <LCD_Init+0x3980>)
 8005856:	2280      	movs	r2, #128	; 0x80
 8005858:	615a      	str	r2, [r3, #20]
 800585a:	4b27      	ldr	r3, [pc, #156]	; (80058f8 <LCD_Init+0x3980>)
 800585c:	2280      	movs	r2, #128	; 0x80
 800585e:	611a      	str	r2, [r3, #16]
 8005860:	4b25      	ldr	r3, [pc, #148]	; (80058f8 <LCD_Init+0x3980>)
 8005862:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005866:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(SSD_HOR_RESOLUTION-1);
 8005868:	4b23      	ldr	r3, [pc, #140]	; (80058f8 <LCD_Init+0x3980>)
 800586a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800586e:	611a      	str	r2, [r3, #16]
 8005870:	4b21      	ldr	r3, [pc, #132]	; (80058f8 <LCD_Init+0x3980>)
 8005872:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005876:	615a      	str	r2, [r3, #20]
 8005878:	4b20      	ldr	r3, [pc, #128]	; (80058fc <LCD_Init+0x3984>)
 800587a:	f240 321f 	movw	r2, #799	; 0x31f
 800587e:	60da      	str	r2, [r3, #12]
 8005880:	4b1d      	ldr	r3, [pc, #116]	; (80058f8 <LCD_Init+0x3980>)
 8005882:	2280      	movs	r2, #128	; 0x80
 8005884:	615a      	str	r2, [r3, #20]
 8005886:	4b1c      	ldr	r3, [pc, #112]	; (80058f8 <LCD_Init+0x3980>)
 8005888:	2280      	movs	r2, #128	; 0x80
 800588a:	611a      	str	r2, [r3, #16]
 800588c:	4b1a      	ldr	r3, [pc, #104]	; (80058f8 <LCD_Init+0x3980>)
 800588e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005892:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA((SSD_VER_RESOLUTION-1)>>8);		//设置LCD垂直像素
 8005894:	4b18      	ldr	r3, [pc, #96]	; (80058f8 <LCD_Init+0x3980>)
 8005896:	f44f 7280 	mov.w	r2, #256	; 0x100
 800589a:	611a      	str	r2, [r3, #16]
 800589c:	4b16      	ldr	r3, [pc, #88]	; (80058f8 <LCD_Init+0x3980>)
 800589e:	f44f 7200 	mov.w	r2, #512	; 0x200
 80058a2:	615a      	str	r2, [r3, #20]
 80058a4:	4b15      	ldr	r3, [pc, #84]	; (80058fc <LCD_Init+0x3984>)
 80058a6:	2201      	movs	r2, #1
 80058a8:	60da      	str	r2, [r3, #12]
 80058aa:	4b13      	ldr	r3, [pc, #76]	; (80058f8 <LCD_Init+0x3980>)
 80058ac:	2280      	movs	r2, #128	; 0x80
 80058ae:	615a      	str	r2, [r3, #20]
 80058b0:	4b11      	ldr	r3, [pc, #68]	; (80058f8 <LCD_Init+0x3980>)
 80058b2:	2280      	movs	r2, #128	; 0x80
 80058b4:	611a      	str	r2, [r3, #16]
 80058b6:	4b10      	ldr	r3, [pc, #64]	; (80058f8 <LCD_Init+0x3980>)
 80058b8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80058bc:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(SSD_VER_RESOLUTION-1);
 80058be:	4b0e      	ldr	r3, [pc, #56]	; (80058f8 <LCD_Init+0x3980>)
 80058c0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80058c4:	611a      	str	r2, [r3, #16]
 80058c6:	4b0c      	ldr	r3, [pc, #48]	; (80058f8 <LCD_Init+0x3980>)
 80058c8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80058cc:	615a      	str	r2, [r3, #20]
 80058ce:	4b0b      	ldr	r3, [pc, #44]	; (80058fc <LCD_Init+0x3984>)
 80058d0:	f240 12df 	movw	r2, #479	; 0x1df
 80058d4:	60da      	str	r2, [r3, #12]
 80058d6:	4b08      	ldr	r3, [pc, #32]	; (80058f8 <LCD_Init+0x3980>)
 80058d8:	2280      	movs	r2, #128	; 0x80
 80058da:	615a      	str	r2, [r3, #20]
 80058dc:	4b06      	ldr	r3, [pc, #24]	; (80058f8 <LCD_Init+0x3980>)
 80058de:	2280      	movs	r2, #128	; 0x80
 80058e0:	611a      	str	r2, [r3, #16]
 80058e2:	4b05      	ldr	r3, [pc, #20]	; (80058f8 <LCD_Init+0x3980>)
 80058e4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80058e8:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(0x00);		//RGB序列 
 80058ea:	4b03      	ldr	r3, [pc, #12]	; (80058f8 <LCD_Init+0x3980>)
 80058ec:	f44f 7280 	mov.w	r2, #256	; 0x100
 80058f0:	e006      	b.n	8005900 <LCD_Init+0x3988>
 80058f2:	bf00      	nop
 80058f4:	20000080 	.word	0x20000080
 80058f8:	40011000 	.word	0x40011000
 80058fc:	40010c00 	.word	0x40010c00
 8005900:	611a      	str	r2, [r3, #16]
 8005902:	4ba3      	ldr	r3, [pc, #652]	; (8005b90 <LCD_Init+0x3c18>)
 8005904:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005908:	615a      	str	r2, [r3, #20]
 800590a:	4ba2      	ldr	r3, [pc, #648]	; (8005b94 <LCD_Init+0x3c1c>)
 800590c:	2200      	movs	r2, #0
 800590e:	60da      	str	r2, [r3, #12]
 8005910:	4b9f      	ldr	r3, [pc, #636]	; (8005b90 <LCD_Init+0x3c18>)
 8005912:	2280      	movs	r2, #128	; 0x80
 8005914:	615a      	str	r2, [r3, #20]
 8005916:	4b9e      	ldr	r3, [pc, #632]	; (8005b90 <LCD_Init+0x3c18>)
 8005918:	2280      	movs	r2, #128	; 0x80
 800591a:	611a      	str	r2, [r3, #16]
 800591c:	4b9c      	ldr	r3, [pc, #624]	; (8005b90 <LCD_Init+0x3c18>)
 800591e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005922:	611a      	str	r2, [r3, #16]

		LCD_WR_REG(0xB4);		//Set horizontal period
 8005924:	20b4      	movs	r0, #180	; 0xb4
 8005926:	f7fb f831 	bl	800098c <LCD_WR_REG>
		LCD_WR_DATA((SSD_HT-1)>>8);
 800592a:	4b99      	ldr	r3, [pc, #612]	; (8005b90 <LCD_Init+0x3c18>)
 800592c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005930:	611a      	str	r2, [r3, #16]
 8005932:	4b97      	ldr	r3, [pc, #604]	; (8005b90 <LCD_Init+0x3c18>)
 8005934:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005938:	615a      	str	r2, [r3, #20]
 800593a:	4b96      	ldr	r3, [pc, #600]	; (8005b94 <LCD_Init+0x3c1c>)
 800593c:	2204      	movs	r2, #4
 800593e:	60da      	str	r2, [r3, #12]
 8005940:	4b93      	ldr	r3, [pc, #588]	; (8005b90 <LCD_Init+0x3c18>)
 8005942:	2280      	movs	r2, #128	; 0x80
 8005944:	615a      	str	r2, [r3, #20]
 8005946:	4b92      	ldr	r3, [pc, #584]	; (8005b90 <LCD_Init+0x3c18>)
 8005948:	2280      	movs	r2, #128	; 0x80
 800594a:	611a      	str	r2, [r3, #16]
 800594c:	4b90      	ldr	r3, [pc, #576]	; (8005b90 <LCD_Init+0x3c18>)
 800594e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005952:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(SSD_HT-1);
 8005954:	4b8e      	ldr	r3, [pc, #568]	; (8005b90 <LCD_Init+0x3c18>)
 8005956:	f44f 7280 	mov.w	r2, #256	; 0x100
 800595a:	611a      	str	r2, [r3, #16]
 800595c:	4b8c      	ldr	r3, [pc, #560]	; (8005b90 <LCD_Init+0x3c18>)
 800595e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005962:	615a      	str	r2, [r3, #20]
 8005964:	4b8b      	ldr	r3, [pc, #556]	; (8005b94 <LCD_Init+0x3c1c>)
 8005966:	f240 421f 	movw	r2, #1055	; 0x41f
 800596a:	60da      	str	r2, [r3, #12]
 800596c:	4b88      	ldr	r3, [pc, #544]	; (8005b90 <LCD_Init+0x3c18>)
 800596e:	2280      	movs	r2, #128	; 0x80
 8005970:	615a      	str	r2, [r3, #20]
 8005972:	4b87      	ldr	r3, [pc, #540]	; (8005b90 <LCD_Init+0x3c18>)
 8005974:	2280      	movs	r2, #128	; 0x80
 8005976:	611a      	str	r2, [r3, #16]
 8005978:	4b85      	ldr	r3, [pc, #532]	; (8005b90 <LCD_Init+0x3c18>)
 800597a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800597e:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(SSD_HPS>>8);
 8005980:	4b83      	ldr	r3, [pc, #524]	; (8005b90 <LCD_Init+0x3c18>)
 8005982:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005986:	611a      	str	r2, [r3, #16]
 8005988:	4b81      	ldr	r3, [pc, #516]	; (8005b90 <LCD_Init+0x3c18>)
 800598a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800598e:	615a      	str	r2, [r3, #20]
 8005990:	4b80      	ldr	r3, [pc, #512]	; (8005b94 <LCD_Init+0x3c1c>)
 8005992:	2200      	movs	r2, #0
 8005994:	60da      	str	r2, [r3, #12]
 8005996:	4b7e      	ldr	r3, [pc, #504]	; (8005b90 <LCD_Init+0x3c18>)
 8005998:	2280      	movs	r2, #128	; 0x80
 800599a:	615a      	str	r2, [r3, #20]
 800599c:	4b7c      	ldr	r3, [pc, #496]	; (8005b90 <LCD_Init+0x3c18>)
 800599e:	2280      	movs	r2, #128	; 0x80
 80059a0:	611a      	str	r2, [r3, #16]
 80059a2:	4b7b      	ldr	r3, [pc, #492]	; (8005b90 <LCD_Init+0x3c18>)
 80059a4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80059a8:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(SSD_HPS);
 80059aa:	4b79      	ldr	r3, [pc, #484]	; (8005b90 <LCD_Init+0x3c18>)
 80059ac:	f44f 7280 	mov.w	r2, #256	; 0x100
 80059b0:	611a      	str	r2, [r3, #16]
 80059b2:	4b77      	ldr	r3, [pc, #476]	; (8005b90 <LCD_Init+0x3c18>)
 80059b4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80059b8:	615a      	str	r2, [r3, #20]
 80059ba:	4b76      	ldr	r3, [pc, #472]	; (8005b94 <LCD_Init+0x3c1c>)
 80059bc:	222e      	movs	r2, #46	; 0x2e
 80059be:	60da      	str	r2, [r3, #12]
 80059c0:	4b73      	ldr	r3, [pc, #460]	; (8005b90 <LCD_Init+0x3c18>)
 80059c2:	2280      	movs	r2, #128	; 0x80
 80059c4:	615a      	str	r2, [r3, #20]
 80059c6:	4b72      	ldr	r3, [pc, #456]	; (8005b90 <LCD_Init+0x3c18>)
 80059c8:	2280      	movs	r2, #128	; 0x80
 80059ca:	611a      	str	r2, [r3, #16]
 80059cc:	4b70      	ldr	r3, [pc, #448]	; (8005b90 <LCD_Init+0x3c18>)
 80059ce:	f44f 7200 	mov.w	r2, #512	; 0x200
 80059d2:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(SSD_HOR_PULSE_WIDTH-1);
 80059d4:	4b6e      	ldr	r3, [pc, #440]	; (8005b90 <LCD_Init+0x3c18>)
 80059d6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80059da:	611a      	str	r2, [r3, #16]
 80059dc:	4b6c      	ldr	r3, [pc, #432]	; (8005b90 <LCD_Init+0x3c18>)
 80059de:	f44f 7200 	mov.w	r2, #512	; 0x200
 80059e2:	615a      	str	r2, [r3, #20]
 80059e4:	4b6b      	ldr	r3, [pc, #428]	; (8005b94 <LCD_Init+0x3c1c>)
 80059e6:	2200      	movs	r2, #0
 80059e8:	60da      	str	r2, [r3, #12]
 80059ea:	4b69      	ldr	r3, [pc, #420]	; (8005b90 <LCD_Init+0x3c18>)
 80059ec:	2280      	movs	r2, #128	; 0x80
 80059ee:	615a      	str	r2, [r3, #20]
 80059f0:	4b67      	ldr	r3, [pc, #412]	; (8005b90 <LCD_Init+0x3c18>)
 80059f2:	2280      	movs	r2, #128	; 0x80
 80059f4:	611a      	str	r2, [r3, #16]
 80059f6:	4b66      	ldr	r3, [pc, #408]	; (8005b90 <LCD_Init+0x3c18>)
 80059f8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80059fc:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(0x00);
 80059fe:	4b64      	ldr	r3, [pc, #400]	; (8005b90 <LCD_Init+0x3c18>)
 8005a00:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005a04:	611a      	str	r2, [r3, #16]
 8005a06:	4b62      	ldr	r3, [pc, #392]	; (8005b90 <LCD_Init+0x3c18>)
 8005a08:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005a0c:	615a      	str	r2, [r3, #20]
 8005a0e:	4b61      	ldr	r3, [pc, #388]	; (8005b94 <LCD_Init+0x3c1c>)
 8005a10:	2200      	movs	r2, #0
 8005a12:	60da      	str	r2, [r3, #12]
 8005a14:	4b5e      	ldr	r3, [pc, #376]	; (8005b90 <LCD_Init+0x3c18>)
 8005a16:	2280      	movs	r2, #128	; 0x80
 8005a18:	615a      	str	r2, [r3, #20]
 8005a1a:	4b5d      	ldr	r3, [pc, #372]	; (8005b90 <LCD_Init+0x3c18>)
 8005a1c:	2280      	movs	r2, #128	; 0x80
 8005a1e:	611a      	str	r2, [r3, #16]
 8005a20:	4b5b      	ldr	r3, [pc, #364]	; (8005b90 <LCD_Init+0x3c18>)
 8005a22:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005a26:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(0x00);
 8005a28:	4b59      	ldr	r3, [pc, #356]	; (8005b90 <LCD_Init+0x3c18>)
 8005a2a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005a2e:	611a      	str	r2, [r3, #16]
 8005a30:	4b57      	ldr	r3, [pc, #348]	; (8005b90 <LCD_Init+0x3c18>)
 8005a32:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005a36:	615a      	str	r2, [r3, #20]
 8005a38:	4b56      	ldr	r3, [pc, #344]	; (8005b94 <LCD_Init+0x3c1c>)
 8005a3a:	2200      	movs	r2, #0
 8005a3c:	60da      	str	r2, [r3, #12]
 8005a3e:	4b54      	ldr	r3, [pc, #336]	; (8005b90 <LCD_Init+0x3c18>)
 8005a40:	2280      	movs	r2, #128	; 0x80
 8005a42:	615a      	str	r2, [r3, #20]
 8005a44:	4b52      	ldr	r3, [pc, #328]	; (8005b90 <LCD_Init+0x3c18>)
 8005a46:	2280      	movs	r2, #128	; 0x80
 8005a48:	611a      	str	r2, [r3, #16]
 8005a4a:	4b51      	ldr	r3, [pc, #324]	; (8005b90 <LCD_Init+0x3c18>)
 8005a4c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005a50:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(0x00);
 8005a52:	4b4f      	ldr	r3, [pc, #316]	; (8005b90 <LCD_Init+0x3c18>)
 8005a54:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005a58:	611a      	str	r2, [r3, #16]
 8005a5a:	4b4d      	ldr	r3, [pc, #308]	; (8005b90 <LCD_Init+0x3c18>)
 8005a5c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005a60:	615a      	str	r2, [r3, #20]
 8005a62:	4b4c      	ldr	r3, [pc, #304]	; (8005b94 <LCD_Init+0x3c1c>)
 8005a64:	2200      	movs	r2, #0
 8005a66:	60da      	str	r2, [r3, #12]
 8005a68:	4b49      	ldr	r3, [pc, #292]	; (8005b90 <LCD_Init+0x3c18>)
 8005a6a:	2280      	movs	r2, #128	; 0x80
 8005a6c:	615a      	str	r2, [r3, #20]
 8005a6e:	4b48      	ldr	r3, [pc, #288]	; (8005b90 <LCD_Init+0x3c18>)
 8005a70:	2280      	movs	r2, #128	; 0x80
 8005a72:	611a      	str	r2, [r3, #16]
 8005a74:	4b46      	ldr	r3, [pc, #280]	; (8005b90 <LCD_Init+0x3c18>)
 8005a76:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005a7a:	611a      	str	r2, [r3, #16]
		LCD_WR_REG(0xB6);		//Set vertical period
 8005a7c:	20b6      	movs	r0, #182	; 0xb6
 8005a7e:	f7fa ff85 	bl	800098c <LCD_WR_REG>
		LCD_WR_DATA((SSD_VT-1)>>8);
 8005a82:	4b43      	ldr	r3, [pc, #268]	; (8005b90 <LCD_Init+0x3c18>)
 8005a84:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005a88:	611a      	str	r2, [r3, #16]
 8005a8a:	4b41      	ldr	r3, [pc, #260]	; (8005b90 <LCD_Init+0x3c18>)
 8005a8c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005a90:	615a      	str	r2, [r3, #20]
 8005a92:	4b40      	ldr	r3, [pc, #256]	; (8005b94 <LCD_Init+0x3c1c>)
 8005a94:	2202      	movs	r2, #2
 8005a96:	60da      	str	r2, [r3, #12]
 8005a98:	4b3d      	ldr	r3, [pc, #244]	; (8005b90 <LCD_Init+0x3c18>)
 8005a9a:	2280      	movs	r2, #128	; 0x80
 8005a9c:	615a      	str	r2, [r3, #20]
 8005a9e:	4b3c      	ldr	r3, [pc, #240]	; (8005b90 <LCD_Init+0x3c18>)
 8005aa0:	2280      	movs	r2, #128	; 0x80
 8005aa2:	611a      	str	r2, [r3, #16]
 8005aa4:	4b3a      	ldr	r3, [pc, #232]	; (8005b90 <LCD_Init+0x3c18>)
 8005aa6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005aaa:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(SSD_VT-1);
 8005aac:	4b38      	ldr	r3, [pc, #224]	; (8005b90 <LCD_Init+0x3c18>)
 8005aae:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005ab2:	611a      	str	r2, [r3, #16]
 8005ab4:	4b36      	ldr	r3, [pc, #216]	; (8005b90 <LCD_Init+0x3c18>)
 8005ab6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005aba:	615a      	str	r2, [r3, #20]
 8005abc:	4b35      	ldr	r3, [pc, #212]	; (8005b94 <LCD_Init+0x3c1c>)
 8005abe:	f44f 7203 	mov.w	r2, #524	; 0x20c
 8005ac2:	60da      	str	r2, [r3, #12]
 8005ac4:	4b32      	ldr	r3, [pc, #200]	; (8005b90 <LCD_Init+0x3c18>)
 8005ac6:	2280      	movs	r2, #128	; 0x80
 8005ac8:	615a      	str	r2, [r3, #20]
 8005aca:	4b31      	ldr	r3, [pc, #196]	; (8005b90 <LCD_Init+0x3c18>)
 8005acc:	2280      	movs	r2, #128	; 0x80
 8005ace:	611a      	str	r2, [r3, #16]
 8005ad0:	4b2f      	ldr	r3, [pc, #188]	; (8005b90 <LCD_Init+0x3c18>)
 8005ad2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005ad6:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(SSD_VPS>>8);
 8005ad8:	4b2d      	ldr	r3, [pc, #180]	; (8005b90 <LCD_Init+0x3c18>)
 8005ada:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005ade:	611a      	str	r2, [r3, #16]
 8005ae0:	4b2b      	ldr	r3, [pc, #172]	; (8005b90 <LCD_Init+0x3c18>)
 8005ae2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005ae6:	615a      	str	r2, [r3, #20]
 8005ae8:	4b2a      	ldr	r3, [pc, #168]	; (8005b94 <LCD_Init+0x3c1c>)
 8005aea:	2200      	movs	r2, #0
 8005aec:	60da      	str	r2, [r3, #12]
 8005aee:	4b28      	ldr	r3, [pc, #160]	; (8005b90 <LCD_Init+0x3c18>)
 8005af0:	2280      	movs	r2, #128	; 0x80
 8005af2:	615a      	str	r2, [r3, #20]
 8005af4:	4b26      	ldr	r3, [pc, #152]	; (8005b90 <LCD_Init+0x3c18>)
 8005af6:	2280      	movs	r2, #128	; 0x80
 8005af8:	611a      	str	r2, [r3, #16]
 8005afa:	4b25      	ldr	r3, [pc, #148]	; (8005b90 <LCD_Init+0x3c18>)
 8005afc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005b00:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(SSD_VPS);
 8005b02:	4b23      	ldr	r3, [pc, #140]	; (8005b90 <LCD_Init+0x3c18>)
 8005b04:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005b08:	611a      	str	r2, [r3, #16]
 8005b0a:	4b21      	ldr	r3, [pc, #132]	; (8005b90 <LCD_Init+0x3c18>)
 8005b0c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005b10:	615a      	str	r2, [r3, #20]
 8005b12:	4b20      	ldr	r3, [pc, #128]	; (8005b94 <LCD_Init+0x3c1c>)
 8005b14:	2217      	movs	r2, #23
 8005b16:	60da      	str	r2, [r3, #12]
 8005b18:	4b1d      	ldr	r3, [pc, #116]	; (8005b90 <LCD_Init+0x3c18>)
 8005b1a:	2280      	movs	r2, #128	; 0x80
 8005b1c:	615a      	str	r2, [r3, #20]
 8005b1e:	4b1c      	ldr	r3, [pc, #112]	; (8005b90 <LCD_Init+0x3c18>)
 8005b20:	2280      	movs	r2, #128	; 0x80
 8005b22:	611a      	str	r2, [r3, #16]
 8005b24:	4b1a      	ldr	r3, [pc, #104]	; (8005b90 <LCD_Init+0x3c18>)
 8005b26:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005b2a:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(SSD_VER_FRONT_PORCH-1);
 8005b2c:	4b18      	ldr	r3, [pc, #96]	; (8005b90 <LCD_Init+0x3c18>)
 8005b2e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005b32:	611a      	str	r2, [r3, #16]
 8005b34:	4b16      	ldr	r3, [pc, #88]	; (8005b90 <LCD_Init+0x3c18>)
 8005b36:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005b3a:	615a      	str	r2, [r3, #20]
 8005b3c:	4b15      	ldr	r3, [pc, #84]	; (8005b94 <LCD_Init+0x3c1c>)
 8005b3e:	2215      	movs	r2, #21
 8005b40:	60da      	str	r2, [r3, #12]
 8005b42:	4b13      	ldr	r3, [pc, #76]	; (8005b90 <LCD_Init+0x3c18>)
 8005b44:	2280      	movs	r2, #128	; 0x80
 8005b46:	615a      	str	r2, [r3, #20]
 8005b48:	4b11      	ldr	r3, [pc, #68]	; (8005b90 <LCD_Init+0x3c18>)
 8005b4a:	2280      	movs	r2, #128	; 0x80
 8005b4c:	611a      	str	r2, [r3, #16]
 8005b4e:	4b10      	ldr	r3, [pc, #64]	; (8005b90 <LCD_Init+0x3c18>)
 8005b50:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005b54:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(0x00);
 8005b56:	4b0e      	ldr	r3, [pc, #56]	; (8005b90 <LCD_Init+0x3c18>)
 8005b58:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005b5c:	611a      	str	r2, [r3, #16]
 8005b5e:	4b0c      	ldr	r3, [pc, #48]	; (8005b90 <LCD_Init+0x3c18>)
 8005b60:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005b64:	615a      	str	r2, [r3, #20]
 8005b66:	4b0b      	ldr	r3, [pc, #44]	; (8005b94 <LCD_Init+0x3c1c>)
 8005b68:	2200      	movs	r2, #0
 8005b6a:	60da      	str	r2, [r3, #12]
 8005b6c:	4b08      	ldr	r3, [pc, #32]	; (8005b90 <LCD_Init+0x3c18>)
 8005b6e:	2280      	movs	r2, #128	; 0x80
 8005b70:	615a      	str	r2, [r3, #20]
 8005b72:	4b07      	ldr	r3, [pc, #28]	; (8005b90 <LCD_Init+0x3c18>)
 8005b74:	2280      	movs	r2, #128	; 0x80
 8005b76:	611a      	str	r2, [r3, #16]
 8005b78:	4b05      	ldr	r3, [pc, #20]	; (8005b90 <LCD_Init+0x3c18>)
 8005b7a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005b7e:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(0x00);
 8005b80:	4b03      	ldr	r3, [pc, #12]	; (8005b90 <LCD_Init+0x3c18>)
 8005b82:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005b86:	611a      	str	r2, [r3, #16]
 8005b88:	4b01      	ldr	r3, [pc, #4]	; (8005b90 <LCD_Init+0x3c18>)
 8005b8a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005b8e:	e003      	b.n	8005b98 <LCD_Init+0x3c20>
 8005b90:	40011000 	.word	0x40011000
 8005b94:	40010c00 	.word	0x40010c00
 8005b98:	615a      	str	r2, [r3, #20]
 8005b9a:	4b8b      	ldr	r3, [pc, #556]	; (8005dc8 <LCD_Init+0x3e50>)
 8005b9c:	2200      	movs	r2, #0
 8005b9e:	60da      	str	r2, [r3, #12]
 8005ba0:	4b8a      	ldr	r3, [pc, #552]	; (8005dcc <LCD_Init+0x3e54>)
 8005ba2:	2280      	movs	r2, #128	; 0x80
 8005ba4:	615a      	str	r2, [r3, #20]
 8005ba6:	4b89      	ldr	r3, [pc, #548]	; (8005dcc <LCD_Init+0x3e54>)
 8005ba8:	2280      	movs	r2, #128	; 0x80
 8005baa:	611a      	str	r2, [r3, #16]
 8005bac:	4b87      	ldr	r3, [pc, #540]	; (8005dcc <LCD_Init+0x3e54>)
 8005bae:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005bb2:	611a      	str	r2, [r3, #16]

		LCD_WR_REG(0xF0);	//设置SSD1963与CPU接口为16bit  
 8005bb4:	20f0      	movs	r0, #240	; 0xf0
 8005bb6:	f7fa fee9 	bl	800098c <LCD_WR_REG>
		LCD_WR_DATA(0x03);	//16-bit(565 format) data for 16bpp 
 8005bba:	4b84      	ldr	r3, [pc, #528]	; (8005dcc <LCD_Init+0x3e54>)
 8005bbc:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005bc0:	611a      	str	r2, [r3, #16]
 8005bc2:	4b82      	ldr	r3, [pc, #520]	; (8005dcc <LCD_Init+0x3e54>)
 8005bc4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005bc8:	615a      	str	r2, [r3, #20]
 8005bca:	4b7f      	ldr	r3, [pc, #508]	; (8005dc8 <LCD_Init+0x3e50>)
 8005bcc:	2203      	movs	r2, #3
 8005bce:	60da      	str	r2, [r3, #12]
 8005bd0:	4b7e      	ldr	r3, [pc, #504]	; (8005dcc <LCD_Init+0x3e54>)
 8005bd2:	2280      	movs	r2, #128	; 0x80
 8005bd4:	615a      	str	r2, [r3, #20]
 8005bd6:	4b7d      	ldr	r3, [pc, #500]	; (8005dcc <LCD_Init+0x3e54>)
 8005bd8:	2280      	movs	r2, #128	; 0x80
 8005bda:	611a      	str	r2, [r3, #16]
 8005bdc:	4b7b      	ldr	r3, [pc, #492]	; (8005dcc <LCD_Init+0x3e54>)
 8005bde:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005be2:	611a      	str	r2, [r3, #16]

		LCD_WR_REG(0x29);	//开启显示
 8005be4:	2029      	movs	r0, #41	; 0x29
 8005be6:	f7fa fed1 	bl	800098c <LCD_WR_REG>
		//设置PWM输出  背光通过占空比可调 
		LCD_WR_REG(0xD0);	//设置自动白平衡DBC
 8005bea:	20d0      	movs	r0, #208	; 0xd0
 8005bec:	f7fa fece 	bl	800098c <LCD_WR_REG>
		LCD_WR_DATA(0x00);	//disable
 8005bf0:	4b76      	ldr	r3, [pc, #472]	; (8005dcc <LCD_Init+0x3e54>)
 8005bf2:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005bf6:	611a      	str	r2, [r3, #16]
 8005bf8:	4b74      	ldr	r3, [pc, #464]	; (8005dcc <LCD_Init+0x3e54>)
 8005bfa:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005bfe:	615a      	str	r2, [r3, #20]
 8005c00:	4b71      	ldr	r3, [pc, #452]	; (8005dc8 <LCD_Init+0x3e50>)
 8005c02:	2200      	movs	r2, #0
 8005c04:	60da      	str	r2, [r3, #12]
 8005c06:	4b71      	ldr	r3, [pc, #452]	; (8005dcc <LCD_Init+0x3e54>)
 8005c08:	2280      	movs	r2, #128	; 0x80
 8005c0a:	615a      	str	r2, [r3, #20]
 8005c0c:	4b6f      	ldr	r3, [pc, #444]	; (8005dcc <LCD_Init+0x3e54>)
 8005c0e:	2280      	movs	r2, #128	; 0x80
 8005c10:	611a      	str	r2, [r3, #16]
 8005c12:	4b6e      	ldr	r3, [pc, #440]	; (8005dcc <LCD_Init+0x3e54>)
 8005c14:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005c18:	611a      	str	r2, [r3, #16]

		LCD_WR_REG(0xBE);	//配置PWM输出
 8005c1a:	20be      	movs	r0, #190	; 0xbe
 8005c1c:	f7fa feb6 	bl	800098c <LCD_WR_REG>
		LCD_WR_DATA(0x05);	//1设置PWM频率
 8005c20:	4b6a      	ldr	r3, [pc, #424]	; (8005dcc <LCD_Init+0x3e54>)
 8005c22:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005c26:	611a      	str	r2, [r3, #16]
 8005c28:	4b68      	ldr	r3, [pc, #416]	; (8005dcc <LCD_Init+0x3e54>)
 8005c2a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005c2e:	615a      	str	r2, [r3, #20]
 8005c30:	4b65      	ldr	r3, [pc, #404]	; (8005dc8 <LCD_Init+0x3e50>)
 8005c32:	2205      	movs	r2, #5
 8005c34:	60da      	str	r2, [r3, #12]
 8005c36:	4b65      	ldr	r3, [pc, #404]	; (8005dcc <LCD_Init+0x3e54>)
 8005c38:	2280      	movs	r2, #128	; 0x80
 8005c3a:	615a      	str	r2, [r3, #20]
 8005c3c:	4b63      	ldr	r3, [pc, #396]	; (8005dcc <LCD_Init+0x3e54>)
 8005c3e:	2280      	movs	r2, #128	; 0x80
 8005c40:	611a      	str	r2, [r3, #16]
 8005c42:	4b62      	ldr	r3, [pc, #392]	; (8005dcc <LCD_Init+0x3e54>)
 8005c44:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005c48:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(0xFE);	//2设置PWM占空比
 8005c4a:	4b60      	ldr	r3, [pc, #384]	; (8005dcc <LCD_Init+0x3e54>)
 8005c4c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005c50:	611a      	str	r2, [r3, #16]
 8005c52:	4b5e      	ldr	r3, [pc, #376]	; (8005dcc <LCD_Init+0x3e54>)
 8005c54:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005c58:	615a      	str	r2, [r3, #20]
 8005c5a:	4b5b      	ldr	r3, [pc, #364]	; (8005dc8 <LCD_Init+0x3e50>)
 8005c5c:	22fe      	movs	r2, #254	; 0xfe
 8005c5e:	60da      	str	r2, [r3, #12]
 8005c60:	4b5a      	ldr	r3, [pc, #360]	; (8005dcc <LCD_Init+0x3e54>)
 8005c62:	2280      	movs	r2, #128	; 0x80
 8005c64:	615a      	str	r2, [r3, #20]
 8005c66:	4b59      	ldr	r3, [pc, #356]	; (8005dcc <LCD_Init+0x3e54>)
 8005c68:	2280      	movs	r2, #128	; 0x80
 8005c6a:	611a      	str	r2, [r3, #16]
 8005c6c:	4b57      	ldr	r3, [pc, #348]	; (8005dcc <LCD_Init+0x3e54>)
 8005c6e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005c72:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(0x01);	//3设置C
 8005c74:	4b55      	ldr	r3, [pc, #340]	; (8005dcc <LCD_Init+0x3e54>)
 8005c76:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005c7a:	611a      	str	r2, [r3, #16]
 8005c7c:	4b53      	ldr	r3, [pc, #332]	; (8005dcc <LCD_Init+0x3e54>)
 8005c7e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005c82:	615a      	str	r2, [r3, #20]
 8005c84:	4b50      	ldr	r3, [pc, #320]	; (8005dc8 <LCD_Init+0x3e50>)
 8005c86:	2201      	movs	r2, #1
 8005c88:	60da      	str	r2, [r3, #12]
 8005c8a:	4b50      	ldr	r3, [pc, #320]	; (8005dcc <LCD_Init+0x3e54>)
 8005c8c:	2280      	movs	r2, #128	; 0x80
 8005c8e:	615a      	str	r2, [r3, #20]
 8005c90:	4b4e      	ldr	r3, [pc, #312]	; (8005dcc <LCD_Init+0x3e54>)
 8005c92:	2280      	movs	r2, #128	; 0x80
 8005c94:	611a      	str	r2, [r3, #16]
 8005c96:	4b4d      	ldr	r3, [pc, #308]	; (8005dcc <LCD_Init+0x3e54>)
 8005c98:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005c9c:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(0x00);	//4设置D
 8005c9e:	4b4b      	ldr	r3, [pc, #300]	; (8005dcc <LCD_Init+0x3e54>)
 8005ca0:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005ca4:	611a      	str	r2, [r3, #16]
 8005ca6:	4b49      	ldr	r3, [pc, #292]	; (8005dcc <LCD_Init+0x3e54>)
 8005ca8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005cac:	615a      	str	r2, [r3, #20]
 8005cae:	4b46      	ldr	r3, [pc, #280]	; (8005dc8 <LCD_Init+0x3e50>)
 8005cb0:	2200      	movs	r2, #0
 8005cb2:	60da      	str	r2, [r3, #12]
 8005cb4:	4b45      	ldr	r3, [pc, #276]	; (8005dcc <LCD_Init+0x3e54>)
 8005cb6:	2280      	movs	r2, #128	; 0x80
 8005cb8:	615a      	str	r2, [r3, #20]
 8005cba:	4b44      	ldr	r3, [pc, #272]	; (8005dcc <LCD_Init+0x3e54>)
 8005cbc:	2280      	movs	r2, #128	; 0x80
 8005cbe:	611a      	str	r2, [r3, #16]
 8005cc0:	4b42      	ldr	r3, [pc, #264]	; (8005dcc <LCD_Init+0x3e54>)
 8005cc2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005cc6:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(0x00);	//5设置E 
 8005cc8:	4b40      	ldr	r3, [pc, #256]	; (8005dcc <LCD_Init+0x3e54>)
 8005cca:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005cce:	611a      	str	r2, [r3, #16]
 8005cd0:	4b3e      	ldr	r3, [pc, #248]	; (8005dcc <LCD_Init+0x3e54>)
 8005cd2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005cd6:	615a      	str	r2, [r3, #20]
 8005cd8:	4b3b      	ldr	r3, [pc, #236]	; (8005dc8 <LCD_Init+0x3e50>)
 8005cda:	2200      	movs	r2, #0
 8005cdc:	60da      	str	r2, [r3, #12]
 8005cde:	4b3b      	ldr	r3, [pc, #236]	; (8005dcc <LCD_Init+0x3e54>)
 8005ce0:	2280      	movs	r2, #128	; 0x80
 8005ce2:	615a      	str	r2, [r3, #20]
 8005ce4:	4b39      	ldr	r3, [pc, #228]	; (8005dcc <LCD_Init+0x3e54>)
 8005ce6:	2280      	movs	r2, #128	; 0x80
 8005ce8:	611a      	str	r2, [r3, #16]
 8005cea:	4b38      	ldr	r3, [pc, #224]	; (8005dcc <LCD_Init+0x3e54>)
 8005cec:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005cf0:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(0x00);	//6设置F 
 8005cf2:	4b36      	ldr	r3, [pc, #216]	; (8005dcc <LCD_Init+0x3e54>)
 8005cf4:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005cf8:	611a      	str	r2, [r3, #16]
 8005cfa:	4b34      	ldr	r3, [pc, #208]	; (8005dcc <LCD_Init+0x3e54>)
 8005cfc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005d00:	615a      	str	r2, [r3, #20]
 8005d02:	4b31      	ldr	r3, [pc, #196]	; (8005dc8 <LCD_Init+0x3e50>)
 8005d04:	2200      	movs	r2, #0
 8005d06:	60da      	str	r2, [r3, #12]
 8005d08:	4b30      	ldr	r3, [pc, #192]	; (8005dcc <LCD_Init+0x3e54>)
 8005d0a:	2280      	movs	r2, #128	; 0x80
 8005d0c:	615a      	str	r2, [r3, #20]
 8005d0e:	4b2f      	ldr	r3, [pc, #188]	; (8005dcc <LCD_Init+0x3e54>)
 8005d10:	2280      	movs	r2, #128	; 0x80
 8005d12:	611a      	str	r2, [r3, #16]
 8005d14:	4b2d      	ldr	r3, [pc, #180]	; (8005dcc <LCD_Init+0x3e54>)
 8005d16:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005d1a:	611a      	str	r2, [r3, #16]

		LCD_WR_REG(0xB8);	//设置GPIO配置
 8005d1c:	20b8      	movs	r0, #184	; 0xb8
 8005d1e:	f7fa fe35 	bl	800098c <LCD_WR_REG>
		LCD_WR_DATA(0x03);	//2个IO口设置成输出
 8005d22:	4b2a      	ldr	r3, [pc, #168]	; (8005dcc <LCD_Init+0x3e54>)
 8005d24:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005d28:	611a      	str	r2, [r3, #16]
 8005d2a:	4b28      	ldr	r3, [pc, #160]	; (8005dcc <LCD_Init+0x3e54>)
 8005d2c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005d30:	615a      	str	r2, [r3, #20]
 8005d32:	4b25      	ldr	r3, [pc, #148]	; (8005dc8 <LCD_Init+0x3e50>)
 8005d34:	2203      	movs	r2, #3
 8005d36:	60da      	str	r2, [r3, #12]
 8005d38:	4b24      	ldr	r3, [pc, #144]	; (8005dcc <LCD_Init+0x3e54>)
 8005d3a:	2280      	movs	r2, #128	; 0x80
 8005d3c:	615a      	str	r2, [r3, #20]
 8005d3e:	4b23      	ldr	r3, [pc, #140]	; (8005dcc <LCD_Init+0x3e54>)
 8005d40:	2280      	movs	r2, #128	; 0x80
 8005d42:	611a      	str	r2, [r3, #16]
 8005d44:	4b21      	ldr	r3, [pc, #132]	; (8005dcc <LCD_Init+0x3e54>)
 8005d46:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005d4a:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(0x01);	//GPIO使用正常的IO功能 
 8005d4c:	4b1f      	ldr	r3, [pc, #124]	; (8005dcc <LCD_Init+0x3e54>)
 8005d4e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005d52:	611a      	str	r2, [r3, #16]
 8005d54:	4b1d      	ldr	r3, [pc, #116]	; (8005dcc <LCD_Init+0x3e54>)
 8005d56:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005d5a:	615a      	str	r2, [r3, #20]
 8005d5c:	4b1a      	ldr	r3, [pc, #104]	; (8005dc8 <LCD_Init+0x3e50>)
 8005d5e:	2201      	movs	r2, #1
 8005d60:	60da      	str	r2, [r3, #12]
 8005d62:	4b1a      	ldr	r3, [pc, #104]	; (8005dcc <LCD_Init+0x3e54>)
 8005d64:	2280      	movs	r2, #128	; 0x80
 8005d66:	615a      	str	r2, [r3, #20]
 8005d68:	4b18      	ldr	r3, [pc, #96]	; (8005dcc <LCD_Init+0x3e54>)
 8005d6a:	2280      	movs	r2, #128	; 0x80
 8005d6c:	611a      	str	r2, [r3, #16]
 8005d6e:	4b17      	ldr	r3, [pc, #92]	; (8005dcc <LCD_Init+0x3e54>)
 8005d70:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005d74:	611a      	str	r2, [r3, #16]
		LCD_WR_REG(0xBA);
 8005d76:	20ba      	movs	r0, #186	; 0xba
 8005d78:	f7fa fe08 	bl	800098c <LCD_WR_REG>
		LCD_WR_DATA(0X01);	//GPIO[1:0]=01,控制LCD方向
 8005d7c:	4b13      	ldr	r3, [pc, #76]	; (8005dcc <LCD_Init+0x3e54>)
 8005d7e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005d82:	611a      	str	r2, [r3, #16]
 8005d84:	4b11      	ldr	r3, [pc, #68]	; (8005dcc <LCD_Init+0x3e54>)
 8005d86:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005d8a:	615a      	str	r2, [r3, #20]
 8005d8c:	4b0e      	ldr	r3, [pc, #56]	; (8005dc8 <LCD_Init+0x3e50>)
 8005d8e:	2201      	movs	r2, #1
 8005d90:	60da      	str	r2, [r3, #12]
 8005d92:	4b0e      	ldr	r3, [pc, #56]	; (8005dcc <LCD_Init+0x3e54>)
 8005d94:	2280      	movs	r2, #128	; 0x80
 8005d96:	615a      	str	r2, [r3, #20]
 8005d98:	4b0c      	ldr	r3, [pc, #48]	; (8005dcc <LCD_Init+0x3e54>)
 8005d9a:	2280      	movs	r2, #128	; 0x80
 8005d9c:	611a      	str	r2, [r3, #16]
 8005d9e:	4b0b      	ldr	r3, [pc, #44]	; (8005dcc <LCD_Init+0x3e54>)
 8005da0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005da4:	611a      	str	r2, [r3, #16]

		LCD_SSD_BackLightSet(100);	//背光设置为最亮
 8005da6:	2064      	movs	r0, #100	; 0x64
 8005da8:	f7fb ff36 	bl	8001c18 <LCD_SSD_BackLightSet>
	}
	LCD_Display_Dir(0);		 	//默认为竖屏
 8005dac:	2000      	movs	r0, #0
 8005dae:	f7fb ffd7 	bl	8001d60 <LCD_Display_Dir>
	LCD_LED = 1;					//点亮背光
 8005db2:	4b07      	ldr	r3, [pc, #28]	; (8005dd0 <LCD_Init+0x3e58>)
 8005db4:	2201      	movs	r2, #1
 8005db6:	601a      	str	r2, [r3, #0]
	LCD_Clear(WHITE);
 8005db8:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8005dbc:	f000 f80a 	bl	8005dd4 <LCD_Clear>
}
 8005dc0:	bf00      	nop
 8005dc2:	3718      	adds	r7, #24
 8005dc4:	46bd      	mov	sp, r7
 8005dc6:	bd80      	pop	{r7, pc}
 8005dc8:	40010c00 	.word	0x40010c00
 8005dcc:	40011000 	.word	0x40011000
 8005dd0:	422201a8 	.word	0x422201a8

08005dd4 <LCD_Clear>:

// Clear the screen with specific color
void LCD_Clear(uint16_t color) {
 8005dd4:	b580      	push	{r7, lr}
 8005dd6:	b084      	sub	sp, #16
 8005dd8:	af00      	add	r7, sp, #0
 8005dda:	4603      	mov	r3, r0
 8005ddc:	80fb      	strh	r3, [r7, #6]
	uint32_t index = 0;
 8005dde:	2300      	movs	r3, #0
 8005de0:	60fb      	str	r3, [r7, #12]
	uint32_t totalpoint = lcddev.width;
 8005de2:	4b2a      	ldr	r3, [pc, #168]	; (8005e8c <LCD_Clear+0xb8>)
 8005de4:	881b      	ldrh	r3, [r3, #0]
 8005de6:	60bb      	str	r3, [r7, #8]
	totalpoint *= lcddev.height; 			//得到总点数
 8005de8:	4b28      	ldr	r3, [pc, #160]	; (8005e8c <LCD_Clear+0xb8>)
 8005dea:	885b      	ldrh	r3, [r3, #2]
 8005dec:	461a      	mov	r2, r3
 8005dee:	68bb      	ldr	r3, [r7, #8]
 8005df0:	fb02 f303 	mul.w	r3, r2, r3
 8005df4:	60bb      	str	r3, [r7, #8]
	if ((lcddev.id == 0X6804) && (lcddev.dir == 1)) 			//6804横屏的时候特殊处理
 8005df6:	4b25      	ldr	r3, [pc, #148]	; (8005e8c <LCD_Clear+0xb8>)
 8005df8:	889b      	ldrh	r3, [r3, #4]
 8005dfa:	f646 0204 	movw	r2, #26628	; 0x6804
 8005dfe:	4293      	cmp	r3, r2
 8005e00:	d11a      	bne.n	8005e38 <LCD_Clear+0x64>
 8005e02:	4b22      	ldr	r3, [pc, #136]	; (8005e8c <LCD_Clear+0xb8>)
 8005e04:	799b      	ldrb	r3, [r3, #6]
 8005e06:	2b01      	cmp	r3, #1
 8005e08:	d116      	bne.n	8005e38 <LCD_Clear+0x64>
			{
		lcddev.dir = 0;
 8005e0a:	4b20      	ldr	r3, [pc, #128]	; (8005e8c <LCD_Clear+0xb8>)
 8005e0c:	2200      	movs	r2, #0
 8005e0e:	719a      	strb	r2, [r3, #6]
		lcddev.setxcmd = 0X2A;
 8005e10:	4b1e      	ldr	r3, [pc, #120]	; (8005e8c <LCD_Clear+0xb8>)
 8005e12:	222a      	movs	r2, #42	; 0x2a
 8005e14:	815a      	strh	r2, [r3, #10]
		lcddev.setycmd = 0X2B;
 8005e16:	4b1d      	ldr	r3, [pc, #116]	; (8005e8c <LCD_Clear+0xb8>)
 8005e18:	222b      	movs	r2, #43	; 0x2b
 8005e1a:	819a      	strh	r2, [r3, #12]
		LCD_SetCursor(0x00, 0x0000);		//设置光标位置
 8005e1c:	2100      	movs	r1, #0
 8005e1e:	2000      	movs	r0, #0
 8005e20:	f7fa fe86 	bl	8000b30 <LCD_SetCursor>
		lcddev.dir = 1;
 8005e24:	4b19      	ldr	r3, [pc, #100]	; (8005e8c <LCD_Clear+0xb8>)
 8005e26:	2201      	movs	r2, #1
 8005e28:	719a      	strb	r2, [r3, #6]
		lcddev.setxcmd = 0X2B;
 8005e2a:	4b18      	ldr	r3, [pc, #96]	; (8005e8c <LCD_Clear+0xb8>)
 8005e2c:	222b      	movs	r2, #43	; 0x2b
 8005e2e:	815a      	strh	r2, [r3, #10]
		lcddev.setycmd = 0X2A;
 8005e30:	4b16      	ldr	r3, [pc, #88]	; (8005e8c <LCD_Clear+0xb8>)
 8005e32:	222a      	movs	r2, #42	; 0x2a
 8005e34:	819a      	strh	r2, [r3, #12]
 8005e36:	e003      	b.n	8005e40 <LCD_Clear+0x6c>
	} else
		LCD_SetCursor(0x00, 0x0000);	//设置光标位置
 8005e38:	2100      	movs	r1, #0
 8005e3a:	2000      	movs	r0, #0
 8005e3c:	f7fa fe78 	bl	8000b30 <LCD_SetCursor>
	LCD_WriteRAM_Prepare();     		//开始写入GRAM	  	  
 8005e40:	f7fa fe6a 	bl	8000b18 <LCD_WriteRAM_Prepare>
	for (index = 0; index < totalpoint; index++)
 8005e44:	2300      	movs	r3, #0
 8005e46:	60fb      	str	r3, [r7, #12]
 8005e48:	e017      	b.n	8005e7a <LCD_Clear+0xa6>
		LCD_WR_DATA(color);
 8005e4a:	4b11      	ldr	r3, [pc, #68]	; (8005e90 <LCD_Clear+0xbc>)
 8005e4c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005e50:	611a      	str	r2, [r3, #16]
 8005e52:	4b0f      	ldr	r3, [pc, #60]	; (8005e90 <LCD_Clear+0xbc>)
 8005e54:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005e58:	615a      	str	r2, [r3, #20]
 8005e5a:	4a0e      	ldr	r2, [pc, #56]	; (8005e94 <LCD_Clear+0xc0>)
 8005e5c:	88fb      	ldrh	r3, [r7, #6]
 8005e5e:	60d3      	str	r3, [r2, #12]
 8005e60:	4b0b      	ldr	r3, [pc, #44]	; (8005e90 <LCD_Clear+0xbc>)
 8005e62:	2280      	movs	r2, #128	; 0x80
 8005e64:	615a      	str	r2, [r3, #20]
 8005e66:	4b0a      	ldr	r3, [pc, #40]	; (8005e90 <LCD_Clear+0xbc>)
 8005e68:	2280      	movs	r2, #128	; 0x80
 8005e6a:	611a      	str	r2, [r3, #16]
 8005e6c:	4b08      	ldr	r3, [pc, #32]	; (8005e90 <LCD_Clear+0xbc>)
 8005e6e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005e72:	611a      	str	r2, [r3, #16]
	for (index = 0; index < totalpoint; index++)
 8005e74:	68fb      	ldr	r3, [r7, #12]
 8005e76:	3301      	adds	r3, #1
 8005e78:	60fb      	str	r3, [r7, #12]
 8005e7a:	68fa      	ldr	r2, [r7, #12]
 8005e7c:	68bb      	ldr	r3, [r7, #8]
 8005e7e:	429a      	cmp	r2, r3
 8005e80:	d3e3      	bcc.n	8005e4a <LCD_Clear+0x76>
}
 8005e82:	bf00      	nop
 8005e84:	bf00      	nop
 8005e86:	3710      	adds	r7, #16
 8005e88:	46bd      	mov	sp, r7
 8005e8a:	bd80      	pop	{r7, pc}
 8005e8c:	20000080 	.word	0x20000080
 8005e90:	40011000 	.word	0x40011000
 8005e94:	40010c00 	.word	0x40010c00

08005e98 <LCD_ShowChar>:
// num: char to be displayed
// size: font size 12/16/24
// mode: display characters on the displayed content and do not wipe away the displayed content(1)
//       display characters on the displayed content and wipe away the displayed content(0)
void LCD_ShowChar(uint16_t x, uint16_t y, uint8_t num, uint8_t size,
		uint8_t mode) {
 8005e98:	b590      	push	{r4, r7, lr}
 8005e9a:	b085      	sub	sp, #20
 8005e9c:	af00      	add	r7, sp, #0
 8005e9e:	4604      	mov	r4, r0
 8005ea0:	4608      	mov	r0, r1
 8005ea2:	4611      	mov	r1, r2
 8005ea4:	461a      	mov	r2, r3
 8005ea6:	4623      	mov	r3, r4
 8005ea8:	80fb      	strh	r3, [r7, #6]
 8005eaa:	4603      	mov	r3, r0
 8005eac:	80bb      	strh	r3, [r7, #4]
 8005eae:	460b      	mov	r3, r1
 8005eb0:	70fb      	strb	r3, [r7, #3]
 8005eb2:	4613      	mov	r3, r2
 8005eb4:	70bb      	strb	r3, [r7, #2]
	uint8_t temp, t1, t;
	uint16_t y0 = y;
 8005eb6:	88bb      	ldrh	r3, [r7, #4]
 8005eb8:	817b      	strh	r3, [r7, #10]
	uint8_t csize = (size / 8 + ((size % 8) ? 1 : 0)) * (size / 2);	//得到字体一个字符对应点阵集所占的字节数
 8005eba:	78bb      	ldrb	r3, [r7, #2]
 8005ebc:	08db      	lsrs	r3, r3, #3
 8005ebe:	b2db      	uxtb	r3, r3
 8005ec0:	461a      	mov	r2, r3
 8005ec2:	78bb      	ldrb	r3, [r7, #2]
 8005ec4:	f003 0307 	and.w	r3, r3, #7
 8005ec8:	b2db      	uxtb	r3, r3
 8005eca:	2b00      	cmp	r3, #0
 8005ecc:	bf14      	ite	ne
 8005ece:	2301      	movne	r3, #1
 8005ed0:	2300      	moveq	r3, #0
 8005ed2:	b2db      	uxtb	r3, r3
 8005ed4:	4413      	add	r3, r2
 8005ed6:	b2db      	uxtb	r3, r3
 8005ed8:	78ba      	ldrb	r2, [r7, #2]
 8005eda:	0852      	lsrs	r2, r2, #1
 8005edc:	b2d2      	uxtb	r2, r2
 8005ede:	fb02 f303 	mul.w	r3, r2, r3
 8005ee2:	727b      	strb	r3, [r7, #9]
	num = num - ' ';		//得到偏移后的值（ASCII字库是从空格开始取模，所以-' '就是对应字符的字库）
 8005ee4:	78fb      	ldrb	r3, [r7, #3]
 8005ee6:	3b20      	subs	r3, #32
 8005ee8:	70fb      	strb	r3, [r7, #3]
	for (t = 0; t < csize; t++) {
 8005eea:	2300      	movs	r3, #0
 8005eec:	737b      	strb	r3, [r7, #13]
 8005eee:	e069      	b.n	8005fc4 <LCD_ShowChar+0x12c>
		if (size == 12)
 8005ef0:	78bb      	ldrb	r3, [r7, #2]
 8005ef2:	2b0c      	cmp	r3, #12
 8005ef4:	d10b      	bne.n	8005f0e <LCD_ShowChar+0x76>
			temp = asc2_1206[num][t]; 	 	//调用1206字体
 8005ef6:	78fa      	ldrb	r2, [r7, #3]
 8005ef8:	7b79      	ldrb	r1, [r7, #13]
 8005efa:	4838      	ldr	r0, [pc, #224]	; (8005fdc <LCD_ShowChar+0x144>)
 8005efc:	4613      	mov	r3, r2
 8005efe:	005b      	lsls	r3, r3, #1
 8005f00:	4413      	add	r3, r2
 8005f02:	009b      	lsls	r3, r3, #2
 8005f04:	4403      	add	r3, r0
 8005f06:	440b      	add	r3, r1
 8005f08:	781b      	ldrb	r3, [r3, #0]
 8005f0a:	73fb      	strb	r3, [r7, #15]
 8005f0c:	e019      	b.n	8005f42 <LCD_ShowChar+0xaa>
		else if (size == 16)
 8005f0e:	78bb      	ldrb	r3, [r7, #2]
 8005f10:	2b10      	cmp	r3, #16
 8005f12:	d108      	bne.n	8005f26 <LCD_ShowChar+0x8e>
			temp = asc2_1608[num][t];	//调用1608字体
 8005f14:	78fa      	ldrb	r2, [r7, #3]
 8005f16:	7b7b      	ldrb	r3, [r7, #13]
 8005f18:	4931      	ldr	r1, [pc, #196]	; (8005fe0 <LCD_ShowChar+0x148>)
 8005f1a:	0112      	lsls	r2, r2, #4
 8005f1c:	440a      	add	r2, r1
 8005f1e:	4413      	add	r3, r2
 8005f20:	781b      	ldrb	r3, [r3, #0]
 8005f22:	73fb      	strb	r3, [r7, #15]
 8005f24:	e00d      	b.n	8005f42 <LCD_ShowChar+0xaa>
		else if (size == 24)
 8005f26:	78bb      	ldrb	r3, [r7, #2]
 8005f28:	2b18      	cmp	r3, #24
 8005f2a:	d150      	bne.n	8005fce <LCD_ShowChar+0x136>
			temp = asc2_2412[num][t];	//调用2412字体
 8005f2c:	78fa      	ldrb	r2, [r7, #3]
 8005f2e:	7b79      	ldrb	r1, [r7, #13]
 8005f30:	482c      	ldr	r0, [pc, #176]	; (8005fe4 <LCD_ShowChar+0x14c>)
 8005f32:	4613      	mov	r3, r2
 8005f34:	00db      	lsls	r3, r3, #3
 8005f36:	4413      	add	r3, r2
 8005f38:	009b      	lsls	r3, r3, #2
 8005f3a:	4403      	add	r3, r0
 8005f3c:	440b      	add	r3, r1
 8005f3e:	781b      	ldrb	r3, [r3, #0]
 8005f40:	73fb      	strb	r3, [r7, #15]
		else
			return;								//没有的字库
		for (t1 = 0; t1 < 8; t1++) {
 8005f42:	2300      	movs	r3, #0
 8005f44:	73bb      	strb	r3, [r7, #14]
 8005f46:	e035      	b.n	8005fb4 <LCD_ShowChar+0x11c>
			if (temp & 0x80)
 8005f48:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005f4c:	2b00      	cmp	r3, #0
 8005f4e:	da07      	bge.n	8005f60 <LCD_ShowChar+0xc8>
				LCD_Fast_DrawPoint(x, y, POINT_COLOR);
 8005f50:	4b25      	ldr	r3, [pc, #148]	; (8005fe8 <LCD_ShowChar+0x150>)
 8005f52:	881a      	ldrh	r2, [r3, #0]
 8005f54:	88b9      	ldrh	r1, [r7, #4]
 8005f56:	88fb      	ldrh	r3, [r7, #6]
 8005f58:	4618      	mov	r0, r3
 8005f5a:	f7fb fbc7 	bl	80016ec <LCD_Fast_DrawPoint>
 8005f5e:	e00a      	b.n	8005f76 <LCD_ShowChar+0xde>
			else if (mode == 0)
 8005f60:	f897 3020 	ldrb.w	r3, [r7, #32]
 8005f64:	2b00      	cmp	r3, #0
 8005f66:	d106      	bne.n	8005f76 <LCD_ShowChar+0xde>
				LCD_Fast_DrawPoint(x, y, BACK_COLOR);
 8005f68:	4b20      	ldr	r3, [pc, #128]	; (8005fec <LCD_ShowChar+0x154>)
 8005f6a:	881a      	ldrh	r2, [r3, #0]
 8005f6c:	88b9      	ldrh	r1, [r7, #4]
 8005f6e:	88fb      	ldrh	r3, [r7, #6]
 8005f70:	4618      	mov	r0, r3
 8005f72:	f7fb fbbb 	bl	80016ec <LCD_Fast_DrawPoint>
			temp <<= 1;
 8005f76:	7bfb      	ldrb	r3, [r7, #15]
 8005f78:	005b      	lsls	r3, r3, #1
 8005f7a:	73fb      	strb	r3, [r7, #15]
			y++;
 8005f7c:	88bb      	ldrh	r3, [r7, #4]
 8005f7e:	3301      	adds	r3, #1
 8005f80:	80bb      	strh	r3, [r7, #4]
			if (y >= lcddev.height)
 8005f82:	4b1b      	ldr	r3, [pc, #108]	; (8005ff0 <LCD_ShowChar+0x158>)
 8005f84:	885b      	ldrh	r3, [r3, #2]
 8005f86:	88ba      	ldrh	r2, [r7, #4]
 8005f88:	429a      	cmp	r2, r3
 8005f8a:	d222      	bcs.n	8005fd2 <LCD_ShowChar+0x13a>
				return;		//超区域了
			if ((y - y0) == size) {
 8005f8c:	88ba      	ldrh	r2, [r7, #4]
 8005f8e:	897b      	ldrh	r3, [r7, #10]
 8005f90:	1ad2      	subs	r2, r2, r3
 8005f92:	78bb      	ldrb	r3, [r7, #2]
 8005f94:	429a      	cmp	r2, r3
 8005f96:	d10a      	bne.n	8005fae <LCD_ShowChar+0x116>
				y = y0;
 8005f98:	897b      	ldrh	r3, [r7, #10]
 8005f9a:	80bb      	strh	r3, [r7, #4]
				x++;
 8005f9c:	88fb      	ldrh	r3, [r7, #6]
 8005f9e:	3301      	adds	r3, #1
 8005fa0:	80fb      	strh	r3, [r7, #6]
				if (x >= lcddev.width)
 8005fa2:	4b13      	ldr	r3, [pc, #76]	; (8005ff0 <LCD_ShowChar+0x158>)
 8005fa4:	881b      	ldrh	r3, [r3, #0]
 8005fa6:	88fa      	ldrh	r2, [r7, #6]
 8005fa8:	429a      	cmp	r2, r3
 8005faa:	d307      	bcc.n	8005fbc <LCD_ShowChar+0x124>
					return;	//超区域了
 8005fac:	e012      	b.n	8005fd4 <LCD_ShowChar+0x13c>
		for (t1 = 0; t1 < 8; t1++) {
 8005fae:	7bbb      	ldrb	r3, [r7, #14]
 8005fb0:	3301      	adds	r3, #1
 8005fb2:	73bb      	strb	r3, [r7, #14]
 8005fb4:	7bbb      	ldrb	r3, [r7, #14]
 8005fb6:	2b07      	cmp	r3, #7
 8005fb8:	d9c6      	bls.n	8005f48 <LCD_ShowChar+0xb0>
 8005fba:	e000      	b.n	8005fbe <LCD_ShowChar+0x126>
				break;
 8005fbc:	bf00      	nop
	for (t = 0; t < csize; t++) {
 8005fbe:	7b7b      	ldrb	r3, [r7, #13]
 8005fc0:	3301      	adds	r3, #1
 8005fc2:	737b      	strb	r3, [r7, #13]
 8005fc4:	7b7a      	ldrb	r2, [r7, #13]
 8005fc6:	7a7b      	ldrb	r3, [r7, #9]
 8005fc8:	429a      	cmp	r2, r3
 8005fca:	d391      	bcc.n	8005ef0 <LCD_ShowChar+0x58>
 8005fcc:	e002      	b.n	8005fd4 <LCD_ShowChar+0x13c>
			return;								//没有的字库
 8005fce:	bf00      	nop
 8005fd0:	e000      	b.n	8005fd4 <LCD_ShowChar+0x13c>
				return;		//超区域了
 8005fd2:	bf00      	nop
			}
		}
	}
}
 8005fd4:	3714      	adds	r7, #20
 8005fd6:	46bd      	mov	sp, r7
 8005fd8:	bd90      	pop	{r4, r7, pc}
 8005fda:	bf00      	nop
 8005fdc:	0800ab18 	.word	0x0800ab18
 8005fe0:	0800af8c 	.word	0x0800af8c
 8005fe4:	0800b57c 	.word	0x0800b57c
 8005fe8:	2000007c 	.word	0x2000007c
 8005fec:	20000000 	.word	0x20000000
 8005ff0:	20000080 	.word	0x20000080

08005ff4 <LCD_ShowString>:
// x,y: starting coordinate
// width, height: display area size
// size: font size // x,y: starting coordinate
// *p: string
void LCD_ShowString(uint16_t x, uint16_t y, uint16_t width, uint16_t height,
		uint8_t size, uint8_t *p) {
 8005ff4:	b590      	push	{r4, r7, lr}
 8005ff6:	b087      	sub	sp, #28
 8005ff8:	af02      	add	r7, sp, #8
 8005ffa:	4604      	mov	r4, r0
 8005ffc:	4608      	mov	r0, r1
 8005ffe:	4611      	mov	r1, r2
 8006000:	461a      	mov	r2, r3
 8006002:	4623      	mov	r3, r4
 8006004:	80fb      	strh	r3, [r7, #6]
 8006006:	4603      	mov	r3, r0
 8006008:	80bb      	strh	r3, [r7, #4]
 800600a:	460b      	mov	r3, r1
 800600c:	807b      	strh	r3, [r7, #2]
 800600e:	4613      	mov	r3, r2
 8006010:	803b      	strh	r3, [r7, #0]
	uint8_t x0 = x;
 8006012:	88fb      	ldrh	r3, [r7, #6]
 8006014:	73fb      	strb	r3, [r7, #15]
	width += x;
 8006016:	887a      	ldrh	r2, [r7, #2]
 8006018:	88fb      	ldrh	r3, [r7, #6]
 800601a:	4413      	add	r3, r2
 800601c:	807b      	strh	r3, [r7, #2]
	height += y;
 800601e:	883a      	ldrh	r2, [r7, #0]
 8006020:	88bb      	ldrh	r3, [r7, #4]
 8006022:	4413      	add	r3, r2
 8006024:	803b      	strh	r3, [r7, #0]
	while ((*p <= '~') && (*p >= ' '))	//判断是不是非法字符!
 8006026:	e024      	b.n	8006072 <LCD_ShowString+0x7e>
	{
		if (x >= width) {
 8006028:	88fa      	ldrh	r2, [r7, #6]
 800602a:	887b      	ldrh	r3, [r7, #2]
 800602c:	429a      	cmp	r2, r3
 800602e:	d307      	bcc.n	8006040 <LCD_ShowString+0x4c>
			x = x0;
 8006030:	7bfb      	ldrb	r3, [r7, #15]
 8006032:	80fb      	strh	r3, [r7, #6]
			y += size;
 8006034:	f897 3020 	ldrb.w	r3, [r7, #32]
 8006038:	b29a      	uxth	r2, r3
 800603a:	88bb      	ldrh	r3, [r7, #4]
 800603c:	4413      	add	r3, r2
 800603e:	80bb      	strh	r3, [r7, #4]
		}
		if (y >= height)
 8006040:	88ba      	ldrh	r2, [r7, #4]
 8006042:	883b      	ldrh	r3, [r7, #0]
 8006044:	429a      	cmp	r2, r3
 8006046:	d21d      	bcs.n	8006084 <LCD_ShowString+0x90>
			break;	//退出
		LCD_ShowChar(x, y, *p, size, 0);
 8006048:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800604a:	781a      	ldrb	r2, [r3, #0]
 800604c:	f897 3020 	ldrb.w	r3, [r7, #32]
 8006050:	88b9      	ldrh	r1, [r7, #4]
 8006052:	88f8      	ldrh	r0, [r7, #6]
 8006054:	2400      	movs	r4, #0
 8006056:	9400      	str	r4, [sp, #0]
 8006058:	f7ff ff1e 	bl	8005e98 <LCD_ShowChar>
		x += size / 2;
 800605c:	f897 3020 	ldrb.w	r3, [r7, #32]
 8006060:	085b      	lsrs	r3, r3, #1
 8006062:	b2db      	uxtb	r3, r3
 8006064:	b29a      	uxth	r2, r3
 8006066:	88fb      	ldrh	r3, [r7, #6]
 8006068:	4413      	add	r3, r2
 800606a:	80fb      	strh	r3, [r7, #6]
		p++;
 800606c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800606e:	3301      	adds	r3, #1
 8006070:	627b      	str	r3, [r7, #36]	; 0x24
	while ((*p <= '~') && (*p >= ' '))	//判断是不是非法字符!
 8006072:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006074:	781b      	ldrb	r3, [r3, #0]
 8006076:	2b7e      	cmp	r3, #126	; 0x7e
 8006078:	d805      	bhi.n	8006086 <LCD_ShowString+0x92>
 800607a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800607c:	781b      	ldrb	r3, [r3, #0]
 800607e:	2b1f      	cmp	r3, #31
 8006080:	d8d2      	bhi.n	8006028 <LCD_ShowString+0x34>
	}
}
 8006082:	e000      	b.n	8006086 <LCD_ShowString+0x92>
			break;	//退出
 8006084:	bf00      	nop
}
 8006086:	bf00      	nop
 8006088:	3714      	adds	r7, #20
 800608a:	46bd      	mov	sp, r7
 800608c:	bd90      	pop	{r4, r7, pc}

0800608e <LCD_ShowPicture>:


void LCD_ShowPicture(uint16_t x,uint16_t y,uint16_t column,uint16_t row,unsigned short *pic) {
 800608e:	b590      	push	{r4, r7, lr}
 8006090:	b085      	sub	sp, #20
 8006092:	af00      	add	r7, sp, #0
 8006094:	4604      	mov	r4, r0
 8006096:	4608      	mov	r0, r1
 8006098:	4611      	mov	r1, r2
 800609a:	461a      	mov	r2, r3
 800609c:	4623      	mov	r3, r4
 800609e:	80fb      	strh	r3, [r7, #6]
 80060a0:	4603      	mov	r3, r0
 80060a2:	80bb      	strh	r3, [r7, #4]
 80060a4:	460b      	mov	r3, r1
 80060a6:	807b      	strh	r3, [r7, #2]
 80060a8:	4613      	mov	r3, r2
 80060aa:	803b      	strh	r3, [r7, #0]
	uint16_t m,h;
	uint16_t *data=(uint16_t *)pic;
 80060ac:	6a3b      	ldr	r3, [r7, #32]
 80060ae:	60bb      	str	r3, [r7, #8]
	for(h=0+y;h<row+y;h++) //60
 80060b0:	88bb      	ldrh	r3, [r7, #4]
 80060b2:	81bb      	strh	r3, [r7, #12]
 80060b4:	e017      	b.n	80060e6 <LCD_ShowPicture+0x58>
	{
		for(m=0+x;m<column+x;m++) //180
 80060b6:	88fb      	ldrh	r3, [r7, #6]
 80060b8:	81fb      	strh	r3, [r7, #14]
 80060ba:	e00b      	b.n	80060d4 <LCD_ShowPicture+0x46>
		{
		LCD_Fast_DrawPoint(m,h,*data++);
 80060bc:	68bb      	ldr	r3, [r7, #8]
 80060be:	1c9a      	adds	r2, r3, #2
 80060c0:	60ba      	str	r2, [r7, #8]
 80060c2:	881a      	ldrh	r2, [r3, #0]
 80060c4:	89b9      	ldrh	r1, [r7, #12]
 80060c6:	89fb      	ldrh	r3, [r7, #14]
 80060c8:	4618      	mov	r0, r3
 80060ca:	f7fb fb0f 	bl	80016ec <LCD_Fast_DrawPoint>
		for(m=0+x;m<column+x;m++) //180
 80060ce:	89fb      	ldrh	r3, [r7, #14]
 80060d0:	3301      	adds	r3, #1
 80060d2:	81fb      	strh	r3, [r7, #14]
 80060d4:	89fa      	ldrh	r2, [r7, #14]
 80060d6:	8879      	ldrh	r1, [r7, #2]
 80060d8:	88fb      	ldrh	r3, [r7, #6]
 80060da:	440b      	add	r3, r1
 80060dc:	429a      	cmp	r2, r3
 80060de:	dbed      	blt.n	80060bc <LCD_ShowPicture+0x2e>
	for(h=0+y;h<row+y;h++) //60
 80060e0:	89bb      	ldrh	r3, [r7, #12]
 80060e2:	3301      	adds	r3, #1
 80060e4:	81bb      	strh	r3, [r7, #12]
 80060e6:	89ba      	ldrh	r2, [r7, #12]
 80060e8:	8839      	ldrh	r1, [r7, #0]
 80060ea:	88bb      	ldrh	r3, [r7, #4]
 80060ec:	440b      	add	r3, r1
 80060ee:	429a      	cmp	r2, r3
 80060f0:	dbe1      	blt.n	80060b6 <LCD_ShowPicture+0x28>
		}
	}
}
 80060f2:	bf00      	nop
 80060f4:	bf00      	nop
 80060f6:	3714      	adds	r7, #20
 80060f8:	46bd      	mov	sp, r7
 80060fa:	bd90      	pop	{r4, r7, pc}

080060fc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80060fc:	b580      	push	{r7, lr}
 80060fe:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8006100:	f000 fcdc 	bl	8006abc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8006104:	f000 f81e 	bl	8006144 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  LCD_Init();
 8006108:	f7fb ff36 	bl	8001f78 <LCD_Init>
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800610c:	f7fa fb9a 	bl	8000844 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8006110:	f000 fada 	bl	80066c8 <MX_USART1_UART_Init>
  MX_RTC_Init();
 8006114:	f000 f87a 	bl	800620c <MX_RTC_Init>
  MX_TIM3_Init();
 8006118:	f000 fa62 	bl	80065e0 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  HAL_UART_Receive_IT(&huart1, (uint8_t *)rxBuffer, 1);
 800611c:	2201      	movs	r2, #1
 800611e:	4905      	ldr	r1, [pc, #20]	; (8006134 <main+0x38>)
 8006120:	4805      	ldr	r0, [pc, #20]	; (8006138 <main+0x3c>)
 8006122:	f003 fa5c 	bl	80095de <HAL_UART_Receive_IT>
  HAL_TIM_Base_Start_IT(&htim3);
 8006126:	4805      	ldr	r0, [pc, #20]	; (800613c <main+0x40>)
 8006128:	f002 fd9c 	bl	8008c64 <HAL_TIM_Base_Start_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  draw_initial_screen((uint8_t *) "Zhang Sheng");
 800612c:	4804      	ldr	r0, [pc, #16]	; (8006140 <main+0x44>)
 800612e:	f000 fb65 	bl	80067fc <draw_initial_screen>

  while (1)
 8006132:	e7fe      	b.n	8006132 <main+0x36>
 8006134:	200000a4 	.word	0x200000a4
 8006138:	20000cc4 	.word	0x20000cc4
 800613c:	20000c7c 	.word	0x20000c7c
 8006140:	0800aaa4 	.word	0x0800aaa4

08006144 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8006144:	b580      	push	{r7, lr}
 8006146:	b096      	sub	sp, #88	; 0x58
 8006148:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800614a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800614e:	2228      	movs	r2, #40	; 0x28
 8006150:	2100      	movs	r1, #0
 8006152:	4618      	mov	r0, r3
 8006154:	f004 f808 	bl	800a168 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8006158:	f107 031c 	add.w	r3, r7, #28
 800615c:	2200      	movs	r2, #0
 800615e:	601a      	str	r2, [r3, #0]
 8006160:	605a      	str	r2, [r3, #4]
 8006162:	609a      	str	r2, [r3, #8]
 8006164:	60da      	str	r2, [r3, #12]
 8006166:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8006168:	1d3b      	adds	r3, r7, #4
 800616a:	2200      	movs	r2, #0
 800616c:	601a      	str	r2, [r3, #0]
 800616e:	605a      	str	r2, [r3, #4]
 8006170:	609a      	str	r2, [r3, #8]
 8006172:	60da      	str	r2, [r3, #12]
 8006174:	611a      	str	r2, [r3, #16]
 8006176:	615a      	str	r2, [r3, #20]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 8006178:	2309      	movs	r3, #9
 800617a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800617c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8006180:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8006182:	2300      	movs	r3, #0
 8006184:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8006186:	2301      	movs	r3, #1
 8006188:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 800618a:	2301      	movs	r3, #1
 800618c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800618e:	2302      	movs	r3, #2
 8006190:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8006192:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8006196:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8006198:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 800619c:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800619e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80061a2:	4618      	mov	r0, r3
 80061a4:	f001 f948 	bl	8007438 <HAL_RCC_OscConfig>
 80061a8:	4603      	mov	r3, r0
 80061aa:	2b00      	cmp	r3, #0
 80061ac:	d001      	beq.n	80061b2 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 80061ae:	f000 f828 	bl	8006202 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80061b2:	230f      	movs	r3, #15
 80061b4:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80061b6:	2302      	movs	r3, #2
 80061b8:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80061ba:	2300      	movs	r3, #0
 80061bc:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80061be:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80061c2:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80061c4:	2300      	movs	r3, #0
 80061c6:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80061c8:	f107 031c 	add.w	r3, r7, #28
 80061cc:	2102      	movs	r1, #2
 80061ce:	4618      	mov	r0, r3
 80061d0:	f001 fbb4 	bl	800793c <HAL_RCC_ClockConfig>
 80061d4:	4603      	mov	r3, r0
 80061d6:	2b00      	cmp	r3, #0
 80061d8:	d001      	beq.n	80061de <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80061da:	f000 f812 	bl	8006202 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80061de:	2301      	movs	r3, #1
 80061e0:	607b      	str	r3, [r7, #4]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 80061e2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80061e6:	60bb      	str	r3, [r7, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80061e8:	1d3b      	adds	r3, r7, #4
 80061ea:	4618      	mov	r0, r3
 80061ec:	f001 fd34 	bl	8007c58 <HAL_RCCEx_PeriphCLKConfig>
 80061f0:	4603      	mov	r3, r0
 80061f2:	2b00      	cmp	r3, #0
 80061f4:	d001      	beq.n	80061fa <SystemClock_Config+0xb6>
  {
    Error_Handler();
 80061f6:	f000 f804 	bl	8006202 <Error_Handler>
  }
}
 80061fa:	bf00      	nop
 80061fc:	3758      	adds	r7, #88	; 0x58
 80061fe:	46bd      	mov	sp, r7
 8006200:	bd80      	pop	{r7, pc}

08006202 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8006202:	b480      	push	{r7}
 8006204:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8006206:	b672      	cpsid	i
}
 8006208:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800620a:	e7fe      	b.n	800620a <Error_Handler+0x8>

0800620c <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 800620c:	b580      	push	{r7, lr}
 800620e:	b086      	sub	sp, #24
 8006210:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */
  RTC_DateTypeDef datebuff;   //定义一个datebuff的日期结构体
  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8006212:	f107 0310 	add.w	r3, r7, #16
 8006216:	2100      	movs	r1, #0
 8006218:	460a      	mov	r2, r1
 800621a:	801a      	strh	r2, [r3, #0]
 800621c:	460a      	mov	r2, r1
 800621e:	709a      	strb	r2, [r3, #2]
  RTC_DateTypeDef DateToUpdate = {0};
 8006220:	2300      	movs	r3, #0
 8006222:	60fb      	str	r3, [r7, #12]

  /* USER CODE BEGIN RTC_Init 1 */
  __HAL_RCC_BKP_CLK_ENABLE();  //开启后备区域时钟
 8006224:	4b3b      	ldr	r3, [pc, #236]	; (8006314 <MX_RTC_Init+0x108>)
 8006226:	69db      	ldr	r3, [r3, #28]
 8006228:	4a3a      	ldr	r2, [pc, #232]	; (8006314 <MX_RTC_Init+0x108>)
 800622a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800622e:	61d3      	str	r3, [r2, #28]
 8006230:	4b38      	ldr	r3, [pc, #224]	; (8006314 <MX_RTC_Init+0x108>)
 8006232:	69db      	ldr	r3, [r3, #28]
 8006234:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006238:	60bb      	str	r3, [r7, #8]
 800623a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();  //开启电源时钟
 800623c:	4b35      	ldr	r3, [pc, #212]	; (8006314 <MX_RTC_Init+0x108>)
 800623e:	69db      	ldr	r3, [r3, #28]
 8006240:	4a34      	ldr	r2, [pc, #208]	; (8006314 <MX_RTC_Init+0x108>)
 8006242:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006246:	61d3      	str	r3, [r2, #28]
 8006248:	4b32      	ldr	r3, [pc, #200]	; (8006314 <MX_RTC_Init+0x108>)
 800624a:	69db      	ldr	r3, [r3, #28]
 800624c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006250:	607b      	str	r3, [r7, #4]
 8006252:	687b      	ldr	r3, [r7, #4]
  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8006254:	4b30      	ldr	r3, [pc, #192]	; (8006318 <MX_RTC_Init+0x10c>)
 8006256:	4a31      	ldr	r2, [pc, #196]	; (800631c <MX_RTC_Init+0x110>)
 8006258:	601a      	str	r2, [r3, #0]
  hrtc.Init.AsynchPrediv = RTC_AUTO_1_SECOND;
 800625a:	4b2f      	ldr	r3, [pc, #188]	; (8006318 <MX_RTC_Init+0x10c>)
 800625c:	f04f 32ff 	mov.w	r2, #4294967295
 8006260:	605a      	str	r2, [r3, #4]
  hrtc.Init.OutPut = RTC_OUTPUTSOURCE_NONE;
 8006262:	4b2d      	ldr	r3, [pc, #180]	; (8006318 <MX_RTC_Init+0x10c>)
 8006264:	2200      	movs	r2, #0
 8006266:	609a      	str	r2, [r3, #8]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8006268:	482b      	ldr	r0, [pc, #172]	; (8006318 <MX_RTC_Init+0x10c>)
 800626a:	f001 fe83 	bl	8007f74 <HAL_RTC_Init>
 800626e:	4603      	mov	r3, r0
 8006270:	2b00      	cmp	r3, #0
 8006272:	d001      	beq.n	8006278 <MX_RTC_Init+0x6c>
  {
    Error_Handler();
 8006274:	f7ff ffc5 	bl	8006202 <Error_Handler>
  }

  /* USER CODE BEGIN Check_RTC_BKUP */

  if (HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_DR1) != 0xABAB) {
 8006278:	2101      	movs	r1, #1
 800627a:	4827      	ldr	r0, [pc, #156]	; (8006318 <MX_RTC_Init+0x10c>)
 800627c:	f002 fc86 	bl	8008b8c <HAL_RTCEx_BKUPRead>
 8006280:	4603      	mov	r3, r0
 8006282:	f64a 32ab 	movw	r2, #43947	; 0xabab
 8006286:	4293      	cmp	r3, r2
 8006288:	d02c      	beq.n	80062e4 <MX_RTC_Init+0xd8>
   
  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x12;
 800628a:	2312      	movs	r3, #18
 800628c:	743b      	strb	r3, [r7, #16]
  sTime.Minutes = 0x32;
 800628e:	2332      	movs	r3, #50	; 0x32
 8006290:	747b      	strb	r3, [r7, #17]
  sTime.Seconds = 0x59;
 8006292:	2359      	movs	r3, #89	; 0x59
 8006294:	74bb      	strb	r3, [r7, #18]

  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8006296:	f107 0310 	add.w	r3, r7, #16
 800629a:	2201      	movs	r2, #1
 800629c:	4619      	mov	r1, r3
 800629e:	481e      	ldr	r0, [pc, #120]	; (8006318 <MX_RTC_Init+0x10c>)
 80062a0:	f001 fef4 	bl	800808c <HAL_RTC_SetTime>
 80062a4:	4603      	mov	r3, r0
 80062a6:	2b00      	cmp	r3, #0
 80062a8:	d001      	beq.n	80062ae <MX_RTC_Init+0xa2>
  {
    Error_Handler();
 80062aa:	f7ff ffaa 	bl	8006202 <Error_Handler>
  }
  DateToUpdate.WeekDay = RTC_WEEKDAY_WEDNESDAY;
 80062ae:	2303      	movs	r3, #3
 80062b0:	733b      	strb	r3, [r7, #12]
  DateToUpdate.Month = RTC_MONTH_NOVEMBER;
 80062b2:	2311      	movs	r3, #17
 80062b4:	737b      	strb	r3, [r7, #13]
  DateToUpdate.Date = 0x22;
 80062b6:	2322      	movs	r3, #34	; 0x22
 80062b8:	73bb      	strb	r3, [r7, #14]
  DateToUpdate.Year = 0x23;
 80062ba:	2323      	movs	r3, #35	; 0x23
 80062bc:	73fb      	strb	r3, [r7, #15]

  if (HAL_RTC_SetDate(&hrtc, &DateToUpdate, RTC_FORMAT_BCD) != HAL_OK)
 80062be:	f107 030c 	add.w	r3, r7, #12
 80062c2:	2201      	movs	r2, #1
 80062c4:	4619      	mov	r1, r3
 80062c6:	4814      	ldr	r0, [pc, #80]	; (8006318 <MX_RTC_Init+0x10c>)
 80062c8:	f002 f850 	bl	800836c <HAL_RTC_SetDate>
 80062cc:	4603      	mov	r3, r0
 80062ce:	2b00      	cmp	r3, #0
 80062d0:	d001      	beq.n	80062d6 <MX_RTC_Init+0xca>
  {
    Error_Handler();
 80062d2:	f7ff ff96 	bl	8006202 <Error_Handler>
  }
  
  /* USER CODE BEGIN RTC_Init 2 */
  HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_DR1, 0xABAB);
 80062d6:	f64a 32ab 	movw	r2, #43947	; 0xabab
 80062da:	2101      	movs	r1, #1
 80062dc:	480e      	ldr	r0, [pc, #56]	; (8006318 <MX_RTC_Init+0x10c>)
 80062de:	f002 fc3b 	bl	8008b58 <HAL_RTCEx_BKUPWrite>
        Error_Handler();
      }
      __HAL_RTC_SECOND_ENABLE_IT(&hrtc,RTC_IT_SEC);         //开启RTC时钟秒中断
  }
  /* USER CODE END RTC_Init 2 */
}
 80062e2:	e013      	b.n	800630c <MX_RTC_Init+0x100>
      if (HAL_RTC_SetDate(&hrtc, &DateToUpdate, RTC_FORMAT_BIN) != HAL_OK)
 80062e4:	f107 030c 	add.w	r3, r7, #12
 80062e8:	2200      	movs	r2, #0
 80062ea:	4619      	mov	r1, r3
 80062ec:	480a      	ldr	r0, [pc, #40]	; (8006318 <MX_RTC_Init+0x10c>)
 80062ee:	f002 f83d 	bl	800836c <HAL_RTC_SetDate>
 80062f2:	4603      	mov	r3, r0
 80062f4:	2b00      	cmp	r3, #0
 80062f6:	d001      	beq.n	80062fc <MX_RTC_Init+0xf0>
        Error_Handler();
 80062f8:	f7ff ff83 	bl	8006202 <Error_Handler>
      __HAL_RTC_SECOND_ENABLE_IT(&hrtc,RTC_IT_SEC);         //开启RTC时钟秒中断
 80062fc:	4b06      	ldr	r3, [pc, #24]	; (8006318 <MX_RTC_Init+0x10c>)
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	681a      	ldr	r2, [r3, #0]
 8006302:	4b05      	ldr	r3, [pc, #20]	; (8006318 <MX_RTC_Init+0x10c>)
 8006304:	681b      	ldr	r3, [r3, #0]
 8006306:	f042 0201 	orr.w	r2, r2, #1
 800630a:	601a      	str	r2, [r3, #0]
}
 800630c:	bf00      	nop
 800630e:	3718      	adds	r7, #24
 8006310:	46bd      	mov	sp, r7
 8006312:	bd80      	pop	{r7, pc}
 8006314:	40021000 	.word	0x40021000
 8006318:	20000090 	.word	0x20000090
 800631c:	40002800 	.word	0x40002800

08006320 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8006320:	b580      	push	{r7, lr}
 8006322:	b084      	sub	sp, #16
 8006324:	af00      	add	r7, sp, #0
 8006326:	6078      	str	r0, [r7, #4]

  if(rtcHandle->Instance==RTC)
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	4a0f      	ldr	r2, [pc, #60]	; (800636c <HAL_RTC_MspInit+0x4c>)
 800632e:	4293      	cmp	r3, r2
 8006330:	d118      	bne.n	8006364 <HAL_RTC_MspInit+0x44>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    HAL_PWR_EnableBkUpAccess();
 8006332:	f001 f875 	bl	8007420 <HAL_PWR_EnableBkUpAccess>
    /* Enable BKP CLK enable for backup registers */
    __HAL_RCC_BKP_CLK_ENABLE();
 8006336:	4b0e      	ldr	r3, [pc, #56]	; (8006370 <HAL_RTC_MspInit+0x50>)
 8006338:	69db      	ldr	r3, [r3, #28]
 800633a:	4a0d      	ldr	r2, [pc, #52]	; (8006370 <HAL_RTC_MspInit+0x50>)
 800633c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8006340:	61d3      	str	r3, [r2, #28]
 8006342:	4b0b      	ldr	r3, [pc, #44]	; (8006370 <HAL_RTC_MspInit+0x50>)
 8006344:	69db      	ldr	r3, [r3, #28]
 8006346:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800634a:	60fb      	str	r3, [r7, #12]
 800634c:	68fb      	ldr	r3, [r7, #12]
    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 800634e:	4b09      	ldr	r3, [pc, #36]	; (8006374 <HAL_RTC_MspInit+0x54>)
 8006350:	2201      	movs	r2, #1
 8006352:	601a      	str	r2, [r3, #0]

    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_IRQn, 0, 0);
 8006354:	2200      	movs	r2, #0
 8006356:	2100      	movs	r1, #0
 8006358:	2003      	movs	r0, #3
 800635a:	f000 fd0c 	bl	8006d76 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_IRQn);
 800635e:	2003      	movs	r0, #3
 8006360:	f000 fd25 	bl	8006dae <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8006364:	bf00      	nop
 8006366:	3710      	adds	r7, #16
 8006368:	46bd      	mov	sp, r7
 800636a:	bd80      	pop	{r7, pc}
 800636c:	40002800 	.word	0x40002800
 8006370:	40021000 	.word	0x40021000
 8006374:	4242043c 	.word	0x4242043c

08006378 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8006378:	b580      	push	{r7, lr}
 800637a:	b084      	sub	sp, #16
 800637c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800637e:	4b16      	ldr	r3, [pc, #88]	; (80063d8 <HAL_MspInit+0x60>)
 8006380:	699b      	ldr	r3, [r3, #24]
 8006382:	4a15      	ldr	r2, [pc, #84]	; (80063d8 <HAL_MspInit+0x60>)
 8006384:	f043 0301 	orr.w	r3, r3, #1
 8006388:	6193      	str	r3, [r2, #24]
 800638a:	4b13      	ldr	r3, [pc, #76]	; (80063d8 <HAL_MspInit+0x60>)
 800638c:	699b      	ldr	r3, [r3, #24]
 800638e:	f003 0301 	and.w	r3, r3, #1
 8006392:	60bb      	str	r3, [r7, #8]
 8006394:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8006396:	4b10      	ldr	r3, [pc, #64]	; (80063d8 <HAL_MspInit+0x60>)
 8006398:	69db      	ldr	r3, [r3, #28]
 800639a:	4a0f      	ldr	r2, [pc, #60]	; (80063d8 <HAL_MspInit+0x60>)
 800639c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80063a0:	61d3      	str	r3, [r2, #28]
 80063a2:	4b0d      	ldr	r3, [pc, #52]	; (80063d8 <HAL_MspInit+0x60>)
 80063a4:	69db      	ldr	r3, [r3, #28]
 80063a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80063aa:	607b      	str	r3, [r7, #4]
 80063ac:	687b      	ldr	r3, [r7, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_2);
 80063ae:	2005      	movs	r0, #5
 80063b0:	f000 fcd6 	bl	8006d60 <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80063b4:	4b09      	ldr	r3, [pc, #36]	; (80063dc <HAL_MspInit+0x64>)
 80063b6:	685b      	ldr	r3, [r3, #4]
 80063b8:	60fb      	str	r3, [r7, #12]
 80063ba:	68fb      	ldr	r3, [r7, #12]
 80063bc:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80063c0:	60fb      	str	r3, [r7, #12]
 80063c2:	68fb      	ldr	r3, [r7, #12]
 80063c4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80063c8:	60fb      	str	r3, [r7, #12]
 80063ca:	4a04      	ldr	r2, [pc, #16]	; (80063dc <HAL_MspInit+0x64>)
 80063cc:	68fb      	ldr	r3, [r7, #12]
 80063ce:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80063d0:	bf00      	nop
 80063d2:	3710      	adds	r7, #16
 80063d4:	46bd      	mov	sp, r7
 80063d6:	bd80      	pop	{r7, pc}
 80063d8:	40021000 	.word	0x40021000
 80063dc:	40010000 	.word	0x40010000

080063e0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80063e0:	b480      	push	{r7}
 80063e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80063e4:	e7fe      	b.n	80063e4 <NMI_Handler+0x4>

080063e6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80063e6:	b480      	push	{r7}
 80063e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80063ea:	e7fe      	b.n	80063ea <HardFault_Handler+0x4>

080063ec <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80063ec:	b480      	push	{r7}
 80063ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80063f0:	e7fe      	b.n	80063f0 <MemManage_Handler+0x4>

080063f2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80063f2:	b480      	push	{r7}
 80063f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80063f6:	e7fe      	b.n	80063f6 <BusFault_Handler+0x4>

080063f8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80063f8:	b480      	push	{r7}
 80063fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80063fc:	e7fe      	b.n	80063fc <UsageFault_Handler+0x4>

080063fe <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80063fe:	b480      	push	{r7}
 8006400:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8006402:	bf00      	nop
 8006404:	46bd      	mov	sp, r7
 8006406:	bc80      	pop	{r7}
 8006408:	4770      	bx	lr

0800640a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800640a:	b480      	push	{r7}
 800640c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800640e:	bf00      	nop
 8006410:	46bd      	mov	sp, r7
 8006412:	bc80      	pop	{r7}
 8006414:	4770      	bx	lr

08006416 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8006416:	b480      	push	{r7}
 8006418:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800641a:	bf00      	nop
 800641c:	46bd      	mov	sp, r7
 800641e:	bc80      	pop	{r7}
 8006420:	4770      	bx	lr

08006422 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8006422:	b580      	push	{r7, lr}
 8006424:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8006426:	f000 fb8f 	bl	8006b48 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800642a:	bf00      	nop
 800642c:	bd80      	pop	{r7, pc}
	...

08006430 <RTC_IRQHandler>:

/**
  * @brief This function handles RTC global interrupt.
  */
void RTC_IRQHandler(void)
{
 8006430:	b580      	push	{r7, lr}
 8006432:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_IRQn 0 */

  /* USER CODE END RTC_IRQn 0 */
  HAL_RTCEx_RTCIRQHandler(&hrtc);
 8006434:	4802      	ldr	r0, [pc, #8]	; (8006440 <RTC_IRQHandler+0x10>)
 8006436:	f002 fb45 	bl	8008ac4 <HAL_RTCEx_RTCIRQHandler>
  /* USER CODE BEGIN RTC_IRQn 1 */

  /* USER CODE END RTC_IRQn 1 */
}
 800643a:	bf00      	nop
 800643c:	bd80      	pop	{r7, pc}
 800643e:	bf00      	nop
 8006440:	20000090 	.word	0x20000090

08006444 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8006444:	b580      	push	{r7, lr}
 8006446:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(KEY_WK_Pin);
 8006448:	2001      	movs	r0, #1
 800644a:	f000 ffd1 	bl	80073f0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 800644e:	bf00      	nop
 8006450:	bd80      	pop	{r7, pc}

08006452 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8006452:	b580      	push	{r7, lr}
 8006454:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(KEY0_Pin);
 8006456:	2020      	movs	r0, #32
 8006458:	f000 ffca 	bl	80073f0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 800645c:	bf00      	nop
 800645e:	bd80      	pop	{r7, pc}

08006460 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8006460:	b580      	push	{r7, lr}
 8006462:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8006464:	4803      	ldr	r0, [pc, #12]	; (8006474 <TIM3_IRQHandler+0x14>)
 8006466:	f002 fc5d 	bl	8008d24 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  update_time();
 800646a:	f000 fa87 	bl	800697c <update_time>


  /* USER CODE END TIM3_IRQn 1 */
}
 800646e:	bf00      	nop
 8006470:	bd80      	pop	{r7, pc}
 8006472:	bf00      	nop
 8006474:	20000c7c 	.word	0x20000c7c

08006478 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8006478:	b580      	push	{r7, lr}
 800647a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 800647c:	4804      	ldr	r0, [pc, #16]	; (8006490 <USART1_IRQHandler+0x18>)
 800647e:	f003 f8d3 	bl	8009628 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */
  HAL_UART_Receive_IT(&huart1,(uint8_t*)rxBuffer,1);
 8006482:	2201      	movs	r2, #1
 8006484:	4903      	ldr	r1, [pc, #12]	; (8006494 <USART1_IRQHandler+0x1c>)
 8006486:	4802      	ldr	r0, [pc, #8]	; (8006490 <USART1_IRQHandler+0x18>)
 8006488:	f003 f8a9 	bl	80095de <HAL_UART_Receive_IT>
  /* USER CODE END USART1_IRQn 1 */
}
 800648c:	bf00      	nop
 800648e:	bd80      	pop	{r7, pc}
 8006490:	20000cc4 	.word	0x20000cc4
 8006494:	200000a4 	.word	0x200000a4

08006498 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8006498:	b580      	push	{r7, lr}
 800649a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(KEY1_Pin);
 800649c:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 80064a0:	f000 ffa6 	bl	80073f0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80064a4:	bf00      	nop
 80064a6:	bd80      	pop	{r7, pc}

080064a8 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 1 */

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80064a8:	b580      	push	{r7, lr}
 80064aa:	b082      	sub	sp, #8
 80064ac:	af00      	add	r7, sp, #0
 80064ae:	6078      	str	r0, [r7, #4]
	if(huart->Instance==USART1){
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	4a11      	ldr	r2, [pc, #68]	; (80064fc <HAL_UART_RxCpltCallback+0x54>)
 80064b6:	4293      	cmp	r3, r2
 80064b8:	d11b      	bne.n	80064f2 <HAL_UART_RxCpltCallback+0x4a>
		static unsigned char uRx_Data[1024] = {0};
		static unsigned char uLength = 0;
		if(rxBuffer[0] == '\n'){
 80064ba:	4b11      	ldr	r3, [pc, #68]	; (8006500 <HAL_UART_RxCpltCallback+0x58>)
 80064bc:	781b      	ldrb	r3, [r3, #0]
 80064be:	2b0a      	cmp	r3, #10
 80064c0:	d10c      	bne.n	80064dc <HAL_UART_RxCpltCallback+0x34>
			HAL_UART_Transmit(&huart1, uRx_Data, uLength, 0xffff);
 80064c2:	4b10      	ldr	r3, [pc, #64]	; (8006504 <HAL_UART_RxCpltCallback+0x5c>)
 80064c4:	781b      	ldrb	r3, [r3, #0]
 80064c6:	b29a      	uxth	r2, r3
 80064c8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80064cc:	490e      	ldr	r1, [pc, #56]	; (8006508 <HAL_UART_RxCpltCallback+0x60>)
 80064ce:	480f      	ldr	r0, [pc, #60]	; (800650c <HAL_UART_RxCpltCallback+0x64>)
 80064d0:	f003 f802 	bl	80094d8 <HAL_UART_Transmit>
			//LCD_ShowString(30, 40, 200, 24, 24, (uint8_t*) uRx_Data);
			uLength = 0;
 80064d4:	4b0b      	ldr	r3, [pc, #44]	; (8006504 <HAL_UART_RxCpltCallback+0x5c>)
 80064d6:	2200      	movs	r2, #0
 80064d8:	701a      	strb	r2, [r3, #0]
		}
		else{
			uRx_Data[uLength++] = rxBuffer[0];
		}
	}
}
 80064da:	e00a      	b.n	80064f2 <HAL_UART_RxCpltCallback+0x4a>
			uRx_Data[uLength++] = rxBuffer[0];
 80064dc:	4b09      	ldr	r3, [pc, #36]	; (8006504 <HAL_UART_RxCpltCallback+0x5c>)
 80064de:	781b      	ldrb	r3, [r3, #0]
 80064e0:	1c5a      	adds	r2, r3, #1
 80064e2:	b2d1      	uxtb	r1, r2
 80064e4:	4a07      	ldr	r2, [pc, #28]	; (8006504 <HAL_UART_RxCpltCallback+0x5c>)
 80064e6:	7011      	strb	r1, [r2, #0]
 80064e8:	461a      	mov	r2, r3
 80064ea:	4b05      	ldr	r3, [pc, #20]	; (8006500 <HAL_UART_RxCpltCallback+0x58>)
 80064ec:	7819      	ldrb	r1, [r3, #0]
 80064ee:	4b06      	ldr	r3, [pc, #24]	; (8006508 <HAL_UART_RxCpltCallback+0x60>)
 80064f0:	5499      	strb	r1, [r3, r2]
}
 80064f2:	bf00      	nop
 80064f4:	3708      	adds	r7, #8
 80064f6:	46bd      	mov	sp, r7
 80064f8:	bd80      	pop	{r7, pc}
 80064fa:	bf00      	nop
 80064fc:	40013800 	.word	0x40013800
 8006500:	200000a4 	.word	0x200000a4
 8006504:	20000874 	.word	0x20000874
 8006508:	20000878 	.word	0x20000878
 800650c:	20000cc4 	.word	0x20000cc4

08006510 <HAL_GPIO_EXTI_Callback>:

int text_cnt = 0;
char str[100];

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8006510:	b580      	push	{r7, lr}
 8006512:	b082      	sub	sp, #8
 8006514:	af00      	add	r7, sp, #0
 8006516:	4603      	mov	r3, r0
 8006518:	80fb      	strh	r3, [r7, #6]
	HAL_Delay(100);
 800651a:	2064      	movs	r0, #100	; 0x64
 800651c:	f000 fb30 	bl	8006b80 <HAL_Delay>
	switch(GPIO_Pin){
 8006520:	88fb      	ldrh	r3, [r7, #6]
 8006522:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006526:	d00b      	beq.n	8006540 <HAL_GPIO_EXTI_Callback+0x30>
 8006528:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800652c:	dc13      	bgt.n	8006556 <HAL_GPIO_EXTI_Callback+0x46>
 800652e:	2b01      	cmp	r3, #1
 8006530:	d00c      	beq.n	800654c <HAL_GPIO_EXTI_Callback+0x3c>
 8006532:	2b20      	cmp	r3, #32
 8006534:	d10f      	bne.n	8006556 <HAL_GPIO_EXTI_Callback+0x46>
		case KEY0_Pin:
			if (HAL_GPIO_ReadPin(KEY0_GPIO_Port, KEY0_Pin) == GPIO_PIN_RESET){
 8006536:	2120      	movs	r1, #32
 8006538:	4809      	ldr	r0, [pc, #36]	; (8006560 <HAL_GPIO_EXTI_Callback+0x50>)
 800653a:	f000 ff29 	bl	8007390 <HAL_GPIO_ReadPin>
			}
			break;
 800653e:	e00b      	b.n	8006558 <HAL_GPIO_EXTI_Callback+0x48>
		case KEY1_Pin:
			if (HAL_GPIO_ReadPin(KEY1_GPIO_Port, KEY1_Pin) == GPIO_PIN_RESET){
 8006540:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8006544:	4807      	ldr	r0, [pc, #28]	; (8006564 <HAL_GPIO_EXTI_Callback+0x54>)
 8006546:	f000 ff23 	bl	8007390 <HAL_GPIO_ReadPin>
			}
			break;
 800654a:	e005      	b.n	8006558 <HAL_GPIO_EXTI_Callback+0x48>
		case KEY_WK_Pin:
			if (HAL_GPIO_ReadPin(KEY_WK_GPIO_Port, KEY_WK_Pin) == GPIO_PIN_RESET){
 800654c:	2101      	movs	r1, #1
 800654e:	4805      	ldr	r0, [pc, #20]	; (8006564 <HAL_GPIO_EXTI_Callback+0x54>)
 8006550:	f000 ff1e 	bl	8007390 <HAL_GPIO_ReadPin>
			}
			break;
 8006554:	e000      	b.n	8006558 <HAL_GPIO_EXTI_Callback+0x48>
		default:
			break;
 8006556:	bf00      	nop
	}

}
 8006558:	bf00      	nop
 800655a:	3708      	adds	r7, #8
 800655c:	46bd      	mov	sp, r7
 800655e:	bd80      	pop	{r7, pc}
 8006560:	40011000 	.word	0x40011000
 8006564:	40010800 	.word	0x40010800

08006568 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8006568:	b580      	push	{r7, lr}
 800656a:	b086      	sub	sp, #24
 800656c:	af00      	add	r7, sp, #0
 800656e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8006570:	4a14      	ldr	r2, [pc, #80]	; (80065c4 <_sbrk+0x5c>)
 8006572:	4b15      	ldr	r3, [pc, #84]	; (80065c8 <_sbrk+0x60>)
 8006574:	1ad3      	subs	r3, r2, r3
 8006576:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8006578:	697b      	ldr	r3, [r7, #20]
 800657a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800657c:	4b13      	ldr	r3, [pc, #76]	; (80065cc <_sbrk+0x64>)
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	2b00      	cmp	r3, #0
 8006582:	d102      	bne.n	800658a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8006584:	4b11      	ldr	r3, [pc, #68]	; (80065cc <_sbrk+0x64>)
 8006586:	4a12      	ldr	r2, [pc, #72]	; (80065d0 <_sbrk+0x68>)
 8006588:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800658a:	4b10      	ldr	r3, [pc, #64]	; (80065cc <_sbrk+0x64>)
 800658c:	681a      	ldr	r2, [r3, #0]
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	4413      	add	r3, r2
 8006592:	693a      	ldr	r2, [r7, #16]
 8006594:	429a      	cmp	r2, r3
 8006596:	d207      	bcs.n	80065a8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8006598:	f003 fdee 	bl	800a178 <__errno>
 800659c:	4603      	mov	r3, r0
 800659e:	220c      	movs	r2, #12
 80065a0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80065a2:	f04f 33ff 	mov.w	r3, #4294967295
 80065a6:	e009      	b.n	80065bc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80065a8:	4b08      	ldr	r3, [pc, #32]	; (80065cc <_sbrk+0x64>)
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80065ae:	4b07      	ldr	r3, [pc, #28]	; (80065cc <_sbrk+0x64>)
 80065b0:	681a      	ldr	r2, [r3, #0]
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	4413      	add	r3, r2
 80065b6:	4a05      	ldr	r2, [pc, #20]	; (80065cc <_sbrk+0x64>)
 80065b8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80065ba:	68fb      	ldr	r3, [r7, #12]
}
 80065bc:	4618      	mov	r0, r3
 80065be:	3718      	adds	r7, #24
 80065c0:	46bd      	mov	sp, r7
 80065c2:	bd80      	pop	{r7, pc}
 80065c4:	2000c000 	.word	0x2000c000
 80065c8:	00000400 	.word	0x00000400
 80065cc:	20000c78 	.word	0x20000c78
 80065d0:	20000e58 	.word	0x20000e58

080065d4 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80065d4:	b480      	push	{r7}
 80065d6:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80065d8:	bf00      	nop
 80065da:	46bd      	mov	sp, r7
 80065dc:	bc80      	pop	{r7}
 80065de:	4770      	bx	lr

080065e0 <MX_TIM3_Init>:

TIM_HandleTypeDef htim3;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 80065e0:	b580      	push	{r7, lr}
 80065e2:	b086      	sub	sp, #24
 80065e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80065e6:	f107 0308 	add.w	r3, r7, #8
 80065ea:	2200      	movs	r2, #0
 80065ec:	601a      	str	r2, [r3, #0]
 80065ee:	605a      	str	r2, [r3, #4]
 80065f0:	609a      	str	r2, [r3, #8]
 80065f2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80065f4:	463b      	mov	r3, r7
 80065f6:	2200      	movs	r2, #0
 80065f8:	601a      	str	r2, [r3, #0]
 80065fa:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80065fc:	4b1d      	ldr	r3, [pc, #116]	; (8006674 <MX_TIM3_Init+0x94>)
 80065fe:	4a1e      	ldr	r2, [pc, #120]	; (8006678 <MX_TIM3_Init+0x98>)
 8006600:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 7199;
 8006602:	4b1c      	ldr	r3, [pc, #112]	; (8006674 <MX_TIM3_Init+0x94>)
 8006604:	f641 421f 	movw	r2, #7199	; 0x1c1f
 8006608:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800660a:	4b1a      	ldr	r3, [pc, #104]	; (8006674 <MX_TIM3_Init+0x94>)
 800660c:	2200      	movs	r2, #0
 800660e:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 9999;
 8006610:	4b18      	ldr	r3, [pc, #96]	; (8006674 <MX_TIM3_Init+0x94>)
 8006612:	f242 720f 	movw	r2, #9999	; 0x270f
 8006616:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8006618:	4b16      	ldr	r3, [pc, #88]	; (8006674 <MX_TIM3_Init+0x94>)
 800661a:	2200      	movs	r2, #0
 800661c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800661e:	4b15      	ldr	r3, [pc, #84]	; (8006674 <MX_TIM3_Init+0x94>)
 8006620:	2200      	movs	r2, #0
 8006622:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8006624:	4813      	ldr	r0, [pc, #76]	; (8006674 <MX_TIM3_Init+0x94>)
 8006626:	f002 facd 	bl	8008bc4 <HAL_TIM_Base_Init>
 800662a:	4603      	mov	r3, r0
 800662c:	2b00      	cmp	r3, #0
 800662e:	d001      	beq.n	8006634 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 8006630:	f7ff fde7 	bl	8006202 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8006634:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006638:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800663a:	f107 0308 	add.w	r3, r7, #8
 800663e:	4619      	mov	r1, r3
 8006640:	480c      	ldr	r0, [pc, #48]	; (8006674 <MX_TIM3_Init+0x94>)
 8006642:	f002 fc77 	bl	8008f34 <HAL_TIM_ConfigClockSource>
 8006646:	4603      	mov	r3, r0
 8006648:	2b00      	cmp	r3, #0
 800664a:	d001      	beq.n	8006650 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 800664c:	f7ff fdd9 	bl	8006202 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8006650:	2300      	movs	r3, #0
 8006652:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8006654:	2300      	movs	r3, #0
 8006656:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8006658:	463b      	mov	r3, r7
 800665a:	4619      	mov	r1, r3
 800665c:	4805      	ldr	r0, [pc, #20]	; (8006674 <MX_TIM3_Init+0x94>)
 800665e:	f002 fe6d 	bl	800933c <HAL_TIMEx_MasterConfigSynchronization>
 8006662:	4603      	mov	r3, r0
 8006664:	2b00      	cmp	r3, #0
 8006666:	d001      	beq.n	800666c <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8006668:	f7ff fdcb 	bl	8006202 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 800666c:	bf00      	nop
 800666e:	3718      	adds	r7, #24
 8006670:	46bd      	mov	sp, r7
 8006672:	bd80      	pop	{r7, pc}
 8006674:	20000c7c 	.word	0x20000c7c
 8006678:	40000400 	.word	0x40000400

0800667c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 800667c:	b580      	push	{r7, lr}
 800667e:	b084      	sub	sp, #16
 8006680:	af00      	add	r7, sp, #0
 8006682:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM3)
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	4a0d      	ldr	r2, [pc, #52]	; (80066c0 <HAL_TIM_Base_MspInit+0x44>)
 800668a:	4293      	cmp	r3, r2
 800668c:	d113      	bne.n	80066b6 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800668e:	4b0d      	ldr	r3, [pc, #52]	; (80066c4 <HAL_TIM_Base_MspInit+0x48>)
 8006690:	69db      	ldr	r3, [r3, #28]
 8006692:	4a0c      	ldr	r2, [pc, #48]	; (80066c4 <HAL_TIM_Base_MspInit+0x48>)
 8006694:	f043 0302 	orr.w	r3, r3, #2
 8006698:	61d3      	str	r3, [r2, #28]
 800669a:	4b0a      	ldr	r3, [pc, #40]	; (80066c4 <HAL_TIM_Base_MspInit+0x48>)
 800669c:	69db      	ldr	r3, [r3, #28]
 800669e:	f003 0302 	and.w	r3, r3, #2
 80066a2:	60fb      	str	r3, [r7, #12]
 80066a4:	68fb      	ldr	r3, [r7, #12]

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80066a6:	2200      	movs	r2, #0
 80066a8:	2100      	movs	r1, #0
 80066aa:	201d      	movs	r0, #29
 80066ac:	f000 fb63 	bl	8006d76 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80066b0:	201d      	movs	r0, #29
 80066b2:	f000 fb7c 	bl	8006dae <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 80066b6:	bf00      	nop
 80066b8:	3710      	adds	r7, #16
 80066ba:	46bd      	mov	sp, r7
 80066bc:	bd80      	pop	{r7, pc}
 80066be:	bf00      	nop
 80066c0:	40000400 	.word	0x40000400
 80066c4:	40021000 	.word	0x40021000

080066c8 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80066c8:	b580      	push	{r7, lr}
 80066ca:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80066cc:	4b11      	ldr	r3, [pc, #68]	; (8006714 <MX_USART1_UART_Init+0x4c>)
 80066ce:	4a12      	ldr	r2, [pc, #72]	; (8006718 <MX_USART1_UART_Init+0x50>)
 80066d0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80066d2:	4b10      	ldr	r3, [pc, #64]	; (8006714 <MX_USART1_UART_Init+0x4c>)
 80066d4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80066d8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80066da:	4b0e      	ldr	r3, [pc, #56]	; (8006714 <MX_USART1_UART_Init+0x4c>)
 80066dc:	2200      	movs	r2, #0
 80066de:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80066e0:	4b0c      	ldr	r3, [pc, #48]	; (8006714 <MX_USART1_UART_Init+0x4c>)
 80066e2:	2200      	movs	r2, #0
 80066e4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80066e6:	4b0b      	ldr	r3, [pc, #44]	; (8006714 <MX_USART1_UART_Init+0x4c>)
 80066e8:	2200      	movs	r2, #0
 80066ea:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80066ec:	4b09      	ldr	r3, [pc, #36]	; (8006714 <MX_USART1_UART_Init+0x4c>)
 80066ee:	220c      	movs	r2, #12
 80066f0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80066f2:	4b08      	ldr	r3, [pc, #32]	; (8006714 <MX_USART1_UART_Init+0x4c>)
 80066f4:	2200      	movs	r2, #0
 80066f6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80066f8:	4b06      	ldr	r3, [pc, #24]	; (8006714 <MX_USART1_UART_Init+0x4c>)
 80066fa:	2200      	movs	r2, #0
 80066fc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80066fe:	4805      	ldr	r0, [pc, #20]	; (8006714 <MX_USART1_UART_Init+0x4c>)
 8006700:	f002 fe9a 	bl	8009438 <HAL_UART_Init>
 8006704:	4603      	mov	r3, r0
 8006706:	2b00      	cmp	r3, #0
 8006708:	d001      	beq.n	800670e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800670a:	f7ff fd7a 	bl	8006202 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800670e:	bf00      	nop
 8006710:	bd80      	pop	{r7, pc}
 8006712:	bf00      	nop
 8006714:	20000cc4 	.word	0x20000cc4
 8006718:	40013800 	.word	0x40013800

0800671c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800671c:	b580      	push	{r7, lr}
 800671e:	b088      	sub	sp, #32
 8006720:	af00      	add	r7, sp, #0
 8006722:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006724:	f107 0310 	add.w	r3, r7, #16
 8006728:	2200      	movs	r2, #0
 800672a:	601a      	str	r2, [r3, #0]
 800672c:	605a      	str	r2, [r3, #4]
 800672e:	609a      	str	r2, [r3, #8]
 8006730:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	681b      	ldr	r3, [r3, #0]
 8006736:	4a20      	ldr	r2, [pc, #128]	; (80067b8 <HAL_UART_MspInit+0x9c>)
 8006738:	4293      	cmp	r3, r2
 800673a:	d139      	bne.n	80067b0 <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800673c:	4b1f      	ldr	r3, [pc, #124]	; (80067bc <HAL_UART_MspInit+0xa0>)
 800673e:	699b      	ldr	r3, [r3, #24]
 8006740:	4a1e      	ldr	r2, [pc, #120]	; (80067bc <HAL_UART_MspInit+0xa0>)
 8006742:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006746:	6193      	str	r3, [r2, #24]
 8006748:	4b1c      	ldr	r3, [pc, #112]	; (80067bc <HAL_UART_MspInit+0xa0>)
 800674a:	699b      	ldr	r3, [r3, #24]
 800674c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006750:	60fb      	str	r3, [r7, #12]
 8006752:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006754:	4b19      	ldr	r3, [pc, #100]	; (80067bc <HAL_UART_MspInit+0xa0>)
 8006756:	699b      	ldr	r3, [r3, #24]
 8006758:	4a18      	ldr	r2, [pc, #96]	; (80067bc <HAL_UART_MspInit+0xa0>)
 800675a:	f043 0304 	orr.w	r3, r3, #4
 800675e:	6193      	str	r3, [r2, #24]
 8006760:	4b16      	ldr	r3, [pc, #88]	; (80067bc <HAL_UART_MspInit+0xa0>)
 8006762:	699b      	ldr	r3, [r3, #24]
 8006764:	f003 0304 	and.w	r3, r3, #4
 8006768:	60bb      	str	r3, [r7, #8]
 800676a:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800676c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006770:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006772:	2302      	movs	r3, #2
 8006774:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8006776:	2303      	movs	r3, #3
 8006778:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800677a:	f107 0310 	add.w	r3, r7, #16
 800677e:	4619      	mov	r1, r3
 8006780:	480f      	ldr	r0, [pc, #60]	; (80067c0 <HAL_UART_MspInit+0xa4>)
 8006782:	f000 fc71 	bl	8007068 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8006786:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800678a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800678c:	2300      	movs	r3, #0
 800678e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006790:	2300      	movs	r3, #0
 8006792:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006794:	f107 0310 	add.w	r3, r7, #16
 8006798:	4619      	mov	r1, r3
 800679a:	4809      	ldr	r0, [pc, #36]	; (80067c0 <HAL_UART_MspInit+0xa4>)
 800679c:	f000 fc64 	bl	8007068 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 1, 0);
 80067a0:	2200      	movs	r2, #0
 80067a2:	2101      	movs	r1, #1
 80067a4:	2025      	movs	r0, #37	; 0x25
 80067a6:	f000 fae6 	bl	8006d76 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80067aa:	2025      	movs	r0, #37	; 0x25
 80067ac:	f000 faff 	bl	8006dae <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 80067b0:	bf00      	nop
 80067b2:	3720      	adds	r7, #32
 80067b4:	46bd      	mov	sp, r7
 80067b6:	bd80      	pop	{r7, pc}
 80067b8:	40013800 	.word	0x40013800
 80067bc:	40021000 	.word	0x40021000
 80067c0:	40010800 	.word	0x40010800

080067c4 <getDayOfWeekString>:
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,};


const char *getDayOfWeekString(uint8_t dow)
{
 80067c4:	b4b0      	push	{r4, r5, r7}
 80067c6:	b08b      	sub	sp, #44	; 0x2c
 80067c8:	af00      	add	r7, sp, #0
 80067ca:	4603      	mov	r3, r0
 80067cc:	71fb      	strb	r3, [r7, #7]
  const char *days[] = {"SUN", "MON", "TUE", "WED", "THU", "FRI", "SAT"};
 80067ce:	4b0a      	ldr	r3, [pc, #40]	; (80067f8 <getDayOfWeekString+0x34>)
 80067d0:	f107 040c 	add.w	r4, r7, #12
 80067d4:	461d      	mov	r5, r3
 80067d6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80067d8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80067da:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80067de:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  return days[dow];
 80067e2:	79fb      	ldrb	r3, [r7, #7]
 80067e4:	009b      	lsls	r3, r3, #2
 80067e6:	3328      	adds	r3, #40	; 0x28
 80067e8:	443b      	add	r3, r7
 80067ea:	f853 3c1c 	ldr.w	r3, [r3, #-28]
}
 80067ee:	4618      	mov	r0, r3
 80067f0:	372c      	adds	r7, #44	; 0x2c
 80067f2:	46bd      	mov	sp, r7
 80067f4:	bcb0      	pop	{r4, r5, r7}
 80067f6:	4770      	bx	lr
 80067f8:	0800aacc 	.word	0x0800aacc

080067fc <draw_initial_screen>:


void draw_initial_screen(uint8_t* username) {
 80067fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80067fe:	f2ad 4d44 	subw	sp, sp, #1092	; 0x444
 8006802:	af02      	add	r7, sp, #8
 8006804:	f507 6387 	add.w	r3, r7, #1080	; 0x438
 8006808:	f2a3 4334 	subw	r3, r3, #1076	; 0x434
 800680c:	6018      	str	r0, [r3, #0]

    LCD_Clear(WHITE);
 800680e:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8006812:	f7ff fadf 	bl	8005dd4 <LCD_Clear>
    POINT_COLOR = BLACK;
 8006816:	4b51      	ldr	r3, [pc, #324]	; (800695c <draw_initial_screen+0x160>)
 8006818:	2200      	movs	r2, #0
 800681a:	801a      	strh	r2, [r3, #0]

    RTC_TimeTypeDef sTime;
    RTC_DateTypeDef sDate;

    HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 800681c:	f207 4334 	addw	r3, r7, #1076	; 0x434
 8006820:	2200      	movs	r2, #0
 8006822:	4619      	mov	r1, r3
 8006824:	484e      	ldr	r0, [pc, #312]	; (8006960 <draw_initial_screen+0x164>)
 8006826:	f001 fcc9 	bl	80081bc <HAL_RTC_GetTime>
    HAL_RTC_GetDate(&hrtc, &sDate, RTC_FORMAT_BIN);
 800682a:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 800682e:	2200      	movs	r2, #0
 8006830:	4619      	mov	r1, r3
 8006832:	484b      	ldr	r0, [pc, #300]	; (8006960 <draw_initial_screen+0x164>)
 8006834:	f001 fe50 	bl	80084d8 <HAL_RTC_GetDate>

    char now_time[20];
    sprintf(now_time, "%02d:%02d:%02d", sTime.Hours, sTime.Minutes, sTime.Seconds);
 8006838:	f897 3434 	ldrb.w	r3, [r7, #1076]	; 0x434
 800683c:	461a      	mov	r2, r3
 800683e:	f897 3435 	ldrb.w	r3, [r7, #1077]	; 0x435
 8006842:	4619      	mov	r1, r3
 8006844:	f897 3436 	ldrb.w	r3, [r7, #1078]	; 0x436
 8006848:	f207 401c 	addw	r0, r7, #1052	; 0x41c
 800684c:	9300      	str	r3, [sp, #0]
 800684e:	460b      	mov	r3, r1
 8006850:	4944      	ldr	r1, [pc, #272]	; (8006964 <draw_initial_screen+0x168>)
 8006852:	f003 fc69 	bl	800a128 <siprintf>
    char now_data[20];
    sprintf(now_data, "%04d/%02d/%02d %s", sDate.Year + 2000, sDate.Month, sDate.Date, getDayOfWeekString(sDate.WeekDay));
 8006856:	f897 3433 	ldrb.w	r3, [r7, #1075]	; 0x433
 800685a:	f503 64fa 	add.w	r4, r3, #2000	; 0x7d0
 800685e:	f897 3431 	ldrb.w	r3, [r7, #1073]	; 0x431
 8006862:	461e      	mov	r6, r3
 8006864:	f897 3432 	ldrb.w	r3, [r7, #1074]	; 0x432
 8006868:	461d      	mov	r5, r3
 800686a:	f897 3430 	ldrb.w	r3, [r7, #1072]	; 0x430
 800686e:	4618      	mov	r0, r3
 8006870:	f7ff ffa8 	bl	80067c4 <getDayOfWeekString>
 8006874:	4603      	mov	r3, r0
 8006876:	f507 6081 	add.w	r0, r7, #1032	; 0x408
 800687a:	9301      	str	r3, [sp, #4]
 800687c:	9500      	str	r5, [sp, #0]
 800687e:	4633      	mov	r3, r6
 8006880:	4622      	mov	r2, r4
 8006882:	4939      	ldr	r1, [pc, #228]	; (8006968 <draw_initial_screen+0x16c>)
 8006884:	f003 fc50 	bl	800a128 <siprintf>

    LCD_ShowString((240 - strlen(now_time) * 12) / 2, 50, 200, 24, 24, (uint8_t*) now_time);
 8006888:	f207 431c 	addw	r3, r7, #1052	; 0x41c
 800688c:	4618      	mov	r0, r3
 800688e:	f7f9 fccb 	bl	8000228 <strlen>
 8006892:	4602      	mov	r2, r0
 8006894:	4613      	mov	r3, r2
 8006896:	005b      	lsls	r3, r3, #1
 8006898:	4413      	add	r3, r2
 800689a:	009b      	lsls	r3, r3, #2
 800689c:	f1c3 03f0 	rsb	r3, r3, #240	; 0xf0
 80068a0:	085b      	lsrs	r3, r3, #1
 80068a2:	b298      	uxth	r0, r3
 80068a4:	f207 431c 	addw	r3, r7, #1052	; 0x41c
 80068a8:	9301      	str	r3, [sp, #4]
 80068aa:	2318      	movs	r3, #24
 80068ac:	9300      	str	r3, [sp, #0]
 80068ae:	2318      	movs	r3, #24
 80068b0:	22c8      	movs	r2, #200	; 0xc8
 80068b2:	2132      	movs	r1, #50	; 0x32
 80068b4:	f7ff fb9e 	bl	8005ff4 <LCD_ShowString>
    LCD_ShowString((240 - strlen(now_data) * 8) / 2, 85, 200, 16, 16, (uint8_t*) now_data);
 80068b8:	f507 6381 	add.w	r3, r7, #1032	; 0x408
 80068bc:	4618      	mov	r0, r3
 80068be:	f7f9 fcb3 	bl	8000228 <strlen>
 80068c2:	4603      	mov	r3, r0
 80068c4:	f1c3 031e 	rsb	r3, r3, #30
 80068c8:	00db      	lsls	r3, r3, #3
 80068ca:	085b      	lsrs	r3, r3, #1
 80068cc:	b298      	uxth	r0, r3
 80068ce:	f507 6381 	add.w	r3, r7, #1032	; 0x408
 80068d2:	9301      	str	r3, [sp, #4]
 80068d4:	2310      	movs	r3, #16
 80068d6:	9300      	str	r3, [sp, #0]
 80068d8:	2310      	movs	r3, #16
 80068da:	22c8      	movs	r2, #200	; 0xc8
 80068dc:	2155      	movs	r1, #85	; 0x55
 80068de:	f7ff fb89 	bl	8005ff4 <LCD_ShowString>

    char buffer[1024];

    sprintf(buffer, "user: [%s]", username);
 80068e2:	f507 6387 	add.w	r3, r7, #1080	; 0x438
 80068e6:	f2a3 4334 	subw	r3, r3, #1076	; 0x434
 80068ea:	f107 0008 	add.w	r0, r7, #8
 80068ee:	681a      	ldr	r2, [r3, #0]
 80068f0:	491e      	ldr	r1, [pc, #120]	; (800696c <draw_initial_screen+0x170>)
 80068f2:	f003 fc19 	bl	800a128 <siprintf>

    LCD_ShowString((240 - strlen(buffer) * 8) / 2, 110, 200, 16, 16, (uint8_t*) buffer);
 80068f6:	f107 0308 	add.w	r3, r7, #8
 80068fa:	4618      	mov	r0, r3
 80068fc:	f7f9 fc94 	bl	8000228 <strlen>
 8006900:	4603      	mov	r3, r0
 8006902:	f1c3 031e 	rsb	r3, r3, #30
 8006906:	00db      	lsls	r3, r3, #3
 8006908:	085b      	lsrs	r3, r3, #1
 800690a:	b298      	uxth	r0, r3
 800690c:	f107 0308 	add.w	r3, r7, #8
 8006910:	9301      	str	r3, [sp, #4]
 8006912:	2310      	movs	r3, #16
 8006914:	9300      	str	r3, [sp, #0]
 8006916:	2310      	movs	r3, #16
 8006918:	22c8      	movs	r2, #200	; 0xc8
 800691a:	216e      	movs	r1, #110	; 0x6e
 800691c:	f7ff fb6a 	bl	8005ff4 <LCD_ShowString>

    LCD_ShowPicture(10, 150, 60, 57, (uint16_t *) gImage_chat);
 8006920:	4b13      	ldr	r3, [pc, #76]	; (8006970 <draw_initial_screen+0x174>)
 8006922:	9300      	str	r3, [sp, #0]
 8006924:	2339      	movs	r3, #57	; 0x39
 8006926:	223c      	movs	r2, #60	; 0x3c
 8006928:	2196      	movs	r1, #150	; 0x96
 800692a:	200a      	movs	r0, #10
 800692c:	f7ff fbaf 	bl	800608e <LCD_ShowPicture>

    LCD_ShowPicture(90, 150, 60, 60, (uint16_t *) gImage_calc);
 8006930:	4b10      	ldr	r3, [pc, #64]	; (8006974 <draw_initial_screen+0x178>)
 8006932:	9300      	str	r3, [sp, #0]
 8006934:	233c      	movs	r3, #60	; 0x3c
 8006936:	223c      	movs	r2, #60	; 0x3c
 8006938:	2196      	movs	r1, #150	; 0x96
 800693a:	205a      	movs	r0, #90	; 0x5a
 800693c:	f7ff fba7 	bl	800608e <LCD_ShowPicture>

    LCD_ShowPicture(170, 150, 60, 59, (uint16_t *) gImage_pic);
 8006940:	4b0d      	ldr	r3, [pc, #52]	; (8006978 <draw_initial_screen+0x17c>)
 8006942:	9300      	str	r3, [sp, #0]
 8006944:	233b      	movs	r3, #59	; 0x3b
 8006946:	223c      	movs	r2, #60	; 0x3c
 8006948:	2196      	movs	r1, #150	; 0x96
 800694a:	20aa      	movs	r0, #170	; 0xaa
 800694c:	f7ff fb9f 	bl	800608e <LCD_ShowPicture>

}
 8006950:	bf00      	nop
 8006952:	f207 473c 	addw	r7, r7, #1084	; 0x43c
 8006956:	46bd      	mov	sp, r7
 8006958:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800695a:	bf00      	nop
 800695c:	2000007c 	.word	0x2000007c
 8006960:	20000090 	.word	0x20000090
 8006964:	0800aae8 	.word	0x0800aae8
 8006968:	0800aaf8 	.word	0x0800aaf8
 800696c:	0800ab0c 	.word	0x0800ab0c
 8006970:	0800df10 	.word	0x0800df10
 8006974:	0800c2f0 	.word	0x0800c2f0
 8006978:	0800f9c8 	.word	0x0800f9c8

0800697c <update_time>:


void update_time() {
 800697c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800697e:	b08f      	sub	sp, #60	; 0x3c
 8006980:	af02      	add	r7, sp, #8
    if (screen_state != INITIAL) return;
 8006982:	4b36      	ldr	r3, [pc, #216]	; (8006a5c <update_time+0xe0>)
 8006984:	781b      	ldrb	r3, [r3, #0]
 8006986:	2b00      	cmp	r3, #0
 8006988:	d163      	bne.n	8006a52 <update_time+0xd6>
    POINT_COLOR = BLACK;
 800698a:	4b35      	ldr	r3, [pc, #212]	; (8006a60 <update_time+0xe4>)
 800698c:	2200      	movs	r2, #0
 800698e:	801a      	strh	r2, [r3, #0]


    RTC_TimeTypeDef sTime;
    RTC_DateTypeDef sDate;

    HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 8006990:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8006994:	2200      	movs	r2, #0
 8006996:	4619      	mov	r1, r3
 8006998:	4832      	ldr	r0, [pc, #200]	; (8006a64 <update_time+0xe8>)
 800699a:	f001 fc0f 	bl	80081bc <HAL_RTC_GetTime>
    HAL_RTC_GetDate(&hrtc, &sDate, RTC_FORMAT_BIN);
 800699e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80069a2:	2200      	movs	r2, #0
 80069a4:	4619      	mov	r1, r3
 80069a6:	482f      	ldr	r0, [pc, #188]	; (8006a64 <update_time+0xe8>)
 80069a8:	f001 fd96 	bl	80084d8 <HAL_RTC_GetDate>

    char now_time[20];
    sprintf(now_time, "%02d:%02d:%02d", sTime.Hours, sTime.Minutes, sTime.Seconds);
 80069ac:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80069b0:	461a      	mov	r2, r3
 80069b2:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80069b6:	4619      	mov	r1, r3
 80069b8:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80069bc:	f107 0014 	add.w	r0, r7, #20
 80069c0:	9300      	str	r3, [sp, #0]
 80069c2:	460b      	mov	r3, r1
 80069c4:	4928      	ldr	r1, [pc, #160]	; (8006a68 <update_time+0xec>)
 80069c6:	f003 fbaf 	bl	800a128 <siprintf>
    char now_data[20];
    sprintf(now_data, "%04d/%02d/%02d %s", sDate.Year + 2000, sDate.Month, sDate.Date, getDayOfWeekString(sDate.WeekDay));
 80069ca:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80069ce:	f503 64fa 	add.w	r4, r3, #2000	; 0x7d0
 80069d2:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 80069d6:	461e      	mov	r6, r3
 80069d8:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 80069dc:	461d      	mov	r5, r3
 80069de:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80069e2:	4618      	mov	r0, r3
 80069e4:	f7ff feee 	bl	80067c4 <getDayOfWeekString>
 80069e8:	4603      	mov	r3, r0
 80069ea:	4638      	mov	r0, r7
 80069ec:	9301      	str	r3, [sp, #4]
 80069ee:	9500      	str	r5, [sp, #0]
 80069f0:	4633      	mov	r3, r6
 80069f2:	4622      	mov	r2, r4
 80069f4:	491d      	ldr	r1, [pc, #116]	; (8006a6c <update_time+0xf0>)
 80069f6:	f003 fb97 	bl	800a128 <siprintf>

    LCD_ShowString((240 - strlen(now_time) * 12) / 2, 50, 200, 24, 24, (uint8_t*) now_time);
 80069fa:	f107 0314 	add.w	r3, r7, #20
 80069fe:	4618      	mov	r0, r3
 8006a00:	f7f9 fc12 	bl	8000228 <strlen>
 8006a04:	4602      	mov	r2, r0
 8006a06:	4613      	mov	r3, r2
 8006a08:	005b      	lsls	r3, r3, #1
 8006a0a:	4413      	add	r3, r2
 8006a0c:	009b      	lsls	r3, r3, #2
 8006a0e:	f1c3 03f0 	rsb	r3, r3, #240	; 0xf0
 8006a12:	085b      	lsrs	r3, r3, #1
 8006a14:	b298      	uxth	r0, r3
 8006a16:	f107 0314 	add.w	r3, r7, #20
 8006a1a:	9301      	str	r3, [sp, #4]
 8006a1c:	2318      	movs	r3, #24
 8006a1e:	9300      	str	r3, [sp, #0]
 8006a20:	2318      	movs	r3, #24
 8006a22:	22c8      	movs	r2, #200	; 0xc8
 8006a24:	2132      	movs	r1, #50	; 0x32
 8006a26:	f7ff fae5 	bl	8005ff4 <LCD_ShowString>
    LCD_ShowString((240 - strlen(now_data) * 8) / 2, 85, 200, 16, 16, (uint8_t*) now_data);
 8006a2a:	463b      	mov	r3, r7
 8006a2c:	4618      	mov	r0, r3
 8006a2e:	f7f9 fbfb 	bl	8000228 <strlen>
 8006a32:	4603      	mov	r3, r0
 8006a34:	f1c3 031e 	rsb	r3, r3, #30
 8006a38:	00db      	lsls	r3, r3, #3
 8006a3a:	085b      	lsrs	r3, r3, #1
 8006a3c:	b298      	uxth	r0, r3
 8006a3e:	463b      	mov	r3, r7
 8006a40:	9301      	str	r3, [sp, #4]
 8006a42:	2310      	movs	r3, #16
 8006a44:	9300      	str	r3, [sp, #0]
 8006a46:	2310      	movs	r3, #16
 8006a48:	22c8      	movs	r2, #200	; 0xc8
 8006a4a:	2155      	movs	r1, #85	; 0x55
 8006a4c:	f7ff fad2 	bl	8005ff4 <LCD_ShowString>
 8006a50:	e000      	b.n	8006a54 <update_time+0xd8>
    if (screen_state != INITIAL) return;
 8006a52:	bf00      	nop
 8006a54:	3734      	adds	r7, #52	; 0x34
 8006a56:	46bd      	mov	sp, r7
 8006a58:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006a5a:	bf00      	nop
 8006a5c:	2000008e 	.word	0x2000008e
 8006a60:	2000007c 	.word	0x2000007c
 8006a64:	20000090 	.word	0x20000090
 8006a68:	0800aae8 	.word	0x0800aae8
 8006a6c:	0800aaf8 	.word	0x0800aaf8

08006a70 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8006a70:	f7ff fdb0 	bl	80065d4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8006a74:	480b      	ldr	r0, [pc, #44]	; (8006aa4 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8006a76:	490c      	ldr	r1, [pc, #48]	; (8006aa8 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8006a78:	4a0c      	ldr	r2, [pc, #48]	; (8006aac <LoopFillZerobss+0x16>)
  movs r3, #0
 8006a7a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8006a7c:	e002      	b.n	8006a84 <LoopCopyDataInit>

08006a7e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8006a7e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8006a80:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8006a82:	3304      	adds	r3, #4

08006a84 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8006a84:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8006a86:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8006a88:	d3f9      	bcc.n	8006a7e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8006a8a:	4a09      	ldr	r2, [pc, #36]	; (8006ab0 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8006a8c:	4c09      	ldr	r4, [pc, #36]	; (8006ab4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8006a8e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8006a90:	e001      	b.n	8006a96 <LoopFillZerobss>

08006a92 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8006a92:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8006a94:	3204      	adds	r2, #4

08006a96 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8006a96:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8006a98:	d3fb      	bcc.n	8006a92 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8006a9a:	f003 fb73 	bl	800a184 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8006a9e:	f7ff fb2d 	bl	80060fc <main>
  bx lr
 8006aa2:	4770      	bx	lr
  ldr r0, =_sdata
 8006aa4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8006aa8:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 8006aac:	080115d4 	.word	0x080115d4
  ldr r2, =_sbss
 8006ab0:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 8006ab4:	20000e58 	.word	0x20000e58

08006ab8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8006ab8:	e7fe      	b.n	8006ab8 <ADC1_2_IRQHandler>
	...

08006abc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8006abc:	b580      	push	{r7, lr}
 8006abe:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8006ac0:	4b08      	ldr	r3, [pc, #32]	; (8006ae4 <HAL_Init+0x28>)
 8006ac2:	681b      	ldr	r3, [r3, #0]
 8006ac4:	4a07      	ldr	r2, [pc, #28]	; (8006ae4 <HAL_Init+0x28>)
 8006ac6:	f043 0310 	orr.w	r3, r3, #16
 8006aca:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8006acc:	2003      	movs	r0, #3
 8006ace:	f000 f947 	bl	8006d60 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8006ad2:	2000      	movs	r0, #0
 8006ad4:	f000 f808 	bl	8006ae8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8006ad8:	f7ff fc4e 	bl	8006378 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8006adc:	2300      	movs	r3, #0
}
 8006ade:	4618      	mov	r0, r3
 8006ae0:	bd80      	pop	{r7, pc}
 8006ae2:	bf00      	nop
 8006ae4:	40022000 	.word	0x40022000

08006ae8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8006ae8:	b580      	push	{r7, lr}
 8006aea:	b082      	sub	sp, #8
 8006aec:	af00      	add	r7, sp, #0
 8006aee:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8006af0:	4b12      	ldr	r3, [pc, #72]	; (8006b3c <HAL_InitTick+0x54>)
 8006af2:	681a      	ldr	r2, [r3, #0]
 8006af4:	4b12      	ldr	r3, [pc, #72]	; (8006b40 <HAL_InitTick+0x58>)
 8006af6:	781b      	ldrb	r3, [r3, #0]
 8006af8:	4619      	mov	r1, r3
 8006afa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8006afe:	fbb3 f3f1 	udiv	r3, r3, r1
 8006b02:	fbb2 f3f3 	udiv	r3, r2, r3
 8006b06:	4618      	mov	r0, r3
 8006b08:	f000 f95f 	bl	8006dca <HAL_SYSTICK_Config>
 8006b0c:	4603      	mov	r3, r0
 8006b0e:	2b00      	cmp	r3, #0
 8006b10:	d001      	beq.n	8006b16 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8006b12:	2301      	movs	r3, #1
 8006b14:	e00e      	b.n	8006b34 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	2b0f      	cmp	r3, #15
 8006b1a:	d80a      	bhi.n	8006b32 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8006b1c:	2200      	movs	r2, #0
 8006b1e:	6879      	ldr	r1, [r7, #4]
 8006b20:	f04f 30ff 	mov.w	r0, #4294967295
 8006b24:	f000 f927 	bl	8006d76 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8006b28:	4a06      	ldr	r2, [pc, #24]	; (8006b44 <HAL_InitTick+0x5c>)
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8006b2e:	2300      	movs	r3, #0
 8006b30:	e000      	b.n	8006b34 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8006b32:	2301      	movs	r3, #1
}
 8006b34:	4618      	mov	r0, r3
 8006b36:	3708      	adds	r7, #8
 8006b38:	46bd      	mov	sp, r7
 8006b3a:	bd80      	pop	{r7, pc}
 8006b3c:	20000004 	.word	0x20000004
 8006b40:	2000000c 	.word	0x2000000c
 8006b44:	20000008 	.word	0x20000008

08006b48 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8006b48:	b480      	push	{r7}
 8006b4a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8006b4c:	4b05      	ldr	r3, [pc, #20]	; (8006b64 <HAL_IncTick+0x1c>)
 8006b4e:	781b      	ldrb	r3, [r3, #0]
 8006b50:	461a      	mov	r2, r3
 8006b52:	4b05      	ldr	r3, [pc, #20]	; (8006b68 <HAL_IncTick+0x20>)
 8006b54:	681b      	ldr	r3, [r3, #0]
 8006b56:	4413      	add	r3, r2
 8006b58:	4a03      	ldr	r2, [pc, #12]	; (8006b68 <HAL_IncTick+0x20>)
 8006b5a:	6013      	str	r3, [r2, #0]
}
 8006b5c:	bf00      	nop
 8006b5e:	46bd      	mov	sp, r7
 8006b60:	bc80      	pop	{r7}
 8006b62:	4770      	bx	lr
 8006b64:	2000000c 	.word	0x2000000c
 8006b68:	20000d0c 	.word	0x20000d0c

08006b6c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8006b6c:	b480      	push	{r7}
 8006b6e:	af00      	add	r7, sp, #0
  return uwTick;
 8006b70:	4b02      	ldr	r3, [pc, #8]	; (8006b7c <HAL_GetTick+0x10>)
 8006b72:	681b      	ldr	r3, [r3, #0]
}
 8006b74:	4618      	mov	r0, r3
 8006b76:	46bd      	mov	sp, r7
 8006b78:	bc80      	pop	{r7}
 8006b7a:	4770      	bx	lr
 8006b7c:	20000d0c 	.word	0x20000d0c

08006b80 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8006b80:	b580      	push	{r7, lr}
 8006b82:	b084      	sub	sp, #16
 8006b84:	af00      	add	r7, sp, #0
 8006b86:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8006b88:	f7ff fff0 	bl	8006b6c <HAL_GetTick>
 8006b8c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8006b92:	68fb      	ldr	r3, [r7, #12]
 8006b94:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006b98:	d005      	beq.n	8006ba6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8006b9a:	4b0a      	ldr	r3, [pc, #40]	; (8006bc4 <HAL_Delay+0x44>)
 8006b9c:	781b      	ldrb	r3, [r3, #0]
 8006b9e:	461a      	mov	r2, r3
 8006ba0:	68fb      	ldr	r3, [r7, #12]
 8006ba2:	4413      	add	r3, r2
 8006ba4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8006ba6:	bf00      	nop
 8006ba8:	f7ff ffe0 	bl	8006b6c <HAL_GetTick>
 8006bac:	4602      	mov	r2, r0
 8006bae:	68bb      	ldr	r3, [r7, #8]
 8006bb0:	1ad3      	subs	r3, r2, r3
 8006bb2:	68fa      	ldr	r2, [r7, #12]
 8006bb4:	429a      	cmp	r2, r3
 8006bb6:	d8f7      	bhi.n	8006ba8 <HAL_Delay+0x28>
  {
  }
}
 8006bb8:	bf00      	nop
 8006bba:	bf00      	nop
 8006bbc:	3710      	adds	r7, #16
 8006bbe:	46bd      	mov	sp, r7
 8006bc0:	bd80      	pop	{r7, pc}
 8006bc2:	bf00      	nop
 8006bc4:	2000000c 	.word	0x2000000c

08006bc8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006bc8:	b480      	push	{r7}
 8006bca:	b085      	sub	sp, #20
 8006bcc:	af00      	add	r7, sp, #0
 8006bce:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	f003 0307 	and.w	r3, r3, #7
 8006bd6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8006bd8:	4b0c      	ldr	r3, [pc, #48]	; (8006c0c <__NVIC_SetPriorityGrouping+0x44>)
 8006bda:	68db      	ldr	r3, [r3, #12]
 8006bdc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8006bde:	68ba      	ldr	r2, [r7, #8]
 8006be0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8006be4:	4013      	ands	r3, r2
 8006be6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8006be8:	68fb      	ldr	r3, [r7, #12]
 8006bea:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8006bec:	68bb      	ldr	r3, [r7, #8]
 8006bee:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8006bf0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8006bf4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006bf8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8006bfa:	4a04      	ldr	r2, [pc, #16]	; (8006c0c <__NVIC_SetPriorityGrouping+0x44>)
 8006bfc:	68bb      	ldr	r3, [r7, #8]
 8006bfe:	60d3      	str	r3, [r2, #12]
}
 8006c00:	bf00      	nop
 8006c02:	3714      	adds	r7, #20
 8006c04:	46bd      	mov	sp, r7
 8006c06:	bc80      	pop	{r7}
 8006c08:	4770      	bx	lr
 8006c0a:	bf00      	nop
 8006c0c:	e000ed00 	.word	0xe000ed00

08006c10 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8006c10:	b480      	push	{r7}
 8006c12:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8006c14:	4b04      	ldr	r3, [pc, #16]	; (8006c28 <__NVIC_GetPriorityGrouping+0x18>)
 8006c16:	68db      	ldr	r3, [r3, #12]
 8006c18:	0a1b      	lsrs	r3, r3, #8
 8006c1a:	f003 0307 	and.w	r3, r3, #7
}
 8006c1e:	4618      	mov	r0, r3
 8006c20:	46bd      	mov	sp, r7
 8006c22:	bc80      	pop	{r7}
 8006c24:	4770      	bx	lr
 8006c26:	bf00      	nop
 8006c28:	e000ed00 	.word	0xe000ed00

08006c2c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006c2c:	b480      	push	{r7}
 8006c2e:	b083      	sub	sp, #12
 8006c30:	af00      	add	r7, sp, #0
 8006c32:	4603      	mov	r3, r0
 8006c34:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006c36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006c3a:	2b00      	cmp	r3, #0
 8006c3c:	db0b      	blt.n	8006c56 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8006c3e:	79fb      	ldrb	r3, [r7, #7]
 8006c40:	f003 021f 	and.w	r2, r3, #31
 8006c44:	4906      	ldr	r1, [pc, #24]	; (8006c60 <__NVIC_EnableIRQ+0x34>)
 8006c46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006c4a:	095b      	lsrs	r3, r3, #5
 8006c4c:	2001      	movs	r0, #1
 8006c4e:	fa00 f202 	lsl.w	r2, r0, r2
 8006c52:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8006c56:	bf00      	nop
 8006c58:	370c      	adds	r7, #12
 8006c5a:	46bd      	mov	sp, r7
 8006c5c:	bc80      	pop	{r7}
 8006c5e:	4770      	bx	lr
 8006c60:	e000e100 	.word	0xe000e100

08006c64 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8006c64:	b480      	push	{r7}
 8006c66:	b083      	sub	sp, #12
 8006c68:	af00      	add	r7, sp, #0
 8006c6a:	4603      	mov	r3, r0
 8006c6c:	6039      	str	r1, [r7, #0]
 8006c6e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006c70:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006c74:	2b00      	cmp	r3, #0
 8006c76:	db0a      	blt.n	8006c8e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006c78:	683b      	ldr	r3, [r7, #0]
 8006c7a:	b2da      	uxtb	r2, r3
 8006c7c:	490c      	ldr	r1, [pc, #48]	; (8006cb0 <__NVIC_SetPriority+0x4c>)
 8006c7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006c82:	0112      	lsls	r2, r2, #4
 8006c84:	b2d2      	uxtb	r2, r2
 8006c86:	440b      	add	r3, r1
 8006c88:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8006c8c:	e00a      	b.n	8006ca4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006c8e:	683b      	ldr	r3, [r7, #0]
 8006c90:	b2da      	uxtb	r2, r3
 8006c92:	4908      	ldr	r1, [pc, #32]	; (8006cb4 <__NVIC_SetPriority+0x50>)
 8006c94:	79fb      	ldrb	r3, [r7, #7]
 8006c96:	f003 030f 	and.w	r3, r3, #15
 8006c9a:	3b04      	subs	r3, #4
 8006c9c:	0112      	lsls	r2, r2, #4
 8006c9e:	b2d2      	uxtb	r2, r2
 8006ca0:	440b      	add	r3, r1
 8006ca2:	761a      	strb	r2, [r3, #24]
}
 8006ca4:	bf00      	nop
 8006ca6:	370c      	adds	r7, #12
 8006ca8:	46bd      	mov	sp, r7
 8006caa:	bc80      	pop	{r7}
 8006cac:	4770      	bx	lr
 8006cae:	bf00      	nop
 8006cb0:	e000e100 	.word	0xe000e100
 8006cb4:	e000ed00 	.word	0xe000ed00

08006cb8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8006cb8:	b480      	push	{r7}
 8006cba:	b089      	sub	sp, #36	; 0x24
 8006cbc:	af00      	add	r7, sp, #0
 8006cbe:	60f8      	str	r0, [r7, #12]
 8006cc0:	60b9      	str	r1, [r7, #8]
 8006cc2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8006cc4:	68fb      	ldr	r3, [r7, #12]
 8006cc6:	f003 0307 	and.w	r3, r3, #7
 8006cca:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8006ccc:	69fb      	ldr	r3, [r7, #28]
 8006cce:	f1c3 0307 	rsb	r3, r3, #7
 8006cd2:	2b04      	cmp	r3, #4
 8006cd4:	bf28      	it	cs
 8006cd6:	2304      	movcs	r3, #4
 8006cd8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8006cda:	69fb      	ldr	r3, [r7, #28]
 8006cdc:	3304      	adds	r3, #4
 8006cde:	2b06      	cmp	r3, #6
 8006ce0:	d902      	bls.n	8006ce8 <NVIC_EncodePriority+0x30>
 8006ce2:	69fb      	ldr	r3, [r7, #28]
 8006ce4:	3b03      	subs	r3, #3
 8006ce6:	e000      	b.n	8006cea <NVIC_EncodePriority+0x32>
 8006ce8:	2300      	movs	r3, #0
 8006cea:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006cec:	f04f 32ff 	mov.w	r2, #4294967295
 8006cf0:	69bb      	ldr	r3, [r7, #24]
 8006cf2:	fa02 f303 	lsl.w	r3, r2, r3
 8006cf6:	43da      	mvns	r2, r3
 8006cf8:	68bb      	ldr	r3, [r7, #8]
 8006cfa:	401a      	ands	r2, r3
 8006cfc:	697b      	ldr	r3, [r7, #20]
 8006cfe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8006d00:	f04f 31ff 	mov.w	r1, #4294967295
 8006d04:	697b      	ldr	r3, [r7, #20]
 8006d06:	fa01 f303 	lsl.w	r3, r1, r3
 8006d0a:	43d9      	mvns	r1, r3
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006d10:	4313      	orrs	r3, r2
         );
}
 8006d12:	4618      	mov	r0, r3
 8006d14:	3724      	adds	r7, #36	; 0x24
 8006d16:	46bd      	mov	sp, r7
 8006d18:	bc80      	pop	{r7}
 8006d1a:	4770      	bx	lr

08006d1c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8006d1c:	b580      	push	{r7, lr}
 8006d1e:	b082      	sub	sp, #8
 8006d20:	af00      	add	r7, sp, #0
 8006d22:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	3b01      	subs	r3, #1
 8006d28:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006d2c:	d301      	bcc.n	8006d32 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8006d2e:	2301      	movs	r3, #1
 8006d30:	e00f      	b.n	8006d52 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8006d32:	4a0a      	ldr	r2, [pc, #40]	; (8006d5c <SysTick_Config+0x40>)
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	3b01      	subs	r3, #1
 8006d38:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8006d3a:	210f      	movs	r1, #15
 8006d3c:	f04f 30ff 	mov.w	r0, #4294967295
 8006d40:	f7ff ff90 	bl	8006c64 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8006d44:	4b05      	ldr	r3, [pc, #20]	; (8006d5c <SysTick_Config+0x40>)
 8006d46:	2200      	movs	r2, #0
 8006d48:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8006d4a:	4b04      	ldr	r3, [pc, #16]	; (8006d5c <SysTick_Config+0x40>)
 8006d4c:	2207      	movs	r2, #7
 8006d4e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8006d50:	2300      	movs	r3, #0
}
 8006d52:	4618      	mov	r0, r3
 8006d54:	3708      	adds	r7, #8
 8006d56:	46bd      	mov	sp, r7
 8006d58:	bd80      	pop	{r7, pc}
 8006d5a:	bf00      	nop
 8006d5c:	e000e010 	.word	0xe000e010

08006d60 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006d60:	b580      	push	{r7, lr}
 8006d62:	b082      	sub	sp, #8
 8006d64:	af00      	add	r7, sp, #0
 8006d66:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8006d68:	6878      	ldr	r0, [r7, #4]
 8006d6a:	f7ff ff2d 	bl	8006bc8 <__NVIC_SetPriorityGrouping>
}
 8006d6e:	bf00      	nop
 8006d70:	3708      	adds	r7, #8
 8006d72:	46bd      	mov	sp, r7
 8006d74:	bd80      	pop	{r7, pc}

08006d76 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8006d76:	b580      	push	{r7, lr}
 8006d78:	b086      	sub	sp, #24
 8006d7a:	af00      	add	r7, sp, #0
 8006d7c:	4603      	mov	r3, r0
 8006d7e:	60b9      	str	r1, [r7, #8]
 8006d80:	607a      	str	r2, [r7, #4]
 8006d82:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8006d84:	2300      	movs	r3, #0
 8006d86:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8006d88:	f7ff ff42 	bl	8006c10 <__NVIC_GetPriorityGrouping>
 8006d8c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8006d8e:	687a      	ldr	r2, [r7, #4]
 8006d90:	68b9      	ldr	r1, [r7, #8]
 8006d92:	6978      	ldr	r0, [r7, #20]
 8006d94:	f7ff ff90 	bl	8006cb8 <NVIC_EncodePriority>
 8006d98:	4602      	mov	r2, r0
 8006d9a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006d9e:	4611      	mov	r1, r2
 8006da0:	4618      	mov	r0, r3
 8006da2:	f7ff ff5f 	bl	8006c64 <__NVIC_SetPriority>
}
 8006da6:	bf00      	nop
 8006da8:	3718      	adds	r7, #24
 8006daa:	46bd      	mov	sp, r7
 8006dac:	bd80      	pop	{r7, pc}

08006dae <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006dae:	b580      	push	{r7, lr}
 8006db0:	b082      	sub	sp, #8
 8006db2:	af00      	add	r7, sp, #0
 8006db4:	4603      	mov	r3, r0
 8006db6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8006db8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006dbc:	4618      	mov	r0, r3
 8006dbe:	f7ff ff35 	bl	8006c2c <__NVIC_EnableIRQ>
}
 8006dc2:	bf00      	nop
 8006dc4:	3708      	adds	r7, #8
 8006dc6:	46bd      	mov	sp, r7
 8006dc8:	bd80      	pop	{r7, pc}

08006dca <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8006dca:	b580      	push	{r7, lr}
 8006dcc:	b082      	sub	sp, #8
 8006dce:	af00      	add	r7, sp, #0
 8006dd0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8006dd2:	6878      	ldr	r0, [r7, #4]
 8006dd4:	f7ff ffa2 	bl	8006d1c <SysTick_Config>
 8006dd8:	4603      	mov	r3, r0
}
 8006dda:	4618      	mov	r0, r3
 8006ddc:	3708      	adds	r7, #8
 8006dde:	46bd      	mov	sp, r7
 8006de0:	bd80      	pop	{r7, pc}

08006de2 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8006de2:	b480      	push	{r7}
 8006de4:	b085      	sub	sp, #20
 8006de6:	af00      	add	r7, sp, #0
 8006de8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006dea:	2300      	movs	r3, #0
 8006dec:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8006df4:	b2db      	uxtb	r3, r3
 8006df6:	2b02      	cmp	r3, #2
 8006df8:	d008      	beq.n	8006e0c <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	2204      	movs	r2, #4
 8006dfe:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	2200      	movs	r2, #0
 8006e04:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8006e08:	2301      	movs	r3, #1
 8006e0a:	e020      	b.n	8006e4e <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	681b      	ldr	r3, [r3, #0]
 8006e10:	681a      	ldr	r2, [r3, #0]
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	681b      	ldr	r3, [r3, #0]
 8006e16:	f022 020e 	bic.w	r2, r2, #14
 8006e1a:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	681b      	ldr	r3, [r3, #0]
 8006e20:	681a      	ldr	r2, [r3, #0]
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	681b      	ldr	r3, [r3, #0]
 8006e26:	f022 0201 	bic.w	r2, r2, #1
 8006e2a:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006e34:	2101      	movs	r1, #1
 8006e36:	fa01 f202 	lsl.w	r2, r1, r2
 8006e3a:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	2201      	movs	r2, #1
 8006e40:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	2200      	movs	r2, #0
 8006e48:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8006e4c:	7bfb      	ldrb	r3, [r7, #15]
}
 8006e4e:	4618      	mov	r0, r3
 8006e50:	3714      	adds	r7, #20
 8006e52:	46bd      	mov	sp, r7
 8006e54:	bc80      	pop	{r7}
 8006e56:	4770      	bx	lr

08006e58 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8006e58:	b580      	push	{r7, lr}
 8006e5a:	b084      	sub	sp, #16
 8006e5c:	af00      	add	r7, sp, #0
 8006e5e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006e60:	2300      	movs	r3, #0
 8006e62:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8006e6a:	b2db      	uxtb	r3, r3
 8006e6c:	2b02      	cmp	r3, #2
 8006e6e:	d005      	beq.n	8006e7c <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	2204      	movs	r2, #4
 8006e74:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8006e76:	2301      	movs	r3, #1
 8006e78:	73fb      	strb	r3, [r7, #15]
 8006e7a:	e0d6      	b.n	800702a <HAL_DMA_Abort_IT+0x1d2>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	681b      	ldr	r3, [r3, #0]
 8006e80:	681a      	ldr	r2, [r3, #0]
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	681b      	ldr	r3, [r3, #0]
 8006e86:	f022 020e 	bic.w	r2, r2, #14
 8006e8a:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	681b      	ldr	r3, [r3, #0]
 8006e90:	681a      	ldr	r2, [r3, #0]
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	681b      	ldr	r3, [r3, #0]
 8006e96:	f022 0201 	bic.w	r2, r2, #1
 8006e9a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	681b      	ldr	r3, [r3, #0]
 8006ea0:	461a      	mov	r2, r3
 8006ea2:	4b64      	ldr	r3, [pc, #400]	; (8007034 <HAL_DMA_Abort_IT+0x1dc>)
 8006ea4:	429a      	cmp	r2, r3
 8006ea6:	d958      	bls.n	8006f5a <HAL_DMA_Abort_IT+0x102>
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	681b      	ldr	r3, [r3, #0]
 8006eac:	4a62      	ldr	r2, [pc, #392]	; (8007038 <HAL_DMA_Abort_IT+0x1e0>)
 8006eae:	4293      	cmp	r3, r2
 8006eb0:	d04f      	beq.n	8006f52 <HAL_DMA_Abort_IT+0xfa>
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	681b      	ldr	r3, [r3, #0]
 8006eb6:	4a61      	ldr	r2, [pc, #388]	; (800703c <HAL_DMA_Abort_IT+0x1e4>)
 8006eb8:	4293      	cmp	r3, r2
 8006eba:	d048      	beq.n	8006f4e <HAL_DMA_Abort_IT+0xf6>
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	681b      	ldr	r3, [r3, #0]
 8006ec0:	4a5f      	ldr	r2, [pc, #380]	; (8007040 <HAL_DMA_Abort_IT+0x1e8>)
 8006ec2:	4293      	cmp	r3, r2
 8006ec4:	d040      	beq.n	8006f48 <HAL_DMA_Abort_IT+0xf0>
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	681b      	ldr	r3, [r3, #0]
 8006eca:	4a5e      	ldr	r2, [pc, #376]	; (8007044 <HAL_DMA_Abort_IT+0x1ec>)
 8006ecc:	4293      	cmp	r3, r2
 8006ece:	d038      	beq.n	8006f42 <HAL_DMA_Abort_IT+0xea>
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	681b      	ldr	r3, [r3, #0]
 8006ed4:	4a5c      	ldr	r2, [pc, #368]	; (8007048 <HAL_DMA_Abort_IT+0x1f0>)
 8006ed6:	4293      	cmp	r3, r2
 8006ed8:	d030      	beq.n	8006f3c <HAL_DMA_Abort_IT+0xe4>
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	681b      	ldr	r3, [r3, #0]
 8006ede:	4a5b      	ldr	r2, [pc, #364]	; (800704c <HAL_DMA_Abort_IT+0x1f4>)
 8006ee0:	4293      	cmp	r3, r2
 8006ee2:	d028      	beq.n	8006f36 <HAL_DMA_Abort_IT+0xde>
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	681b      	ldr	r3, [r3, #0]
 8006ee8:	4a52      	ldr	r2, [pc, #328]	; (8007034 <HAL_DMA_Abort_IT+0x1dc>)
 8006eea:	4293      	cmp	r3, r2
 8006eec:	d020      	beq.n	8006f30 <HAL_DMA_Abort_IT+0xd8>
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	681b      	ldr	r3, [r3, #0]
 8006ef2:	4a57      	ldr	r2, [pc, #348]	; (8007050 <HAL_DMA_Abort_IT+0x1f8>)
 8006ef4:	4293      	cmp	r3, r2
 8006ef6:	d019      	beq.n	8006f2c <HAL_DMA_Abort_IT+0xd4>
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	681b      	ldr	r3, [r3, #0]
 8006efc:	4a55      	ldr	r2, [pc, #340]	; (8007054 <HAL_DMA_Abort_IT+0x1fc>)
 8006efe:	4293      	cmp	r3, r2
 8006f00:	d012      	beq.n	8006f28 <HAL_DMA_Abort_IT+0xd0>
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	681b      	ldr	r3, [r3, #0]
 8006f06:	4a54      	ldr	r2, [pc, #336]	; (8007058 <HAL_DMA_Abort_IT+0x200>)
 8006f08:	4293      	cmp	r3, r2
 8006f0a:	d00a      	beq.n	8006f22 <HAL_DMA_Abort_IT+0xca>
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	681b      	ldr	r3, [r3, #0]
 8006f10:	4a52      	ldr	r2, [pc, #328]	; (800705c <HAL_DMA_Abort_IT+0x204>)
 8006f12:	4293      	cmp	r3, r2
 8006f14:	d102      	bne.n	8006f1c <HAL_DMA_Abort_IT+0xc4>
 8006f16:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006f1a:	e01b      	b.n	8006f54 <HAL_DMA_Abort_IT+0xfc>
 8006f1c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8006f20:	e018      	b.n	8006f54 <HAL_DMA_Abort_IT+0xfc>
 8006f22:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006f26:	e015      	b.n	8006f54 <HAL_DMA_Abort_IT+0xfc>
 8006f28:	2310      	movs	r3, #16
 8006f2a:	e013      	b.n	8006f54 <HAL_DMA_Abort_IT+0xfc>
 8006f2c:	2301      	movs	r3, #1
 8006f2e:	e011      	b.n	8006f54 <HAL_DMA_Abort_IT+0xfc>
 8006f30:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006f34:	e00e      	b.n	8006f54 <HAL_DMA_Abort_IT+0xfc>
 8006f36:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8006f3a:	e00b      	b.n	8006f54 <HAL_DMA_Abort_IT+0xfc>
 8006f3c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8006f40:	e008      	b.n	8006f54 <HAL_DMA_Abort_IT+0xfc>
 8006f42:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006f46:	e005      	b.n	8006f54 <HAL_DMA_Abort_IT+0xfc>
 8006f48:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006f4c:	e002      	b.n	8006f54 <HAL_DMA_Abort_IT+0xfc>
 8006f4e:	2310      	movs	r3, #16
 8006f50:	e000      	b.n	8006f54 <HAL_DMA_Abort_IT+0xfc>
 8006f52:	2301      	movs	r3, #1
 8006f54:	4a42      	ldr	r2, [pc, #264]	; (8007060 <HAL_DMA_Abort_IT+0x208>)
 8006f56:	6053      	str	r3, [r2, #4]
 8006f58:	e057      	b.n	800700a <HAL_DMA_Abort_IT+0x1b2>
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	681b      	ldr	r3, [r3, #0]
 8006f5e:	4a36      	ldr	r2, [pc, #216]	; (8007038 <HAL_DMA_Abort_IT+0x1e0>)
 8006f60:	4293      	cmp	r3, r2
 8006f62:	d04f      	beq.n	8007004 <HAL_DMA_Abort_IT+0x1ac>
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	681b      	ldr	r3, [r3, #0]
 8006f68:	4a34      	ldr	r2, [pc, #208]	; (800703c <HAL_DMA_Abort_IT+0x1e4>)
 8006f6a:	4293      	cmp	r3, r2
 8006f6c:	d048      	beq.n	8007000 <HAL_DMA_Abort_IT+0x1a8>
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	681b      	ldr	r3, [r3, #0]
 8006f72:	4a33      	ldr	r2, [pc, #204]	; (8007040 <HAL_DMA_Abort_IT+0x1e8>)
 8006f74:	4293      	cmp	r3, r2
 8006f76:	d040      	beq.n	8006ffa <HAL_DMA_Abort_IT+0x1a2>
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	681b      	ldr	r3, [r3, #0]
 8006f7c:	4a31      	ldr	r2, [pc, #196]	; (8007044 <HAL_DMA_Abort_IT+0x1ec>)
 8006f7e:	4293      	cmp	r3, r2
 8006f80:	d038      	beq.n	8006ff4 <HAL_DMA_Abort_IT+0x19c>
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	681b      	ldr	r3, [r3, #0]
 8006f86:	4a30      	ldr	r2, [pc, #192]	; (8007048 <HAL_DMA_Abort_IT+0x1f0>)
 8006f88:	4293      	cmp	r3, r2
 8006f8a:	d030      	beq.n	8006fee <HAL_DMA_Abort_IT+0x196>
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	681b      	ldr	r3, [r3, #0]
 8006f90:	4a2e      	ldr	r2, [pc, #184]	; (800704c <HAL_DMA_Abort_IT+0x1f4>)
 8006f92:	4293      	cmp	r3, r2
 8006f94:	d028      	beq.n	8006fe8 <HAL_DMA_Abort_IT+0x190>
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	681b      	ldr	r3, [r3, #0]
 8006f9a:	4a26      	ldr	r2, [pc, #152]	; (8007034 <HAL_DMA_Abort_IT+0x1dc>)
 8006f9c:	4293      	cmp	r3, r2
 8006f9e:	d020      	beq.n	8006fe2 <HAL_DMA_Abort_IT+0x18a>
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	681b      	ldr	r3, [r3, #0]
 8006fa4:	4a2a      	ldr	r2, [pc, #168]	; (8007050 <HAL_DMA_Abort_IT+0x1f8>)
 8006fa6:	4293      	cmp	r3, r2
 8006fa8:	d019      	beq.n	8006fde <HAL_DMA_Abort_IT+0x186>
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	681b      	ldr	r3, [r3, #0]
 8006fae:	4a29      	ldr	r2, [pc, #164]	; (8007054 <HAL_DMA_Abort_IT+0x1fc>)
 8006fb0:	4293      	cmp	r3, r2
 8006fb2:	d012      	beq.n	8006fda <HAL_DMA_Abort_IT+0x182>
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	681b      	ldr	r3, [r3, #0]
 8006fb8:	4a27      	ldr	r2, [pc, #156]	; (8007058 <HAL_DMA_Abort_IT+0x200>)
 8006fba:	4293      	cmp	r3, r2
 8006fbc:	d00a      	beq.n	8006fd4 <HAL_DMA_Abort_IT+0x17c>
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	681b      	ldr	r3, [r3, #0]
 8006fc2:	4a26      	ldr	r2, [pc, #152]	; (800705c <HAL_DMA_Abort_IT+0x204>)
 8006fc4:	4293      	cmp	r3, r2
 8006fc6:	d102      	bne.n	8006fce <HAL_DMA_Abort_IT+0x176>
 8006fc8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006fcc:	e01b      	b.n	8007006 <HAL_DMA_Abort_IT+0x1ae>
 8006fce:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8006fd2:	e018      	b.n	8007006 <HAL_DMA_Abort_IT+0x1ae>
 8006fd4:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006fd8:	e015      	b.n	8007006 <HAL_DMA_Abort_IT+0x1ae>
 8006fda:	2310      	movs	r3, #16
 8006fdc:	e013      	b.n	8007006 <HAL_DMA_Abort_IT+0x1ae>
 8006fde:	2301      	movs	r3, #1
 8006fe0:	e011      	b.n	8007006 <HAL_DMA_Abort_IT+0x1ae>
 8006fe2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006fe6:	e00e      	b.n	8007006 <HAL_DMA_Abort_IT+0x1ae>
 8006fe8:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8006fec:	e00b      	b.n	8007006 <HAL_DMA_Abort_IT+0x1ae>
 8006fee:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8006ff2:	e008      	b.n	8007006 <HAL_DMA_Abort_IT+0x1ae>
 8006ff4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006ff8:	e005      	b.n	8007006 <HAL_DMA_Abort_IT+0x1ae>
 8006ffa:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006ffe:	e002      	b.n	8007006 <HAL_DMA_Abort_IT+0x1ae>
 8007000:	2310      	movs	r3, #16
 8007002:	e000      	b.n	8007006 <HAL_DMA_Abort_IT+0x1ae>
 8007004:	2301      	movs	r3, #1
 8007006:	4a17      	ldr	r2, [pc, #92]	; (8007064 <HAL_DMA_Abort_IT+0x20c>)
 8007008:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	2201      	movs	r2, #1
 800700e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	2200      	movs	r2, #0
 8007016:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800701e:	2b00      	cmp	r3, #0
 8007020:	d003      	beq.n	800702a <HAL_DMA_Abort_IT+0x1d2>
    {
      hdma->XferAbortCallback(hdma);
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007026:	6878      	ldr	r0, [r7, #4]
 8007028:	4798      	blx	r3
    } 
  }
  return status;
 800702a:	7bfb      	ldrb	r3, [r7, #15]
}
 800702c:	4618      	mov	r0, r3
 800702e:	3710      	adds	r7, #16
 8007030:	46bd      	mov	sp, r7
 8007032:	bd80      	pop	{r7, pc}
 8007034:	40020080 	.word	0x40020080
 8007038:	40020008 	.word	0x40020008
 800703c:	4002001c 	.word	0x4002001c
 8007040:	40020030 	.word	0x40020030
 8007044:	40020044 	.word	0x40020044
 8007048:	40020058 	.word	0x40020058
 800704c:	4002006c 	.word	0x4002006c
 8007050:	40020408 	.word	0x40020408
 8007054:	4002041c 	.word	0x4002041c
 8007058:	40020430 	.word	0x40020430
 800705c:	40020444 	.word	0x40020444
 8007060:	40020400 	.word	0x40020400
 8007064:	40020000 	.word	0x40020000

08007068 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8007068:	b480      	push	{r7}
 800706a:	b08b      	sub	sp, #44	; 0x2c
 800706c:	af00      	add	r7, sp, #0
 800706e:	6078      	str	r0, [r7, #4]
 8007070:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8007072:	2300      	movs	r3, #0
 8007074:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8007076:	2300      	movs	r3, #0
 8007078:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800707a:	e179      	b.n	8007370 <HAL_GPIO_Init+0x308>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800707c:	2201      	movs	r2, #1
 800707e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007080:	fa02 f303 	lsl.w	r3, r2, r3
 8007084:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8007086:	683b      	ldr	r3, [r7, #0]
 8007088:	681b      	ldr	r3, [r3, #0]
 800708a:	69fa      	ldr	r2, [r7, #28]
 800708c:	4013      	ands	r3, r2
 800708e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8007090:	69ba      	ldr	r2, [r7, #24]
 8007092:	69fb      	ldr	r3, [r7, #28]
 8007094:	429a      	cmp	r2, r3
 8007096:	f040 8168 	bne.w	800736a <HAL_GPIO_Init+0x302>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800709a:	683b      	ldr	r3, [r7, #0]
 800709c:	685b      	ldr	r3, [r3, #4]
 800709e:	4a96      	ldr	r2, [pc, #600]	; (80072f8 <HAL_GPIO_Init+0x290>)
 80070a0:	4293      	cmp	r3, r2
 80070a2:	d05e      	beq.n	8007162 <HAL_GPIO_Init+0xfa>
 80070a4:	4a94      	ldr	r2, [pc, #592]	; (80072f8 <HAL_GPIO_Init+0x290>)
 80070a6:	4293      	cmp	r3, r2
 80070a8:	d875      	bhi.n	8007196 <HAL_GPIO_Init+0x12e>
 80070aa:	4a94      	ldr	r2, [pc, #592]	; (80072fc <HAL_GPIO_Init+0x294>)
 80070ac:	4293      	cmp	r3, r2
 80070ae:	d058      	beq.n	8007162 <HAL_GPIO_Init+0xfa>
 80070b0:	4a92      	ldr	r2, [pc, #584]	; (80072fc <HAL_GPIO_Init+0x294>)
 80070b2:	4293      	cmp	r3, r2
 80070b4:	d86f      	bhi.n	8007196 <HAL_GPIO_Init+0x12e>
 80070b6:	4a92      	ldr	r2, [pc, #584]	; (8007300 <HAL_GPIO_Init+0x298>)
 80070b8:	4293      	cmp	r3, r2
 80070ba:	d052      	beq.n	8007162 <HAL_GPIO_Init+0xfa>
 80070bc:	4a90      	ldr	r2, [pc, #576]	; (8007300 <HAL_GPIO_Init+0x298>)
 80070be:	4293      	cmp	r3, r2
 80070c0:	d869      	bhi.n	8007196 <HAL_GPIO_Init+0x12e>
 80070c2:	4a90      	ldr	r2, [pc, #576]	; (8007304 <HAL_GPIO_Init+0x29c>)
 80070c4:	4293      	cmp	r3, r2
 80070c6:	d04c      	beq.n	8007162 <HAL_GPIO_Init+0xfa>
 80070c8:	4a8e      	ldr	r2, [pc, #568]	; (8007304 <HAL_GPIO_Init+0x29c>)
 80070ca:	4293      	cmp	r3, r2
 80070cc:	d863      	bhi.n	8007196 <HAL_GPIO_Init+0x12e>
 80070ce:	4a8e      	ldr	r2, [pc, #568]	; (8007308 <HAL_GPIO_Init+0x2a0>)
 80070d0:	4293      	cmp	r3, r2
 80070d2:	d046      	beq.n	8007162 <HAL_GPIO_Init+0xfa>
 80070d4:	4a8c      	ldr	r2, [pc, #560]	; (8007308 <HAL_GPIO_Init+0x2a0>)
 80070d6:	4293      	cmp	r3, r2
 80070d8:	d85d      	bhi.n	8007196 <HAL_GPIO_Init+0x12e>
 80070da:	2b12      	cmp	r3, #18
 80070dc:	d82a      	bhi.n	8007134 <HAL_GPIO_Init+0xcc>
 80070de:	2b12      	cmp	r3, #18
 80070e0:	d859      	bhi.n	8007196 <HAL_GPIO_Init+0x12e>
 80070e2:	a201      	add	r2, pc, #4	; (adr r2, 80070e8 <HAL_GPIO_Init+0x80>)
 80070e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80070e8:	08007163 	.word	0x08007163
 80070ec:	0800713d 	.word	0x0800713d
 80070f0:	0800714f 	.word	0x0800714f
 80070f4:	08007191 	.word	0x08007191
 80070f8:	08007197 	.word	0x08007197
 80070fc:	08007197 	.word	0x08007197
 8007100:	08007197 	.word	0x08007197
 8007104:	08007197 	.word	0x08007197
 8007108:	08007197 	.word	0x08007197
 800710c:	08007197 	.word	0x08007197
 8007110:	08007197 	.word	0x08007197
 8007114:	08007197 	.word	0x08007197
 8007118:	08007197 	.word	0x08007197
 800711c:	08007197 	.word	0x08007197
 8007120:	08007197 	.word	0x08007197
 8007124:	08007197 	.word	0x08007197
 8007128:	08007197 	.word	0x08007197
 800712c:	08007145 	.word	0x08007145
 8007130:	08007159 	.word	0x08007159
 8007134:	4a75      	ldr	r2, [pc, #468]	; (800730c <HAL_GPIO_Init+0x2a4>)
 8007136:	4293      	cmp	r3, r2
 8007138:	d013      	beq.n	8007162 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800713a:	e02c      	b.n	8007196 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800713c:	683b      	ldr	r3, [r7, #0]
 800713e:	68db      	ldr	r3, [r3, #12]
 8007140:	623b      	str	r3, [r7, #32]
          break;
 8007142:	e029      	b.n	8007198 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8007144:	683b      	ldr	r3, [r7, #0]
 8007146:	68db      	ldr	r3, [r3, #12]
 8007148:	3304      	adds	r3, #4
 800714a:	623b      	str	r3, [r7, #32]
          break;
 800714c:	e024      	b.n	8007198 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800714e:	683b      	ldr	r3, [r7, #0]
 8007150:	68db      	ldr	r3, [r3, #12]
 8007152:	3308      	adds	r3, #8
 8007154:	623b      	str	r3, [r7, #32]
          break;
 8007156:	e01f      	b.n	8007198 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8007158:	683b      	ldr	r3, [r7, #0]
 800715a:	68db      	ldr	r3, [r3, #12]
 800715c:	330c      	adds	r3, #12
 800715e:	623b      	str	r3, [r7, #32]
          break;
 8007160:	e01a      	b.n	8007198 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8007162:	683b      	ldr	r3, [r7, #0]
 8007164:	689b      	ldr	r3, [r3, #8]
 8007166:	2b00      	cmp	r3, #0
 8007168:	d102      	bne.n	8007170 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800716a:	2304      	movs	r3, #4
 800716c:	623b      	str	r3, [r7, #32]
          break;
 800716e:	e013      	b.n	8007198 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8007170:	683b      	ldr	r3, [r7, #0]
 8007172:	689b      	ldr	r3, [r3, #8]
 8007174:	2b01      	cmp	r3, #1
 8007176:	d105      	bne.n	8007184 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8007178:	2308      	movs	r3, #8
 800717a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	69fa      	ldr	r2, [r7, #28]
 8007180:	611a      	str	r2, [r3, #16]
          break;
 8007182:	e009      	b.n	8007198 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8007184:	2308      	movs	r3, #8
 8007186:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	69fa      	ldr	r2, [r7, #28]
 800718c:	615a      	str	r2, [r3, #20]
          break;
 800718e:	e003      	b.n	8007198 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8007190:	2300      	movs	r3, #0
 8007192:	623b      	str	r3, [r7, #32]
          break;
 8007194:	e000      	b.n	8007198 <HAL_GPIO_Init+0x130>
          break;
 8007196:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8007198:	69bb      	ldr	r3, [r7, #24]
 800719a:	2bff      	cmp	r3, #255	; 0xff
 800719c:	d801      	bhi.n	80071a2 <HAL_GPIO_Init+0x13a>
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	e001      	b.n	80071a6 <HAL_GPIO_Init+0x13e>
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	3304      	adds	r3, #4
 80071a6:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80071a8:	69bb      	ldr	r3, [r7, #24]
 80071aa:	2bff      	cmp	r3, #255	; 0xff
 80071ac:	d802      	bhi.n	80071b4 <HAL_GPIO_Init+0x14c>
 80071ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071b0:	009b      	lsls	r3, r3, #2
 80071b2:	e002      	b.n	80071ba <HAL_GPIO_Init+0x152>
 80071b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071b6:	3b08      	subs	r3, #8
 80071b8:	009b      	lsls	r3, r3, #2
 80071ba:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80071bc:	697b      	ldr	r3, [r7, #20]
 80071be:	681a      	ldr	r2, [r3, #0]
 80071c0:	210f      	movs	r1, #15
 80071c2:	693b      	ldr	r3, [r7, #16]
 80071c4:	fa01 f303 	lsl.w	r3, r1, r3
 80071c8:	43db      	mvns	r3, r3
 80071ca:	401a      	ands	r2, r3
 80071cc:	6a39      	ldr	r1, [r7, #32]
 80071ce:	693b      	ldr	r3, [r7, #16]
 80071d0:	fa01 f303 	lsl.w	r3, r1, r3
 80071d4:	431a      	orrs	r2, r3
 80071d6:	697b      	ldr	r3, [r7, #20]
 80071d8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80071da:	683b      	ldr	r3, [r7, #0]
 80071dc:	685b      	ldr	r3, [r3, #4]
 80071de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80071e2:	2b00      	cmp	r3, #0
 80071e4:	f000 80c1 	beq.w	800736a <HAL_GPIO_Init+0x302>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80071e8:	4b49      	ldr	r3, [pc, #292]	; (8007310 <HAL_GPIO_Init+0x2a8>)
 80071ea:	699b      	ldr	r3, [r3, #24]
 80071ec:	4a48      	ldr	r2, [pc, #288]	; (8007310 <HAL_GPIO_Init+0x2a8>)
 80071ee:	f043 0301 	orr.w	r3, r3, #1
 80071f2:	6193      	str	r3, [r2, #24]
 80071f4:	4b46      	ldr	r3, [pc, #280]	; (8007310 <HAL_GPIO_Init+0x2a8>)
 80071f6:	699b      	ldr	r3, [r3, #24]
 80071f8:	f003 0301 	and.w	r3, r3, #1
 80071fc:	60bb      	str	r3, [r7, #8]
 80071fe:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8007200:	4a44      	ldr	r2, [pc, #272]	; (8007314 <HAL_GPIO_Init+0x2ac>)
 8007202:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007204:	089b      	lsrs	r3, r3, #2
 8007206:	3302      	adds	r3, #2
 8007208:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800720c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800720e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007210:	f003 0303 	and.w	r3, r3, #3
 8007214:	009b      	lsls	r3, r3, #2
 8007216:	220f      	movs	r2, #15
 8007218:	fa02 f303 	lsl.w	r3, r2, r3
 800721c:	43db      	mvns	r3, r3
 800721e:	68fa      	ldr	r2, [r7, #12]
 8007220:	4013      	ands	r3, r2
 8007222:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	4a3c      	ldr	r2, [pc, #240]	; (8007318 <HAL_GPIO_Init+0x2b0>)
 8007228:	4293      	cmp	r3, r2
 800722a:	d01f      	beq.n	800726c <HAL_GPIO_Init+0x204>
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	4a3b      	ldr	r2, [pc, #236]	; (800731c <HAL_GPIO_Init+0x2b4>)
 8007230:	4293      	cmp	r3, r2
 8007232:	d019      	beq.n	8007268 <HAL_GPIO_Init+0x200>
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	4a3a      	ldr	r2, [pc, #232]	; (8007320 <HAL_GPIO_Init+0x2b8>)
 8007238:	4293      	cmp	r3, r2
 800723a:	d013      	beq.n	8007264 <HAL_GPIO_Init+0x1fc>
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	4a39      	ldr	r2, [pc, #228]	; (8007324 <HAL_GPIO_Init+0x2bc>)
 8007240:	4293      	cmp	r3, r2
 8007242:	d00d      	beq.n	8007260 <HAL_GPIO_Init+0x1f8>
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	4a38      	ldr	r2, [pc, #224]	; (8007328 <HAL_GPIO_Init+0x2c0>)
 8007248:	4293      	cmp	r3, r2
 800724a:	d007      	beq.n	800725c <HAL_GPIO_Init+0x1f4>
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	4a37      	ldr	r2, [pc, #220]	; (800732c <HAL_GPIO_Init+0x2c4>)
 8007250:	4293      	cmp	r3, r2
 8007252:	d101      	bne.n	8007258 <HAL_GPIO_Init+0x1f0>
 8007254:	2305      	movs	r3, #5
 8007256:	e00a      	b.n	800726e <HAL_GPIO_Init+0x206>
 8007258:	2306      	movs	r3, #6
 800725a:	e008      	b.n	800726e <HAL_GPIO_Init+0x206>
 800725c:	2304      	movs	r3, #4
 800725e:	e006      	b.n	800726e <HAL_GPIO_Init+0x206>
 8007260:	2303      	movs	r3, #3
 8007262:	e004      	b.n	800726e <HAL_GPIO_Init+0x206>
 8007264:	2302      	movs	r3, #2
 8007266:	e002      	b.n	800726e <HAL_GPIO_Init+0x206>
 8007268:	2301      	movs	r3, #1
 800726a:	e000      	b.n	800726e <HAL_GPIO_Init+0x206>
 800726c:	2300      	movs	r3, #0
 800726e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007270:	f002 0203 	and.w	r2, r2, #3
 8007274:	0092      	lsls	r2, r2, #2
 8007276:	4093      	lsls	r3, r2
 8007278:	68fa      	ldr	r2, [r7, #12]
 800727a:	4313      	orrs	r3, r2
 800727c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800727e:	4925      	ldr	r1, [pc, #148]	; (8007314 <HAL_GPIO_Init+0x2ac>)
 8007280:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007282:	089b      	lsrs	r3, r3, #2
 8007284:	3302      	adds	r3, #2
 8007286:	68fa      	ldr	r2, [r7, #12]
 8007288:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800728c:	683b      	ldr	r3, [r7, #0]
 800728e:	685b      	ldr	r3, [r3, #4]
 8007290:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007294:	2b00      	cmp	r3, #0
 8007296:	d006      	beq.n	80072a6 <HAL_GPIO_Init+0x23e>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8007298:	4b25      	ldr	r3, [pc, #148]	; (8007330 <HAL_GPIO_Init+0x2c8>)
 800729a:	689a      	ldr	r2, [r3, #8]
 800729c:	4924      	ldr	r1, [pc, #144]	; (8007330 <HAL_GPIO_Init+0x2c8>)
 800729e:	69bb      	ldr	r3, [r7, #24]
 80072a0:	4313      	orrs	r3, r2
 80072a2:	608b      	str	r3, [r1, #8]
 80072a4:	e006      	b.n	80072b4 <HAL_GPIO_Init+0x24c>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80072a6:	4b22      	ldr	r3, [pc, #136]	; (8007330 <HAL_GPIO_Init+0x2c8>)
 80072a8:	689a      	ldr	r2, [r3, #8]
 80072aa:	69bb      	ldr	r3, [r7, #24]
 80072ac:	43db      	mvns	r3, r3
 80072ae:	4920      	ldr	r1, [pc, #128]	; (8007330 <HAL_GPIO_Init+0x2c8>)
 80072b0:	4013      	ands	r3, r2
 80072b2:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80072b4:	683b      	ldr	r3, [r7, #0]
 80072b6:	685b      	ldr	r3, [r3, #4]
 80072b8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80072bc:	2b00      	cmp	r3, #0
 80072be:	d006      	beq.n	80072ce <HAL_GPIO_Init+0x266>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80072c0:	4b1b      	ldr	r3, [pc, #108]	; (8007330 <HAL_GPIO_Init+0x2c8>)
 80072c2:	68da      	ldr	r2, [r3, #12]
 80072c4:	491a      	ldr	r1, [pc, #104]	; (8007330 <HAL_GPIO_Init+0x2c8>)
 80072c6:	69bb      	ldr	r3, [r7, #24]
 80072c8:	4313      	orrs	r3, r2
 80072ca:	60cb      	str	r3, [r1, #12]
 80072cc:	e006      	b.n	80072dc <HAL_GPIO_Init+0x274>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80072ce:	4b18      	ldr	r3, [pc, #96]	; (8007330 <HAL_GPIO_Init+0x2c8>)
 80072d0:	68da      	ldr	r2, [r3, #12]
 80072d2:	69bb      	ldr	r3, [r7, #24]
 80072d4:	43db      	mvns	r3, r3
 80072d6:	4916      	ldr	r1, [pc, #88]	; (8007330 <HAL_GPIO_Init+0x2c8>)
 80072d8:	4013      	ands	r3, r2
 80072da:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80072dc:	683b      	ldr	r3, [r7, #0]
 80072de:	685b      	ldr	r3, [r3, #4]
 80072e0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80072e4:	2b00      	cmp	r3, #0
 80072e6:	d025      	beq.n	8007334 <HAL_GPIO_Init+0x2cc>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80072e8:	4b11      	ldr	r3, [pc, #68]	; (8007330 <HAL_GPIO_Init+0x2c8>)
 80072ea:	685a      	ldr	r2, [r3, #4]
 80072ec:	4910      	ldr	r1, [pc, #64]	; (8007330 <HAL_GPIO_Init+0x2c8>)
 80072ee:	69bb      	ldr	r3, [r7, #24]
 80072f0:	4313      	orrs	r3, r2
 80072f2:	604b      	str	r3, [r1, #4]
 80072f4:	e025      	b.n	8007342 <HAL_GPIO_Init+0x2da>
 80072f6:	bf00      	nop
 80072f8:	10320000 	.word	0x10320000
 80072fc:	10310000 	.word	0x10310000
 8007300:	10220000 	.word	0x10220000
 8007304:	10210000 	.word	0x10210000
 8007308:	10120000 	.word	0x10120000
 800730c:	10110000 	.word	0x10110000
 8007310:	40021000 	.word	0x40021000
 8007314:	40010000 	.word	0x40010000
 8007318:	40010800 	.word	0x40010800
 800731c:	40010c00 	.word	0x40010c00
 8007320:	40011000 	.word	0x40011000
 8007324:	40011400 	.word	0x40011400
 8007328:	40011800 	.word	0x40011800
 800732c:	40011c00 	.word	0x40011c00
 8007330:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8007334:	4b15      	ldr	r3, [pc, #84]	; (800738c <HAL_GPIO_Init+0x324>)
 8007336:	685a      	ldr	r2, [r3, #4]
 8007338:	69bb      	ldr	r3, [r7, #24]
 800733a:	43db      	mvns	r3, r3
 800733c:	4913      	ldr	r1, [pc, #76]	; (800738c <HAL_GPIO_Init+0x324>)
 800733e:	4013      	ands	r3, r2
 8007340:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8007342:	683b      	ldr	r3, [r7, #0]
 8007344:	685b      	ldr	r3, [r3, #4]
 8007346:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800734a:	2b00      	cmp	r3, #0
 800734c:	d006      	beq.n	800735c <HAL_GPIO_Init+0x2f4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800734e:	4b0f      	ldr	r3, [pc, #60]	; (800738c <HAL_GPIO_Init+0x324>)
 8007350:	681a      	ldr	r2, [r3, #0]
 8007352:	490e      	ldr	r1, [pc, #56]	; (800738c <HAL_GPIO_Init+0x324>)
 8007354:	69bb      	ldr	r3, [r7, #24]
 8007356:	4313      	orrs	r3, r2
 8007358:	600b      	str	r3, [r1, #0]
 800735a:	e006      	b.n	800736a <HAL_GPIO_Init+0x302>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800735c:	4b0b      	ldr	r3, [pc, #44]	; (800738c <HAL_GPIO_Init+0x324>)
 800735e:	681a      	ldr	r2, [r3, #0]
 8007360:	69bb      	ldr	r3, [r7, #24]
 8007362:	43db      	mvns	r3, r3
 8007364:	4909      	ldr	r1, [pc, #36]	; (800738c <HAL_GPIO_Init+0x324>)
 8007366:	4013      	ands	r3, r2
 8007368:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800736a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800736c:	3301      	adds	r3, #1
 800736e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8007370:	683b      	ldr	r3, [r7, #0]
 8007372:	681a      	ldr	r2, [r3, #0]
 8007374:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007376:	fa22 f303 	lsr.w	r3, r2, r3
 800737a:	2b00      	cmp	r3, #0
 800737c:	f47f ae7e 	bne.w	800707c <HAL_GPIO_Init+0x14>
  }
}
 8007380:	bf00      	nop
 8007382:	bf00      	nop
 8007384:	372c      	adds	r7, #44	; 0x2c
 8007386:	46bd      	mov	sp, r7
 8007388:	bc80      	pop	{r7}
 800738a:	4770      	bx	lr
 800738c:	40010400 	.word	0x40010400

08007390 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8007390:	b480      	push	{r7}
 8007392:	b085      	sub	sp, #20
 8007394:	af00      	add	r7, sp, #0
 8007396:	6078      	str	r0, [r7, #4]
 8007398:	460b      	mov	r3, r1
 800739a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	689a      	ldr	r2, [r3, #8]
 80073a0:	887b      	ldrh	r3, [r7, #2]
 80073a2:	4013      	ands	r3, r2
 80073a4:	2b00      	cmp	r3, #0
 80073a6:	d002      	beq.n	80073ae <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80073a8:	2301      	movs	r3, #1
 80073aa:	73fb      	strb	r3, [r7, #15]
 80073ac:	e001      	b.n	80073b2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80073ae:	2300      	movs	r3, #0
 80073b0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80073b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80073b4:	4618      	mov	r0, r3
 80073b6:	3714      	adds	r7, #20
 80073b8:	46bd      	mov	sp, r7
 80073ba:	bc80      	pop	{r7}
 80073bc:	4770      	bx	lr

080073be <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80073be:	b480      	push	{r7}
 80073c0:	b083      	sub	sp, #12
 80073c2:	af00      	add	r7, sp, #0
 80073c4:	6078      	str	r0, [r7, #4]
 80073c6:	460b      	mov	r3, r1
 80073c8:	807b      	strh	r3, [r7, #2]
 80073ca:	4613      	mov	r3, r2
 80073cc:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80073ce:	787b      	ldrb	r3, [r7, #1]
 80073d0:	2b00      	cmp	r3, #0
 80073d2:	d003      	beq.n	80073dc <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80073d4:	887a      	ldrh	r2, [r7, #2]
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80073da:	e003      	b.n	80073e4 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80073dc:	887b      	ldrh	r3, [r7, #2]
 80073de:	041a      	lsls	r2, r3, #16
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	611a      	str	r2, [r3, #16]
}
 80073e4:	bf00      	nop
 80073e6:	370c      	adds	r7, #12
 80073e8:	46bd      	mov	sp, r7
 80073ea:	bc80      	pop	{r7}
 80073ec:	4770      	bx	lr
	...

080073f0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80073f0:	b580      	push	{r7, lr}
 80073f2:	b082      	sub	sp, #8
 80073f4:	af00      	add	r7, sp, #0
 80073f6:	4603      	mov	r3, r0
 80073f8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80073fa:	4b08      	ldr	r3, [pc, #32]	; (800741c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80073fc:	695a      	ldr	r2, [r3, #20]
 80073fe:	88fb      	ldrh	r3, [r7, #6]
 8007400:	4013      	ands	r3, r2
 8007402:	2b00      	cmp	r3, #0
 8007404:	d006      	beq.n	8007414 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8007406:	4a05      	ldr	r2, [pc, #20]	; (800741c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8007408:	88fb      	ldrh	r3, [r7, #6]
 800740a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800740c:	88fb      	ldrh	r3, [r7, #6]
 800740e:	4618      	mov	r0, r3
 8007410:	f7ff f87e 	bl	8006510 <HAL_GPIO_EXTI_Callback>
  }
}
 8007414:	bf00      	nop
 8007416:	3708      	adds	r7, #8
 8007418:	46bd      	mov	sp, r7
 800741a:	bd80      	pop	{r7, pc}
 800741c:	40010400 	.word	0x40010400

08007420 <HAL_PWR_EnableBkUpAccess>:
  * @note   If the HSE divided by 128 is used as the RTC clock, the
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8007420:	b480      	push	{r7}
 8007422:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)ENABLE;
 8007424:	4b03      	ldr	r3, [pc, #12]	; (8007434 <HAL_PWR_EnableBkUpAccess+0x14>)
 8007426:	2201      	movs	r2, #1
 8007428:	601a      	str	r2, [r3, #0]
}
 800742a:	bf00      	nop
 800742c:	46bd      	mov	sp, r7
 800742e:	bc80      	pop	{r7}
 8007430:	4770      	bx	lr
 8007432:	bf00      	nop
 8007434:	420e0020 	.word	0x420e0020

08007438 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007438:	b580      	push	{r7, lr}
 800743a:	b086      	sub	sp, #24
 800743c:	af00      	add	r7, sp, #0
 800743e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	2b00      	cmp	r3, #0
 8007444:	d101      	bne.n	800744a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8007446:	2301      	movs	r3, #1
 8007448:	e272      	b.n	8007930 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	681b      	ldr	r3, [r3, #0]
 800744e:	f003 0301 	and.w	r3, r3, #1
 8007452:	2b00      	cmp	r3, #0
 8007454:	f000 8087 	beq.w	8007566 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8007458:	4b92      	ldr	r3, [pc, #584]	; (80076a4 <HAL_RCC_OscConfig+0x26c>)
 800745a:	685b      	ldr	r3, [r3, #4]
 800745c:	f003 030c 	and.w	r3, r3, #12
 8007460:	2b04      	cmp	r3, #4
 8007462:	d00c      	beq.n	800747e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8007464:	4b8f      	ldr	r3, [pc, #572]	; (80076a4 <HAL_RCC_OscConfig+0x26c>)
 8007466:	685b      	ldr	r3, [r3, #4]
 8007468:	f003 030c 	and.w	r3, r3, #12
 800746c:	2b08      	cmp	r3, #8
 800746e:	d112      	bne.n	8007496 <HAL_RCC_OscConfig+0x5e>
 8007470:	4b8c      	ldr	r3, [pc, #560]	; (80076a4 <HAL_RCC_OscConfig+0x26c>)
 8007472:	685b      	ldr	r3, [r3, #4]
 8007474:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007478:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800747c:	d10b      	bne.n	8007496 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800747e:	4b89      	ldr	r3, [pc, #548]	; (80076a4 <HAL_RCC_OscConfig+0x26c>)
 8007480:	681b      	ldr	r3, [r3, #0]
 8007482:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007486:	2b00      	cmp	r3, #0
 8007488:	d06c      	beq.n	8007564 <HAL_RCC_OscConfig+0x12c>
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	685b      	ldr	r3, [r3, #4]
 800748e:	2b00      	cmp	r3, #0
 8007490:	d168      	bne.n	8007564 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8007492:	2301      	movs	r3, #1
 8007494:	e24c      	b.n	8007930 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	685b      	ldr	r3, [r3, #4]
 800749a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800749e:	d106      	bne.n	80074ae <HAL_RCC_OscConfig+0x76>
 80074a0:	4b80      	ldr	r3, [pc, #512]	; (80076a4 <HAL_RCC_OscConfig+0x26c>)
 80074a2:	681b      	ldr	r3, [r3, #0]
 80074a4:	4a7f      	ldr	r2, [pc, #508]	; (80076a4 <HAL_RCC_OscConfig+0x26c>)
 80074a6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80074aa:	6013      	str	r3, [r2, #0]
 80074ac:	e02e      	b.n	800750c <HAL_RCC_OscConfig+0xd4>
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	685b      	ldr	r3, [r3, #4]
 80074b2:	2b00      	cmp	r3, #0
 80074b4:	d10c      	bne.n	80074d0 <HAL_RCC_OscConfig+0x98>
 80074b6:	4b7b      	ldr	r3, [pc, #492]	; (80076a4 <HAL_RCC_OscConfig+0x26c>)
 80074b8:	681b      	ldr	r3, [r3, #0]
 80074ba:	4a7a      	ldr	r2, [pc, #488]	; (80076a4 <HAL_RCC_OscConfig+0x26c>)
 80074bc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80074c0:	6013      	str	r3, [r2, #0]
 80074c2:	4b78      	ldr	r3, [pc, #480]	; (80076a4 <HAL_RCC_OscConfig+0x26c>)
 80074c4:	681b      	ldr	r3, [r3, #0]
 80074c6:	4a77      	ldr	r2, [pc, #476]	; (80076a4 <HAL_RCC_OscConfig+0x26c>)
 80074c8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80074cc:	6013      	str	r3, [r2, #0]
 80074ce:	e01d      	b.n	800750c <HAL_RCC_OscConfig+0xd4>
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	685b      	ldr	r3, [r3, #4]
 80074d4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80074d8:	d10c      	bne.n	80074f4 <HAL_RCC_OscConfig+0xbc>
 80074da:	4b72      	ldr	r3, [pc, #456]	; (80076a4 <HAL_RCC_OscConfig+0x26c>)
 80074dc:	681b      	ldr	r3, [r3, #0]
 80074de:	4a71      	ldr	r2, [pc, #452]	; (80076a4 <HAL_RCC_OscConfig+0x26c>)
 80074e0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80074e4:	6013      	str	r3, [r2, #0]
 80074e6:	4b6f      	ldr	r3, [pc, #444]	; (80076a4 <HAL_RCC_OscConfig+0x26c>)
 80074e8:	681b      	ldr	r3, [r3, #0]
 80074ea:	4a6e      	ldr	r2, [pc, #440]	; (80076a4 <HAL_RCC_OscConfig+0x26c>)
 80074ec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80074f0:	6013      	str	r3, [r2, #0]
 80074f2:	e00b      	b.n	800750c <HAL_RCC_OscConfig+0xd4>
 80074f4:	4b6b      	ldr	r3, [pc, #428]	; (80076a4 <HAL_RCC_OscConfig+0x26c>)
 80074f6:	681b      	ldr	r3, [r3, #0]
 80074f8:	4a6a      	ldr	r2, [pc, #424]	; (80076a4 <HAL_RCC_OscConfig+0x26c>)
 80074fa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80074fe:	6013      	str	r3, [r2, #0]
 8007500:	4b68      	ldr	r3, [pc, #416]	; (80076a4 <HAL_RCC_OscConfig+0x26c>)
 8007502:	681b      	ldr	r3, [r3, #0]
 8007504:	4a67      	ldr	r2, [pc, #412]	; (80076a4 <HAL_RCC_OscConfig+0x26c>)
 8007506:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800750a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	685b      	ldr	r3, [r3, #4]
 8007510:	2b00      	cmp	r3, #0
 8007512:	d013      	beq.n	800753c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007514:	f7ff fb2a 	bl	8006b6c <HAL_GetTick>
 8007518:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800751a:	e008      	b.n	800752e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800751c:	f7ff fb26 	bl	8006b6c <HAL_GetTick>
 8007520:	4602      	mov	r2, r0
 8007522:	693b      	ldr	r3, [r7, #16]
 8007524:	1ad3      	subs	r3, r2, r3
 8007526:	2b64      	cmp	r3, #100	; 0x64
 8007528:	d901      	bls.n	800752e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800752a:	2303      	movs	r3, #3
 800752c:	e200      	b.n	8007930 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800752e:	4b5d      	ldr	r3, [pc, #372]	; (80076a4 <HAL_RCC_OscConfig+0x26c>)
 8007530:	681b      	ldr	r3, [r3, #0]
 8007532:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007536:	2b00      	cmp	r3, #0
 8007538:	d0f0      	beq.n	800751c <HAL_RCC_OscConfig+0xe4>
 800753a:	e014      	b.n	8007566 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800753c:	f7ff fb16 	bl	8006b6c <HAL_GetTick>
 8007540:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007542:	e008      	b.n	8007556 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007544:	f7ff fb12 	bl	8006b6c <HAL_GetTick>
 8007548:	4602      	mov	r2, r0
 800754a:	693b      	ldr	r3, [r7, #16]
 800754c:	1ad3      	subs	r3, r2, r3
 800754e:	2b64      	cmp	r3, #100	; 0x64
 8007550:	d901      	bls.n	8007556 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8007552:	2303      	movs	r3, #3
 8007554:	e1ec      	b.n	8007930 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007556:	4b53      	ldr	r3, [pc, #332]	; (80076a4 <HAL_RCC_OscConfig+0x26c>)
 8007558:	681b      	ldr	r3, [r3, #0]
 800755a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800755e:	2b00      	cmp	r3, #0
 8007560:	d1f0      	bne.n	8007544 <HAL_RCC_OscConfig+0x10c>
 8007562:	e000      	b.n	8007566 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007564:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	681b      	ldr	r3, [r3, #0]
 800756a:	f003 0302 	and.w	r3, r3, #2
 800756e:	2b00      	cmp	r3, #0
 8007570:	d063      	beq.n	800763a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8007572:	4b4c      	ldr	r3, [pc, #304]	; (80076a4 <HAL_RCC_OscConfig+0x26c>)
 8007574:	685b      	ldr	r3, [r3, #4]
 8007576:	f003 030c 	and.w	r3, r3, #12
 800757a:	2b00      	cmp	r3, #0
 800757c:	d00b      	beq.n	8007596 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800757e:	4b49      	ldr	r3, [pc, #292]	; (80076a4 <HAL_RCC_OscConfig+0x26c>)
 8007580:	685b      	ldr	r3, [r3, #4]
 8007582:	f003 030c 	and.w	r3, r3, #12
 8007586:	2b08      	cmp	r3, #8
 8007588:	d11c      	bne.n	80075c4 <HAL_RCC_OscConfig+0x18c>
 800758a:	4b46      	ldr	r3, [pc, #280]	; (80076a4 <HAL_RCC_OscConfig+0x26c>)
 800758c:	685b      	ldr	r3, [r3, #4]
 800758e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007592:	2b00      	cmp	r3, #0
 8007594:	d116      	bne.n	80075c4 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007596:	4b43      	ldr	r3, [pc, #268]	; (80076a4 <HAL_RCC_OscConfig+0x26c>)
 8007598:	681b      	ldr	r3, [r3, #0]
 800759a:	f003 0302 	and.w	r3, r3, #2
 800759e:	2b00      	cmp	r3, #0
 80075a0:	d005      	beq.n	80075ae <HAL_RCC_OscConfig+0x176>
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	691b      	ldr	r3, [r3, #16]
 80075a6:	2b01      	cmp	r3, #1
 80075a8:	d001      	beq.n	80075ae <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80075aa:	2301      	movs	r3, #1
 80075ac:	e1c0      	b.n	8007930 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80075ae:	4b3d      	ldr	r3, [pc, #244]	; (80076a4 <HAL_RCC_OscConfig+0x26c>)
 80075b0:	681b      	ldr	r3, [r3, #0]
 80075b2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	695b      	ldr	r3, [r3, #20]
 80075ba:	00db      	lsls	r3, r3, #3
 80075bc:	4939      	ldr	r1, [pc, #228]	; (80076a4 <HAL_RCC_OscConfig+0x26c>)
 80075be:	4313      	orrs	r3, r2
 80075c0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80075c2:	e03a      	b.n	800763a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	691b      	ldr	r3, [r3, #16]
 80075c8:	2b00      	cmp	r3, #0
 80075ca:	d020      	beq.n	800760e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80075cc:	4b36      	ldr	r3, [pc, #216]	; (80076a8 <HAL_RCC_OscConfig+0x270>)
 80075ce:	2201      	movs	r2, #1
 80075d0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80075d2:	f7ff facb 	bl	8006b6c <HAL_GetTick>
 80075d6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80075d8:	e008      	b.n	80075ec <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80075da:	f7ff fac7 	bl	8006b6c <HAL_GetTick>
 80075de:	4602      	mov	r2, r0
 80075e0:	693b      	ldr	r3, [r7, #16]
 80075e2:	1ad3      	subs	r3, r2, r3
 80075e4:	2b02      	cmp	r3, #2
 80075e6:	d901      	bls.n	80075ec <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80075e8:	2303      	movs	r3, #3
 80075ea:	e1a1      	b.n	8007930 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80075ec:	4b2d      	ldr	r3, [pc, #180]	; (80076a4 <HAL_RCC_OscConfig+0x26c>)
 80075ee:	681b      	ldr	r3, [r3, #0]
 80075f0:	f003 0302 	and.w	r3, r3, #2
 80075f4:	2b00      	cmp	r3, #0
 80075f6:	d0f0      	beq.n	80075da <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80075f8:	4b2a      	ldr	r3, [pc, #168]	; (80076a4 <HAL_RCC_OscConfig+0x26c>)
 80075fa:	681b      	ldr	r3, [r3, #0]
 80075fc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	695b      	ldr	r3, [r3, #20]
 8007604:	00db      	lsls	r3, r3, #3
 8007606:	4927      	ldr	r1, [pc, #156]	; (80076a4 <HAL_RCC_OscConfig+0x26c>)
 8007608:	4313      	orrs	r3, r2
 800760a:	600b      	str	r3, [r1, #0]
 800760c:	e015      	b.n	800763a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800760e:	4b26      	ldr	r3, [pc, #152]	; (80076a8 <HAL_RCC_OscConfig+0x270>)
 8007610:	2200      	movs	r2, #0
 8007612:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007614:	f7ff faaa 	bl	8006b6c <HAL_GetTick>
 8007618:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800761a:	e008      	b.n	800762e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800761c:	f7ff faa6 	bl	8006b6c <HAL_GetTick>
 8007620:	4602      	mov	r2, r0
 8007622:	693b      	ldr	r3, [r7, #16]
 8007624:	1ad3      	subs	r3, r2, r3
 8007626:	2b02      	cmp	r3, #2
 8007628:	d901      	bls.n	800762e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800762a:	2303      	movs	r3, #3
 800762c:	e180      	b.n	8007930 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800762e:	4b1d      	ldr	r3, [pc, #116]	; (80076a4 <HAL_RCC_OscConfig+0x26c>)
 8007630:	681b      	ldr	r3, [r3, #0]
 8007632:	f003 0302 	and.w	r3, r3, #2
 8007636:	2b00      	cmp	r3, #0
 8007638:	d1f0      	bne.n	800761c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	681b      	ldr	r3, [r3, #0]
 800763e:	f003 0308 	and.w	r3, r3, #8
 8007642:	2b00      	cmp	r3, #0
 8007644:	d03a      	beq.n	80076bc <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	699b      	ldr	r3, [r3, #24]
 800764a:	2b00      	cmp	r3, #0
 800764c:	d019      	beq.n	8007682 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800764e:	4b17      	ldr	r3, [pc, #92]	; (80076ac <HAL_RCC_OscConfig+0x274>)
 8007650:	2201      	movs	r2, #1
 8007652:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007654:	f7ff fa8a 	bl	8006b6c <HAL_GetTick>
 8007658:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800765a:	e008      	b.n	800766e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800765c:	f7ff fa86 	bl	8006b6c <HAL_GetTick>
 8007660:	4602      	mov	r2, r0
 8007662:	693b      	ldr	r3, [r7, #16]
 8007664:	1ad3      	subs	r3, r2, r3
 8007666:	2b02      	cmp	r3, #2
 8007668:	d901      	bls.n	800766e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800766a:	2303      	movs	r3, #3
 800766c:	e160      	b.n	8007930 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800766e:	4b0d      	ldr	r3, [pc, #52]	; (80076a4 <HAL_RCC_OscConfig+0x26c>)
 8007670:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007672:	f003 0302 	and.w	r3, r3, #2
 8007676:	2b00      	cmp	r3, #0
 8007678:	d0f0      	beq.n	800765c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800767a:	2001      	movs	r0, #1
 800767c:	f000 face 	bl	8007c1c <RCC_Delay>
 8007680:	e01c      	b.n	80076bc <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007682:	4b0a      	ldr	r3, [pc, #40]	; (80076ac <HAL_RCC_OscConfig+0x274>)
 8007684:	2200      	movs	r2, #0
 8007686:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007688:	f7ff fa70 	bl	8006b6c <HAL_GetTick>
 800768c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800768e:	e00f      	b.n	80076b0 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007690:	f7ff fa6c 	bl	8006b6c <HAL_GetTick>
 8007694:	4602      	mov	r2, r0
 8007696:	693b      	ldr	r3, [r7, #16]
 8007698:	1ad3      	subs	r3, r2, r3
 800769a:	2b02      	cmp	r3, #2
 800769c:	d908      	bls.n	80076b0 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800769e:	2303      	movs	r3, #3
 80076a0:	e146      	b.n	8007930 <HAL_RCC_OscConfig+0x4f8>
 80076a2:	bf00      	nop
 80076a4:	40021000 	.word	0x40021000
 80076a8:	42420000 	.word	0x42420000
 80076ac:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80076b0:	4b92      	ldr	r3, [pc, #584]	; (80078fc <HAL_RCC_OscConfig+0x4c4>)
 80076b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076b4:	f003 0302 	and.w	r3, r3, #2
 80076b8:	2b00      	cmp	r3, #0
 80076ba:	d1e9      	bne.n	8007690 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	681b      	ldr	r3, [r3, #0]
 80076c0:	f003 0304 	and.w	r3, r3, #4
 80076c4:	2b00      	cmp	r3, #0
 80076c6:	f000 80a6 	beq.w	8007816 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80076ca:	2300      	movs	r3, #0
 80076cc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80076ce:	4b8b      	ldr	r3, [pc, #556]	; (80078fc <HAL_RCC_OscConfig+0x4c4>)
 80076d0:	69db      	ldr	r3, [r3, #28]
 80076d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80076d6:	2b00      	cmp	r3, #0
 80076d8:	d10d      	bne.n	80076f6 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80076da:	4b88      	ldr	r3, [pc, #544]	; (80078fc <HAL_RCC_OscConfig+0x4c4>)
 80076dc:	69db      	ldr	r3, [r3, #28]
 80076de:	4a87      	ldr	r2, [pc, #540]	; (80078fc <HAL_RCC_OscConfig+0x4c4>)
 80076e0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80076e4:	61d3      	str	r3, [r2, #28]
 80076e6:	4b85      	ldr	r3, [pc, #532]	; (80078fc <HAL_RCC_OscConfig+0x4c4>)
 80076e8:	69db      	ldr	r3, [r3, #28]
 80076ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80076ee:	60bb      	str	r3, [r7, #8]
 80076f0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80076f2:	2301      	movs	r3, #1
 80076f4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80076f6:	4b82      	ldr	r3, [pc, #520]	; (8007900 <HAL_RCC_OscConfig+0x4c8>)
 80076f8:	681b      	ldr	r3, [r3, #0]
 80076fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80076fe:	2b00      	cmp	r3, #0
 8007700:	d118      	bne.n	8007734 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8007702:	4b7f      	ldr	r3, [pc, #508]	; (8007900 <HAL_RCC_OscConfig+0x4c8>)
 8007704:	681b      	ldr	r3, [r3, #0]
 8007706:	4a7e      	ldr	r2, [pc, #504]	; (8007900 <HAL_RCC_OscConfig+0x4c8>)
 8007708:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800770c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800770e:	f7ff fa2d 	bl	8006b6c <HAL_GetTick>
 8007712:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007714:	e008      	b.n	8007728 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007716:	f7ff fa29 	bl	8006b6c <HAL_GetTick>
 800771a:	4602      	mov	r2, r0
 800771c:	693b      	ldr	r3, [r7, #16]
 800771e:	1ad3      	subs	r3, r2, r3
 8007720:	2b64      	cmp	r3, #100	; 0x64
 8007722:	d901      	bls.n	8007728 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8007724:	2303      	movs	r3, #3
 8007726:	e103      	b.n	8007930 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007728:	4b75      	ldr	r3, [pc, #468]	; (8007900 <HAL_RCC_OscConfig+0x4c8>)
 800772a:	681b      	ldr	r3, [r3, #0]
 800772c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007730:	2b00      	cmp	r3, #0
 8007732:	d0f0      	beq.n	8007716 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	68db      	ldr	r3, [r3, #12]
 8007738:	2b01      	cmp	r3, #1
 800773a:	d106      	bne.n	800774a <HAL_RCC_OscConfig+0x312>
 800773c:	4b6f      	ldr	r3, [pc, #444]	; (80078fc <HAL_RCC_OscConfig+0x4c4>)
 800773e:	6a1b      	ldr	r3, [r3, #32]
 8007740:	4a6e      	ldr	r2, [pc, #440]	; (80078fc <HAL_RCC_OscConfig+0x4c4>)
 8007742:	f043 0301 	orr.w	r3, r3, #1
 8007746:	6213      	str	r3, [r2, #32]
 8007748:	e02d      	b.n	80077a6 <HAL_RCC_OscConfig+0x36e>
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	68db      	ldr	r3, [r3, #12]
 800774e:	2b00      	cmp	r3, #0
 8007750:	d10c      	bne.n	800776c <HAL_RCC_OscConfig+0x334>
 8007752:	4b6a      	ldr	r3, [pc, #424]	; (80078fc <HAL_RCC_OscConfig+0x4c4>)
 8007754:	6a1b      	ldr	r3, [r3, #32]
 8007756:	4a69      	ldr	r2, [pc, #420]	; (80078fc <HAL_RCC_OscConfig+0x4c4>)
 8007758:	f023 0301 	bic.w	r3, r3, #1
 800775c:	6213      	str	r3, [r2, #32]
 800775e:	4b67      	ldr	r3, [pc, #412]	; (80078fc <HAL_RCC_OscConfig+0x4c4>)
 8007760:	6a1b      	ldr	r3, [r3, #32]
 8007762:	4a66      	ldr	r2, [pc, #408]	; (80078fc <HAL_RCC_OscConfig+0x4c4>)
 8007764:	f023 0304 	bic.w	r3, r3, #4
 8007768:	6213      	str	r3, [r2, #32]
 800776a:	e01c      	b.n	80077a6 <HAL_RCC_OscConfig+0x36e>
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	68db      	ldr	r3, [r3, #12]
 8007770:	2b05      	cmp	r3, #5
 8007772:	d10c      	bne.n	800778e <HAL_RCC_OscConfig+0x356>
 8007774:	4b61      	ldr	r3, [pc, #388]	; (80078fc <HAL_RCC_OscConfig+0x4c4>)
 8007776:	6a1b      	ldr	r3, [r3, #32]
 8007778:	4a60      	ldr	r2, [pc, #384]	; (80078fc <HAL_RCC_OscConfig+0x4c4>)
 800777a:	f043 0304 	orr.w	r3, r3, #4
 800777e:	6213      	str	r3, [r2, #32]
 8007780:	4b5e      	ldr	r3, [pc, #376]	; (80078fc <HAL_RCC_OscConfig+0x4c4>)
 8007782:	6a1b      	ldr	r3, [r3, #32]
 8007784:	4a5d      	ldr	r2, [pc, #372]	; (80078fc <HAL_RCC_OscConfig+0x4c4>)
 8007786:	f043 0301 	orr.w	r3, r3, #1
 800778a:	6213      	str	r3, [r2, #32]
 800778c:	e00b      	b.n	80077a6 <HAL_RCC_OscConfig+0x36e>
 800778e:	4b5b      	ldr	r3, [pc, #364]	; (80078fc <HAL_RCC_OscConfig+0x4c4>)
 8007790:	6a1b      	ldr	r3, [r3, #32]
 8007792:	4a5a      	ldr	r2, [pc, #360]	; (80078fc <HAL_RCC_OscConfig+0x4c4>)
 8007794:	f023 0301 	bic.w	r3, r3, #1
 8007798:	6213      	str	r3, [r2, #32]
 800779a:	4b58      	ldr	r3, [pc, #352]	; (80078fc <HAL_RCC_OscConfig+0x4c4>)
 800779c:	6a1b      	ldr	r3, [r3, #32]
 800779e:	4a57      	ldr	r2, [pc, #348]	; (80078fc <HAL_RCC_OscConfig+0x4c4>)
 80077a0:	f023 0304 	bic.w	r3, r3, #4
 80077a4:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	68db      	ldr	r3, [r3, #12]
 80077aa:	2b00      	cmp	r3, #0
 80077ac:	d015      	beq.n	80077da <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80077ae:	f7ff f9dd 	bl	8006b6c <HAL_GetTick>
 80077b2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80077b4:	e00a      	b.n	80077cc <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80077b6:	f7ff f9d9 	bl	8006b6c <HAL_GetTick>
 80077ba:	4602      	mov	r2, r0
 80077bc:	693b      	ldr	r3, [r7, #16]
 80077be:	1ad3      	subs	r3, r2, r3
 80077c0:	f241 3288 	movw	r2, #5000	; 0x1388
 80077c4:	4293      	cmp	r3, r2
 80077c6:	d901      	bls.n	80077cc <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80077c8:	2303      	movs	r3, #3
 80077ca:	e0b1      	b.n	8007930 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80077cc:	4b4b      	ldr	r3, [pc, #300]	; (80078fc <HAL_RCC_OscConfig+0x4c4>)
 80077ce:	6a1b      	ldr	r3, [r3, #32]
 80077d0:	f003 0302 	and.w	r3, r3, #2
 80077d4:	2b00      	cmp	r3, #0
 80077d6:	d0ee      	beq.n	80077b6 <HAL_RCC_OscConfig+0x37e>
 80077d8:	e014      	b.n	8007804 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80077da:	f7ff f9c7 	bl	8006b6c <HAL_GetTick>
 80077de:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80077e0:	e00a      	b.n	80077f8 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80077e2:	f7ff f9c3 	bl	8006b6c <HAL_GetTick>
 80077e6:	4602      	mov	r2, r0
 80077e8:	693b      	ldr	r3, [r7, #16]
 80077ea:	1ad3      	subs	r3, r2, r3
 80077ec:	f241 3288 	movw	r2, #5000	; 0x1388
 80077f0:	4293      	cmp	r3, r2
 80077f2:	d901      	bls.n	80077f8 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80077f4:	2303      	movs	r3, #3
 80077f6:	e09b      	b.n	8007930 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80077f8:	4b40      	ldr	r3, [pc, #256]	; (80078fc <HAL_RCC_OscConfig+0x4c4>)
 80077fa:	6a1b      	ldr	r3, [r3, #32]
 80077fc:	f003 0302 	and.w	r3, r3, #2
 8007800:	2b00      	cmp	r3, #0
 8007802:	d1ee      	bne.n	80077e2 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8007804:	7dfb      	ldrb	r3, [r7, #23]
 8007806:	2b01      	cmp	r3, #1
 8007808:	d105      	bne.n	8007816 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800780a:	4b3c      	ldr	r3, [pc, #240]	; (80078fc <HAL_RCC_OscConfig+0x4c4>)
 800780c:	69db      	ldr	r3, [r3, #28]
 800780e:	4a3b      	ldr	r2, [pc, #236]	; (80078fc <HAL_RCC_OscConfig+0x4c4>)
 8007810:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007814:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	69db      	ldr	r3, [r3, #28]
 800781a:	2b00      	cmp	r3, #0
 800781c:	f000 8087 	beq.w	800792e <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8007820:	4b36      	ldr	r3, [pc, #216]	; (80078fc <HAL_RCC_OscConfig+0x4c4>)
 8007822:	685b      	ldr	r3, [r3, #4]
 8007824:	f003 030c 	and.w	r3, r3, #12
 8007828:	2b08      	cmp	r3, #8
 800782a:	d061      	beq.n	80078f0 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	69db      	ldr	r3, [r3, #28]
 8007830:	2b02      	cmp	r3, #2
 8007832:	d146      	bne.n	80078c2 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007834:	4b33      	ldr	r3, [pc, #204]	; (8007904 <HAL_RCC_OscConfig+0x4cc>)
 8007836:	2200      	movs	r2, #0
 8007838:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800783a:	f7ff f997 	bl	8006b6c <HAL_GetTick>
 800783e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8007840:	e008      	b.n	8007854 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007842:	f7ff f993 	bl	8006b6c <HAL_GetTick>
 8007846:	4602      	mov	r2, r0
 8007848:	693b      	ldr	r3, [r7, #16]
 800784a:	1ad3      	subs	r3, r2, r3
 800784c:	2b02      	cmp	r3, #2
 800784e:	d901      	bls.n	8007854 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8007850:	2303      	movs	r3, #3
 8007852:	e06d      	b.n	8007930 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8007854:	4b29      	ldr	r3, [pc, #164]	; (80078fc <HAL_RCC_OscConfig+0x4c4>)
 8007856:	681b      	ldr	r3, [r3, #0]
 8007858:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800785c:	2b00      	cmp	r3, #0
 800785e:	d1f0      	bne.n	8007842 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	6a1b      	ldr	r3, [r3, #32]
 8007864:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007868:	d108      	bne.n	800787c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800786a:	4b24      	ldr	r3, [pc, #144]	; (80078fc <HAL_RCC_OscConfig+0x4c4>)
 800786c:	685b      	ldr	r3, [r3, #4]
 800786e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	689b      	ldr	r3, [r3, #8]
 8007876:	4921      	ldr	r1, [pc, #132]	; (80078fc <HAL_RCC_OscConfig+0x4c4>)
 8007878:	4313      	orrs	r3, r2
 800787a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800787c:	4b1f      	ldr	r3, [pc, #124]	; (80078fc <HAL_RCC_OscConfig+0x4c4>)
 800787e:	685b      	ldr	r3, [r3, #4]
 8007880:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	6a19      	ldr	r1, [r3, #32]
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800788c:	430b      	orrs	r3, r1
 800788e:	491b      	ldr	r1, [pc, #108]	; (80078fc <HAL_RCC_OscConfig+0x4c4>)
 8007890:	4313      	orrs	r3, r2
 8007892:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007894:	4b1b      	ldr	r3, [pc, #108]	; (8007904 <HAL_RCC_OscConfig+0x4cc>)
 8007896:	2201      	movs	r2, #1
 8007898:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800789a:	f7ff f967 	bl	8006b6c <HAL_GetTick>
 800789e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80078a0:	e008      	b.n	80078b4 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80078a2:	f7ff f963 	bl	8006b6c <HAL_GetTick>
 80078a6:	4602      	mov	r2, r0
 80078a8:	693b      	ldr	r3, [r7, #16]
 80078aa:	1ad3      	subs	r3, r2, r3
 80078ac:	2b02      	cmp	r3, #2
 80078ae:	d901      	bls.n	80078b4 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80078b0:	2303      	movs	r3, #3
 80078b2:	e03d      	b.n	8007930 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80078b4:	4b11      	ldr	r3, [pc, #68]	; (80078fc <HAL_RCC_OscConfig+0x4c4>)
 80078b6:	681b      	ldr	r3, [r3, #0]
 80078b8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80078bc:	2b00      	cmp	r3, #0
 80078be:	d0f0      	beq.n	80078a2 <HAL_RCC_OscConfig+0x46a>
 80078c0:	e035      	b.n	800792e <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80078c2:	4b10      	ldr	r3, [pc, #64]	; (8007904 <HAL_RCC_OscConfig+0x4cc>)
 80078c4:	2200      	movs	r2, #0
 80078c6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80078c8:	f7ff f950 	bl	8006b6c <HAL_GetTick>
 80078cc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80078ce:	e008      	b.n	80078e2 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80078d0:	f7ff f94c 	bl	8006b6c <HAL_GetTick>
 80078d4:	4602      	mov	r2, r0
 80078d6:	693b      	ldr	r3, [r7, #16]
 80078d8:	1ad3      	subs	r3, r2, r3
 80078da:	2b02      	cmp	r3, #2
 80078dc:	d901      	bls.n	80078e2 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80078de:	2303      	movs	r3, #3
 80078e0:	e026      	b.n	8007930 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80078e2:	4b06      	ldr	r3, [pc, #24]	; (80078fc <HAL_RCC_OscConfig+0x4c4>)
 80078e4:	681b      	ldr	r3, [r3, #0]
 80078e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80078ea:	2b00      	cmp	r3, #0
 80078ec:	d1f0      	bne.n	80078d0 <HAL_RCC_OscConfig+0x498>
 80078ee:	e01e      	b.n	800792e <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	69db      	ldr	r3, [r3, #28]
 80078f4:	2b01      	cmp	r3, #1
 80078f6:	d107      	bne.n	8007908 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80078f8:	2301      	movs	r3, #1
 80078fa:	e019      	b.n	8007930 <HAL_RCC_OscConfig+0x4f8>
 80078fc:	40021000 	.word	0x40021000
 8007900:	40007000 	.word	0x40007000
 8007904:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8007908:	4b0b      	ldr	r3, [pc, #44]	; (8007938 <HAL_RCC_OscConfig+0x500>)
 800790a:	685b      	ldr	r3, [r3, #4]
 800790c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800790e:	68fb      	ldr	r3, [r7, #12]
 8007910:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	6a1b      	ldr	r3, [r3, #32]
 8007918:	429a      	cmp	r2, r3
 800791a:	d106      	bne.n	800792a <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800791c:	68fb      	ldr	r3, [r7, #12]
 800791e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007926:	429a      	cmp	r2, r3
 8007928:	d001      	beq.n	800792e <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800792a:	2301      	movs	r3, #1
 800792c:	e000      	b.n	8007930 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800792e:	2300      	movs	r3, #0
}
 8007930:	4618      	mov	r0, r3
 8007932:	3718      	adds	r7, #24
 8007934:	46bd      	mov	sp, r7
 8007936:	bd80      	pop	{r7, pc}
 8007938:	40021000 	.word	0x40021000

0800793c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800793c:	b580      	push	{r7, lr}
 800793e:	b084      	sub	sp, #16
 8007940:	af00      	add	r7, sp, #0
 8007942:	6078      	str	r0, [r7, #4]
 8007944:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	2b00      	cmp	r3, #0
 800794a:	d101      	bne.n	8007950 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800794c:	2301      	movs	r3, #1
 800794e:	e0d0      	b.n	8007af2 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8007950:	4b6a      	ldr	r3, [pc, #424]	; (8007afc <HAL_RCC_ClockConfig+0x1c0>)
 8007952:	681b      	ldr	r3, [r3, #0]
 8007954:	f003 0307 	and.w	r3, r3, #7
 8007958:	683a      	ldr	r2, [r7, #0]
 800795a:	429a      	cmp	r2, r3
 800795c:	d910      	bls.n	8007980 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800795e:	4b67      	ldr	r3, [pc, #412]	; (8007afc <HAL_RCC_ClockConfig+0x1c0>)
 8007960:	681b      	ldr	r3, [r3, #0]
 8007962:	f023 0207 	bic.w	r2, r3, #7
 8007966:	4965      	ldr	r1, [pc, #404]	; (8007afc <HAL_RCC_ClockConfig+0x1c0>)
 8007968:	683b      	ldr	r3, [r7, #0]
 800796a:	4313      	orrs	r3, r2
 800796c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800796e:	4b63      	ldr	r3, [pc, #396]	; (8007afc <HAL_RCC_ClockConfig+0x1c0>)
 8007970:	681b      	ldr	r3, [r3, #0]
 8007972:	f003 0307 	and.w	r3, r3, #7
 8007976:	683a      	ldr	r2, [r7, #0]
 8007978:	429a      	cmp	r2, r3
 800797a:	d001      	beq.n	8007980 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800797c:	2301      	movs	r3, #1
 800797e:	e0b8      	b.n	8007af2 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	681b      	ldr	r3, [r3, #0]
 8007984:	f003 0302 	and.w	r3, r3, #2
 8007988:	2b00      	cmp	r3, #0
 800798a:	d020      	beq.n	80079ce <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	681b      	ldr	r3, [r3, #0]
 8007990:	f003 0304 	and.w	r3, r3, #4
 8007994:	2b00      	cmp	r3, #0
 8007996:	d005      	beq.n	80079a4 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8007998:	4b59      	ldr	r3, [pc, #356]	; (8007b00 <HAL_RCC_ClockConfig+0x1c4>)
 800799a:	685b      	ldr	r3, [r3, #4]
 800799c:	4a58      	ldr	r2, [pc, #352]	; (8007b00 <HAL_RCC_ClockConfig+0x1c4>)
 800799e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80079a2:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	681b      	ldr	r3, [r3, #0]
 80079a8:	f003 0308 	and.w	r3, r3, #8
 80079ac:	2b00      	cmp	r3, #0
 80079ae:	d005      	beq.n	80079bc <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80079b0:	4b53      	ldr	r3, [pc, #332]	; (8007b00 <HAL_RCC_ClockConfig+0x1c4>)
 80079b2:	685b      	ldr	r3, [r3, #4]
 80079b4:	4a52      	ldr	r2, [pc, #328]	; (8007b00 <HAL_RCC_ClockConfig+0x1c4>)
 80079b6:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80079ba:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80079bc:	4b50      	ldr	r3, [pc, #320]	; (8007b00 <HAL_RCC_ClockConfig+0x1c4>)
 80079be:	685b      	ldr	r3, [r3, #4]
 80079c0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	689b      	ldr	r3, [r3, #8]
 80079c8:	494d      	ldr	r1, [pc, #308]	; (8007b00 <HAL_RCC_ClockConfig+0x1c4>)
 80079ca:	4313      	orrs	r3, r2
 80079cc:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	681b      	ldr	r3, [r3, #0]
 80079d2:	f003 0301 	and.w	r3, r3, #1
 80079d6:	2b00      	cmp	r3, #0
 80079d8:	d040      	beq.n	8007a5c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	685b      	ldr	r3, [r3, #4]
 80079de:	2b01      	cmp	r3, #1
 80079e0:	d107      	bne.n	80079f2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80079e2:	4b47      	ldr	r3, [pc, #284]	; (8007b00 <HAL_RCC_ClockConfig+0x1c4>)
 80079e4:	681b      	ldr	r3, [r3, #0]
 80079e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80079ea:	2b00      	cmp	r3, #0
 80079ec:	d115      	bne.n	8007a1a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80079ee:	2301      	movs	r3, #1
 80079f0:	e07f      	b.n	8007af2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	685b      	ldr	r3, [r3, #4]
 80079f6:	2b02      	cmp	r3, #2
 80079f8:	d107      	bne.n	8007a0a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80079fa:	4b41      	ldr	r3, [pc, #260]	; (8007b00 <HAL_RCC_ClockConfig+0x1c4>)
 80079fc:	681b      	ldr	r3, [r3, #0]
 80079fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007a02:	2b00      	cmp	r3, #0
 8007a04:	d109      	bne.n	8007a1a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007a06:	2301      	movs	r3, #1
 8007a08:	e073      	b.n	8007af2 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007a0a:	4b3d      	ldr	r3, [pc, #244]	; (8007b00 <HAL_RCC_ClockConfig+0x1c4>)
 8007a0c:	681b      	ldr	r3, [r3, #0]
 8007a0e:	f003 0302 	and.w	r3, r3, #2
 8007a12:	2b00      	cmp	r3, #0
 8007a14:	d101      	bne.n	8007a1a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007a16:	2301      	movs	r3, #1
 8007a18:	e06b      	b.n	8007af2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8007a1a:	4b39      	ldr	r3, [pc, #228]	; (8007b00 <HAL_RCC_ClockConfig+0x1c4>)
 8007a1c:	685b      	ldr	r3, [r3, #4]
 8007a1e:	f023 0203 	bic.w	r2, r3, #3
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	685b      	ldr	r3, [r3, #4]
 8007a26:	4936      	ldr	r1, [pc, #216]	; (8007b00 <HAL_RCC_ClockConfig+0x1c4>)
 8007a28:	4313      	orrs	r3, r2
 8007a2a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8007a2c:	f7ff f89e 	bl	8006b6c <HAL_GetTick>
 8007a30:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007a32:	e00a      	b.n	8007a4a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007a34:	f7ff f89a 	bl	8006b6c <HAL_GetTick>
 8007a38:	4602      	mov	r2, r0
 8007a3a:	68fb      	ldr	r3, [r7, #12]
 8007a3c:	1ad3      	subs	r3, r2, r3
 8007a3e:	f241 3288 	movw	r2, #5000	; 0x1388
 8007a42:	4293      	cmp	r3, r2
 8007a44:	d901      	bls.n	8007a4a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8007a46:	2303      	movs	r3, #3
 8007a48:	e053      	b.n	8007af2 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007a4a:	4b2d      	ldr	r3, [pc, #180]	; (8007b00 <HAL_RCC_ClockConfig+0x1c4>)
 8007a4c:	685b      	ldr	r3, [r3, #4]
 8007a4e:	f003 020c 	and.w	r2, r3, #12
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	685b      	ldr	r3, [r3, #4]
 8007a56:	009b      	lsls	r3, r3, #2
 8007a58:	429a      	cmp	r2, r3
 8007a5a:	d1eb      	bne.n	8007a34 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8007a5c:	4b27      	ldr	r3, [pc, #156]	; (8007afc <HAL_RCC_ClockConfig+0x1c0>)
 8007a5e:	681b      	ldr	r3, [r3, #0]
 8007a60:	f003 0307 	and.w	r3, r3, #7
 8007a64:	683a      	ldr	r2, [r7, #0]
 8007a66:	429a      	cmp	r2, r3
 8007a68:	d210      	bcs.n	8007a8c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007a6a:	4b24      	ldr	r3, [pc, #144]	; (8007afc <HAL_RCC_ClockConfig+0x1c0>)
 8007a6c:	681b      	ldr	r3, [r3, #0]
 8007a6e:	f023 0207 	bic.w	r2, r3, #7
 8007a72:	4922      	ldr	r1, [pc, #136]	; (8007afc <HAL_RCC_ClockConfig+0x1c0>)
 8007a74:	683b      	ldr	r3, [r7, #0]
 8007a76:	4313      	orrs	r3, r2
 8007a78:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007a7a:	4b20      	ldr	r3, [pc, #128]	; (8007afc <HAL_RCC_ClockConfig+0x1c0>)
 8007a7c:	681b      	ldr	r3, [r3, #0]
 8007a7e:	f003 0307 	and.w	r3, r3, #7
 8007a82:	683a      	ldr	r2, [r7, #0]
 8007a84:	429a      	cmp	r2, r3
 8007a86:	d001      	beq.n	8007a8c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8007a88:	2301      	movs	r3, #1
 8007a8a:	e032      	b.n	8007af2 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	681b      	ldr	r3, [r3, #0]
 8007a90:	f003 0304 	and.w	r3, r3, #4
 8007a94:	2b00      	cmp	r3, #0
 8007a96:	d008      	beq.n	8007aaa <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007a98:	4b19      	ldr	r3, [pc, #100]	; (8007b00 <HAL_RCC_ClockConfig+0x1c4>)
 8007a9a:	685b      	ldr	r3, [r3, #4]
 8007a9c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	68db      	ldr	r3, [r3, #12]
 8007aa4:	4916      	ldr	r1, [pc, #88]	; (8007b00 <HAL_RCC_ClockConfig+0x1c4>)
 8007aa6:	4313      	orrs	r3, r2
 8007aa8:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	681b      	ldr	r3, [r3, #0]
 8007aae:	f003 0308 	and.w	r3, r3, #8
 8007ab2:	2b00      	cmp	r3, #0
 8007ab4:	d009      	beq.n	8007aca <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8007ab6:	4b12      	ldr	r3, [pc, #72]	; (8007b00 <HAL_RCC_ClockConfig+0x1c4>)
 8007ab8:	685b      	ldr	r3, [r3, #4]
 8007aba:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	691b      	ldr	r3, [r3, #16]
 8007ac2:	00db      	lsls	r3, r3, #3
 8007ac4:	490e      	ldr	r1, [pc, #56]	; (8007b00 <HAL_RCC_ClockConfig+0x1c4>)
 8007ac6:	4313      	orrs	r3, r2
 8007ac8:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8007aca:	f000 f821 	bl	8007b10 <HAL_RCC_GetSysClockFreq>
 8007ace:	4602      	mov	r2, r0
 8007ad0:	4b0b      	ldr	r3, [pc, #44]	; (8007b00 <HAL_RCC_ClockConfig+0x1c4>)
 8007ad2:	685b      	ldr	r3, [r3, #4]
 8007ad4:	091b      	lsrs	r3, r3, #4
 8007ad6:	f003 030f 	and.w	r3, r3, #15
 8007ada:	490a      	ldr	r1, [pc, #40]	; (8007b04 <HAL_RCC_ClockConfig+0x1c8>)
 8007adc:	5ccb      	ldrb	r3, [r1, r3]
 8007ade:	fa22 f303 	lsr.w	r3, r2, r3
 8007ae2:	4a09      	ldr	r2, [pc, #36]	; (8007b08 <HAL_RCC_ClockConfig+0x1cc>)
 8007ae4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8007ae6:	4b09      	ldr	r3, [pc, #36]	; (8007b0c <HAL_RCC_ClockConfig+0x1d0>)
 8007ae8:	681b      	ldr	r3, [r3, #0]
 8007aea:	4618      	mov	r0, r3
 8007aec:	f7fe fffc 	bl	8006ae8 <HAL_InitTick>

  return HAL_OK;
 8007af0:	2300      	movs	r3, #0
}
 8007af2:	4618      	mov	r0, r3
 8007af4:	3710      	adds	r7, #16
 8007af6:	46bd      	mov	sp, r7
 8007af8:	bd80      	pop	{r7, pc}
 8007afa:	bf00      	nop
 8007afc:	40022000 	.word	0x40022000
 8007b00:	40021000 	.word	0x40021000
 8007b04:	0800c2d8 	.word	0x0800c2d8
 8007b08:	20000004 	.word	0x20000004
 8007b0c:	20000008 	.word	0x20000008

08007b10 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007b10:	b480      	push	{r7}
 8007b12:	b087      	sub	sp, #28
 8007b14:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8007b16:	2300      	movs	r3, #0
 8007b18:	60fb      	str	r3, [r7, #12]
 8007b1a:	2300      	movs	r3, #0
 8007b1c:	60bb      	str	r3, [r7, #8]
 8007b1e:	2300      	movs	r3, #0
 8007b20:	617b      	str	r3, [r7, #20]
 8007b22:	2300      	movs	r3, #0
 8007b24:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8007b26:	2300      	movs	r3, #0
 8007b28:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8007b2a:	4b1e      	ldr	r3, [pc, #120]	; (8007ba4 <HAL_RCC_GetSysClockFreq+0x94>)
 8007b2c:	685b      	ldr	r3, [r3, #4]
 8007b2e:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8007b30:	68fb      	ldr	r3, [r7, #12]
 8007b32:	f003 030c 	and.w	r3, r3, #12
 8007b36:	2b04      	cmp	r3, #4
 8007b38:	d002      	beq.n	8007b40 <HAL_RCC_GetSysClockFreq+0x30>
 8007b3a:	2b08      	cmp	r3, #8
 8007b3c:	d003      	beq.n	8007b46 <HAL_RCC_GetSysClockFreq+0x36>
 8007b3e:	e027      	b.n	8007b90 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8007b40:	4b19      	ldr	r3, [pc, #100]	; (8007ba8 <HAL_RCC_GetSysClockFreq+0x98>)
 8007b42:	613b      	str	r3, [r7, #16]
      break;
 8007b44:	e027      	b.n	8007b96 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8007b46:	68fb      	ldr	r3, [r7, #12]
 8007b48:	0c9b      	lsrs	r3, r3, #18
 8007b4a:	f003 030f 	and.w	r3, r3, #15
 8007b4e:	4a17      	ldr	r2, [pc, #92]	; (8007bac <HAL_RCC_GetSysClockFreq+0x9c>)
 8007b50:	5cd3      	ldrb	r3, [r2, r3]
 8007b52:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8007b54:	68fb      	ldr	r3, [r7, #12]
 8007b56:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007b5a:	2b00      	cmp	r3, #0
 8007b5c:	d010      	beq.n	8007b80 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8007b5e:	4b11      	ldr	r3, [pc, #68]	; (8007ba4 <HAL_RCC_GetSysClockFreq+0x94>)
 8007b60:	685b      	ldr	r3, [r3, #4]
 8007b62:	0c5b      	lsrs	r3, r3, #17
 8007b64:	f003 0301 	and.w	r3, r3, #1
 8007b68:	4a11      	ldr	r2, [pc, #68]	; (8007bb0 <HAL_RCC_GetSysClockFreq+0xa0>)
 8007b6a:	5cd3      	ldrb	r3, [r2, r3]
 8007b6c:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	4a0d      	ldr	r2, [pc, #52]	; (8007ba8 <HAL_RCC_GetSysClockFreq+0x98>)
 8007b72:	fb03 f202 	mul.w	r2, r3, r2
 8007b76:	68bb      	ldr	r3, [r7, #8]
 8007b78:	fbb2 f3f3 	udiv	r3, r2, r3
 8007b7c:	617b      	str	r3, [r7, #20]
 8007b7e:	e004      	b.n	8007b8a <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	4a0c      	ldr	r2, [pc, #48]	; (8007bb4 <HAL_RCC_GetSysClockFreq+0xa4>)
 8007b84:	fb02 f303 	mul.w	r3, r2, r3
 8007b88:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8007b8a:	697b      	ldr	r3, [r7, #20]
 8007b8c:	613b      	str	r3, [r7, #16]
      break;
 8007b8e:	e002      	b.n	8007b96 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8007b90:	4b05      	ldr	r3, [pc, #20]	; (8007ba8 <HAL_RCC_GetSysClockFreq+0x98>)
 8007b92:	613b      	str	r3, [r7, #16]
      break;
 8007b94:	bf00      	nop
    }
  }
  return sysclockfreq;
 8007b96:	693b      	ldr	r3, [r7, #16]
}
 8007b98:	4618      	mov	r0, r3
 8007b9a:	371c      	adds	r7, #28
 8007b9c:	46bd      	mov	sp, r7
 8007b9e:	bc80      	pop	{r7}
 8007ba0:	4770      	bx	lr
 8007ba2:	bf00      	nop
 8007ba4:	40021000 	.word	0x40021000
 8007ba8:	007a1200 	.word	0x007a1200
 8007bac:	08011570 	.word	0x08011570
 8007bb0:	08011580 	.word	0x08011580
 8007bb4:	003d0900 	.word	0x003d0900

08007bb8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007bb8:	b480      	push	{r7}
 8007bba:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007bbc:	4b02      	ldr	r3, [pc, #8]	; (8007bc8 <HAL_RCC_GetHCLKFreq+0x10>)
 8007bbe:	681b      	ldr	r3, [r3, #0]
}
 8007bc0:	4618      	mov	r0, r3
 8007bc2:	46bd      	mov	sp, r7
 8007bc4:	bc80      	pop	{r7}
 8007bc6:	4770      	bx	lr
 8007bc8:	20000004 	.word	0x20000004

08007bcc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007bcc:	b580      	push	{r7, lr}
 8007bce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8007bd0:	f7ff fff2 	bl	8007bb8 <HAL_RCC_GetHCLKFreq>
 8007bd4:	4602      	mov	r2, r0
 8007bd6:	4b05      	ldr	r3, [pc, #20]	; (8007bec <HAL_RCC_GetPCLK1Freq+0x20>)
 8007bd8:	685b      	ldr	r3, [r3, #4]
 8007bda:	0a1b      	lsrs	r3, r3, #8
 8007bdc:	f003 0307 	and.w	r3, r3, #7
 8007be0:	4903      	ldr	r1, [pc, #12]	; (8007bf0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8007be2:	5ccb      	ldrb	r3, [r1, r3]
 8007be4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007be8:	4618      	mov	r0, r3
 8007bea:	bd80      	pop	{r7, pc}
 8007bec:	40021000 	.word	0x40021000
 8007bf0:	0800c2e8 	.word	0x0800c2e8

08007bf4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007bf4:	b580      	push	{r7, lr}
 8007bf6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8007bf8:	f7ff ffde 	bl	8007bb8 <HAL_RCC_GetHCLKFreq>
 8007bfc:	4602      	mov	r2, r0
 8007bfe:	4b05      	ldr	r3, [pc, #20]	; (8007c14 <HAL_RCC_GetPCLK2Freq+0x20>)
 8007c00:	685b      	ldr	r3, [r3, #4]
 8007c02:	0adb      	lsrs	r3, r3, #11
 8007c04:	f003 0307 	and.w	r3, r3, #7
 8007c08:	4903      	ldr	r1, [pc, #12]	; (8007c18 <HAL_RCC_GetPCLK2Freq+0x24>)
 8007c0a:	5ccb      	ldrb	r3, [r1, r3]
 8007c0c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007c10:	4618      	mov	r0, r3
 8007c12:	bd80      	pop	{r7, pc}
 8007c14:	40021000 	.word	0x40021000
 8007c18:	0800c2e8 	.word	0x0800c2e8

08007c1c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8007c1c:	b480      	push	{r7}
 8007c1e:	b085      	sub	sp, #20
 8007c20:	af00      	add	r7, sp, #0
 8007c22:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8007c24:	4b0a      	ldr	r3, [pc, #40]	; (8007c50 <RCC_Delay+0x34>)
 8007c26:	681b      	ldr	r3, [r3, #0]
 8007c28:	4a0a      	ldr	r2, [pc, #40]	; (8007c54 <RCC_Delay+0x38>)
 8007c2a:	fba2 2303 	umull	r2, r3, r2, r3
 8007c2e:	0a5b      	lsrs	r3, r3, #9
 8007c30:	687a      	ldr	r2, [r7, #4]
 8007c32:	fb02 f303 	mul.w	r3, r2, r3
 8007c36:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8007c38:	bf00      	nop
  }
  while (Delay --);
 8007c3a:	68fb      	ldr	r3, [r7, #12]
 8007c3c:	1e5a      	subs	r2, r3, #1
 8007c3e:	60fa      	str	r2, [r7, #12]
 8007c40:	2b00      	cmp	r3, #0
 8007c42:	d1f9      	bne.n	8007c38 <RCC_Delay+0x1c>
}
 8007c44:	bf00      	nop
 8007c46:	bf00      	nop
 8007c48:	3714      	adds	r7, #20
 8007c4a:	46bd      	mov	sp, r7
 8007c4c:	bc80      	pop	{r7}
 8007c4e:	4770      	bx	lr
 8007c50:	20000004 	.word	0x20000004
 8007c54:	10624dd3 	.word	0x10624dd3

08007c58 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007c58:	b580      	push	{r7, lr}
 8007c5a:	b086      	sub	sp, #24
 8007c5c:	af00      	add	r7, sp, #0
 8007c5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8007c60:	2300      	movs	r3, #0
 8007c62:	613b      	str	r3, [r7, #16]
 8007c64:	2300      	movs	r3, #0
 8007c66:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	681b      	ldr	r3, [r3, #0]
 8007c6c:	f003 0301 	and.w	r3, r3, #1
 8007c70:	2b00      	cmp	r3, #0
 8007c72:	d07d      	beq.n	8007d70 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8007c74:	2300      	movs	r3, #0
 8007c76:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007c78:	4b4f      	ldr	r3, [pc, #316]	; (8007db8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007c7a:	69db      	ldr	r3, [r3, #28]
 8007c7c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007c80:	2b00      	cmp	r3, #0
 8007c82:	d10d      	bne.n	8007ca0 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007c84:	4b4c      	ldr	r3, [pc, #304]	; (8007db8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007c86:	69db      	ldr	r3, [r3, #28]
 8007c88:	4a4b      	ldr	r2, [pc, #300]	; (8007db8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007c8a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007c8e:	61d3      	str	r3, [r2, #28]
 8007c90:	4b49      	ldr	r3, [pc, #292]	; (8007db8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007c92:	69db      	ldr	r3, [r3, #28]
 8007c94:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007c98:	60bb      	str	r3, [r7, #8]
 8007c9a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007c9c:	2301      	movs	r3, #1
 8007c9e:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007ca0:	4b46      	ldr	r3, [pc, #280]	; (8007dbc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8007ca2:	681b      	ldr	r3, [r3, #0]
 8007ca4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007ca8:	2b00      	cmp	r3, #0
 8007caa:	d118      	bne.n	8007cde <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8007cac:	4b43      	ldr	r3, [pc, #268]	; (8007dbc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8007cae:	681b      	ldr	r3, [r3, #0]
 8007cb0:	4a42      	ldr	r2, [pc, #264]	; (8007dbc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8007cb2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007cb6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007cb8:	f7fe ff58 	bl	8006b6c <HAL_GetTick>
 8007cbc:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007cbe:	e008      	b.n	8007cd2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007cc0:	f7fe ff54 	bl	8006b6c <HAL_GetTick>
 8007cc4:	4602      	mov	r2, r0
 8007cc6:	693b      	ldr	r3, [r7, #16]
 8007cc8:	1ad3      	subs	r3, r2, r3
 8007cca:	2b64      	cmp	r3, #100	; 0x64
 8007ccc:	d901      	bls.n	8007cd2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8007cce:	2303      	movs	r3, #3
 8007cd0:	e06d      	b.n	8007dae <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007cd2:	4b3a      	ldr	r3, [pc, #232]	; (8007dbc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8007cd4:	681b      	ldr	r3, [r3, #0]
 8007cd6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007cda:	2b00      	cmp	r3, #0
 8007cdc:	d0f0      	beq.n	8007cc0 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8007cde:	4b36      	ldr	r3, [pc, #216]	; (8007db8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007ce0:	6a1b      	ldr	r3, [r3, #32]
 8007ce2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007ce6:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8007ce8:	68fb      	ldr	r3, [r7, #12]
 8007cea:	2b00      	cmp	r3, #0
 8007cec:	d02e      	beq.n	8007d4c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	685b      	ldr	r3, [r3, #4]
 8007cf2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007cf6:	68fa      	ldr	r2, [r7, #12]
 8007cf8:	429a      	cmp	r2, r3
 8007cfa:	d027      	beq.n	8007d4c <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8007cfc:	4b2e      	ldr	r3, [pc, #184]	; (8007db8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007cfe:	6a1b      	ldr	r3, [r3, #32]
 8007d00:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007d04:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8007d06:	4b2e      	ldr	r3, [pc, #184]	; (8007dc0 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8007d08:	2201      	movs	r2, #1
 8007d0a:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8007d0c:	4b2c      	ldr	r3, [pc, #176]	; (8007dc0 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8007d0e:	2200      	movs	r2, #0
 8007d10:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8007d12:	4a29      	ldr	r2, [pc, #164]	; (8007db8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007d14:	68fb      	ldr	r3, [r7, #12]
 8007d16:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8007d18:	68fb      	ldr	r3, [r7, #12]
 8007d1a:	f003 0301 	and.w	r3, r3, #1
 8007d1e:	2b00      	cmp	r3, #0
 8007d20:	d014      	beq.n	8007d4c <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007d22:	f7fe ff23 	bl	8006b6c <HAL_GetTick>
 8007d26:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007d28:	e00a      	b.n	8007d40 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007d2a:	f7fe ff1f 	bl	8006b6c <HAL_GetTick>
 8007d2e:	4602      	mov	r2, r0
 8007d30:	693b      	ldr	r3, [r7, #16]
 8007d32:	1ad3      	subs	r3, r2, r3
 8007d34:	f241 3288 	movw	r2, #5000	; 0x1388
 8007d38:	4293      	cmp	r3, r2
 8007d3a:	d901      	bls.n	8007d40 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8007d3c:	2303      	movs	r3, #3
 8007d3e:	e036      	b.n	8007dae <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007d40:	4b1d      	ldr	r3, [pc, #116]	; (8007db8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007d42:	6a1b      	ldr	r3, [r3, #32]
 8007d44:	f003 0302 	and.w	r3, r3, #2
 8007d48:	2b00      	cmp	r3, #0
 8007d4a:	d0ee      	beq.n	8007d2a <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007d4c:	4b1a      	ldr	r3, [pc, #104]	; (8007db8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007d4e:	6a1b      	ldr	r3, [r3, #32]
 8007d50:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	685b      	ldr	r3, [r3, #4]
 8007d58:	4917      	ldr	r1, [pc, #92]	; (8007db8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007d5a:	4313      	orrs	r3, r2
 8007d5c:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8007d5e:	7dfb      	ldrb	r3, [r7, #23]
 8007d60:	2b01      	cmp	r3, #1
 8007d62:	d105      	bne.n	8007d70 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007d64:	4b14      	ldr	r3, [pc, #80]	; (8007db8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007d66:	69db      	ldr	r3, [r3, #28]
 8007d68:	4a13      	ldr	r2, [pc, #76]	; (8007db8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007d6a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007d6e:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	681b      	ldr	r3, [r3, #0]
 8007d74:	f003 0302 	and.w	r3, r3, #2
 8007d78:	2b00      	cmp	r3, #0
 8007d7a:	d008      	beq.n	8007d8e <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8007d7c:	4b0e      	ldr	r3, [pc, #56]	; (8007db8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007d7e:	685b      	ldr	r3, [r3, #4]
 8007d80:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	689b      	ldr	r3, [r3, #8]
 8007d88:	490b      	ldr	r1, [pc, #44]	; (8007db8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007d8a:	4313      	orrs	r3, r2
 8007d8c:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	681b      	ldr	r3, [r3, #0]
 8007d92:	f003 0310 	and.w	r3, r3, #16
 8007d96:	2b00      	cmp	r3, #0
 8007d98:	d008      	beq.n	8007dac <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8007d9a:	4b07      	ldr	r3, [pc, #28]	; (8007db8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007d9c:	685b      	ldr	r3, [r3, #4]
 8007d9e:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	695b      	ldr	r3, [r3, #20]
 8007da6:	4904      	ldr	r1, [pc, #16]	; (8007db8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007da8:	4313      	orrs	r3, r2
 8007daa:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8007dac:	2300      	movs	r3, #0
}
 8007dae:	4618      	mov	r0, r3
 8007db0:	3718      	adds	r7, #24
 8007db2:	46bd      	mov	sp, r7
 8007db4:	bd80      	pop	{r7, pc}
 8007db6:	bf00      	nop
 8007db8:	40021000 	.word	0x40021000
 8007dbc:	40007000 	.word	0x40007000
 8007dc0:	42420440 	.word	0x42420440

08007dc4 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8007dc4:	b580      	push	{r7, lr}
 8007dc6:	b088      	sub	sp, #32
 8007dc8:	af00      	add	r7, sp, #0
 8007dca:	6078      	str	r0, [r7, #4]
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  static const uint8_t aPLLMULFactorTable[16U] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
  static const uint8_t aPredivFactorTable[2U] = {1, 2};

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 8007dcc:	2300      	movs	r3, #0
 8007dce:	617b      	str	r3, [r7, #20]
 8007dd0:	2300      	movs	r3, #0
 8007dd2:	61fb      	str	r3, [r7, #28]
 8007dd4:	2300      	movs	r3, #0
 8007dd6:	613b      	str	r3, [r7, #16]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 8007dd8:	2300      	movs	r3, #0
 8007dda:	60fb      	str	r3, [r7, #12]
 8007ddc:	2300      	movs	r3, #0
 8007dde:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	3b01      	subs	r3, #1
 8007de4:	2b0f      	cmp	r3, #15
 8007de6:	f200 80af 	bhi.w	8007f48 <HAL_RCCEx_GetPeriphCLKFreq+0x184>
 8007dea:	a201      	add	r2, pc, #4	; (adr r2, 8007df0 <HAL_RCCEx_GetPeriphCLKFreq+0x2c>)
 8007dec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007df0:	08007ec7 	.word	0x08007ec7
 8007df4:	08007f2d 	.word	0x08007f2d
 8007df8:	08007f49 	.word	0x08007f49
 8007dfc:	08007eb7 	.word	0x08007eb7
 8007e00:	08007f49 	.word	0x08007f49
 8007e04:	08007f49 	.word	0x08007f49
 8007e08:	08007f49 	.word	0x08007f49
 8007e0c:	08007ebf 	.word	0x08007ebf
 8007e10:	08007f49 	.word	0x08007f49
 8007e14:	08007f49 	.word	0x08007f49
 8007e18:	08007f49 	.word	0x08007f49
 8007e1c:	08007f49 	.word	0x08007f49
 8007e20:	08007f49 	.word	0x08007f49
 8007e24:	08007f49 	.word	0x08007f49
 8007e28:	08007f49 	.word	0x08007f49
 8007e2c:	08007e31 	.word	0x08007e31
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
    case RCC_PERIPHCLK_USB:
    {
      /* Get RCC configuration ------------------------------------------------------*/
      temp_reg = RCC->CFGR;
 8007e30:	4b4a      	ldr	r3, [pc, #296]	; (8007f5c <HAL_RCCEx_GetPeriphCLKFreq+0x198>)
 8007e32:	685b      	ldr	r3, [r3, #4]
 8007e34:	60fb      	str	r3, [r7, #12]

      /* Check if PLL is enabled */
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 8007e36:	4b49      	ldr	r3, [pc, #292]	; (8007f5c <HAL_RCCEx_GetPeriphCLKFreq+0x198>)
 8007e38:	681b      	ldr	r3, [r3, #0]
 8007e3a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007e3e:	2b00      	cmp	r3, #0
 8007e40:	f000 8084 	beq.w	8007f4c <HAL_RCCEx_GetPeriphCLKFreq+0x188>
      {
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8007e44:	68fb      	ldr	r3, [r7, #12]
 8007e46:	0c9b      	lsrs	r3, r3, #18
 8007e48:	f003 030f 	and.w	r3, r3, #15
 8007e4c:	4a44      	ldr	r2, [pc, #272]	; (8007f60 <HAL_RCCEx_GetPeriphCLKFreq+0x19c>)
 8007e4e:	5cd3      	ldrb	r3, [r2, r3]
 8007e50:	613b      	str	r3, [r7, #16]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8007e52:	68fb      	ldr	r3, [r7, #12]
 8007e54:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007e58:	2b00      	cmp	r3, #0
 8007e5a:	d015      	beq.n	8007e88 <HAL_RCCEx_GetPeriphCLKFreq+0xc4>
        {
#if defined(STM32F105xC) || defined(STM32F107xC) || defined(STM32F100xB)\
 || defined(STM32F100xE)
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8007e5c:	4b3f      	ldr	r3, [pc, #252]	; (8007f5c <HAL_RCCEx_GetPeriphCLKFreq+0x198>)
 8007e5e:	685b      	ldr	r3, [r3, #4]
 8007e60:	0c5b      	lsrs	r3, r3, #17
 8007e62:	f003 0301 	and.w	r3, r3, #1
 8007e66:	4a3f      	ldr	r2, [pc, #252]	; (8007f64 <HAL_RCCEx_GetPeriphCLKFreq+0x1a0>)
 8007e68:	5cd3      	ldrb	r3, [r2, r3]
 8007e6a:	617b      	str	r3, [r7, #20]
          if (pllmul == aPLLMULFactorTable[(uint32_t)(RCC_CFGR_PLLMULL6_5) >> RCC_CFGR_PLLMULL_Pos])
          {
            pllclk = pllclk / 2;
          }
#else
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8007e6c:	68fb      	ldr	r3, [r7, #12]
 8007e6e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007e72:	2b00      	cmp	r3, #0
 8007e74:	d00d      	beq.n	8007e92 <HAL_RCCEx_GetPeriphCLKFreq+0xce>
          {
            /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8007e76:	4a3c      	ldr	r2, [pc, #240]	; (8007f68 <HAL_RCCEx_GetPeriphCLKFreq+0x1a4>)
 8007e78:	697b      	ldr	r3, [r7, #20]
 8007e7a:	fbb2 f2f3 	udiv	r2, r2, r3
 8007e7e:	693b      	ldr	r3, [r7, #16]
 8007e80:	fb02 f303 	mul.w	r3, r2, r3
 8007e84:	61fb      	str	r3, [r7, #28]
 8007e86:	e004      	b.n	8007e92 <HAL_RCCEx_GetPeriphCLKFreq+0xce>
#endif /* STM32F105xC || STM32F107xC */
        }
        else
        {
          /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8007e88:	693b      	ldr	r3, [r7, #16]
 8007e8a:	4a38      	ldr	r2, [pc, #224]	; (8007f6c <HAL_RCCEx_GetPeriphCLKFreq+0x1a8>)
 8007e8c:	fb02 f303 	mul.w	r3, r2, r3
 8007e90:	61fb      	str	r3, [r7, #28]
          /* Prescaler of 3 selected for USB */
          frequency = (2 * pllclk) / 3;
        }
#else
        /* USBCLK = PLLCLK / USB prescaler */
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8007e92:	4b32      	ldr	r3, [pc, #200]	; (8007f5c <HAL_RCCEx_GetPeriphCLKFreq+0x198>)
 8007e94:	685b      	ldr	r3, [r3, #4]
 8007e96:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007e9a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007e9e:	d102      	bne.n	8007ea6 <HAL_RCCEx_GetPeriphCLKFreq+0xe2>
        {
          /* No prescaler selected for USB */
          frequency = pllclk;
 8007ea0:	69fb      	ldr	r3, [r7, #28]
 8007ea2:	61bb      	str	r3, [r7, #24]
          /* Prescaler of 1.5 selected for USB */
          frequency = (pllclk * 2) / 3;
        }
#endif
      }
      break;
 8007ea4:	e052      	b.n	8007f4c <HAL_RCCEx_GetPeriphCLKFreq+0x188>
          frequency = (pllclk * 2) / 3;
 8007ea6:	69fb      	ldr	r3, [r7, #28]
 8007ea8:	005b      	lsls	r3, r3, #1
 8007eaa:	4a31      	ldr	r2, [pc, #196]	; (8007f70 <HAL_RCCEx_GetPeriphCLKFreq+0x1ac>)
 8007eac:	fba2 2303 	umull	r2, r3, r2, r3
 8007eb0:	085b      	lsrs	r3, r3, #1
 8007eb2:	61bb      	str	r3, [r7, #24]
      break;
 8007eb4:	e04a      	b.n	8007f4c <HAL_RCCEx_GetPeriphCLKFreq+0x188>
#if defined(STM32F103xE) || defined(STM32F103xG) || defined(STM32F105xC) || defined(STM32F107xC)
    case RCC_PERIPHCLK_I2S2:
    {
#if defined(STM32F103xE) || defined(STM32F103xG)
      /* SYSCLK used as source clock for I2S2 */
      frequency = HAL_RCC_GetSysClockFreq();
 8007eb6:	f7ff fe2b 	bl	8007b10 <HAL_RCC_GetSysClockFreq>
 8007eba:	61b8      	str	r0, [r7, #24]
          pll3mul = ((RCC->CFGR2 & RCC_CFGR2_PLL3MUL) >> RCC_CFGR2_PLL3MUL_Pos) + 2;
          frequency = (uint32_t)(2 * ((HSE_VALUE / prediv2) * pll3mul));
        }
      }
#endif /* STM32F103xE || STM32F103xG */
      break;
 8007ebc:	e049      	b.n	8007f52 <HAL_RCCEx_GetPeriphCLKFreq+0x18e>
    }
    case RCC_PERIPHCLK_I2S3:
    {
#if defined(STM32F103xE) || defined(STM32F103xG)
      /* SYSCLK used as source clock for I2S3 */
      frequency = HAL_RCC_GetSysClockFreq();
 8007ebe:	f7ff fe27 	bl	8007b10 <HAL_RCC_GetSysClockFreq>
 8007ec2:	61b8      	str	r0, [r7, #24]
          pll3mul = ((RCC->CFGR2 & RCC_CFGR2_PLL3MUL) >> RCC_CFGR2_PLL3MUL_Pos) + 2;
          frequency = (uint32_t)(2 * ((HSE_VALUE / prediv2) * pll3mul));
        }
      }
#endif /* STM32F103xE || STM32F103xG */
      break;
 8007ec4:	e045      	b.n	8007f52 <HAL_RCCEx_GetPeriphCLKFreq+0x18e>
    }
#endif /* STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */
    case RCC_PERIPHCLK_RTC:
    {
      /* Get RCC BDCR configuration ------------------------------------------------------*/
      temp_reg = RCC->BDCR;
 8007ec6:	4b25      	ldr	r3, [pc, #148]	; (8007f5c <HAL_RCCEx_GetPeriphCLKFreq+0x198>)
 8007ec8:	6a1b      	ldr	r3, [r3, #32]
 8007eca:	60fb      	str	r3, [r7, #12]

      /* Check if LSE is ready if RTC clock selection is LSE */
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8007ecc:	68fb      	ldr	r3, [r7, #12]
 8007ece:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007ed2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007ed6:	d108      	bne.n	8007eea <HAL_RCCEx_GetPeriphCLKFreq+0x126>
 8007ed8:	68fb      	ldr	r3, [r7, #12]
 8007eda:	f003 0302 	and.w	r3, r3, #2
 8007ede:	2b00      	cmp	r3, #0
 8007ee0:	d003      	beq.n	8007eea <HAL_RCCEx_GetPeriphCLKFreq+0x126>
      {
        frequency = LSE_VALUE;
 8007ee2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007ee6:	61bb      	str	r3, [r7, #24]
 8007ee8:	e01f      	b.n	8007f2a <HAL_RCCEx_GetPeriphCLKFreq+0x166>
      }
      /* Check if LSI is ready if RTC clock selection is LSI */
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8007eea:	68fb      	ldr	r3, [r7, #12]
 8007eec:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007ef0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007ef4:	d109      	bne.n	8007f0a <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8007ef6:	4b19      	ldr	r3, [pc, #100]	; (8007f5c <HAL_RCCEx_GetPeriphCLKFreq+0x198>)
 8007ef8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007efa:	f003 0302 	and.w	r3, r3, #2
 8007efe:	2b00      	cmp	r3, #0
 8007f00:	d003      	beq.n	8007f0a <HAL_RCCEx_GetPeriphCLKFreq+0x146>
      {
        frequency = LSI_VALUE;
 8007f02:	f649 4340 	movw	r3, #40000	; 0x9c40
 8007f06:	61bb      	str	r3, [r7, #24]
 8007f08:	e00f      	b.n	8007f2a <HAL_RCCEx_GetPeriphCLKFreq+0x166>
      }
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8007f0a:	68fb      	ldr	r3, [r7, #12]
 8007f0c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007f10:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007f14:	d11c      	bne.n	8007f50 <HAL_RCCEx_GetPeriphCLKFreq+0x18c>
 8007f16:	4b11      	ldr	r3, [pc, #68]	; (8007f5c <HAL_RCCEx_GetPeriphCLKFreq+0x198>)
 8007f18:	681b      	ldr	r3, [r3, #0]
 8007f1a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007f1e:	2b00      	cmp	r3, #0
 8007f20:	d016      	beq.n	8007f50 <HAL_RCCEx_GetPeriphCLKFreq+0x18c>
      {
        frequency = HSE_VALUE / 128U;
 8007f22:	f24f 4324 	movw	r3, #62500	; 0xf424
 8007f26:	61bb      	str	r3, [r7, #24]
      /* Clock not enabled for RTC*/
      else
      {
        /* nothing to do: frequency already initialized to 0U */
      }
      break;
 8007f28:	e012      	b.n	8007f50 <HAL_RCCEx_GetPeriphCLKFreq+0x18c>
 8007f2a:	e011      	b.n	8007f50 <HAL_RCCEx_GetPeriphCLKFreq+0x18c>
    }
    case RCC_PERIPHCLK_ADC:
    {
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8007f2c:	f7ff fe62 	bl	8007bf4 <HAL_RCC_GetPCLK2Freq>
 8007f30:	4602      	mov	r2, r0
 8007f32:	4b0a      	ldr	r3, [pc, #40]	; (8007f5c <HAL_RCCEx_GetPeriphCLKFreq+0x198>)
 8007f34:	685b      	ldr	r3, [r3, #4]
 8007f36:	0b9b      	lsrs	r3, r3, #14
 8007f38:	f003 0303 	and.w	r3, r3, #3
 8007f3c:	3301      	adds	r3, #1
 8007f3e:	005b      	lsls	r3, r3, #1
 8007f40:	fbb2 f3f3 	udiv	r3, r2, r3
 8007f44:	61bb      	str	r3, [r7, #24]
      break;
 8007f46:	e004      	b.n	8007f52 <HAL_RCCEx_GetPeriphCLKFreq+0x18e>
    }
    default:
    {
      break;
 8007f48:	bf00      	nop
 8007f4a:	e002      	b.n	8007f52 <HAL_RCCEx_GetPeriphCLKFreq+0x18e>
      break;
 8007f4c:	bf00      	nop
 8007f4e:	e000      	b.n	8007f52 <HAL_RCCEx_GetPeriphCLKFreq+0x18e>
      break;
 8007f50:	bf00      	nop
    }
  }
  return (frequency);
 8007f52:	69bb      	ldr	r3, [r7, #24]
}
 8007f54:	4618      	mov	r0, r3
 8007f56:	3720      	adds	r7, #32
 8007f58:	46bd      	mov	sp, r7
 8007f5a:	bd80      	pop	{r7, pc}
 8007f5c:	40021000 	.word	0x40021000
 8007f60:	08011584 	.word	0x08011584
 8007f64:	08011594 	.word	0x08011594
 8007f68:	007a1200 	.word	0x007a1200
 8007f6c:	003d0900 	.word	0x003d0900
 8007f70:	aaaaaaab 	.word	0xaaaaaaab

08007f74 <HAL_RTC_Init>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8007f74:	b580      	push	{r7, lr}
 8007f76:	b084      	sub	sp, #16
 8007f78:	af00      	add	r7, sp, #0
 8007f7a:	6078      	str	r0, [r7, #4]
  uint32_t prescaler = 0U;
 8007f7c:	2300      	movs	r3, #0
 8007f7e:	60fb      	str	r3, [r7, #12]
  /* Check input parameters */
  if (hrtc == NULL)
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	2b00      	cmp	r3, #0
 8007f84:	d101      	bne.n	8007f8a <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 8007f86:	2301      	movs	r3, #1
 8007f88:	e07a      	b.n	8008080 <HAL_RTC_Init+0x10c>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	7c5b      	ldrb	r3, [r3, #17]
 8007f8e:	b2db      	uxtb	r3, r3
 8007f90:	2b00      	cmp	r3, #0
 8007f92:	d105      	bne.n	8007fa0 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	2200      	movs	r2, #0
 8007f98:	741a      	strb	r2, [r3, #16]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8007f9a:	6878      	ldr	r0, [r7, #4]
 8007f9c:	f7fe f9c0 	bl	8006320 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	2202      	movs	r2, #2
 8007fa4:	745a      	strb	r2, [r3, #17]

  /* Waiting for synchro */
  if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8007fa6:	6878      	ldr	r0, [r7, #4]
 8007fa8:	f000 faea 	bl	8008580 <HAL_RTC_WaitForSynchro>
 8007fac:	4603      	mov	r3, r0
 8007fae:	2b00      	cmp	r3, #0
 8007fb0:	d004      	beq.n	8007fbc <HAL_RTC_Init+0x48>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	2204      	movs	r2, #4
 8007fb6:	745a      	strb	r2, [r3, #17]

    return HAL_ERROR;
 8007fb8:	2301      	movs	r3, #1
 8007fba:	e061      	b.n	8008080 <HAL_RTC_Init+0x10c>
  }

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8007fbc:	6878      	ldr	r0, [r7, #4]
 8007fbe:	f000 fba3 	bl	8008708 <RTC_EnterInitMode>
 8007fc2:	4603      	mov	r3, r0
 8007fc4:	2b00      	cmp	r3, #0
 8007fc6:	d004      	beq.n	8007fd2 <HAL_RTC_Init+0x5e>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	2204      	movs	r2, #4
 8007fcc:	745a      	strb	r2, [r3, #17]

    return HAL_ERROR;
 8007fce:	2301      	movs	r3, #1
 8007fd0:	e056      	b.n	8008080 <HAL_RTC_Init+0x10c>
  }
  else
  {
    /* Clear Flags Bits */
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_OW | RTC_FLAG_ALRAF | RTC_FLAG_SEC));
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	681b      	ldr	r3, [r3, #0]
 8007fd6:	685a      	ldr	r2, [r3, #4]
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	681b      	ldr	r3, [r3, #0]
 8007fdc:	f022 0207 	bic.w	r2, r2, #7
 8007fe0:	605a      	str	r2, [r3, #4]

    if (hrtc->Init.OutPut != RTC_OUTPUTSOURCE_NONE)
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	689b      	ldr	r3, [r3, #8]
 8007fe6:	2b00      	cmp	r3, #0
 8007fe8:	d005      	beq.n	8007ff6 <HAL_RTC_Init+0x82>
    {
      /* Disable the selected Tamper pin */
      CLEAR_BIT(BKP->CR, BKP_CR_TPE);
 8007fea:	4b27      	ldr	r3, [pc, #156]	; (8008088 <HAL_RTC_Init+0x114>)
 8007fec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007fee:	4a26      	ldr	r2, [pc, #152]	; (8008088 <HAL_RTC_Init+0x114>)
 8007ff0:	f023 0301 	bic.w	r3, r3, #1
 8007ff4:	6313      	str	r3, [r2, #48]	; 0x30
    }

    /* Set the signal which will be routed to RTC Tamper pin*/
    MODIFY_REG(BKP->RTCCR, (BKP_RTCCR_CCO | BKP_RTCCR_ASOE | BKP_RTCCR_ASOS), hrtc->Init.OutPut);
 8007ff6:	4b24      	ldr	r3, [pc, #144]	; (8008088 <HAL_RTC_Init+0x114>)
 8007ff8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ffa:	f423 7260 	bic.w	r2, r3, #896	; 0x380
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	689b      	ldr	r3, [r3, #8]
 8008002:	4921      	ldr	r1, [pc, #132]	; (8008088 <HAL_RTC_Init+0x114>)
 8008004:	4313      	orrs	r3, r2
 8008006:	62cb      	str	r3, [r1, #44]	; 0x2c

    if (hrtc->Init.AsynchPrediv != RTC_AUTO_1_SECOND)
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	685b      	ldr	r3, [r3, #4]
 800800c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008010:	d003      	beq.n	800801a <HAL_RTC_Init+0xa6>
    {
      /* RTC Prescaler provided directly by end-user*/
      prescaler = hrtc->Init.AsynchPrediv;
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	685b      	ldr	r3, [r3, #4]
 8008016:	60fb      	str	r3, [r7, #12]
 8008018:	e00e      	b.n	8008038 <HAL_RTC_Init+0xc4>
    }
    else
    {
      /* RTC Prescaler will be automatically calculated to get 1 second timebase */
      /* Get the RTCCLK frequency */
      prescaler = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_RTC);
 800801a:	2001      	movs	r0, #1
 800801c:	f7ff fed2 	bl	8007dc4 <HAL_RCCEx_GetPeriphCLKFreq>
 8008020:	60f8      	str	r0, [r7, #12]

      /* Check that RTC clock is enabled*/
      if (prescaler == 0U)
 8008022:	68fb      	ldr	r3, [r7, #12]
 8008024:	2b00      	cmp	r3, #0
 8008026:	d104      	bne.n	8008032 <HAL_RTC_Init+0xbe>
      {
        /* Should not happen. Frequency is not available*/
        hrtc->State = HAL_RTC_STATE_ERROR;
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	2204      	movs	r2, #4
 800802c:	745a      	strb	r2, [r3, #17]
        return HAL_ERROR;
 800802e:	2301      	movs	r3, #1
 8008030:	e026      	b.n	8008080 <HAL_RTC_Init+0x10c>
      }
      else
      {
        /* RTC period = RTCCLK/(RTC_PR + 1) */
        prescaler = prescaler - 1U;
 8008032:	68fb      	ldr	r3, [r7, #12]
 8008034:	3b01      	subs	r3, #1
 8008036:	60fb      	str	r3, [r7, #12]
      }
    }

    /* Configure the RTC_PRLH / RTC_PRLL */
    WRITE_REG(hrtc->Instance->PRLH, ((prescaler >> 16U) & RTC_PRLH_PRL));
 8008038:	68fb      	ldr	r3, [r7, #12]
 800803a:	0c1a      	lsrs	r2, r3, #16
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	681b      	ldr	r3, [r3, #0]
 8008040:	f002 020f 	and.w	r2, r2, #15
 8008044:	609a      	str	r2, [r3, #8]
    WRITE_REG(hrtc->Instance->PRLL, (prescaler & RTC_PRLL_PRL));
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	681b      	ldr	r3, [r3, #0]
 800804a:	68fa      	ldr	r2, [r7, #12]
 800804c:	b292      	uxth	r2, r2
 800804e:	60da      	str	r2, [r3, #12]

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 8008050:	6878      	ldr	r0, [r7, #4]
 8008052:	f000 fb81 	bl	8008758 <RTC_ExitInitMode>
 8008056:	4603      	mov	r3, r0
 8008058:	2b00      	cmp	r3, #0
 800805a:	d004      	beq.n	8008066 <HAL_RTC_Init+0xf2>
    {
      hrtc->State = HAL_RTC_STATE_ERROR;
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	2204      	movs	r2, #4
 8008060:	745a      	strb	r2, [r3, #17]

      return HAL_ERROR;
 8008062:	2301      	movs	r3, #1
 8008064:	e00c      	b.n	8008080 <HAL_RTC_Init+0x10c>
    }

    /* Initialize date to 1st of January 2000 */
    hrtc->DateToUpdate.Year = 0x00U;
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	2200      	movs	r2, #0
 800806a:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = RTC_MONTH_JANUARY;
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	2201      	movs	r2, #1
 8008070:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date = 0x01U;
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	2201      	movs	r2, #1
 8008076:	739a      	strb	r2, [r3, #14]

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	2201      	movs	r2, #1
 800807c:	745a      	strb	r2, [r3, #17]

    return HAL_OK;
 800807e:	2300      	movs	r3, #0
  }
}
 8008080:	4618      	mov	r0, r3
 8008082:	3710      	adds	r7, #16
 8008084:	46bd      	mov	sp, r7
 8008086:	bd80      	pop	{r7, pc}
 8008088:	40006c00 	.word	0x40006c00

0800808c <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800808c:	b590      	push	{r4, r7, lr}
 800808e:	b087      	sub	sp, #28
 8008090:	af00      	add	r7, sp, #0
 8008092:	60f8      	str	r0, [r7, #12]
 8008094:	60b9      	str	r1, [r7, #8]
 8008096:	607a      	str	r2, [r7, #4]
  uint32_t counter_time = 0U, counter_alarm = 0U;
 8008098:	2300      	movs	r3, #0
 800809a:	617b      	str	r3, [r7, #20]
 800809c:	2300      	movs	r3, #0
 800809e:	613b      	str	r3, [r7, #16]

  /* Check input parameters */
  if ((hrtc == NULL) || (sTime == NULL))
 80080a0:	68fb      	ldr	r3, [r7, #12]
 80080a2:	2b00      	cmp	r3, #0
 80080a4:	d002      	beq.n	80080ac <HAL_RTC_SetTime+0x20>
 80080a6:	68bb      	ldr	r3, [r7, #8]
 80080a8:	2b00      	cmp	r3, #0
 80080aa:	d101      	bne.n	80080b0 <HAL_RTC_SetTime+0x24>
  {
    return HAL_ERROR;
 80080ac:	2301      	movs	r3, #1
 80080ae:	e080      	b.n	80081b2 <HAL_RTC_SetTime+0x126>

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80080b0:	68fb      	ldr	r3, [r7, #12]
 80080b2:	7c1b      	ldrb	r3, [r3, #16]
 80080b4:	2b01      	cmp	r3, #1
 80080b6:	d101      	bne.n	80080bc <HAL_RTC_SetTime+0x30>
 80080b8:	2302      	movs	r3, #2
 80080ba:	e07a      	b.n	80081b2 <HAL_RTC_SetTime+0x126>
 80080bc:	68fb      	ldr	r3, [r7, #12]
 80080be:	2201      	movs	r2, #1
 80080c0:	741a      	strb	r2, [r3, #16]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80080c2:	68fb      	ldr	r3, [r7, #12]
 80080c4:	2202      	movs	r2, #2
 80080c6:	745a      	strb	r2, [r3, #17]

  if (Format == RTC_FORMAT_BIN)
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	2b00      	cmp	r3, #0
 80080cc:	d113      	bne.n	80080f6 <HAL_RTC_SetTime+0x6a>
  {
    assert_param(IS_RTC_HOUR24(sTime->Hours));
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 80080ce:	68bb      	ldr	r3, [r7, #8]
 80080d0:	781b      	ldrb	r3, [r3, #0]
 80080d2:	461a      	mov	r2, r3
 80080d4:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 80080d8:	fb03 f202 	mul.w	r2, r3, r2
                              ((uint32_t)sTime->Minutes * 60U) + \
 80080dc:	68bb      	ldr	r3, [r7, #8]
 80080de:	785b      	ldrb	r3, [r3, #1]
 80080e0:	4619      	mov	r1, r3
 80080e2:	460b      	mov	r3, r1
 80080e4:	011b      	lsls	r3, r3, #4
 80080e6:	1a5b      	subs	r3, r3, r1
 80080e8:	009b      	lsls	r3, r3, #2
    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 80080ea:	4413      	add	r3, r2
                              ((uint32_t)sTime->Seconds));
 80080ec:	68ba      	ldr	r2, [r7, #8]
 80080ee:	7892      	ldrb	r2, [r2, #2]
    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 80080f0:	4413      	add	r3, r2
 80080f2:	617b      	str	r3, [r7, #20]
 80080f4:	e01e      	b.n	8008134 <HAL_RTC_SetTime+0xa8>
  {
    assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));

    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 80080f6:	68bb      	ldr	r3, [r7, #8]
 80080f8:	781b      	ldrb	r3, [r3, #0]
 80080fa:	4618      	mov	r0, r3
 80080fc:	f000 fb71 	bl	80087e2 <RTC_Bcd2ToByte>
 8008100:	4603      	mov	r3, r0
 8008102:	461a      	mov	r2, r3
 8008104:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 8008108:	fb03 f402 	mul.w	r4, r3, r2
                    ((uint32_t)(RTC_Bcd2ToByte(sTime->Minutes)) * 60U) + \
 800810c:	68bb      	ldr	r3, [r7, #8]
 800810e:	785b      	ldrb	r3, [r3, #1]
 8008110:	4618      	mov	r0, r3
 8008112:	f000 fb66 	bl	80087e2 <RTC_Bcd2ToByte>
 8008116:	4603      	mov	r3, r0
 8008118:	461a      	mov	r2, r3
 800811a:	4613      	mov	r3, r2
 800811c:	011b      	lsls	r3, r3, #4
 800811e:	1a9b      	subs	r3, r3, r2
 8008120:	009b      	lsls	r3, r3, #2
    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 8008122:	441c      	add	r4, r3
                    ((uint32_t)(RTC_Bcd2ToByte(sTime->Seconds))));
 8008124:	68bb      	ldr	r3, [r7, #8]
 8008126:	789b      	ldrb	r3, [r3, #2]
 8008128:	4618      	mov	r0, r3
 800812a:	f000 fb5a 	bl	80087e2 <RTC_Bcd2ToByte>
 800812e:	4603      	mov	r3, r0
    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 8008130:	4423      	add	r3, r4
 8008132:	617b      	str	r3, [r7, #20]
  }

  /* Write time counter in RTC registers */
  if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 8008134:	6979      	ldr	r1, [r7, #20]
 8008136:	68f8      	ldr	r0, [r7, #12]
 8008138:	f000 fa7f 	bl	800863a <RTC_WriteTimeCounter>
 800813c:	4603      	mov	r3, r0
 800813e:	2b00      	cmp	r3, #0
 8008140:	d007      	beq.n	8008152 <HAL_RTC_SetTime+0xc6>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8008142:	68fb      	ldr	r3, [r7, #12]
 8008144:	2204      	movs	r2, #4
 8008146:	745a      	strb	r2, [r3, #17]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8008148:	68fb      	ldr	r3, [r7, #12]
 800814a:	2200      	movs	r2, #0
 800814c:	741a      	strb	r2, [r3, #16]

    return HAL_ERROR;
 800814e:	2301      	movs	r3, #1
 8008150:	e02f      	b.n	80081b2 <HAL_RTC_SetTime+0x126>
  }
  else
  {
    /* Clear Second and overflow flags */
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_SEC | RTC_FLAG_OW));
 8008152:	68fb      	ldr	r3, [r7, #12]
 8008154:	681b      	ldr	r3, [r3, #0]
 8008156:	685a      	ldr	r2, [r3, #4]
 8008158:	68fb      	ldr	r3, [r7, #12]
 800815a:	681b      	ldr	r3, [r3, #0]
 800815c:	f022 0205 	bic.w	r2, r2, #5
 8008160:	605a      	str	r2, [r3, #4]

    /* Read current Alarm counter in RTC registers */
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 8008162:	68f8      	ldr	r0, [r7, #12]
 8008164:	f000 fa90 	bl	8008688 <RTC_ReadAlarmCounter>
 8008168:	6138      	str	r0, [r7, #16]

    /* Set again alarm to match with new time if enabled */
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 800816a:	693b      	ldr	r3, [r7, #16]
 800816c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008170:	d018      	beq.n	80081a4 <HAL_RTC_SetTime+0x118>
    {
      if (counter_alarm < counter_time)
 8008172:	693a      	ldr	r2, [r7, #16]
 8008174:	697b      	ldr	r3, [r7, #20]
 8008176:	429a      	cmp	r2, r3
 8008178:	d214      	bcs.n	80081a4 <HAL_RTC_SetTime+0x118>
      {
        /* Add 1 day to alarm counter*/
        counter_alarm += (uint32_t)(24U * 3600U);
 800817a:	693b      	ldr	r3, [r7, #16]
 800817c:	f503 33a8 	add.w	r3, r3, #86016	; 0x15000
 8008180:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8008184:	613b      	str	r3, [r7, #16]

        /* Write new Alarm counter in RTC registers */
        if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 8008186:	6939      	ldr	r1, [r7, #16]
 8008188:	68f8      	ldr	r0, [r7, #12]
 800818a:	f000 fa96 	bl	80086ba <RTC_WriteAlarmCounter>
 800818e:	4603      	mov	r3, r0
 8008190:	2b00      	cmp	r3, #0
 8008192:	d007      	beq.n	80081a4 <HAL_RTC_SetTime+0x118>
        {
          /* Set RTC state */
          hrtc->State = HAL_RTC_STATE_ERROR;
 8008194:	68fb      	ldr	r3, [r7, #12]
 8008196:	2204      	movs	r2, #4
 8008198:	745a      	strb	r2, [r3, #17]

          /* Process Unlocked */
          __HAL_UNLOCK(hrtc);
 800819a:	68fb      	ldr	r3, [r7, #12]
 800819c:	2200      	movs	r2, #0
 800819e:	741a      	strb	r2, [r3, #16]

          return HAL_ERROR;
 80081a0:	2301      	movs	r3, #1
 80081a2:	e006      	b.n	80081b2 <HAL_RTC_SetTime+0x126>
        }
      }
    }

    hrtc->State = HAL_RTC_STATE_READY;
 80081a4:	68fb      	ldr	r3, [r7, #12]
 80081a6:	2201      	movs	r2, #1
 80081a8:	745a      	strb	r2, [r3, #17]

    __HAL_UNLOCK(hrtc);
 80081aa:	68fb      	ldr	r3, [r7, #12]
 80081ac:	2200      	movs	r2, #0
 80081ae:	741a      	strb	r2, [r3, #16]

    return HAL_OK;
 80081b0:	2300      	movs	r3, #0
  }
}
 80081b2:	4618      	mov	r0, r3
 80081b4:	371c      	adds	r7, #28
 80081b6:	46bd      	mov	sp, r7
 80081b8:	bd90      	pop	{r4, r7, pc}
	...

080081bc <HAL_RTC_GetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80081bc:	b580      	push	{r7, lr}
 80081be:	b088      	sub	sp, #32
 80081c0:	af00      	add	r7, sp, #0
 80081c2:	60f8      	str	r0, [r7, #12]
 80081c4:	60b9      	str	r1, [r7, #8]
 80081c6:	607a      	str	r2, [r7, #4]
  uint32_t counter_time = 0U, counter_alarm = 0U, days_elapsed = 0U, hours = 0U;
 80081c8:	2300      	movs	r3, #0
 80081ca:	61bb      	str	r3, [r7, #24]
 80081cc:	2300      	movs	r3, #0
 80081ce:	61fb      	str	r3, [r7, #28]
 80081d0:	2300      	movs	r3, #0
 80081d2:	617b      	str	r3, [r7, #20]
 80081d4:	2300      	movs	r3, #0
 80081d6:	613b      	str	r3, [r7, #16]

  /* Check input parameters */
  if ((hrtc == NULL) || (sTime == NULL))
 80081d8:	68fb      	ldr	r3, [r7, #12]
 80081da:	2b00      	cmp	r3, #0
 80081dc:	d002      	beq.n	80081e4 <HAL_RTC_GetTime+0x28>
 80081de:	68bb      	ldr	r3, [r7, #8]
 80081e0:	2b00      	cmp	r3, #0
 80081e2:	d101      	bne.n	80081e8 <HAL_RTC_GetTime+0x2c>
  {
    return HAL_ERROR;
 80081e4:	2301      	movs	r3, #1
 80081e6:	e0b5      	b.n	8008354 <HAL_RTC_GetTime+0x198>

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Check if counter overflow occurred */
  if (__HAL_RTC_OVERFLOW_GET_FLAG(hrtc, RTC_FLAG_OW))
 80081e8:	68fb      	ldr	r3, [r7, #12]
 80081ea:	681b      	ldr	r3, [r3, #0]
 80081ec:	685b      	ldr	r3, [r3, #4]
 80081ee:	f003 0304 	and.w	r3, r3, #4
 80081f2:	2b00      	cmp	r3, #0
 80081f4:	d001      	beq.n	80081fa <HAL_RTC_GetTime+0x3e>
  {
    return HAL_ERROR;
 80081f6:	2301      	movs	r3, #1
 80081f8:	e0ac      	b.n	8008354 <HAL_RTC_GetTime+0x198>
  }

  /* Read the time counter*/
  counter_time = RTC_ReadTimeCounter(hrtc);
 80081fa:	68f8      	ldr	r0, [r7, #12]
 80081fc:	f000 f9ed 	bl	80085da <RTC_ReadTimeCounter>
 8008200:	61b8      	str	r0, [r7, #24]

  /* Fill the structure fields with the read parameters */
  hours = counter_time / 3600U;
 8008202:	69bb      	ldr	r3, [r7, #24]
 8008204:	4a55      	ldr	r2, [pc, #340]	; (800835c <HAL_RTC_GetTime+0x1a0>)
 8008206:	fba2 2303 	umull	r2, r3, r2, r3
 800820a:	0adb      	lsrs	r3, r3, #11
 800820c:	613b      	str	r3, [r7, #16]
  sTime->Minutes  = (uint8_t)((counter_time % 3600U) / 60U);
 800820e:	69ba      	ldr	r2, [r7, #24]
 8008210:	4b52      	ldr	r3, [pc, #328]	; (800835c <HAL_RTC_GetTime+0x1a0>)
 8008212:	fba3 1302 	umull	r1, r3, r3, r2
 8008216:	0adb      	lsrs	r3, r3, #11
 8008218:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 800821c:	fb01 f303 	mul.w	r3, r1, r3
 8008220:	1ad3      	subs	r3, r2, r3
 8008222:	4a4f      	ldr	r2, [pc, #316]	; (8008360 <HAL_RTC_GetTime+0x1a4>)
 8008224:	fba2 2303 	umull	r2, r3, r2, r3
 8008228:	095b      	lsrs	r3, r3, #5
 800822a:	b2da      	uxtb	r2, r3
 800822c:	68bb      	ldr	r3, [r7, #8]
 800822e:	705a      	strb	r2, [r3, #1]
  sTime->Seconds  = (uint8_t)((counter_time % 3600U) % 60U);
 8008230:	69bb      	ldr	r3, [r7, #24]
 8008232:	4a4a      	ldr	r2, [pc, #296]	; (800835c <HAL_RTC_GetTime+0x1a0>)
 8008234:	fba2 1203 	umull	r1, r2, r2, r3
 8008238:	0ad2      	lsrs	r2, r2, #11
 800823a:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 800823e:	fb01 f202 	mul.w	r2, r1, r2
 8008242:	1a9a      	subs	r2, r3, r2
 8008244:	4b46      	ldr	r3, [pc, #280]	; (8008360 <HAL_RTC_GetTime+0x1a4>)
 8008246:	fba3 1302 	umull	r1, r3, r3, r2
 800824a:	0959      	lsrs	r1, r3, #5
 800824c:	460b      	mov	r3, r1
 800824e:	011b      	lsls	r3, r3, #4
 8008250:	1a5b      	subs	r3, r3, r1
 8008252:	009b      	lsls	r3, r3, #2
 8008254:	1ad1      	subs	r1, r2, r3
 8008256:	b2ca      	uxtb	r2, r1
 8008258:	68bb      	ldr	r3, [r7, #8]
 800825a:	709a      	strb	r2, [r3, #2]

  if (hours >= 24U)
 800825c:	693b      	ldr	r3, [r7, #16]
 800825e:	2b17      	cmp	r3, #23
 8008260:	d955      	bls.n	800830e <HAL_RTC_GetTime+0x152>
  {
    /* Get number of days elapsed from last calculation */
    days_elapsed = (hours / 24U);
 8008262:	693b      	ldr	r3, [r7, #16]
 8008264:	4a3f      	ldr	r2, [pc, #252]	; (8008364 <HAL_RTC_GetTime+0x1a8>)
 8008266:	fba2 2303 	umull	r2, r3, r2, r3
 800826a:	091b      	lsrs	r3, r3, #4
 800826c:	617b      	str	r3, [r7, #20]

    /* Set Hours in RTC_TimeTypeDef structure*/
    sTime->Hours = (hours % 24U);
 800826e:	6939      	ldr	r1, [r7, #16]
 8008270:	4b3c      	ldr	r3, [pc, #240]	; (8008364 <HAL_RTC_GetTime+0x1a8>)
 8008272:	fba3 2301 	umull	r2, r3, r3, r1
 8008276:	091a      	lsrs	r2, r3, #4
 8008278:	4613      	mov	r3, r2
 800827a:	005b      	lsls	r3, r3, #1
 800827c:	4413      	add	r3, r2
 800827e:	00db      	lsls	r3, r3, #3
 8008280:	1aca      	subs	r2, r1, r3
 8008282:	b2d2      	uxtb	r2, r2
 8008284:	68bb      	ldr	r3, [r7, #8]
 8008286:	701a      	strb	r2, [r3, #0]

    /* Read Alarm counter in RTC registers */
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 8008288:	68f8      	ldr	r0, [r7, #12]
 800828a:	f000 f9fd 	bl	8008688 <RTC_ReadAlarmCounter>
 800828e:	61f8      	str	r0, [r7, #28]

    /* Calculate remaining time to reach alarm (only if set and not yet expired)*/
    if ((counter_alarm != RTC_ALARM_RESETVALUE) && (counter_alarm > counter_time))
 8008290:	69fb      	ldr	r3, [r7, #28]
 8008292:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008296:	d008      	beq.n	80082aa <HAL_RTC_GetTime+0xee>
 8008298:	69fa      	ldr	r2, [r7, #28]
 800829a:	69bb      	ldr	r3, [r7, #24]
 800829c:	429a      	cmp	r2, r3
 800829e:	d904      	bls.n	80082aa <HAL_RTC_GetTime+0xee>
    {
      counter_alarm -= counter_time;
 80082a0:	69fa      	ldr	r2, [r7, #28]
 80082a2:	69bb      	ldr	r3, [r7, #24]
 80082a4:	1ad3      	subs	r3, r2, r3
 80082a6:	61fb      	str	r3, [r7, #28]
 80082a8:	e002      	b.n	80082b0 <HAL_RTC_GetTime+0xf4>
    }
    else
    {
      /* In case of counter_alarm < counter_time */
      /* Alarm expiration already occurred but alarm not deactivated */
      counter_alarm = RTC_ALARM_RESETVALUE;
 80082aa:	f04f 33ff 	mov.w	r3, #4294967295
 80082ae:	61fb      	str	r3, [r7, #28]
    }

    /* Set updated time in decreasing counter by number of days elapsed */
    counter_time -= (days_elapsed * 24U * 3600U);
 80082b0:	697b      	ldr	r3, [r7, #20]
 80082b2:	4a2d      	ldr	r2, [pc, #180]	; (8008368 <HAL_RTC_GetTime+0x1ac>)
 80082b4:	fb02 f303 	mul.w	r3, r2, r3
 80082b8:	69ba      	ldr	r2, [r7, #24]
 80082ba:	1ad3      	subs	r3, r2, r3
 80082bc:	61bb      	str	r3, [r7, #24]

    /* Write time counter in RTC registers */
    if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 80082be:	69b9      	ldr	r1, [r7, #24]
 80082c0:	68f8      	ldr	r0, [r7, #12]
 80082c2:	f000 f9ba 	bl	800863a <RTC_WriteTimeCounter>
 80082c6:	4603      	mov	r3, r0
 80082c8:	2b00      	cmp	r3, #0
 80082ca:	d001      	beq.n	80082d0 <HAL_RTC_GetTime+0x114>
    {
      return HAL_ERROR;
 80082cc:	2301      	movs	r3, #1
 80082ce:	e041      	b.n	8008354 <HAL_RTC_GetTime+0x198>
    }

    /* Set updated alarm to be set */
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 80082d0:	69fb      	ldr	r3, [r7, #28]
 80082d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80082d6:	d00c      	beq.n	80082f2 <HAL_RTC_GetTime+0x136>
    {
      counter_alarm += counter_time;
 80082d8:	69fa      	ldr	r2, [r7, #28]
 80082da:	69bb      	ldr	r3, [r7, #24]
 80082dc:	4413      	add	r3, r2
 80082de:	61fb      	str	r3, [r7, #28]

      /* Write time counter in RTC registers */
      if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 80082e0:	69f9      	ldr	r1, [r7, #28]
 80082e2:	68f8      	ldr	r0, [r7, #12]
 80082e4:	f000 f9e9 	bl	80086ba <RTC_WriteAlarmCounter>
 80082e8:	4603      	mov	r3, r0
 80082ea:	2b00      	cmp	r3, #0
 80082ec:	d00a      	beq.n	8008304 <HAL_RTC_GetTime+0x148>
      {
        return HAL_ERROR;
 80082ee:	2301      	movs	r3, #1
 80082f0:	e030      	b.n	8008354 <HAL_RTC_GetTime+0x198>
      }
    }
    else
    {
      /* Alarm already occurred. Set it to reset values to avoid unexpected expiration */
      if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 80082f2:	69f9      	ldr	r1, [r7, #28]
 80082f4:	68f8      	ldr	r0, [r7, #12]
 80082f6:	f000 f9e0 	bl	80086ba <RTC_WriteAlarmCounter>
 80082fa:	4603      	mov	r3, r0
 80082fc:	2b00      	cmp	r3, #0
 80082fe:	d001      	beq.n	8008304 <HAL_RTC_GetTime+0x148>
      {
        return HAL_ERROR;
 8008300:	2301      	movs	r3, #1
 8008302:	e027      	b.n	8008354 <HAL_RTC_GetTime+0x198>
      }
    }

    /* Update date */
    RTC_DateUpdate(hrtc, days_elapsed);
 8008304:	6979      	ldr	r1, [r7, #20]
 8008306:	68f8      	ldr	r0, [r7, #12]
 8008308:	f000 fa88 	bl	800881c <RTC_DateUpdate>
 800830c:	e003      	b.n	8008316 <HAL_RTC_GetTime+0x15a>
  }
  else
  {
    sTime->Hours = hours;
 800830e:	693b      	ldr	r3, [r7, #16]
 8008310:	b2da      	uxtb	r2, r3
 8008312:	68bb      	ldr	r3, [r7, #8]
 8008314:	701a      	strb	r2, [r3, #0]
  }

  /* Check the input parameters format */
  if (Format != RTC_FORMAT_BIN)
 8008316:	687b      	ldr	r3, [r7, #4]
 8008318:	2b00      	cmp	r3, #0
 800831a:	d01a      	beq.n	8008352 <HAL_RTC_GetTime+0x196>
  {
    /* Convert the time structure parameters to BCD format */
    sTime->Hours    = (uint8_t)RTC_ByteToBcd2(sTime->Hours);
 800831c:	68bb      	ldr	r3, [r7, #8]
 800831e:	781b      	ldrb	r3, [r3, #0]
 8008320:	4618      	mov	r0, r3
 8008322:	f000 fa41 	bl	80087a8 <RTC_ByteToBcd2>
 8008326:	4603      	mov	r3, r0
 8008328:	461a      	mov	r2, r3
 800832a:	68bb      	ldr	r3, [r7, #8]
 800832c:	701a      	strb	r2, [r3, #0]
    sTime->Minutes  = (uint8_t)RTC_ByteToBcd2(sTime->Minutes);
 800832e:	68bb      	ldr	r3, [r7, #8]
 8008330:	785b      	ldrb	r3, [r3, #1]
 8008332:	4618      	mov	r0, r3
 8008334:	f000 fa38 	bl	80087a8 <RTC_ByteToBcd2>
 8008338:	4603      	mov	r3, r0
 800833a:	461a      	mov	r2, r3
 800833c:	68bb      	ldr	r3, [r7, #8]
 800833e:	705a      	strb	r2, [r3, #1]
    sTime->Seconds  = (uint8_t)RTC_ByteToBcd2(sTime->Seconds);
 8008340:	68bb      	ldr	r3, [r7, #8]
 8008342:	789b      	ldrb	r3, [r3, #2]
 8008344:	4618      	mov	r0, r3
 8008346:	f000 fa2f 	bl	80087a8 <RTC_ByteToBcd2>
 800834a:	4603      	mov	r3, r0
 800834c:	461a      	mov	r2, r3
 800834e:	68bb      	ldr	r3, [r7, #8]
 8008350:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8008352:	2300      	movs	r3, #0
}
 8008354:	4618      	mov	r0, r3
 8008356:	3720      	adds	r7, #32
 8008358:	46bd      	mov	sp, r7
 800835a:	bd80      	pop	{r7, pc}
 800835c:	91a2b3c5 	.word	0x91a2b3c5
 8008360:	88888889 	.word	0x88888889
 8008364:	aaaaaaab 	.word	0xaaaaaaab
 8008368:	00015180 	.word	0x00015180

0800836c <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800836c:	b580      	push	{r7, lr}
 800836e:	b088      	sub	sp, #32
 8008370:	af00      	add	r7, sp, #0
 8008372:	60f8      	str	r0, [r7, #12]
 8008374:	60b9      	str	r1, [r7, #8]
 8008376:	607a      	str	r2, [r7, #4]
  uint32_t counter_time = 0U, counter_alarm = 0U, hours = 0U;
 8008378:	2300      	movs	r3, #0
 800837a:	61fb      	str	r3, [r7, #28]
 800837c:	2300      	movs	r3, #0
 800837e:	61bb      	str	r3, [r7, #24]
 8008380:	2300      	movs	r3, #0
 8008382:	617b      	str	r3, [r7, #20]

  /* Check input parameters */
  if ((hrtc == NULL) || (sDate == NULL))
 8008384:	68fb      	ldr	r3, [r7, #12]
 8008386:	2b00      	cmp	r3, #0
 8008388:	d002      	beq.n	8008390 <HAL_RTC_SetDate+0x24>
 800838a:	68bb      	ldr	r3, [r7, #8]
 800838c:	2b00      	cmp	r3, #0
 800838e:	d101      	bne.n	8008394 <HAL_RTC_SetDate+0x28>
  {
    return HAL_ERROR;
 8008390:	2301      	movs	r3, #1
 8008392:	e097      	b.n	80084c4 <HAL_RTC_SetDate+0x158>

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8008394:	68fb      	ldr	r3, [r7, #12]
 8008396:	7c1b      	ldrb	r3, [r3, #16]
 8008398:	2b01      	cmp	r3, #1
 800839a:	d101      	bne.n	80083a0 <HAL_RTC_SetDate+0x34>
 800839c:	2302      	movs	r3, #2
 800839e:	e091      	b.n	80084c4 <HAL_RTC_SetDate+0x158>
 80083a0:	68fb      	ldr	r3, [r7, #12]
 80083a2:	2201      	movs	r2, #1
 80083a4:	741a      	strb	r2, [r3, #16]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80083a6:	68fb      	ldr	r3, [r7, #12]
 80083a8:	2202      	movs	r2, #2
 80083aa:	745a      	strb	r2, [r3, #17]

  if (Format == RTC_FORMAT_BIN)
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	2b00      	cmp	r3, #0
 80083b0:	d10c      	bne.n	80083cc <HAL_RTC_SetDate+0x60>
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    /* Change the current date */
    hrtc->DateToUpdate.Year  = sDate->Year;
 80083b2:	68bb      	ldr	r3, [r7, #8]
 80083b4:	78da      	ldrb	r2, [r3, #3]
 80083b6:	68fb      	ldr	r3, [r7, #12]
 80083b8:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = sDate->Month;
 80083ba:	68bb      	ldr	r3, [r7, #8]
 80083bc:	785a      	ldrb	r2, [r3, #1]
 80083be:	68fb      	ldr	r3, [r7, #12]
 80083c0:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date  = sDate->Date;
 80083c2:	68bb      	ldr	r3, [r7, #8]
 80083c4:	789a      	ldrb	r2, [r3, #2]
 80083c6:	68fb      	ldr	r3, [r7, #12]
 80083c8:	739a      	strb	r2, [r3, #14]
 80083ca:	e01a      	b.n	8008402 <HAL_RTC_SetDate+0x96>
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    /* Change the current date */
    hrtc->DateToUpdate.Year  = RTC_Bcd2ToByte(sDate->Year);
 80083cc:	68bb      	ldr	r3, [r7, #8]
 80083ce:	78db      	ldrb	r3, [r3, #3]
 80083d0:	4618      	mov	r0, r3
 80083d2:	f000 fa06 	bl	80087e2 <RTC_Bcd2ToByte>
 80083d6:	4603      	mov	r3, r0
 80083d8:	461a      	mov	r2, r3
 80083da:	68fb      	ldr	r3, [r7, #12]
 80083dc:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = RTC_Bcd2ToByte(sDate->Month);
 80083de:	68bb      	ldr	r3, [r7, #8]
 80083e0:	785b      	ldrb	r3, [r3, #1]
 80083e2:	4618      	mov	r0, r3
 80083e4:	f000 f9fd 	bl	80087e2 <RTC_Bcd2ToByte>
 80083e8:	4603      	mov	r3, r0
 80083ea:	461a      	mov	r2, r3
 80083ec:	68fb      	ldr	r3, [r7, #12]
 80083ee:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date  = RTC_Bcd2ToByte(sDate->Date);
 80083f0:	68bb      	ldr	r3, [r7, #8]
 80083f2:	789b      	ldrb	r3, [r3, #2]
 80083f4:	4618      	mov	r0, r3
 80083f6:	f000 f9f4 	bl	80087e2 <RTC_Bcd2ToByte>
 80083fa:	4603      	mov	r3, r0
 80083fc:	461a      	mov	r2, r3
 80083fe:	68fb      	ldr	r3, [r7, #12]
 8008400:	739a      	strb	r2, [r3, #14]
  }

  /* WeekDay set by user can be ignored because automatically calculated */
  hrtc->DateToUpdate.WeekDay = RTC_WeekDayNum(hrtc->DateToUpdate.Year, hrtc->DateToUpdate.Month, hrtc->DateToUpdate.Date);
 8008402:	68fb      	ldr	r3, [r7, #12]
 8008404:	7bdb      	ldrb	r3, [r3, #15]
 8008406:	4618      	mov	r0, r3
 8008408:	68fb      	ldr	r3, [r7, #12]
 800840a:	7b59      	ldrb	r1, [r3, #13]
 800840c:	68fb      	ldr	r3, [r7, #12]
 800840e:	7b9b      	ldrb	r3, [r3, #14]
 8008410:	461a      	mov	r2, r3
 8008412:	f000 fadf 	bl	80089d4 <RTC_WeekDayNum>
 8008416:	4603      	mov	r3, r0
 8008418:	461a      	mov	r2, r3
 800841a:	68fb      	ldr	r3, [r7, #12]
 800841c:	731a      	strb	r2, [r3, #12]
  sDate->WeekDay = hrtc->DateToUpdate.WeekDay;
 800841e:	68fb      	ldr	r3, [r7, #12]
 8008420:	7b1a      	ldrb	r2, [r3, #12]
 8008422:	68bb      	ldr	r3, [r7, #8]
 8008424:	701a      	strb	r2, [r3, #0]

  /* Reset time to be aligned on the same day */
  /* Read the time counter*/
  counter_time = RTC_ReadTimeCounter(hrtc);
 8008426:	68f8      	ldr	r0, [r7, #12]
 8008428:	f000 f8d7 	bl	80085da <RTC_ReadTimeCounter>
 800842c:	61f8      	str	r0, [r7, #28]

  /* Fill the structure fields with the read parameters */
  hours = counter_time / 3600U;
 800842e:	69fb      	ldr	r3, [r7, #28]
 8008430:	4a26      	ldr	r2, [pc, #152]	; (80084cc <HAL_RTC_SetDate+0x160>)
 8008432:	fba2 2303 	umull	r2, r3, r2, r3
 8008436:	0adb      	lsrs	r3, r3, #11
 8008438:	617b      	str	r3, [r7, #20]
  if (hours > 24U)
 800843a:	697b      	ldr	r3, [r7, #20]
 800843c:	2b18      	cmp	r3, #24
 800843e:	d93a      	bls.n	80084b6 <HAL_RTC_SetDate+0x14a>
  {
    /* Set updated time in decreasing counter by number of days elapsed */
    counter_time -= ((hours / 24U) * 24U * 3600U);
 8008440:	697b      	ldr	r3, [r7, #20]
 8008442:	4a23      	ldr	r2, [pc, #140]	; (80084d0 <HAL_RTC_SetDate+0x164>)
 8008444:	fba2 2303 	umull	r2, r3, r2, r3
 8008448:	091b      	lsrs	r3, r3, #4
 800844a:	4a22      	ldr	r2, [pc, #136]	; (80084d4 <HAL_RTC_SetDate+0x168>)
 800844c:	fb02 f303 	mul.w	r3, r2, r3
 8008450:	69fa      	ldr	r2, [r7, #28]
 8008452:	1ad3      	subs	r3, r2, r3
 8008454:	61fb      	str	r3, [r7, #28]
    /* Write time counter in RTC registers */
    if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 8008456:	69f9      	ldr	r1, [r7, #28]
 8008458:	68f8      	ldr	r0, [r7, #12]
 800845a:	f000 f8ee 	bl	800863a <RTC_WriteTimeCounter>
 800845e:	4603      	mov	r3, r0
 8008460:	2b00      	cmp	r3, #0
 8008462:	d007      	beq.n	8008474 <HAL_RTC_SetDate+0x108>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8008464:	68fb      	ldr	r3, [r7, #12]
 8008466:	2204      	movs	r2, #4
 8008468:	745a      	strb	r2, [r3, #17]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 800846a:	68fb      	ldr	r3, [r7, #12]
 800846c:	2200      	movs	r2, #0
 800846e:	741a      	strb	r2, [r3, #16]

      return HAL_ERROR;
 8008470:	2301      	movs	r3, #1
 8008472:	e027      	b.n	80084c4 <HAL_RTC_SetDate+0x158>
    }

    /* Read current Alarm counter in RTC registers */
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 8008474:	68f8      	ldr	r0, [r7, #12]
 8008476:	f000 f907 	bl	8008688 <RTC_ReadAlarmCounter>
 800847a:	61b8      	str	r0, [r7, #24]

    /* Set again alarm to match with new time if enabled */
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 800847c:	69bb      	ldr	r3, [r7, #24]
 800847e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008482:	d018      	beq.n	80084b6 <HAL_RTC_SetDate+0x14a>
    {
      if (counter_alarm < counter_time)
 8008484:	69ba      	ldr	r2, [r7, #24]
 8008486:	69fb      	ldr	r3, [r7, #28]
 8008488:	429a      	cmp	r2, r3
 800848a:	d214      	bcs.n	80084b6 <HAL_RTC_SetDate+0x14a>
      {
        /* Add 1 day to alarm counter*/
        counter_alarm += (uint32_t)(24U * 3600U);
 800848c:	69bb      	ldr	r3, [r7, #24]
 800848e:	f503 33a8 	add.w	r3, r3, #86016	; 0x15000
 8008492:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8008496:	61bb      	str	r3, [r7, #24]

        /* Write new Alarm counter in RTC registers */
        if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 8008498:	69b9      	ldr	r1, [r7, #24]
 800849a:	68f8      	ldr	r0, [r7, #12]
 800849c:	f000 f90d 	bl	80086ba <RTC_WriteAlarmCounter>
 80084a0:	4603      	mov	r3, r0
 80084a2:	2b00      	cmp	r3, #0
 80084a4:	d007      	beq.n	80084b6 <HAL_RTC_SetDate+0x14a>
        {
          /* Set RTC state */
          hrtc->State = HAL_RTC_STATE_ERROR;
 80084a6:	68fb      	ldr	r3, [r7, #12]
 80084a8:	2204      	movs	r2, #4
 80084aa:	745a      	strb	r2, [r3, #17]

          /* Process Unlocked */
          __HAL_UNLOCK(hrtc);
 80084ac:	68fb      	ldr	r3, [r7, #12]
 80084ae:	2200      	movs	r2, #0
 80084b0:	741a      	strb	r2, [r3, #16]

          return HAL_ERROR;
 80084b2:	2301      	movs	r3, #1
 80084b4:	e006      	b.n	80084c4 <HAL_RTC_SetDate+0x158>
    }


  }

  hrtc->State = HAL_RTC_STATE_READY ;
 80084b6:	68fb      	ldr	r3, [r7, #12]
 80084b8:	2201      	movs	r2, #1
 80084ba:	745a      	strb	r2, [r3, #17]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80084bc:	68fb      	ldr	r3, [r7, #12]
 80084be:	2200      	movs	r2, #0
 80084c0:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 80084c2:	2300      	movs	r3, #0
}
 80084c4:	4618      	mov	r0, r3
 80084c6:	3720      	adds	r7, #32
 80084c8:	46bd      	mov	sp, r7
 80084ca:	bd80      	pop	{r7, pc}
 80084cc:	91a2b3c5 	.word	0x91a2b3c5
 80084d0:	aaaaaaab 	.word	0xaaaaaaab
 80084d4:	00015180 	.word	0x00015180

080084d8 <HAL_RTC_GetDate>:
  *            @arg RTC_FORMAT_BIN:  Binary data format
  *            @arg RTC_FORMAT_BCD:  BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80084d8:	b580      	push	{r7, lr}
 80084da:	b086      	sub	sp, #24
 80084dc:	af00      	add	r7, sp, #0
 80084de:	60f8      	str	r0, [r7, #12]
 80084e0:	60b9      	str	r1, [r7, #8]
 80084e2:	607a      	str	r2, [r7, #4]
  RTC_TimeTypeDef stime = {0U};
 80084e4:	f107 0314 	add.w	r3, r7, #20
 80084e8:	2100      	movs	r1, #0
 80084ea:	460a      	mov	r2, r1
 80084ec:	801a      	strh	r2, [r3, #0]
 80084ee:	460a      	mov	r2, r1
 80084f0:	709a      	strb	r2, [r3, #2]

  /* Check input parameters */
  if ((hrtc == NULL) || (sDate == NULL))
 80084f2:	68fb      	ldr	r3, [r7, #12]
 80084f4:	2b00      	cmp	r3, #0
 80084f6:	d002      	beq.n	80084fe <HAL_RTC_GetDate+0x26>
 80084f8:	68bb      	ldr	r3, [r7, #8]
 80084fa:	2b00      	cmp	r3, #0
 80084fc:	d101      	bne.n	8008502 <HAL_RTC_GetDate+0x2a>
  {
    return HAL_ERROR;
 80084fe:	2301      	movs	r3, #1
 8008500:	e03a      	b.n	8008578 <HAL_RTC_GetDate+0xa0>

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Call HAL_RTC_GetTime function to update date if counter higher than 24 hours */
  if (HAL_RTC_GetTime(hrtc, &stime, RTC_FORMAT_BIN) != HAL_OK)
 8008502:	f107 0314 	add.w	r3, r7, #20
 8008506:	2200      	movs	r2, #0
 8008508:	4619      	mov	r1, r3
 800850a:	68f8      	ldr	r0, [r7, #12]
 800850c:	f7ff fe56 	bl	80081bc <HAL_RTC_GetTime>
 8008510:	4603      	mov	r3, r0
 8008512:	2b00      	cmp	r3, #0
 8008514:	d001      	beq.n	800851a <HAL_RTC_GetDate+0x42>
  {
    return HAL_ERROR;
 8008516:	2301      	movs	r3, #1
 8008518:	e02e      	b.n	8008578 <HAL_RTC_GetDate+0xa0>
  }

  /* Fill the structure fields with the read parameters */
  sDate->WeekDay  = hrtc->DateToUpdate.WeekDay;
 800851a:	68fb      	ldr	r3, [r7, #12]
 800851c:	7b1a      	ldrb	r2, [r3, #12]
 800851e:	68bb      	ldr	r3, [r7, #8]
 8008520:	701a      	strb	r2, [r3, #0]
  sDate->Year     = hrtc->DateToUpdate.Year;
 8008522:	68fb      	ldr	r3, [r7, #12]
 8008524:	7bda      	ldrb	r2, [r3, #15]
 8008526:	68bb      	ldr	r3, [r7, #8]
 8008528:	70da      	strb	r2, [r3, #3]
  sDate->Month    = hrtc->DateToUpdate.Month;
 800852a:	68fb      	ldr	r3, [r7, #12]
 800852c:	7b5a      	ldrb	r2, [r3, #13]
 800852e:	68bb      	ldr	r3, [r7, #8]
 8008530:	705a      	strb	r2, [r3, #1]
  sDate->Date     = hrtc->DateToUpdate.Date;
 8008532:	68fb      	ldr	r3, [r7, #12]
 8008534:	7b9a      	ldrb	r2, [r3, #14]
 8008536:	68bb      	ldr	r3, [r7, #8]
 8008538:	709a      	strb	r2, [r3, #2]

  /* Check the input parameters format */
  if (Format != RTC_FORMAT_BIN)
 800853a:	687b      	ldr	r3, [r7, #4]
 800853c:	2b00      	cmp	r3, #0
 800853e:	d01a      	beq.n	8008576 <HAL_RTC_GetDate+0x9e>
  {
    /* Convert the date structure parameters to BCD format */
    sDate->Year   = (uint8_t)RTC_ByteToBcd2(sDate->Year);
 8008540:	68bb      	ldr	r3, [r7, #8]
 8008542:	78db      	ldrb	r3, [r3, #3]
 8008544:	4618      	mov	r0, r3
 8008546:	f000 f92f 	bl	80087a8 <RTC_ByteToBcd2>
 800854a:	4603      	mov	r3, r0
 800854c:	461a      	mov	r2, r3
 800854e:	68bb      	ldr	r3, [r7, #8]
 8008550:	70da      	strb	r2, [r3, #3]
    sDate->Month  = (uint8_t)RTC_ByteToBcd2(sDate->Month);
 8008552:	68bb      	ldr	r3, [r7, #8]
 8008554:	785b      	ldrb	r3, [r3, #1]
 8008556:	4618      	mov	r0, r3
 8008558:	f000 f926 	bl	80087a8 <RTC_ByteToBcd2>
 800855c:	4603      	mov	r3, r0
 800855e:	461a      	mov	r2, r3
 8008560:	68bb      	ldr	r3, [r7, #8]
 8008562:	705a      	strb	r2, [r3, #1]
    sDate->Date   = (uint8_t)RTC_ByteToBcd2(sDate->Date);
 8008564:	68bb      	ldr	r3, [r7, #8]
 8008566:	789b      	ldrb	r3, [r3, #2]
 8008568:	4618      	mov	r0, r3
 800856a:	f000 f91d 	bl	80087a8 <RTC_ByteToBcd2>
 800856e:	4603      	mov	r3, r0
 8008570:	461a      	mov	r2, r3
 8008572:	68bb      	ldr	r3, [r7, #8]
 8008574:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8008576:	2300      	movs	r3, #0
}
 8008578:	4618      	mov	r0, r3
 800857a:	3718      	adds	r7, #24
 800857c:	46bd      	mov	sp, r7
 800857e:	bd80      	pop	{r7, pc}

08008580 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8008580:	b580      	push	{r7, lr}
 8008582:	b084      	sub	sp, #16
 8008584:	af00      	add	r7, sp, #0
 8008586:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8008588:	2300      	movs	r3, #0
 800858a:	60fb      	str	r3, [r7, #12]

  /* Check input parameters */
  if (hrtc == NULL)
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	2b00      	cmp	r3, #0
 8008590:	d101      	bne.n	8008596 <HAL_RTC_WaitForSynchro+0x16>
  {
    return HAL_ERROR;
 8008592:	2301      	movs	r3, #1
 8008594:	e01d      	b.n	80085d2 <HAL_RTC_WaitForSynchro+0x52>
  }

  /* Clear RSF flag */
  CLEAR_BIT(hrtc->Instance->CRL, RTC_FLAG_RSF);
 8008596:	687b      	ldr	r3, [r7, #4]
 8008598:	681b      	ldr	r3, [r3, #0]
 800859a:	685a      	ldr	r2, [r3, #4]
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	681b      	ldr	r3, [r3, #0]
 80085a0:	f022 0208 	bic.w	r2, r2, #8
 80085a4:	605a      	str	r2, [r3, #4]

  tickstart = HAL_GetTick();
 80085a6:	f7fe fae1 	bl	8006b6c <HAL_GetTick>
 80085aa:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 80085ac:	e009      	b.n	80085c2 <HAL_RTC_WaitForSynchro+0x42>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 80085ae:	f7fe fadd 	bl	8006b6c <HAL_GetTick>
 80085b2:	4602      	mov	r2, r0
 80085b4:	68fb      	ldr	r3, [r7, #12]
 80085b6:	1ad3      	subs	r3, r2, r3
 80085b8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80085bc:	d901      	bls.n	80085c2 <HAL_RTC_WaitForSynchro+0x42>
    {
      return HAL_TIMEOUT;
 80085be:	2303      	movs	r3, #3
 80085c0:	e007      	b.n	80085d2 <HAL_RTC_WaitForSynchro+0x52>
  while ((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	681b      	ldr	r3, [r3, #0]
 80085c6:	685b      	ldr	r3, [r3, #4]
 80085c8:	f003 0308 	and.w	r3, r3, #8
 80085cc:	2b00      	cmp	r3, #0
 80085ce:	d0ee      	beq.n	80085ae <HAL_RTC_WaitForSynchro+0x2e>
    }
  }

  return HAL_OK;
 80085d0:	2300      	movs	r3, #0
}
 80085d2:	4618      	mov	r0, r3
 80085d4:	3710      	adds	r7, #16
 80085d6:	46bd      	mov	sp, r7
 80085d8:	bd80      	pop	{r7, pc}

080085da <RTC_ReadTimeCounter>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval Time counter
  */
static uint32_t RTC_ReadTimeCounter(RTC_HandleTypeDef *hrtc)
{
 80085da:	b480      	push	{r7}
 80085dc:	b087      	sub	sp, #28
 80085de:	af00      	add	r7, sp, #0
 80085e0:	6078      	str	r0, [r7, #4]
  uint16_t high1 = 0U, high2 = 0U, low = 0U;
 80085e2:	2300      	movs	r3, #0
 80085e4:	827b      	strh	r3, [r7, #18]
 80085e6:	2300      	movs	r3, #0
 80085e8:	823b      	strh	r3, [r7, #16]
 80085ea:	2300      	movs	r3, #0
 80085ec:	81fb      	strh	r3, [r7, #14]
  uint32_t timecounter = 0U;
 80085ee:	2300      	movs	r3, #0
 80085f0:	617b      	str	r3, [r7, #20]

  high1 = READ_REG(hrtc->Instance->CNTH & RTC_CNTH_RTC_CNT);
 80085f2:	687b      	ldr	r3, [r7, #4]
 80085f4:	681b      	ldr	r3, [r3, #0]
 80085f6:	699b      	ldr	r3, [r3, #24]
 80085f8:	827b      	strh	r3, [r7, #18]
  low   = READ_REG(hrtc->Instance->CNTL & RTC_CNTL_RTC_CNT);
 80085fa:	687b      	ldr	r3, [r7, #4]
 80085fc:	681b      	ldr	r3, [r3, #0]
 80085fe:	69db      	ldr	r3, [r3, #28]
 8008600:	81fb      	strh	r3, [r7, #14]
  high2 = READ_REG(hrtc->Instance->CNTH & RTC_CNTH_RTC_CNT);
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	681b      	ldr	r3, [r3, #0]
 8008606:	699b      	ldr	r3, [r3, #24]
 8008608:	823b      	strh	r3, [r7, #16]

  if (high1 != high2)
 800860a:	8a7a      	ldrh	r2, [r7, #18]
 800860c:	8a3b      	ldrh	r3, [r7, #16]
 800860e:	429a      	cmp	r2, r3
 8008610:	d008      	beq.n	8008624 <RTC_ReadTimeCounter+0x4a>
  {
    /* In this case the counter roll over during reading of CNTL and CNTH registers,
       read again CNTL register then return the counter value */
    timecounter = (((uint32_t) high2 << 16U) | READ_REG(hrtc->Instance->CNTL & RTC_CNTL_RTC_CNT));
 8008612:	8a3b      	ldrh	r3, [r7, #16]
 8008614:	041a      	lsls	r2, r3, #16
 8008616:	687b      	ldr	r3, [r7, #4]
 8008618:	681b      	ldr	r3, [r3, #0]
 800861a:	69db      	ldr	r3, [r3, #28]
 800861c:	b29b      	uxth	r3, r3
 800861e:	4313      	orrs	r3, r2
 8008620:	617b      	str	r3, [r7, #20]
 8008622:	e004      	b.n	800862e <RTC_ReadTimeCounter+0x54>
  }
  else
  {
    /* No counter roll over during reading of CNTL and CNTH registers, counter
       value is equal to first value of CNTL and CNTH */
    timecounter = (((uint32_t) high1 << 16U) | low);
 8008624:	8a7b      	ldrh	r3, [r7, #18]
 8008626:	041a      	lsls	r2, r3, #16
 8008628:	89fb      	ldrh	r3, [r7, #14]
 800862a:	4313      	orrs	r3, r2
 800862c:	617b      	str	r3, [r7, #20]
  }

  return timecounter;
 800862e:	697b      	ldr	r3, [r7, #20]
}
 8008630:	4618      	mov	r0, r3
 8008632:	371c      	adds	r7, #28
 8008634:	46bd      	mov	sp, r7
 8008636:	bc80      	pop	{r7}
 8008638:	4770      	bx	lr

0800863a <RTC_WriteTimeCounter>:
  *                the configuration information for RTC.
  * @param  TimeCounter: Counter to write in RTC_CNT registers
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_WriteTimeCounter(RTC_HandleTypeDef *hrtc, uint32_t TimeCounter)
{
 800863a:	b580      	push	{r7, lr}
 800863c:	b084      	sub	sp, #16
 800863e:	af00      	add	r7, sp, #0
 8008640:	6078      	str	r0, [r7, #4]
 8008642:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8008644:	2300      	movs	r3, #0
 8008646:	73fb      	strb	r3, [r7, #15]

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8008648:	6878      	ldr	r0, [r7, #4]
 800864a:	f000 f85d 	bl	8008708 <RTC_EnterInitMode>
 800864e:	4603      	mov	r3, r0
 8008650:	2b00      	cmp	r3, #0
 8008652:	d002      	beq.n	800865a <RTC_WriteTimeCounter+0x20>
  {
    status = HAL_ERROR;
 8008654:	2301      	movs	r3, #1
 8008656:	73fb      	strb	r3, [r7, #15]
 8008658:	e011      	b.n	800867e <RTC_WriteTimeCounter+0x44>
  }
  else
  {
    /* Set RTC COUNTER MSB word */
    WRITE_REG(hrtc->Instance->CNTH, (TimeCounter >> 16U));
 800865a:	687b      	ldr	r3, [r7, #4]
 800865c:	681b      	ldr	r3, [r3, #0]
 800865e:	683a      	ldr	r2, [r7, #0]
 8008660:	0c12      	lsrs	r2, r2, #16
 8008662:	619a      	str	r2, [r3, #24]
    /* Set RTC COUNTER LSB word */
    WRITE_REG(hrtc->Instance->CNTL, (TimeCounter & RTC_CNTL_RTC_CNT));
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	681b      	ldr	r3, [r3, #0]
 8008668:	683a      	ldr	r2, [r7, #0]
 800866a:	b292      	uxth	r2, r2
 800866c:	61da      	str	r2, [r3, #28]

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 800866e:	6878      	ldr	r0, [r7, #4]
 8008670:	f000 f872 	bl	8008758 <RTC_ExitInitMode>
 8008674:	4603      	mov	r3, r0
 8008676:	2b00      	cmp	r3, #0
 8008678:	d001      	beq.n	800867e <RTC_WriteTimeCounter+0x44>
    {
      status = HAL_ERROR;
 800867a:	2301      	movs	r3, #1
 800867c:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 800867e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008680:	4618      	mov	r0, r3
 8008682:	3710      	adds	r7, #16
 8008684:	46bd      	mov	sp, r7
 8008686:	bd80      	pop	{r7, pc}

08008688 <RTC_ReadAlarmCounter>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval Time counter
  */
static uint32_t RTC_ReadAlarmCounter(RTC_HandleTypeDef *hrtc)
{
 8008688:	b480      	push	{r7}
 800868a:	b085      	sub	sp, #20
 800868c:	af00      	add	r7, sp, #0
 800868e:	6078      	str	r0, [r7, #4]
  uint16_t high1 = 0U, low = 0U;
 8008690:	2300      	movs	r3, #0
 8008692:	81fb      	strh	r3, [r7, #14]
 8008694:	2300      	movs	r3, #0
 8008696:	81bb      	strh	r3, [r7, #12]

  high1 = READ_REG(hrtc->Instance->ALRH & RTC_CNTH_RTC_CNT);
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	681b      	ldr	r3, [r3, #0]
 800869c:	6a1b      	ldr	r3, [r3, #32]
 800869e:	81fb      	strh	r3, [r7, #14]
  low   = READ_REG(hrtc->Instance->ALRL & RTC_CNTL_RTC_CNT);
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	681b      	ldr	r3, [r3, #0]
 80086a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80086a6:	81bb      	strh	r3, [r7, #12]

  return (((uint32_t) high1 << 16U) | low);
 80086a8:	89fb      	ldrh	r3, [r7, #14]
 80086aa:	041a      	lsls	r2, r3, #16
 80086ac:	89bb      	ldrh	r3, [r7, #12]
 80086ae:	4313      	orrs	r3, r2
}
 80086b0:	4618      	mov	r0, r3
 80086b2:	3714      	adds	r7, #20
 80086b4:	46bd      	mov	sp, r7
 80086b6:	bc80      	pop	{r7}
 80086b8:	4770      	bx	lr

080086ba <RTC_WriteAlarmCounter>:
  *                the configuration information for RTC.
  * @param  AlarmCounter: Counter to write in RTC_ALR registers
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_WriteAlarmCounter(RTC_HandleTypeDef *hrtc, uint32_t AlarmCounter)
{
 80086ba:	b580      	push	{r7, lr}
 80086bc:	b084      	sub	sp, #16
 80086be:	af00      	add	r7, sp, #0
 80086c0:	6078      	str	r0, [r7, #4]
 80086c2:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80086c4:	2300      	movs	r3, #0
 80086c6:	73fb      	strb	r3, [r7, #15]

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 80086c8:	6878      	ldr	r0, [r7, #4]
 80086ca:	f000 f81d 	bl	8008708 <RTC_EnterInitMode>
 80086ce:	4603      	mov	r3, r0
 80086d0:	2b00      	cmp	r3, #0
 80086d2:	d002      	beq.n	80086da <RTC_WriteAlarmCounter+0x20>
  {
    status = HAL_ERROR;
 80086d4:	2301      	movs	r3, #1
 80086d6:	73fb      	strb	r3, [r7, #15]
 80086d8:	e011      	b.n	80086fe <RTC_WriteAlarmCounter+0x44>
  }
  else
  {
    /* Set RTC COUNTER MSB word */
    WRITE_REG(hrtc->Instance->ALRH, (AlarmCounter >> 16U));
 80086da:	687b      	ldr	r3, [r7, #4]
 80086dc:	681b      	ldr	r3, [r3, #0]
 80086de:	683a      	ldr	r2, [r7, #0]
 80086e0:	0c12      	lsrs	r2, r2, #16
 80086e2:	621a      	str	r2, [r3, #32]
    /* Set RTC COUNTER LSB word */
    WRITE_REG(hrtc->Instance->ALRL, (AlarmCounter & RTC_ALRL_RTC_ALR));
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	681b      	ldr	r3, [r3, #0]
 80086e8:	683a      	ldr	r2, [r7, #0]
 80086ea:	b292      	uxth	r2, r2
 80086ec:	625a      	str	r2, [r3, #36]	; 0x24

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 80086ee:	6878      	ldr	r0, [r7, #4]
 80086f0:	f000 f832 	bl	8008758 <RTC_ExitInitMode>
 80086f4:	4603      	mov	r3, r0
 80086f6:	2b00      	cmp	r3, #0
 80086f8:	d001      	beq.n	80086fe <RTC_WriteAlarmCounter+0x44>
    {
      status = HAL_ERROR;
 80086fa:	2301      	movs	r3, #1
 80086fc:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 80086fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8008700:	4618      	mov	r0, r3
 8008702:	3710      	adds	r7, #16
 8008704:	46bd      	mov	sp, r7
 8008706:	bd80      	pop	{r7, pc}

08008708 <RTC_EnterInitMode>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8008708:	b580      	push	{r7, lr}
 800870a:	b084      	sub	sp, #16
 800870c:	af00      	add	r7, sp, #0
 800870e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8008710:	2300      	movs	r3, #0
 8008712:	60fb      	str	r3, [r7, #12]

  tickstart = HAL_GetTick();
 8008714:	f7fe fa2a 	bl	8006b6c <HAL_GetTick>
 8008718:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC is in INIT state and if Time out is reached exit */
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 800871a:	e009      	b.n	8008730 <RTC_EnterInitMode+0x28>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 800871c:	f7fe fa26 	bl	8006b6c <HAL_GetTick>
 8008720:	4602      	mov	r2, r0
 8008722:	68fb      	ldr	r3, [r7, #12]
 8008724:	1ad3      	subs	r3, r2, r3
 8008726:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800872a:	d901      	bls.n	8008730 <RTC_EnterInitMode+0x28>
    {
      return HAL_TIMEOUT;
 800872c:	2303      	movs	r3, #3
 800872e:	e00f      	b.n	8008750 <RTC_EnterInitMode+0x48>
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8008730:	687b      	ldr	r3, [r7, #4]
 8008732:	681b      	ldr	r3, [r3, #0]
 8008734:	685b      	ldr	r3, [r3, #4]
 8008736:	f003 0320 	and.w	r3, r3, #32
 800873a:	2b00      	cmp	r3, #0
 800873c:	d0ee      	beq.n	800871c <RTC_EnterInitMode+0x14>
    }
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800873e:	687b      	ldr	r3, [r7, #4]
 8008740:	681b      	ldr	r3, [r3, #0]
 8008742:	685a      	ldr	r2, [r3, #4]
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	681b      	ldr	r3, [r3, #0]
 8008748:	f042 0210 	orr.w	r2, r2, #16
 800874c:	605a      	str	r2, [r3, #4]


  return HAL_OK;
 800874e:	2300      	movs	r3, #0
}
 8008750:	4618      	mov	r0, r3
 8008752:	3710      	adds	r7, #16
 8008754:	46bd      	mov	sp, r7
 8008756:	bd80      	pop	{r7, pc}

08008758 <RTC_ExitInitMode>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8008758:	b580      	push	{r7, lr}
 800875a:	b084      	sub	sp, #16
 800875c:	af00      	add	r7, sp, #0
 800875e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8008760:	2300      	movs	r3, #0
 8008762:	60fb      	str	r3, [r7, #12]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008764:	687b      	ldr	r3, [r7, #4]
 8008766:	681b      	ldr	r3, [r3, #0]
 8008768:	685a      	ldr	r2, [r3, #4]
 800876a:	687b      	ldr	r3, [r7, #4]
 800876c:	681b      	ldr	r3, [r3, #0]
 800876e:	f022 0210 	bic.w	r2, r2, #16
 8008772:	605a      	str	r2, [r3, #4]

  tickstart = HAL_GetTick();
 8008774:	f7fe f9fa 	bl	8006b6c <HAL_GetTick>
 8008778:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC is in INIT state and if Time out is reached exit */
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 800877a:	e009      	b.n	8008790 <RTC_ExitInitMode+0x38>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 800877c:	f7fe f9f6 	bl	8006b6c <HAL_GetTick>
 8008780:	4602      	mov	r2, r0
 8008782:	68fb      	ldr	r3, [r7, #12]
 8008784:	1ad3      	subs	r3, r2, r3
 8008786:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800878a:	d901      	bls.n	8008790 <RTC_ExitInitMode+0x38>
    {
      return HAL_TIMEOUT;
 800878c:	2303      	movs	r3, #3
 800878e:	e007      	b.n	80087a0 <RTC_ExitInitMode+0x48>
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8008790:	687b      	ldr	r3, [r7, #4]
 8008792:	681b      	ldr	r3, [r3, #0]
 8008794:	685b      	ldr	r3, [r3, #4]
 8008796:	f003 0320 	and.w	r3, r3, #32
 800879a:	2b00      	cmp	r3, #0
 800879c:	d0ee      	beq.n	800877c <RTC_ExitInitMode+0x24>
    }
  }

  return HAL_OK;
 800879e:	2300      	movs	r3, #0
}
 80087a0:	4618      	mov	r0, r3
 80087a2:	3710      	adds	r7, #16
 80087a4:	46bd      	mov	sp, r7
 80087a6:	bd80      	pop	{r7, pc}

080087a8 <RTC_ByteToBcd2>:
  * @brief  Converts a 2 digit decimal to BCD format.
  * @param  Value: Byte to be converted
  * @retval Converted byte
  */
static uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 80087a8:	b480      	push	{r7}
 80087aa:	b085      	sub	sp, #20
 80087ac:	af00      	add	r7, sp, #0
 80087ae:	4603      	mov	r3, r0
 80087b0:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 80087b2:	2300      	movs	r3, #0
 80087b4:	60fb      	str	r3, [r7, #12]

  while (Value >= 10U)
 80087b6:	e005      	b.n	80087c4 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 80087b8:	68fb      	ldr	r3, [r7, #12]
 80087ba:	3301      	adds	r3, #1
 80087bc:	60fb      	str	r3, [r7, #12]
    Value -= 10U;
 80087be:	79fb      	ldrb	r3, [r7, #7]
 80087c0:	3b0a      	subs	r3, #10
 80087c2:	71fb      	strb	r3, [r7, #7]
  while (Value >= 10U)
 80087c4:	79fb      	ldrb	r3, [r7, #7]
 80087c6:	2b09      	cmp	r3, #9
 80087c8:	d8f6      	bhi.n	80087b8 <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | Value);
 80087ca:	68fb      	ldr	r3, [r7, #12]
 80087cc:	b2db      	uxtb	r3, r3
 80087ce:	011b      	lsls	r3, r3, #4
 80087d0:	b2da      	uxtb	r2, r3
 80087d2:	79fb      	ldrb	r3, [r7, #7]
 80087d4:	4313      	orrs	r3, r2
 80087d6:	b2db      	uxtb	r3, r3
}
 80087d8:	4618      	mov	r0, r3
 80087da:	3714      	adds	r7, #20
 80087dc:	46bd      	mov	sp, r7
 80087de:	bc80      	pop	{r7}
 80087e0:	4770      	bx	lr

080087e2 <RTC_Bcd2ToByte>:
  * @brief  Converts from 2 digit BCD to Binary.
  * @param  Value: BCD value to be converted
  * @retval Converted word
  */
static uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 80087e2:	b480      	push	{r7}
 80087e4:	b085      	sub	sp, #20
 80087e6:	af00      	add	r7, sp, #0
 80087e8:	4603      	mov	r3, r0
 80087ea:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp = 0U;
 80087ec:	2300      	movs	r3, #0
 80087ee:	60fb      	str	r3, [r7, #12]
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10U;
 80087f0:	79fb      	ldrb	r3, [r7, #7]
 80087f2:	091b      	lsrs	r3, r3, #4
 80087f4:	b2db      	uxtb	r3, r3
 80087f6:	461a      	mov	r2, r3
 80087f8:	4613      	mov	r3, r2
 80087fa:	009b      	lsls	r3, r3, #2
 80087fc:	4413      	add	r3, r2
 80087fe:	005b      	lsls	r3, r3, #1
 8008800:	60fb      	str	r3, [r7, #12]
  return (tmp + (Value & (uint8_t)0x0F));
 8008802:	79fb      	ldrb	r3, [r7, #7]
 8008804:	f003 030f 	and.w	r3, r3, #15
 8008808:	b2da      	uxtb	r2, r3
 800880a:	68fb      	ldr	r3, [r7, #12]
 800880c:	b2db      	uxtb	r3, r3
 800880e:	4413      	add	r3, r2
 8008810:	b2db      	uxtb	r3, r3
}
 8008812:	4618      	mov	r0, r3
 8008814:	3714      	adds	r7, #20
 8008816:	46bd      	mov	sp, r7
 8008818:	bc80      	pop	{r7}
 800881a:	4770      	bx	lr

0800881c <RTC_DateUpdate>:
  *                the configuration information for RTC.
  * @param  DayElapsed: Number of days elapsed from last date update
  * @retval None
  */
static void RTC_DateUpdate(RTC_HandleTypeDef *hrtc, uint32_t DayElapsed)
{
 800881c:	b580      	push	{r7, lr}
 800881e:	b086      	sub	sp, #24
 8008820:	af00      	add	r7, sp, #0
 8008822:	6078      	str	r0, [r7, #4]
 8008824:	6039      	str	r1, [r7, #0]
  uint32_t year = 0U, month = 0U, day = 0U;
 8008826:	2300      	movs	r3, #0
 8008828:	617b      	str	r3, [r7, #20]
 800882a:	2300      	movs	r3, #0
 800882c:	613b      	str	r3, [r7, #16]
 800882e:	2300      	movs	r3, #0
 8008830:	60fb      	str	r3, [r7, #12]
  uint32_t loop = 0U;
 8008832:	2300      	movs	r3, #0
 8008834:	60bb      	str	r3, [r7, #8]

  /* Get the current year*/
  year = hrtc->DateToUpdate.Year;
 8008836:	687b      	ldr	r3, [r7, #4]
 8008838:	7bdb      	ldrb	r3, [r3, #15]
 800883a:	617b      	str	r3, [r7, #20]

  /* Get the current month and day */
  month = hrtc->DateToUpdate.Month;
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	7b5b      	ldrb	r3, [r3, #13]
 8008840:	613b      	str	r3, [r7, #16]
  day = hrtc->DateToUpdate.Date;
 8008842:	687b      	ldr	r3, [r7, #4]
 8008844:	7b9b      	ldrb	r3, [r3, #14]
 8008846:	60fb      	str	r3, [r7, #12]

  for (loop = 0U; loop < DayElapsed; loop++)
 8008848:	2300      	movs	r3, #0
 800884a:	60bb      	str	r3, [r7, #8]
 800884c:	e06f      	b.n	800892e <RTC_DateUpdate+0x112>
  {
    if ((month == 1U) || (month == 3U) || (month == 5U) || (month == 7U) || \
 800884e:	693b      	ldr	r3, [r7, #16]
 8008850:	2b01      	cmp	r3, #1
 8008852:	d011      	beq.n	8008878 <RTC_DateUpdate+0x5c>
 8008854:	693b      	ldr	r3, [r7, #16]
 8008856:	2b03      	cmp	r3, #3
 8008858:	d00e      	beq.n	8008878 <RTC_DateUpdate+0x5c>
 800885a:	693b      	ldr	r3, [r7, #16]
 800885c:	2b05      	cmp	r3, #5
 800885e:	d00b      	beq.n	8008878 <RTC_DateUpdate+0x5c>
 8008860:	693b      	ldr	r3, [r7, #16]
 8008862:	2b07      	cmp	r3, #7
 8008864:	d008      	beq.n	8008878 <RTC_DateUpdate+0x5c>
 8008866:	693b      	ldr	r3, [r7, #16]
 8008868:	2b08      	cmp	r3, #8
 800886a:	d005      	beq.n	8008878 <RTC_DateUpdate+0x5c>
        (month == 8U) || (month == 10U) || (month == 12U))
 800886c:	693b      	ldr	r3, [r7, #16]
 800886e:	2b0a      	cmp	r3, #10
 8008870:	d002      	beq.n	8008878 <RTC_DateUpdate+0x5c>
 8008872:	693b      	ldr	r3, [r7, #16]
 8008874:	2b0c      	cmp	r3, #12
 8008876:	d117      	bne.n	80088a8 <RTC_DateUpdate+0x8c>
    {
      if (day < 31U)
 8008878:	68fb      	ldr	r3, [r7, #12]
 800887a:	2b1e      	cmp	r3, #30
 800887c:	d803      	bhi.n	8008886 <RTC_DateUpdate+0x6a>
      {
        day++;
 800887e:	68fb      	ldr	r3, [r7, #12]
 8008880:	3301      	adds	r3, #1
 8008882:	60fb      	str	r3, [r7, #12]
      if (day < 31U)
 8008884:	e050      	b.n	8008928 <RTC_DateUpdate+0x10c>
      }
      /* Date structure member: day = 31 */
      else
      {
        if (month != 12U)
 8008886:	693b      	ldr	r3, [r7, #16]
 8008888:	2b0c      	cmp	r3, #12
 800888a:	d005      	beq.n	8008898 <RTC_DateUpdate+0x7c>
        {
          month++;
 800888c:	693b      	ldr	r3, [r7, #16]
 800888e:	3301      	adds	r3, #1
 8008890:	613b      	str	r3, [r7, #16]
          day = 1U;
 8008892:	2301      	movs	r3, #1
 8008894:	60fb      	str	r3, [r7, #12]
      if (day < 31U)
 8008896:	e047      	b.n	8008928 <RTC_DateUpdate+0x10c>
        }
        /* Date structure member: day = 31 & month =12 */
        else
        {
          month = 1U;
 8008898:	2301      	movs	r3, #1
 800889a:	613b      	str	r3, [r7, #16]
          day = 1U;
 800889c:	2301      	movs	r3, #1
 800889e:	60fb      	str	r3, [r7, #12]
          year++;
 80088a0:	697b      	ldr	r3, [r7, #20]
 80088a2:	3301      	adds	r3, #1
 80088a4:	617b      	str	r3, [r7, #20]
      if (day < 31U)
 80088a6:	e03f      	b.n	8008928 <RTC_DateUpdate+0x10c>
        }
      }
    }
    else if ((month == 4U) || (month == 6U) || (month == 9U) || (month == 11U))
 80088a8:	693b      	ldr	r3, [r7, #16]
 80088aa:	2b04      	cmp	r3, #4
 80088ac:	d008      	beq.n	80088c0 <RTC_DateUpdate+0xa4>
 80088ae:	693b      	ldr	r3, [r7, #16]
 80088b0:	2b06      	cmp	r3, #6
 80088b2:	d005      	beq.n	80088c0 <RTC_DateUpdate+0xa4>
 80088b4:	693b      	ldr	r3, [r7, #16]
 80088b6:	2b09      	cmp	r3, #9
 80088b8:	d002      	beq.n	80088c0 <RTC_DateUpdate+0xa4>
 80088ba:	693b      	ldr	r3, [r7, #16]
 80088bc:	2b0b      	cmp	r3, #11
 80088be:	d10c      	bne.n	80088da <RTC_DateUpdate+0xbe>
    {
      if (day < 30U)
 80088c0:	68fb      	ldr	r3, [r7, #12]
 80088c2:	2b1d      	cmp	r3, #29
 80088c4:	d803      	bhi.n	80088ce <RTC_DateUpdate+0xb2>
      {
        day++;
 80088c6:	68fb      	ldr	r3, [r7, #12]
 80088c8:	3301      	adds	r3, #1
 80088ca:	60fb      	str	r3, [r7, #12]
      if (day < 30U)
 80088cc:	e02c      	b.n	8008928 <RTC_DateUpdate+0x10c>
      }
      /* Date structure member: day = 30 */
      else
      {
        month++;
 80088ce:	693b      	ldr	r3, [r7, #16]
 80088d0:	3301      	adds	r3, #1
 80088d2:	613b      	str	r3, [r7, #16]
        day = 1U;
 80088d4:	2301      	movs	r3, #1
 80088d6:	60fb      	str	r3, [r7, #12]
      if (day < 30U)
 80088d8:	e026      	b.n	8008928 <RTC_DateUpdate+0x10c>
      }
    }
    else if (month == 2U)
 80088da:	693b      	ldr	r3, [r7, #16]
 80088dc:	2b02      	cmp	r3, #2
 80088de:	d123      	bne.n	8008928 <RTC_DateUpdate+0x10c>
    {
      if (day < 28U)
 80088e0:	68fb      	ldr	r3, [r7, #12]
 80088e2:	2b1b      	cmp	r3, #27
 80088e4:	d803      	bhi.n	80088ee <RTC_DateUpdate+0xd2>
      {
        day++;
 80088e6:	68fb      	ldr	r3, [r7, #12]
 80088e8:	3301      	adds	r3, #1
 80088ea:	60fb      	str	r3, [r7, #12]
 80088ec:	e01c      	b.n	8008928 <RTC_DateUpdate+0x10c>
      }
      else if (day == 28U)
 80088ee:	68fb      	ldr	r3, [r7, #12]
 80088f0:	2b1c      	cmp	r3, #28
 80088f2:	d111      	bne.n	8008918 <RTC_DateUpdate+0xfc>
      {
        /* Leap year */
        if (RTC_IsLeapYear(year))
 80088f4:	697b      	ldr	r3, [r7, #20]
 80088f6:	b29b      	uxth	r3, r3
 80088f8:	4618      	mov	r0, r3
 80088fa:	f000 f839 	bl	8008970 <RTC_IsLeapYear>
 80088fe:	4603      	mov	r3, r0
 8008900:	2b00      	cmp	r3, #0
 8008902:	d003      	beq.n	800890c <RTC_DateUpdate+0xf0>
        {
          day++;
 8008904:	68fb      	ldr	r3, [r7, #12]
 8008906:	3301      	adds	r3, #1
 8008908:	60fb      	str	r3, [r7, #12]
 800890a:	e00d      	b.n	8008928 <RTC_DateUpdate+0x10c>
        }
        else
        {
          month++;
 800890c:	693b      	ldr	r3, [r7, #16]
 800890e:	3301      	adds	r3, #1
 8008910:	613b      	str	r3, [r7, #16]
          day = 1U;
 8008912:	2301      	movs	r3, #1
 8008914:	60fb      	str	r3, [r7, #12]
 8008916:	e007      	b.n	8008928 <RTC_DateUpdate+0x10c>
        }
      }
      else if (day == 29U)
 8008918:	68fb      	ldr	r3, [r7, #12]
 800891a:	2b1d      	cmp	r3, #29
 800891c:	d104      	bne.n	8008928 <RTC_DateUpdate+0x10c>
      {
        month++;
 800891e:	693b      	ldr	r3, [r7, #16]
 8008920:	3301      	adds	r3, #1
 8008922:	613b      	str	r3, [r7, #16]
        day = 1U;
 8008924:	2301      	movs	r3, #1
 8008926:	60fb      	str	r3, [r7, #12]
  for (loop = 0U; loop < DayElapsed; loop++)
 8008928:	68bb      	ldr	r3, [r7, #8]
 800892a:	3301      	adds	r3, #1
 800892c:	60bb      	str	r3, [r7, #8]
 800892e:	68ba      	ldr	r2, [r7, #8]
 8008930:	683b      	ldr	r3, [r7, #0]
 8008932:	429a      	cmp	r2, r3
 8008934:	d38b      	bcc.n	800884e <RTC_DateUpdate+0x32>
      }
    }
  }

  /* Update year */
  hrtc->DateToUpdate.Year = year;
 8008936:	697b      	ldr	r3, [r7, #20]
 8008938:	b2da      	uxtb	r2, r3
 800893a:	687b      	ldr	r3, [r7, #4]
 800893c:	73da      	strb	r2, [r3, #15]

  /* Update day and month */
  hrtc->DateToUpdate.Month = month;
 800893e:	693b      	ldr	r3, [r7, #16]
 8008940:	b2da      	uxtb	r2, r3
 8008942:	687b      	ldr	r3, [r7, #4]
 8008944:	735a      	strb	r2, [r3, #13]
  hrtc->DateToUpdate.Date = day;
 8008946:	68fb      	ldr	r3, [r7, #12]
 8008948:	b2da      	uxtb	r2, r3
 800894a:	687b      	ldr	r3, [r7, #4]
 800894c:	739a      	strb	r2, [r3, #14]

  /* Update day of the week */
  hrtc->DateToUpdate.WeekDay = RTC_WeekDayNum(year, month, day);
 800894e:	693b      	ldr	r3, [r7, #16]
 8008950:	b2db      	uxtb	r3, r3
 8008952:	68fa      	ldr	r2, [r7, #12]
 8008954:	b2d2      	uxtb	r2, r2
 8008956:	4619      	mov	r1, r3
 8008958:	6978      	ldr	r0, [r7, #20]
 800895a:	f000 f83b 	bl	80089d4 <RTC_WeekDayNum>
 800895e:	4603      	mov	r3, r0
 8008960:	461a      	mov	r2, r3
 8008962:	687b      	ldr	r3, [r7, #4]
 8008964:	731a      	strb	r2, [r3, #12]
}
 8008966:	bf00      	nop
 8008968:	3718      	adds	r7, #24
 800896a:	46bd      	mov	sp, r7
 800896c:	bd80      	pop	{r7, pc}
	...

08008970 <RTC_IsLeapYear>:
  * @param  nYear  year to check
  * @retval 1: leap year
  *         0: not leap year
  */
static uint8_t RTC_IsLeapYear(uint16_t nYear)
{
 8008970:	b480      	push	{r7}
 8008972:	b083      	sub	sp, #12
 8008974:	af00      	add	r7, sp, #0
 8008976:	4603      	mov	r3, r0
 8008978:	80fb      	strh	r3, [r7, #6]
  if ((nYear % 4U) != 0U)
 800897a:	88fb      	ldrh	r3, [r7, #6]
 800897c:	f003 0303 	and.w	r3, r3, #3
 8008980:	b29b      	uxth	r3, r3
 8008982:	2b00      	cmp	r3, #0
 8008984:	d001      	beq.n	800898a <RTC_IsLeapYear+0x1a>
  {
    return 0U;
 8008986:	2300      	movs	r3, #0
 8008988:	e01d      	b.n	80089c6 <RTC_IsLeapYear+0x56>
  }

  if ((nYear % 100U) != 0U)
 800898a:	88fb      	ldrh	r3, [r7, #6]
 800898c:	4a10      	ldr	r2, [pc, #64]	; (80089d0 <RTC_IsLeapYear+0x60>)
 800898e:	fba2 1203 	umull	r1, r2, r2, r3
 8008992:	0952      	lsrs	r2, r2, #5
 8008994:	2164      	movs	r1, #100	; 0x64
 8008996:	fb01 f202 	mul.w	r2, r1, r2
 800899a:	1a9b      	subs	r3, r3, r2
 800899c:	b29b      	uxth	r3, r3
 800899e:	2b00      	cmp	r3, #0
 80089a0:	d001      	beq.n	80089a6 <RTC_IsLeapYear+0x36>
  {
    return 1U;
 80089a2:	2301      	movs	r3, #1
 80089a4:	e00f      	b.n	80089c6 <RTC_IsLeapYear+0x56>
  }

  if ((nYear % 400U) == 0U)
 80089a6:	88fb      	ldrh	r3, [r7, #6]
 80089a8:	4a09      	ldr	r2, [pc, #36]	; (80089d0 <RTC_IsLeapYear+0x60>)
 80089aa:	fba2 1203 	umull	r1, r2, r2, r3
 80089ae:	09d2      	lsrs	r2, r2, #7
 80089b0:	f44f 71c8 	mov.w	r1, #400	; 0x190
 80089b4:	fb01 f202 	mul.w	r2, r1, r2
 80089b8:	1a9b      	subs	r3, r3, r2
 80089ba:	b29b      	uxth	r3, r3
 80089bc:	2b00      	cmp	r3, #0
 80089be:	d101      	bne.n	80089c4 <RTC_IsLeapYear+0x54>
  {
    return 1U;
 80089c0:	2301      	movs	r3, #1
 80089c2:	e000      	b.n	80089c6 <RTC_IsLeapYear+0x56>
  }
  else
  {
    return 0U;
 80089c4:	2300      	movs	r3, #0
  }
}
 80089c6:	4618      	mov	r0, r3
 80089c8:	370c      	adds	r7, #12
 80089ca:	46bd      	mov	sp, r7
 80089cc:	bc80      	pop	{r7}
 80089ce:	4770      	bx	lr
 80089d0:	51eb851f 	.word	0x51eb851f

080089d4 <RTC_WeekDayNum>:
  *         @arg RTC_WEEKDAY_FRIDAY
  *         @arg RTC_WEEKDAY_SATURDAY
  *         @arg RTC_WEEKDAY_SUNDAY
  */
static uint8_t RTC_WeekDayNum(uint32_t nYear, uint8_t nMonth, uint8_t nDay)
{
 80089d4:	b480      	push	{r7}
 80089d6:	b085      	sub	sp, #20
 80089d8:	af00      	add	r7, sp, #0
 80089da:	6078      	str	r0, [r7, #4]
 80089dc:	460b      	mov	r3, r1
 80089de:	70fb      	strb	r3, [r7, #3]
 80089e0:	4613      	mov	r3, r2
 80089e2:	70bb      	strb	r3, [r7, #2]
  uint32_t year = 0U, weekday = 0U;
 80089e4:	2300      	movs	r3, #0
 80089e6:	60bb      	str	r3, [r7, #8]
 80089e8:	2300      	movs	r3, #0
 80089ea:	60fb      	str	r3, [r7, #12]

  year = 2000U + nYear;
 80089ec:	687b      	ldr	r3, [r7, #4]
 80089ee:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 80089f2:	60bb      	str	r3, [r7, #8]

  if (nMonth < 3U)
 80089f4:	78fb      	ldrb	r3, [r7, #3]
 80089f6:	2b02      	cmp	r3, #2
 80089f8:	d82d      	bhi.n	8008a56 <RTC_WeekDayNum+0x82>
  {
    /*D = { [(23 x month)/9] + day + 4 + year + [(year-1)/4] - [(year-1)/100] + [(year-1)/400] } mod 7*/
    weekday = (((23U * nMonth) / 9U) + nDay + 4U + year + ((year - 1U) / 4U) - ((year - 1U) / 100U) + ((year - 1U) / 400U)) % 7U;
 80089fa:	78fa      	ldrb	r2, [r7, #3]
 80089fc:	4613      	mov	r3, r2
 80089fe:	005b      	lsls	r3, r3, #1
 8008a00:	4413      	add	r3, r2
 8008a02:	00db      	lsls	r3, r3, #3
 8008a04:	1a9b      	subs	r3, r3, r2
 8008a06:	4a2c      	ldr	r2, [pc, #176]	; (8008ab8 <RTC_WeekDayNum+0xe4>)
 8008a08:	fba2 2303 	umull	r2, r3, r2, r3
 8008a0c:	085a      	lsrs	r2, r3, #1
 8008a0e:	78bb      	ldrb	r3, [r7, #2]
 8008a10:	441a      	add	r2, r3
 8008a12:	68bb      	ldr	r3, [r7, #8]
 8008a14:	441a      	add	r2, r3
 8008a16:	68bb      	ldr	r3, [r7, #8]
 8008a18:	3b01      	subs	r3, #1
 8008a1a:	089b      	lsrs	r3, r3, #2
 8008a1c:	441a      	add	r2, r3
 8008a1e:	68bb      	ldr	r3, [r7, #8]
 8008a20:	3b01      	subs	r3, #1
 8008a22:	4926      	ldr	r1, [pc, #152]	; (8008abc <RTC_WeekDayNum+0xe8>)
 8008a24:	fba1 1303 	umull	r1, r3, r1, r3
 8008a28:	095b      	lsrs	r3, r3, #5
 8008a2a:	1ad2      	subs	r2, r2, r3
 8008a2c:	68bb      	ldr	r3, [r7, #8]
 8008a2e:	3b01      	subs	r3, #1
 8008a30:	4922      	ldr	r1, [pc, #136]	; (8008abc <RTC_WeekDayNum+0xe8>)
 8008a32:	fba1 1303 	umull	r1, r3, r1, r3
 8008a36:	09db      	lsrs	r3, r3, #7
 8008a38:	4413      	add	r3, r2
 8008a3a:	1d1a      	adds	r2, r3, #4
 8008a3c:	4b20      	ldr	r3, [pc, #128]	; (8008ac0 <RTC_WeekDayNum+0xec>)
 8008a3e:	fba3 1302 	umull	r1, r3, r3, r2
 8008a42:	1ad1      	subs	r1, r2, r3
 8008a44:	0849      	lsrs	r1, r1, #1
 8008a46:	440b      	add	r3, r1
 8008a48:	0899      	lsrs	r1, r3, #2
 8008a4a:	460b      	mov	r3, r1
 8008a4c:	00db      	lsls	r3, r3, #3
 8008a4e:	1a5b      	subs	r3, r3, r1
 8008a50:	1ad3      	subs	r3, r2, r3
 8008a52:	60fb      	str	r3, [r7, #12]
 8008a54:	e029      	b.n	8008aaa <RTC_WeekDayNum+0xd6>
  }
  else
  {
    /*D = { [(23 x month)/9] + day + 4 + year + [year/4] - [year/100] + [year/400] - 2 } mod 7*/
    weekday = (((23U * nMonth) / 9U) + nDay + 4U + year + (year / 4U) - (year / 100U) + (year / 400U) - 2U) % 7U;
 8008a56:	78fa      	ldrb	r2, [r7, #3]
 8008a58:	4613      	mov	r3, r2
 8008a5a:	005b      	lsls	r3, r3, #1
 8008a5c:	4413      	add	r3, r2
 8008a5e:	00db      	lsls	r3, r3, #3
 8008a60:	1a9b      	subs	r3, r3, r2
 8008a62:	4a15      	ldr	r2, [pc, #84]	; (8008ab8 <RTC_WeekDayNum+0xe4>)
 8008a64:	fba2 2303 	umull	r2, r3, r2, r3
 8008a68:	085a      	lsrs	r2, r3, #1
 8008a6a:	78bb      	ldrb	r3, [r7, #2]
 8008a6c:	441a      	add	r2, r3
 8008a6e:	68bb      	ldr	r3, [r7, #8]
 8008a70:	441a      	add	r2, r3
 8008a72:	68bb      	ldr	r3, [r7, #8]
 8008a74:	089b      	lsrs	r3, r3, #2
 8008a76:	441a      	add	r2, r3
 8008a78:	68bb      	ldr	r3, [r7, #8]
 8008a7a:	4910      	ldr	r1, [pc, #64]	; (8008abc <RTC_WeekDayNum+0xe8>)
 8008a7c:	fba1 1303 	umull	r1, r3, r1, r3
 8008a80:	095b      	lsrs	r3, r3, #5
 8008a82:	1ad2      	subs	r2, r2, r3
 8008a84:	68bb      	ldr	r3, [r7, #8]
 8008a86:	490d      	ldr	r1, [pc, #52]	; (8008abc <RTC_WeekDayNum+0xe8>)
 8008a88:	fba1 1303 	umull	r1, r3, r1, r3
 8008a8c:	09db      	lsrs	r3, r3, #7
 8008a8e:	4413      	add	r3, r2
 8008a90:	1c9a      	adds	r2, r3, #2
 8008a92:	4b0b      	ldr	r3, [pc, #44]	; (8008ac0 <RTC_WeekDayNum+0xec>)
 8008a94:	fba3 1302 	umull	r1, r3, r3, r2
 8008a98:	1ad1      	subs	r1, r2, r3
 8008a9a:	0849      	lsrs	r1, r1, #1
 8008a9c:	440b      	add	r3, r1
 8008a9e:	0899      	lsrs	r1, r3, #2
 8008aa0:	460b      	mov	r3, r1
 8008aa2:	00db      	lsls	r3, r3, #3
 8008aa4:	1a5b      	subs	r3, r3, r1
 8008aa6:	1ad3      	subs	r3, r2, r3
 8008aa8:	60fb      	str	r3, [r7, #12]
  }

  return (uint8_t)weekday;
 8008aaa:	68fb      	ldr	r3, [r7, #12]
 8008aac:	b2db      	uxtb	r3, r3
}
 8008aae:	4618      	mov	r0, r3
 8008ab0:	3714      	adds	r7, #20
 8008ab2:	46bd      	mov	sp, r7
 8008ab4:	bc80      	pop	{r7}
 8008ab6:	4770      	bx	lr
 8008ab8:	38e38e39 	.word	0x38e38e39
 8008abc:	51eb851f 	.word	0x51eb851f
 8008ac0:	24924925 	.word	0x24924925

08008ac4 <HAL_RTCEx_RTCIRQHandler>:
  * @param  hrtc: pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
void HAL_RTCEx_RTCIRQHandler(RTC_HandleTypeDef *hrtc)
{
 8008ac4:	b580      	push	{r7, lr}
 8008ac6:	b082      	sub	sp, #8
 8008ac8:	af00      	add	r7, sp, #0
 8008aca:	6078      	str	r0, [r7, #4]
  if (__HAL_RTC_SECOND_GET_IT_SOURCE(hrtc, RTC_IT_SEC))
 8008acc:	687b      	ldr	r3, [r7, #4]
 8008ace:	681b      	ldr	r3, [r3, #0]
 8008ad0:	681b      	ldr	r3, [r3, #0]
 8008ad2:	f003 0301 	and.w	r3, r3, #1
 8008ad6:	2b00      	cmp	r3, #0
 8008ad8:	d027      	beq.n	8008b2a <HAL_RTCEx_RTCIRQHandler+0x66>
  {
    /* Get the status of the Interrupt */
    if (__HAL_RTC_SECOND_GET_FLAG(hrtc, RTC_FLAG_SEC))
 8008ada:	687b      	ldr	r3, [r7, #4]
 8008adc:	681b      	ldr	r3, [r3, #0]
 8008ade:	685b      	ldr	r3, [r3, #4]
 8008ae0:	f003 0301 	and.w	r3, r3, #1
 8008ae4:	2b00      	cmp	r3, #0
 8008ae6:	d020      	beq.n	8008b2a <HAL_RTCEx_RTCIRQHandler+0x66>
    {
      /* Check if Overrun occurred */
      if (__HAL_RTC_SECOND_GET_FLAG(hrtc, RTC_FLAG_OW))
 8008ae8:	687b      	ldr	r3, [r7, #4]
 8008aea:	681b      	ldr	r3, [r3, #0]
 8008aec:	685b      	ldr	r3, [r3, #4]
 8008aee:	f003 0304 	and.w	r3, r3, #4
 8008af2:	2b00      	cmp	r3, #0
 8008af4:	d00b      	beq.n	8008b0e <HAL_RTCEx_RTCIRQHandler+0x4a>
      {
        /* Second error callback */
        HAL_RTCEx_RTCEventErrorCallback(hrtc);
 8008af6:	6878      	ldr	r0, [r7, #4]
 8008af8:	f000 f824 	bl	8008b44 <HAL_RTCEx_RTCEventErrorCallback>

        /* Clear flag Second */
        __HAL_RTC_OVERFLOW_CLEAR_FLAG(hrtc, RTC_FLAG_OW);
 8008afc:	687b      	ldr	r3, [r7, #4]
 8008afe:	681b      	ldr	r3, [r3, #0]
 8008b00:	f06f 0204 	mvn.w	r2, #4
 8008b04:	605a      	str	r2, [r3, #4]

        /* Change RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 8008b06:	687b      	ldr	r3, [r7, #4]
 8008b08:	2204      	movs	r2, #4
 8008b0a:	745a      	strb	r2, [r3, #17]
 8008b0c:	e005      	b.n	8008b1a <HAL_RTCEx_RTCIRQHandler+0x56>
      }
      else
      {
        /* Second callback */
        HAL_RTCEx_RTCEventCallback(hrtc);
 8008b0e:	6878      	ldr	r0, [r7, #4]
 8008b10:	f000 f80f 	bl	8008b32 <HAL_RTCEx_RTCEventCallback>

        /* Change RTC state */
        hrtc->State = HAL_RTC_STATE_READY;
 8008b14:	687b      	ldr	r3, [r7, #4]
 8008b16:	2201      	movs	r2, #1
 8008b18:	745a      	strb	r2, [r3, #17]
      }

      /* Clear flag Second */
      __HAL_RTC_SECOND_CLEAR_FLAG(hrtc, RTC_FLAG_SEC);
 8008b1a:	687b      	ldr	r3, [r7, #4]
 8008b1c:	681b      	ldr	r3, [r3, #0]
 8008b1e:	685a      	ldr	r2, [r3, #4]
 8008b20:	687b      	ldr	r3, [r7, #4]
 8008b22:	681b      	ldr	r3, [r3, #0]
 8008b24:	f022 0201 	bic.w	r2, r2, #1
 8008b28:	605a      	str	r2, [r3, #4]
    }
  }
}
 8008b2a:	bf00      	nop
 8008b2c:	3708      	adds	r7, #8
 8008b2e:	46bd      	mov	sp, r7
 8008b30:	bd80      	pop	{r7, pc}

08008b32 <HAL_RTCEx_RTCEventCallback>:
  * @param  hrtc: pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
__weak void HAL_RTCEx_RTCEventCallback(RTC_HandleTypeDef *hrtc)
{
 8008b32:	b480      	push	{r7}
 8008b34:	b083      	sub	sp, #12
 8008b36:	af00      	add	r7, sp, #0
 8008b38:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hrtc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_RTCEx_RTCEventCallback could be implemented in the user file
   */
}
 8008b3a:	bf00      	nop
 8008b3c:	370c      	adds	r7, #12
 8008b3e:	46bd      	mov	sp, r7
 8008b40:	bc80      	pop	{r7}
 8008b42:	4770      	bx	lr

08008b44 <HAL_RTCEx_RTCEventErrorCallback>:
  * @param  hrtc: pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
__weak void HAL_RTCEx_RTCEventErrorCallback(RTC_HandleTypeDef *hrtc)
{
 8008b44:	b480      	push	{r7}
 8008b46:	b083      	sub	sp, #12
 8008b48:	af00      	add	r7, sp, #0
 8008b4a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hrtc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_RTCEx_RTCEventErrorCallback could be implemented in the user file
   */
}
 8008b4c:	bf00      	nop
 8008b4e:	370c      	adds	r7, #12
 8008b50:	46bd      	mov	sp, r7
 8008b52:	bc80      	pop	{r7}
 8008b54:	4770      	bx	lr
	...

08008b58 <HAL_RTCEx_BKUPWrite>:
  *                                 specify the register (depending devices).
  * @param  Data: Data to be written in the specified RTC Backup data register.
  * @retval None
  */
void HAL_RTCEx_BKUPWrite(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister, uint32_t Data)
{
 8008b58:	b480      	push	{r7}
 8008b5a:	b087      	sub	sp, #28
 8008b5c:	af00      	add	r7, sp, #0
 8008b5e:	60f8      	str	r0, [r7, #12]
 8008b60:	60b9      	str	r1, [r7, #8]
 8008b62:	607a      	str	r2, [r7, #4]
  uint32_t tmp = 0U;
 8008b64:	2300      	movs	r3, #0
 8008b66:	617b      	str	r3, [r7, #20]
  UNUSED(hrtc);

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t)BKP_BASE;
 8008b68:	4b07      	ldr	r3, [pc, #28]	; (8008b88 <HAL_RTCEx_BKUPWrite+0x30>)
 8008b6a:	617b      	str	r3, [r7, #20]
  tmp += (BackupRegister * 4U);
 8008b6c:	68bb      	ldr	r3, [r7, #8]
 8008b6e:	009b      	lsls	r3, r3, #2
 8008b70:	697a      	ldr	r2, [r7, #20]
 8008b72:	4413      	add	r3, r2
 8008b74:	617b      	str	r3, [r7, #20]

  *(__IO uint32_t *) tmp = (Data & BKP_DR1_D);
 8008b76:	697b      	ldr	r3, [r7, #20]
 8008b78:	687a      	ldr	r2, [r7, #4]
 8008b7a:	b292      	uxth	r2, r2
 8008b7c:	601a      	str	r2, [r3, #0]
}
 8008b7e:	bf00      	nop
 8008b80:	371c      	adds	r7, #28
 8008b82:	46bd      	mov	sp, r7
 8008b84:	bc80      	pop	{r7}
 8008b86:	4770      	bx	lr
 8008b88:	40006c00 	.word	0x40006c00

08008b8c <HAL_RTCEx_BKUPRead>:
  *          This parameter can be: RTC_BKP_DRx where x can be from 1 to 10 (or 42) to
  *                                 specify the register (depending devices).
  * @retval Read value
  */
uint32_t HAL_RTCEx_BKUPRead(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister)
{
 8008b8c:	b480      	push	{r7}
 8008b8e:	b085      	sub	sp, #20
 8008b90:	af00      	add	r7, sp, #0
 8008b92:	6078      	str	r0, [r7, #4]
 8008b94:	6039      	str	r1, [r7, #0]
  uint32_t backupregister = 0U;
 8008b96:	2300      	movs	r3, #0
 8008b98:	60fb      	str	r3, [r7, #12]
  uint32_t pvalue = 0U;
 8008b9a:	2300      	movs	r3, #0
 8008b9c:	60bb      	str	r3, [r7, #8]
  UNUSED(hrtc);

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  backupregister = (uint32_t)BKP_BASE;
 8008b9e:	4b08      	ldr	r3, [pc, #32]	; (8008bc0 <HAL_RTCEx_BKUPRead+0x34>)
 8008ba0:	60fb      	str	r3, [r7, #12]
  backupregister += (BackupRegister * 4U);
 8008ba2:	683b      	ldr	r3, [r7, #0]
 8008ba4:	009b      	lsls	r3, r3, #2
 8008ba6:	68fa      	ldr	r2, [r7, #12]
 8008ba8:	4413      	add	r3, r2
 8008baa:	60fb      	str	r3, [r7, #12]

  pvalue = (*(__IO uint32_t *)(backupregister)) & BKP_DR1_D;
 8008bac:	68fb      	ldr	r3, [r7, #12]
 8008bae:	681b      	ldr	r3, [r3, #0]
 8008bb0:	b29b      	uxth	r3, r3
 8008bb2:	60bb      	str	r3, [r7, #8]

  /* Read the specified register */
  return pvalue;
 8008bb4:	68bb      	ldr	r3, [r7, #8]
}
 8008bb6:	4618      	mov	r0, r3
 8008bb8:	3714      	adds	r7, #20
 8008bba:	46bd      	mov	sp, r7
 8008bbc:	bc80      	pop	{r7}
 8008bbe:	4770      	bx	lr
 8008bc0:	40006c00 	.word	0x40006c00

08008bc4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008bc4:	b580      	push	{r7, lr}
 8008bc6:	b082      	sub	sp, #8
 8008bc8:	af00      	add	r7, sp, #0
 8008bca:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008bcc:	687b      	ldr	r3, [r7, #4]
 8008bce:	2b00      	cmp	r3, #0
 8008bd0:	d101      	bne.n	8008bd6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8008bd2:	2301      	movs	r3, #1
 8008bd4:	e041      	b.n	8008c5a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008bd6:	687b      	ldr	r3, [r7, #4]
 8008bd8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008bdc:	b2db      	uxtb	r3, r3
 8008bde:	2b00      	cmp	r3, #0
 8008be0:	d106      	bne.n	8008bf0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008be2:	687b      	ldr	r3, [r7, #4]
 8008be4:	2200      	movs	r2, #0
 8008be6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8008bea:	6878      	ldr	r0, [r7, #4]
 8008bec:	f7fd fd46 	bl	800667c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008bf0:	687b      	ldr	r3, [r7, #4]
 8008bf2:	2202      	movs	r2, #2
 8008bf4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008bf8:	687b      	ldr	r3, [r7, #4]
 8008bfa:	681a      	ldr	r2, [r3, #0]
 8008bfc:	687b      	ldr	r3, [r7, #4]
 8008bfe:	3304      	adds	r3, #4
 8008c00:	4619      	mov	r1, r3
 8008c02:	4610      	mov	r0, r2
 8008c04:	f000 fa8a 	bl	800911c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008c08:	687b      	ldr	r3, [r7, #4]
 8008c0a:	2201      	movs	r2, #1
 8008c0c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008c10:	687b      	ldr	r3, [r7, #4]
 8008c12:	2201      	movs	r2, #1
 8008c14:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008c18:	687b      	ldr	r3, [r7, #4]
 8008c1a:	2201      	movs	r2, #1
 8008c1c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008c20:	687b      	ldr	r3, [r7, #4]
 8008c22:	2201      	movs	r2, #1
 8008c24:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008c28:	687b      	ldr	r3, [r7, #4]
 8008c2a:	2201      	movs	r2, #1
 8008c2c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008c30:	687b      	ldr	r3, [r7, #4]
 8008c32:	2201      	movs	r2, #1
 8008c34:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008c38:	687b      	ldr	r3, [r7, #4]
 8008c3a:	2201      	movs	r2, #1
 8008c3c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8008c40:	687b      	ldr	r3, [r7, #4]
 8008c42:	2201      	movs	r2, #1
 8008c44:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008c48:	687b      	ldr	r3, [r7, #4]
 8008c4a:	2201      	movs	r2, #1
 8008c4c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008c50:	687b      	ldr	r3, [r7, #4]
 8008c52:	2201      	movs	r2, #1
 8008c54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008c58:	2300      	movs	r3, #0
}
 8008c5a:	4618      	mov	r0, r3
 8008c5c:	3708      	adds	r7, #8
 8008c5e:	46bd      	mov	sp, r7
 8008c60:	bd80      	pop	{r7, pc}
	...

08008c64 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8008c64:	b480      	push	{r7}
 8008c66:	b085      	sub	sp, #20
 8008c68:	af00      	add	r7, sp, #0
 8008c6a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8008c6c:	687b      	ldr	r3, [r7, #4]
 8008c6e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008c72:	b2db      	uxtb	r3, r3
 8008c74:	2b01      	cmp	r3, #1
 8008c76:	d001      	beq.n	8008c7c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8008c78:	2301      	movs	r3, #1
 8008c7a:	e044      	b.n	8008d06 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008c7c:	687b      	ldr	r3, [r7, #4]
 8008c7e:	2202      	movs	r2, #2
 8008c80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8008c84:	687b      	ldr	r3, [r7, #4]
 8008c86:	681b      	ldr	r3, [r3, #0]
 8008c88:	68da      	ldr	r2, [r3, #12]
 8008c8a:	687b      	ldr	r3, [r7, #4]
 8008c8c:	681b      	ldr	r3, [r3, #0]
 8008c8e:	f042 0201 	orr.w	r2, r2, #1
 8008c92:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008c94:	687b      	ldr	r3, [r7, #4]
 8008c96:	681b      	ldr	r3, [r3, #0]
 8008c98:	4a1d      	ldr	r2, [pc, #116]	; (8008d10 <HAL_TIM_Base_Start_IT+0xac>)
 8008c9a:	4293      	cmp	r3, r2
 8008c9c:	d018      	beq.n	8008cd0 <HAL_TIM_Base_Start_IT+0x6c>
 8008c9e:	687b      	ldr	r3, [r7, #4]
 8008ca0:	681b      	ldr	r3, [r3, #0]
 8008ca2:	4a1c      	ldr	r2, [pc, #112]	; (8008d14 <HAL_TIM_Base_Start_IT+0xb0>)
 8008ca4:	4293      	cmp	r3, r2
 8008ca6:	d013      	beq.n	8008cd0 <HAL_TIM_Base_Start_IT+0x6c>
 8008ca8:	687b      	ldr	r3, [r7, #4]
 8008caa:	681b      	ldr	r3, [r3, #0]
 8008cac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008cb0:	d00e      	beq.n	8008cd0 <HAL_TIM_Base_Start_IT+0x6c>
 8008cb2:	687b      	ldr	r3, [r7, #4]
 8008cb4:	681b      	ldr	r3, [r3, #0]
 8008cb6:	4a18      	ldr	r2, [pc, #96]	; (8008d18 <HAL_TIM_Base_Start_IT+0xb4>)
 8008cb8:	4293      	cmp	r3, r2
 8008cba:	d009      	beq.n	8008cd0 <HAL_TIM_Base_Start_IT+0x6c>
 8008cbc:	687b      	ldr	r3, [r7, #4]
 8008cbe:	681b      	ldr	r3, [r3, #0]
 8008cc0:	4a16      	ldr	r2, [pc, #88]	; (8008d1c <HAL_TIM_Base_Start_IT+0xb8>)
 8008cc2:	4293      	cmp	r3, r2
 8008cc4:	d004      	beq.n	8008cd0 <HAL_TIM_Base_Start_IT+0x6c>
 8008cc6:	687b      	ldr	r3, [r7, #4]
 8008cc8:	681b      	ldr	r3, [r3, #0]
 8008cca:	4a15      	ldr	r2, [pc, #84]	; (8008d20 <HAL_TIM_Base_Start_IT+0xbc>)
 8008ccc:	4293      	cmp	r3, r2
 8008cce:	d111      	bne.n	8008cf4 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008cd0:	687b      	ldr	r3, [r7, #4]
 8008cd2:	681b      	ldr	r3, [r3, #0]
 8008cd4:	689b      	ldr	r3, [r3, #8]
 8008cd6:	f003 0307 	and.w	r3, r3, #7
 8008cda:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008cdc:	68fb      	ldr	r3, [r7, #12]
 8008cde:	2b06      	cmp	r3, #6
 8008ce0:	d010      	beq.n	8008d04 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8008ce2:	687b      	ldr	r3, [r7, #4]
 8008ce4:	681b      	ldr	r3, [r3, #0]
 8008ce6:	681a      	ldr	r2, [r3, #0]
 8008ce8:	687b      	ldr	r3, [r7, #4]
 8008cea:	681b      	ldr	r3, [r3, #0]
 8008cec:	f042 0201 	orr.w	r2, r2, #1
 8008cf0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008cf2:	e007      	b.n	8008d04 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008cf4:	687b      	ldr	r3, [r7, #4]
 8008cf6:	681b      	ldr	r3, [r3, #0]
 8008cf8:	681a      	ldr	r2, [r3, #0]
 8008cfa:	687b      	ldr	r3, [r7, #4]
 8008cfc:	681b      	ldr	r3, [r3, #0]
 8008cfe:	f042 0201 	orr.w	r2, r2, #1
 8008d02:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8008d04:	2300      	movs	r3, #0
}
 8008d06:	4618      	mov	r0, r3
 8008d08:	3714      	adds	r7, #20
 8008d0a:	46bd      	mov	sp, r7
 8008d0c:	bc80      	pop	{r7}
 8008d0e:	4770      	bx	lr
 8008d10:	40012c00 	.word	0x40012c00
 8008d14:	40013400 	.word	0x40013400
 8008d18:	40000400 	.word	0x40000400
 8008d1c:	40000800 	.word	0x40000800
 8008d20:	40000c00 	.word	0x40000c00

08008d24 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8008d24:	b580      	push	{r7, lr}
 8008d26:	b082      	sub	sp, #8
 8008d28:	af00      	add	r7, sp, #0
 8008d2a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8008d2c:	687b      	ldr	r3, [r7, #4]
 8008d2e:	681b      	ldr	r3, [r3, #0]
 8008d30:	691b      	ldr	r3, [r3, #16]
 8008d32:	f003 0302 	and.w	r3, r3, #2
 8008d36:	2b02      	cmp	r3, #2
 8008d38:	d122      	bne.n	8008d80 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8008d3a:	687b      	ldr	r3, [r7, #4]
 8008d3c:	681b      	ldr	r3, [r3, #0]
 8008d3e:	68db      	ldr	r3, [r3, #12]
 8008d40:	f003 0302 	and.w	r3, r3, #2
 8008d44:	2b02      	cmp	r3, #2
 8008d46:	d11b      	bne.n	8008d80 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8008d48:	687b      	ldr	r3, [r7, #4]
 8008d4a:	681b      	ldr	r3, [r3, #0]
 8008d4c:	f06f 0202 	mvn.w	r2, #2
 8008d50:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008d52:	687b      	ldr	r3, [r7, #4]
 8008d54:	2201      	movs	r2, #1
 8008d56:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8008d58:	687b      	ldr	r3, [r7, #4]
 8008d5a:	681b      	ldr	r3, [r3, #0]
 8008d5c:	699b      	ldr	r3, [r3, #24]
 8008d5e:	f003 0303 	and.w	r3, r3, #3
 8008d62:	2b00      	cmp	r3, #0
 8008d64:	d003      	beq.n	8008d6e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8008d66:	6878      	ldr	r0, [r7, #4]
 8008d68:	f000 f9bd 	bl	80090e6 <HAL_TIM_IC_CaptureCallback>
 8008d6c:	e005      	b.n	8008d7a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8008d6e:	6878      	ldr	r0, [r7, #4]
 8008d70:	f000 f9b0 	bl	80090d4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008d74:	6878      	ldr	r0, [r7, #4]
 8008d76:	f000 f9bf 	bl	80090f8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008d7a:	687b      	ldr	r3, [r7, #4]
 8008d7c:	2200      	movs	r2, #0
 8008d7e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8008d80:	687b      	ldr	r3, [r7, #4]
 8008d82:	681b      	ldr	r3, [r3, #0]
 8008d84:	691b      	ldr	r3, [r3, #16]
 8008d86:	f003 0304 	and.w	r3, r3, #4
 8008d8a:	2b04      	cmp	r3, #4
 8008d8c:	d122      	bne.n	8008dd4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8008d8e:	687b      	ldr	r3, [r7, #4]
 8008d90:	681b      	ldr	r3, [r3, #0]
 8008d92:	68db      	ldr	r3, [r3, #12]
 8008d94:	f003 0304 	and.w	r3, r3, #4
 8008d98:	2b04      	cmp	r3, #4
 8008d9a:	d11b      	bne.n	8008dd4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8008d9c:	687b      	ldr	r3, [r7, #4]
 8008d9e:	681b      	ldr	r3, [r3, #0]
 8008da0:	f06f 0204 	mvn.w	r2, #4
 8008da4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008da6:	687b      	ldr	r3, [r7, #4]
 8008da8:	2202      	movs	r2, #2
 8008daa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8008dac:	687b      	ldr	r3, [r7, #4]
 8008dae:	681b      	ldr	r3, [r3, #0]
 8008db0:	699b      	ldr	r3, [r3, #24]
 8008db2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008db6:	2b00      	cmp	r3, #0
 8008db8:	d003      	beq.n	8008dc2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008dba:	6878      	ldr	r0, [r7, #4]
 8008dbc:	f000 f993 	bl	80090e6 <HAL_TIM_IC_CaptureCallback>
 8008dc0:	e005      	b.n	8008dce <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008dc2:	6878      	ldr	r0, [r7, #4]
 8008dc4:	f000 f986 	bl	80090d4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008dc8:	6878      	ldr	r0, [r7, #4]
 8008dca:	f000 f995 	bl	80090f8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008dce:	687b      	ldr	r3, [r7, #4]
 8008dd0:	2200      	movs	r2, #0
 8008dd2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8008dd4:	687b      	ldr	r3, [r7, #4]
 8008dd6:	681b      	ldr	r3, [r3, #0]
 8008dd8:	691b      	ldr	r3, [r3, #16]
 8008dda:	f003 0308 	and.w	r3, r3, #8
 8008dde:	2b08      	cmp	r3, #8
 8008de0:	d122      	bne.n	8008e28 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8008de2:	687b      	ldr	r3, [r7, #4]
 8008de4:	681b      	ldr	r3, [r3, #0]
 8008de6:	68db      	ldr	r3, [r3, #12]
 8008de8:	f003 0308 	and.w	r3, r3, #8
 8008dec:	2b08      	cmp	r3, #8
 8008dee:	d11b      	bne.n	8008e28 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8008df0:	687b      	ldr	r3, [r7, #4]
 8008df2:	681b      	ldr	r3, [r3, #0]
 8008df4:	f06f 0208 	mvn.w	r2, #8
 8008df8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008dfa:	687b      	ldr	r3, [r7, #4]
 8008dfc:	2204      	movs	r2, #4
 8008dfe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8008e00:	687b      	ldr	r3, [r7, #4]
 8008e02:	681b      	ldr	r3, [r3, #0]
 8008e04:	69db      	ldr	r3, [r3, #28]
 8008e06:	f003 0303 	and.w	r3, r3, #3
 8008e0a:	2b00      	cmp	r3, #0
 8008e0c:	d003      	beq.n	8008e16 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008e0e:	6878      	ldr	r0, [r7, #4]
 8008e10:	f000 f969 	bl	80090e6 <HAL_TIM_IC_CaptureCallback>
 8008e14:	e005      	b.n	8008e22 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008e16:	6878      	ldr	r0, [r7, #4]
 8008e18:	f000 f95c 	bl	80090d4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008e1c:	6878      	ldr	r0, [r7, #4]
 8008e1e:	f000 f96b 	bl	80090f8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008e22:	687b      	ldr	r3, [r7, #4]
 8008e24:	2200      	movs	r2, #0
 8008e26:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8008e28:	687b      	ldr	r3, [r7, #4]
 8008e2a:	681b      	ldr	r3, [r3, #0]
 8008e2c:	691b      	ldr	r3, [r3, #16]
 8008e2e:	f003 0310 	and.w	r3, r3, #16
 8008e32:	2b10      	cmp	r3, #16
 8008e34:	d122      	bne.n	8008e7c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8008e36:	687b      	ldr	r3, [r7, #4]
 8008e38:	681b      	ldr	r3, [r3, #0]
 8008e3a:	68db      	ldr	r3, [r3, #12]
 8008e3c:	f003 0310 	and.w	r3, r3, #16
 8008e40:	2b10      	cmp	r3, #16
 8008e42:	d11b      	bne.n	8008e7c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8008e44:	687b      	ldr	r3, [r7, #4]
 8008e46:	681b      	ldr	r3, [r3, #0]
 8008e48:	f06f 0210 	mvn.w	r2, #16
 8008e4c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008e4e:	687b      	ldr	r3, [r7, #4]
 8008e50:	2208      	movs	r2, #8
 8008e52:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8008e54:	687b      	ldr	r3, [r7, #4]
 8008e56:	681b      	ldr	r3, [r3, #0]
 8008e58:	69db      	ldr	r3, [r3, #28]
 8008e5a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008e5e:	2b00      	cmp	r3, #0
 8008e60:	d003      	beq.n	8008e6a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008e62:	6878      	ldr	r0, [r7, #4]
 8008e64:	f000 f93f 	bl	80090e6 <HAL_TIM_IC_CaptureCallback>
 8008e68:	e005      	b.n	8008e76 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008e6a:	6878      	ldr	r0, [r7, #4]
 8008e6c:	f000 f932 	bl	80090d4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008e70:	6878      	ldr	r0, [r7, #4]
 8008e72:	f000 f941 	bl	80090f8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008e76:	687b      	ldr	r3, [r7, #4]
 8008e78:	2200      	movs	r2, #0
 8008e7a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8008e7c:	687b      	ldr	r3, [r7, #4]
 8008e7e:	681b      	ldr	r3, [r3, #0]
 8008e80:	691b      	ldr	r3, [r3, #16]
 8008e82:	f003 0301 	and.w	r3, r3, #1
 8008e86:	2b01      	cmp	r3, #1
 8008e88:	d10e      	bne.n	8008ea8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8008e8a:	687b      	ldr	r3, [r7, #4]
 8008e8c:	681b      	ldr	r3, [r3, #0]
 8008e8e:	68db      	ldr	r3, [r3, #12]
 8008e90:	f003 0301 	and.w	r3, r3, #1
 8008e94:	2b01      	cmp	r3, #1
 8008e96:	d107      	bne.n	8008ea8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8008e98:	687b      	ldr	r3, [r7, #4]
 8008e9a:	681b      	ldr	r3, [r3, #0]
 8008e9c:	f06f 0201 	mvn.w	r2, #1
 8008ea0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8008ea2:	6878      	ldr	r0, [r7, #4]
 8008ea4:	f000 f90d 	bl	80090c2 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8008ea8:	687b      	ldr	r3, [r7, #4]
 8008eaa:	681b      	ldr	r3, [r3, #0]
 8008eac:	691b      	ldr	r3, [r3, #16]
 8008eae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008eb2:	2b80      	cmp	r3, #128	; 0x80
 8008eb4:	d10e      	bne.n	8008ed4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8008eb6:	687b      	ldr	r3, [r7, #4]
 8008eb8:	681b      	ldr	r3, [r3, #0]
 8008eba:	68db      	ldr	r3, [r3, #12]
 8008ebc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008ec0:	2b80      	cmp	r3, #128	; 0x80
 8008ec2:	d107      	bne.n	8008ed4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8008ec4:	687b      	ldr	r3, [r7, #4]
 8008ec6:	681b      	ldr	r3, [r3, #0]
 8008ec8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8008ecc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8008ece:	6878      	ldr	r0, [r7, #4]
 8008ed0:	f000 faa9 	bl	8009426 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8008ed4:	687b      	ldr	r3, [r7, #4]
 8008ed6:	681b      	ldr	r3, [r3, #0]
 8008ed8:	691b      	ldr	r3, [r3, #16]
 8008eda:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008ede:	2b40      	cmp	r3, #64	; 0x40
 8008ee0:	d10e      	bne.n	8008f00 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8008ee2:	687b      	ldr	r3, [r7, #4]
 8008ee4:	681b      	ldr	r3, [r3, #0]
 8008ee6:	68db      	ldr	r3, [r3, #12]
 8008ee8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008eec:	2b40      	cmp	r3, #64	; 0x40
 8008eee:	d107      	bne.n	8008f00 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8008ef0:	687b      	ldr	r3, [r7, #4]
 8008ef2:	681b      	ldr	r3, [r3, #0]
 8008ef4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8008ef8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8008efa:	6878      	ldr	r0, [r7, #4]
 8008efc:	f000 f905 	bl	800910a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8008f00:	687b      	ldr	r3, [r7, #4]
 8008f02:	681b      	ldr	r3, [r3, #0]
 8008f04:	691b      	ldr	r3, [r3, #16]
 8008f06:	f003 0320 	and.w	r3, r3, #32
 8008f0a:	2b20      	cmp	r3, #32
 8008f0c:	d10e      	bne.n	8008f2c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8008f0e:	687b      	ldr	r3, [r7, #4]
 8008f10:	681b      	ldr	r3, [r3, #0]
 8008f12:	68db      	ldr	r3, [r3, #12]
 8008f14:	f003 0320 	and.w	r3, r3, #32
 8008f18:	2b20      	cmp	r3, #32
 8008f1a:	d107      	bne.n	8008f2c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8008f1c:	687b      	ldr	r3, [r7, #4]
 8008f1e:	681b      	ldr	r3, [r3, #0]
 8008f20:	f06f 0220 	mvn.w	r2, #32
 8008f24:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8008f26:	6878      	ldr	r0, [r7, #4]
 8008f28:	f000 fa74 	bl	8009414 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8008f2c:	bf00      	nop
 8008f2e:	3708      	adds	r7, #8
 8008f30:	46bd      	mov	sp, r7
 8008f32:	bd80      	pop	{r7, pc}

08008f34 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8008f34:	b580      	push	{r7, lr}
 8008f36:	b084      	sub	sp, #16
 8008f38:	af00      	add	r7, sp, #0
 8008f3a:	6078      	str	r0, [r7, #4]
 8008f3c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8008f3e:	2300      	movs	r3, #0
 8008f40:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8008f42:	687b      	ldr	r3, [r7, #4]
 8008f44:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008f48:	2b01      	cmp	r3, #1
 8008f4a:	d101      	bne.n	8008f50 <HAL_TIM_ConfigClockSource+0x1c>
 8008f4c:	2302      	movs	r3, #2
 8008f4e:	e0b4      	b.n	80090ba <HAL_TIM_ConfigClockSource+0x186>
 8008f50:	687b      	ldr	r3, [r7, #4]
 8008f52:	2201      	movs	r2, #1
 8008f54:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8008f58:	687b      	ldr	r3, [r7, #4]
 8008f5a:	2202      	movs	r2, #2
 8008f5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8008f60:	687b      	ldr	r3, [r7, #4]
 8008f62:	681b      	ldr	r3, [r3, #0]
 8008f64:	689b      	ldr	r3, [r3, #8]
 8008f66:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8008f68:	68bb      	ldr	r3, [r7, #8]
 8008f6a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8008f6e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008f70:	68bb      	ldr	r3, [r7, #8]
 8008f72:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008f76:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8008f78:	687b      	ldr	r3, [r7, #4]
 8008f7a:	681b      	ldr	r3, [r3, #0]
 8008f7c:	68ba      	ldr	r2, [r7, #8]
 8008f7e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8008f80:	683b      	ldr	r3, [r7, #0]
 8008f82:	681b      	ldr	r3, [r3, #0]
 8008f84:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008f88:	d03e      	beq.n	8009008 <HAL_TIM_ConfigClockSource+0xd4>
 8008f8a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008f8e:	f200 8087 	bhi.w	80090a0 <HAL_TIM_ConfigClockSource+0x16c>
 8008f92:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008f96:	f000 8086 	beq.w	80090a6 <HAL_TIM_ConfigClockSource+0x172>
 8008f9a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008f9e:	d87f      	bhi.n	80090a0 <HAL_TIM_ConfigClockSource+0x16c>
 8008fa0:	2b70      	cmp	r3, #112	; 0x70
 8008fa2:	d01a      	beq.n	8008fda <HAL_TIM_ConfigClockSource+0xa6>
 8008fa4:	2b70      	cmp	r3, #112	; 0x70
 8008fa6:	d87b      	bhi.n	80090a0 <HAL_TIM_ConfigClockSource+0x16c>
 8008fa8:	2b60      	cmp	r3, #96	; 0x60
 8008faa:	d050      	beq.n	800904e <HAL_TIM_ConfigClockSource+0x11a>
 8008fac:	2b60      	cmp	r3, #96	; 0x60
 8008fae:	d877      	bhi.n	80090a0 <HAL_TIM_ConfigClockSource+0x16c>
 8008fb0:	2b50      	cmp	r3, #80	; 0x50
 8008fb2:	d03c      	beq.n	800902e <HAL_TIM_ConfigClockSource+0xfa>
 8008fb4:	2b50      	cmp	r3, #80	; 0x50
 8008fb6:	d873      	bhi.n	80090a0 <HAL_TIM_ConfigClockSource+0x16c>
 8008fb8:	2b40      	cmp	r3, #64	; 0x40
 8008fba:	d058      	beq.n	800906e <HAL_TIM_ConfigClockSource+0x13a>
 8008fbc:	2b40      	cmp	r3, #64	; 0x40
 8008fbe:	d86f      	bhi.n	80090a0 <HAL_TIM_ConfigClockSource+0x16c>
 8008fc0:	2b30      	cmp	r3, #48	; 0x30
 8008fc2:	d064      	beq.n	800908e <HAL_TIM_ConfigClockSource+0x15a>
 8008fc4:	2b30      	cmp	r3, #48	; 0x30
 8008fc6:	d86b      	bhi.n	80090a0 <HAL_TIM_ConfigClockSource+0x16c>
 8008fc8:	2b20      	cmp	r3, #32
 8008fca:	d060      	beq.n	800908e <HAL_TIM_ConfigClockSource+0x15a>
 8008fcc:	2b20      	cmp	r3, #32
 8008fce:	d867      	bhi.n	80090a0 <HAL_TIM_ConfigClockSource+0x16c>
 8008fd0:	2b00      	cmp	r3, #0
 8008fd2:	d05c      	beq.n	800908e <HAL_TIM_ConfigClockSource+0x15a>
 8008fd4:	2b10      	cmp	r3, #16
 8008fd6:	d05a      	beq.n	800908e <HAL_TIM_ConfigClockSource+0x15a>
 8008fd8:	e062      	b.n	80090a0 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008fda:	687b      	ldr	r3, [r7, #4]
 8008fdc:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8008fde:	683b      	ldr	r3, [r7, #0]
 8008fe0:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8008fe2:	683b      	ldr	r3, [r7, #0]
 8008fe4:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8008fe6:	683b      	ldr	r3, [r7, #0]
 8008fe8:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8008fea:	f000 f988 	bl	80092fe <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8008fee:	687b      	ldr	r3, [r7, #4]
 8008ff0:	681b      	ldr	r3, [r3, #0]
 8008ff2:	689b      	ldr	r3, [r3, #8]
 8008ff4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8008ff6:	68bb      	ldr	r3, [r7, #8]
 8008ff8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8008ffc:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8008ffe:	687b      	ldr	r3, [r7, #4]
 8009000:	681b      	ldr	r3, [r3, #0]
 8009002:	68ba      	ldr	r2, [r7, #8]
 8009004:	609a      	str	r2, [r3, #8]
      break;
 8009006:	e04f      	b.n	80090a8 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8009008:	687b      	ldr	r3, [r7, #4]
 800900a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800900c:	683b      	ldr	r3, [r7, #0]
 800900e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8009010:	683b      	ldr	r3, [r7, #0]
 8009012:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8009014:	683b      	ldr	r3, [r7, #0]
 8009016:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8009018:	f000 f971 	bl	80092fe <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800901c:	687b      	ldr	r3, [r7, #4]
 800901e:	681b      	ldr	r3, [r3, #0]
 8009020:	689a      	ldr	r2, [r3, #8]
 8009022:	687b      	ldr	r3, [r7, #4]
 8009024:	681b      	ldr	r3, [r3, #0]
 8009026:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800902a:	609a      	str	r2, [r3, #8]
      break;
 800902c:	e03c      	b.n	80090a8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800902e:	687b      	ldr	r3, [r7, #4]
 8009030:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8009032:	683b      	ldr	r3, [r7, #0]
 8009034:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8009036:	683b      	ldr	r3, [r7, #0]
 8009038:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800903a:	461a      	mov	r2, r3
 800903c:	f000 f8e8 	bl	8009210 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8009040:	687b      	ldr	r3, [r7, #4]
 8009042:	681b      	ldr	r3, [r3, #0]
 8009044:	2150      	movs	r1, #80	; 0x50
 8009046:	4618      	mov	r0, r3
 8009048:	f000 f93f 	bl	80092ca <TIM_ITRx_SetConfig>
      break;
 800904c:	e02c      	b.n	80090a8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800904e:	687b      	ldr	r3, [r7, #4]
 8009050:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8009052:	683b      	ldr	r3, [r7, #0]
 8009054:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8009056:	683b      	ldr	r3, [r7, #0]
 8009058:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800905a:	461a      	mov	r2, r3
 800905c:	f000 f906 	bl	800926c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8009060:	687b      	ldr	r3, [r7, #4]
 8009062:	681b      	ldr	r3, [r3, #0]
 8009064:	2160      	movs	r1, #96	; 0x60
 8009066:	4618      	mov	r0, r3
 8009068:	f000 f92f 	bl	80092ca <TIM_ITRx_SetConfig>
      break;
 800906c:	e01c      	b.n	80090a8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800906e:	687b      	ldr	r3, [r7, #4]
 8009070:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8009072:	683b      	ldr	r3, [r7, #0]
 8009074:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8009076:	683b      	ldr	r3, [r7, #0]
 8009078:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800907a:	461a      	mov	r2, r3
 800907c:	f000 f8c8 	bl	8009210 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8009080:	687b      	ldr	r3, [r7, #4]
 8009082:	681b      	ldr	r3, [r3, #0]
 8009084:	2140      	movs	r1, #64	; 0x40
 8009086:	4618      	mov	r0, r3
 8009088:	f000 f91f 	bl	80092ca <TIM_ITRx_SetConfig>
      break;
 800908c:	e00c      	b.n	80090a8 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800908e:	687b      	ldr	r3, [r7, #4]
 8009090:	681a      	ldr	r2, [r3, #0]
 8009092:	683b      	ldr	r3, [r7, #0]
 8009094:	681b      	ldr	r3, [r3, #0]
 8009096:	4619      	mov	r1, r3
 8009098:	4610      	mov	r0, r2
 800909a:	f000 f916 	bl	80092ca <TIM_ITRx_SetConfig>
      break;
 800909e:	e003      	b.n	80090a8 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80090a0:	2301      	movs	r3, #1
 80090a2:	73fb      	strb	r3, [r7, #15]
      break;
 80090a4:	e000      	b.n	80090a8 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80090a6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80090a8:	687b      	ldr	r3, [r7, #4]
 80090aa:	2201      	movs	r2, #1
 80090ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80090b0:	687b      	ldr	r3, [r7, #4]
 80090b2:	2200      	movs	r2, #0
 80090b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80090b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80090ba:	4618      	mov	r0, r3
 80090bc:	3710      	adds	r7, #16
 80090be:	46bd      	mov	sp, r7
 80090c0:	bd80      	pop	{r7, pc}

080090c2 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80090c2:	b480      	push	{r7}
 80090c4:	b083      	sub	sp, #12
 80090c6:	af00      	add	r7, sp, #0
 80090c8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80090ca:	bf00      	nop
 80090cc:	370c      	adds	r7, #12
 80090ce:	46bd      	mov	sp, r7
 80090d0:	bc80      	pop	{r7}
 80090d2:	4770      	bx	lr

080090d4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80090d4:	b480      	push	{r7}
 80090d6:	b083      	sub	sp, #12
 80090d8:	af00      	add	r7, sp, #0
 80090da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80090dc:	bf00      	nop
 80090de:	370c      	adds	r7, #12
 80090e0:	46bd      	mov	sp, r7
 80090e2:	bc80      	pop	{r7}
 80090e4:	4770      	bx	lr

080090e6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80090e6:	b480      	push	{r7}
 80090e8:	b083      	sub	sp, #12
 80090ea:	af00      	add	r7, sp, #0
 80090ec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80090ee:	bf00      	nop
 80090f0:	370c      	adds	r7, #12
 80090f2:	46bd      	mov	sp, r7
 80090f4:	bc80      	pop	{r7}
 80090f6:	4770      	bx	lr

080090f8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80090f8:	b480      	push	{r7}
 80090fa:	b083      	sub	sp, #12
 80090fc:	af00      	add	r7, sp, #0
 80090fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8009100:	bf00      	nop
 8009102:	370c      	adds	r7, #12
 8009104:	46bd      	mov	sp, r7
 8009106:	bc80      	pop	{r7}
 8009108:	4770      	bx	lr

0800910a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800910a:	b480      	push	{r7}
 800910c:	b083      	sub	sp, #12
 800910e:	af00      	add	r7, sp, #0
 8009110:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8009112:	bf00      	nop
 8009114:	370c      	adds	r7, #12
 8009116:	46bd      	mov	sp, r7
 8009118:	bc80      	pop	{r7}
 800911a:	4770      	bx	lr

0800911c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800911c:	b480      	push	{r7}
 800911e:	b085      	sub	sp, #20
 8009120:	af00      	add	r7, sp, #0
 8009122:	6078      	str	r0, [r7, #4]
 8009124:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8009126:	687b      	ldr	r3, [r7, #4]
 8009128:	681b      	ldr	r3, [r3, #0]
 800912a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800912c:	687b      	ldr	r3, [r7, #4]
 800912e:	4a33      	ldr	r2, [pc, #204]	; (80091fc <TIM_Base_SetConfig+0xe0>)
 8009130:	4293      	cmp	r3, r2
 8009132:	d013      	beq.n	800915c <TIM_Base_SetConfig+0x40>
 8009134:	687b      	ldr	r3, [r7, #4]
 8009136:	4a32      	ldr	r2, [pc, #200]	; (8009200 <TIM_Base_SetConfig+0xe4>)
 8009138:	4293      	cmp	r3, r2
 800913a:	d00f      	beq.n	800915c <TIM_Base_SetConfig+0x40>
 800913c:	687b      	ldr	r3, [r7, #4]
 800913e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009142:	d00b      	beq.n	800915c <TIM_Base_SetConfig+0x40>
 8009144:	687b      	ldr	r3, [r7, #4]
 8009146:	4a2f      	ldr	r2, [pc, #188]	; (8009204 <TIM_Base_SetConfig+0xe8>)
 8009148:	4293      	cmp	r3, r2
 800914a:	d007      	beq.n	800915c <TIM_Base_SetConfig+0x40>
 800914c:	687b      	ldr	r3, [r7, #4]
 800914e:	4a2e      	ldr	r2, [pc, #184]	; (8009208 <TIM_Base_SetConfig+0xec>)
 8009150:	4293      	cmp	r3, r2
 8009152:	d003      	beq.n	800915c <TIM_Base_SetConfig+0x40>
 8009154:	687b      	ldr	r3, [r7, #4]
 8009156:	4a2d      	ldr	r2, [pc, #180]	; (800920c <TIM_Base_SetConfig+0xf0>)
 8009158:	4293      	cmp	r3, r2
 800915a:	d108      	bne.n	800916e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800915c:	68fb      	ldr	r3, [r7, #12]
 800915e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009162:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8009164:	683b      	ldr	r3, [r7, #0]
 8009166:	685b      	ldr	r3, [r3, #4]
 8009168:	68fa      	ldr	r2, [r7, #12]
 800916a:	4313      	orrs	r3, r2
 800916c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800916e:	687b      	ldr	r3, [r7, #4]
 8009170:	4a22      	ldr	r2, [pc, #136]	; (80091fc <TIM_Base_SetConfig+0xe0>)
 8009172:	4293      	cmp	r3, r2
 8009174:	d013      	beq.n	800919e <TIM_Base_SetConfig+0x82>
 8009176:	687b      	ldr	r3, [r7, #4]
 8009178:	4a21      	ldr	r2, [pc, #132]	; (8009200 <TIM_Base_SetConfig+0xe4>)
 800917a:	4293      	cmp	r3, r2
 800917c:	d00f      	beq.n	800919e <TIM_Base_SetConfig+0x82>
 800917e:	687b      	ldr	r3, [r7, #4]
 8009180:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009184:	d00b      	beq.n	800919e <TIM_Base_SetConfig+0x82>
 8009186:	687b      	ldr	r3, [r7, #4]
 8009188:	4a1e      	ldr	r2, [pc, #120]	; (8009204 <TIM_Base_SetConfig+0xe8>)
 800918a:	4293      	cmp	r3, r2
 800918c:	d007      	beq.n	800919e <TIM_Base_SetConfig+0x82>
 800918e:	687b      	ldr	r3, [r7, #4]
 8009190:	4a1d      	ldr	r2, [pc, #116]	; (8009208 <TIM_Base_SetConfig+0xec>)
 8009192:	4293      	cmp	r3, r2
 8009194:	d003      	beq.n	800919e <TIM_Base_SetConfig+0x82>
 8009196:	687b      	ldr	r3, [r7, #4]
 8009198:	4a1c      	ldr	r2, [pc, #112]	; (800920c <TIM_Base_SetConfig+0xf0>)
 800919a:	4293      	cmp	r3, r2
 800919c:	d108      	bne.n	80091b0 <TIM_Base_SetConfig+0x94>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800919e:	68fb      	ldr	r3, [r7, #12]
 80091a0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80091a4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80091a6:	683b      	ldr	r3, [r7, #0]
 80091a8:	68db      	ldr	r3, [r3, #12]
 80091aa:	68fa      	ldr	r2, [r7, #12]
 80091ac:	4313      	orrs	r3, r2
 80091ae:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80091b0:	68fb      	ldr	r3, [r7, #12]
 80091b2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80091b6:	683b      	ldr	r3, [r7, #0]
 80091b8:	695b      	ldr	r3, [r3, #20]
 80091ba:	4313      	orrs	r3, r2
 80091bc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80091be:	687b      	ldr	r3, [r7, #4]
 80091c0:	68fa      	ldr	r2, [r7, #12]
 80091c2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80091c4:	683b      	ldr	r3, [r7, #0]
 80091c6:	689a      	ldr	r2, [r3, #8]
 80091c8:	687b      	ldr	r3, [r7, #4]
 80091ca:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80091cc:	683b      	ldr	r3, [r7, #0]
 80091ce:	681a      	ldr	r2, [r3, #0]
 80091d0:	687b      	ldr	r3, [r7, #4]
 80091d2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80091d4:	687b      	ldr	r3, [r7, #4]
 80091d6:	4a09      	ldr	r2, [pc, #36]	; (80091fc <TIM_Base_SetConfig+0xe0>)
 80091d8:	4293      	cmp	r3, r2
 80091da:	d003      	beq.n	80091e4 <TIM_Base_SetConfig+0xc8>
 80091dc:	687b      	ldr	r3, [r7, #4]
 80091de:	4a08      	ldr	r2, [pc, #32]	; (8009200 <TIM_Base_SetConfig+0xe4>)
 80091e0:	4293      	cmp	r3, r2
 80091e2:	d103      	bne.n	80091ec <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80091e4:	683b      	ldr	r3, [r7, #0]
 80091e6:	691a      	ldr	r2, [r3, #16]
 80091e8:	687b      	ldr	r3, [r7, #4]
 80091ea:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80091ec:	687b      	ldr	r3, [r7, #4]
 80091ee:	2201      	movs	r2, #1
 80091f0:	615a      	str	r2, [r3, #20]
}
 80091f2:	bf00      	nop
 80091f4:	3714      	adds	r7, #20
 80091f6:	46bd      	mov	sp, r7
 80091f8:	bc80      	pop	{r7}
 80091fa:	4770      	bx	lr
 80091fc:	40012c00 	.word	0x40012c00
 8009200:	40013400 	.word	0x40013400
 8009204:	40000400 	.word	0x40000400
 8009208:	40000800 	.word	0x40000800
 800920c:	40000c00 	.word	0x40000c00

08009210 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009210:	b480      	push	{r7}
 8009212:	b087      	sub	sp, #28
 8009214:	af00      	add	r7, sp, #0
 8009216:	60f8      	str	r0, [r7, #12]
 8009218:	60b9      	str	r1, [r7, #8]
 800921a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800921c:	68fb      	ldr	r3, [r7, #12]
 800921e:	6a1b      	ldr	r3, [r3, #32]
 8009220:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009222:	68fb      	ldr	r3, [r7, #12]
 8009224:	6a1b      	ldr	r3, [r3, #32]
 8009226:	f023 0201 	bic.w	r2, r3, #1
 800922a:	68fb      	ldr	r3, [r7, #12]
 800922c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800922e:	68fb      	ldr	r3, [r7, #12]
 8009230:	699b      	ldr	r3, [r3, #24]
 8009232:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8009234:	693b      	ldr	r3, [r7, #16]
 8009236:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800923a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800923c:	687b      	ldr	r3, [r7, #4]
 800923e:	011b      	lsls	r3, r3, #4
 8009240:	693a      	ldr	r2, [r7, #16]
 8009242:	4313      	orrs	r3, r2
 8009244:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8009246:	697b      	ldr	r3, [r7, #20]
 8009248:	f023 030a 	bic.w	r3, r3, #10
 800924c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800924e:	697a      	ldr	r2, [r7, #20]
 8009250:	68bb      	ldr	r3, [r7, #8]
 8009252:	4313      	orrs	r3, r2
 8009254:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8009256:	68fb      	ldr	r3, [r7, #12]
 8009258:	693a      	ldr	r2, [r7, #16]
 800925a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800925c:	68fb      	ldr	r3, [r7, #12]
 800925e:	697a      	ldr	r2, [r7, #20]
 8009260:	621a      	str	r2, [r3, #32]
}
 8009262:	bf00      	nop
 8009264:	371c      	adds	r7, #28
 8009266:	46bd      	mov	sp, r7
 8009268:	bc80      	pop	{r7}
 800926a:	4770      	bx	lr

0800926c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800926c:	b480      	push	{r7}
 800926e:	b087      	sub	sp, #28
 8009270:	af00      	add	r7, sp, #0
 8009272:	60f8      	str	r0, [r7, #12]
 8009274:	60b9      	str	r1, [r7, #8]
 8009276:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8009278:	68fb      	ldr	r3, [r7, #12]
 800927a:	6a1b      	ldr	r3, [r3, #32]
 800927c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800927e:	68fb      	ldr	r3, [r7, #12]
 8009280:	6a1b      	ldr	r3, [r3, #32]
 8009282:	f023 0210 	bic.w	r2, r3, #16
 8009286:	68fb      	ldr	r3, [r7, #12]
 8009288:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800928a:	68fb      	ldr	r3, [r7, #12]
 800928c:	699b      	ldr	r3, [r3, #24]
 800928e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8009290:	693b      	ldr	r3, [r7, #16]
 8009292:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8009296:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8009298:	687b      	ldr	r3, [r7, #4]
 800929a:	031b      	lsls	r3, r3, #12
 800929c:	693a      	ldr	r2, [r7, #16]
 800929e:	4313      	orrs	r3, r2
 80092a0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80092a2:	697b      	ldr	r3, [r7, #20]
 80092a4:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80092a8:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80092aa:	68bb      	ldr	r3, [r7, #8]
 80092ac:	011b      	lsls	r3, r3, #4
 80092ae:	697a      	ldr	r2, [r7, #20]
 80092b0:	4313      	orrs	r3, r2
 80092b2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80092b4:	68fb      	ldr	r3, [r7, #12]
 80092b6:	693a      	ldr	r2, [r7, #16]
 80092b8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80092ba:	68fb      	ldr	r3, [r7, #12]
 80092bc:	697a      	ldr	r2, [r7, #20]
 80092be:	621a      	str	r2, [r3, #32]
}
 80092c0:	bf00      	nop
 80092c2:	371c      	adds	r7, #28
 80092c4:	46bd      	mov	sp, r7
 80092c6:	bc80      	pop	{r7}
 80092c8:	4770      	bx	lr

080092ca <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80092ca:	b480      	push	{r7}
 80092cc:	b085      	sub	sp, #20
 80092ce:	af00      	add	r7, sp, #0
 80092d0:	6078      	str	r0, [r7, #4]
 80092d2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80092d4:	687b      	ldr	r3, [r7, #4]
 80092d6:	689b      	ldr	r3, [r3, #8]
 80092d8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80092da:	68fb      	ldr	r3, [r7, #12]
 80092dc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80092e0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80092e2:	683a      	ldr	r2, [r7, #0]
 80092e4:	68fb      	ldr	r3, [r7, #12]
 80092e6:	4313      	orrs	r3, r2
 80092e8:	f043 0307 	orr.w	r3, r3, #7
 80092ec:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80092ee:	687b      	ldr	r3, [r7, #4]
 80092f0:	68fa      	ldr	r2, [r7, #12]
 80092f2:	609a      	str	r2, [r3, #8]
}
 80092f4:	bf00      	nop
 80092f6:	3714      	adds	r7, #20
 80092f8:	46bd      	mov	sp, r7
 80092fa:	bc80      	pop	{r7}
 80092fc:	4770      	bx	lr

080092fe <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80092fe:	b480      	push	{r7}
 8009300:	b087      	sub	sp, #28
 8009302:	af00      	add	r7, sp, #0
 8009304:	60f8      	str	r0, [r7, #12]
 8009306:	60b9      	str	r1, [r7, #8]
 8009308:	607a      	str	r2, [r7, #4]
 800930a:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800930c:	68fb      	ldr	r3, [r7, #12]
 800930e:	689b      	ldr	r3, [r3, #8]
 8009310:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009312:	697b      	ldr	r3, [r7, #20]
 8009314:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8009318:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800931a:	683b      	ldr	r3, [r7, #0]
 800931c:	021a      	lsls	r2, r3, #8
 800931e:	687b      	ldr	r3, [r7, #4]
 8009320:	431a      	orrs	r2, r3
 8009322:	68bb      	ldr	r3, [r7, #8]
 8009324:	4313      	orrs	r3, r2
 8009326:	697a      	ldr	r2, [r7, #20]
 8009328:	4313      	orrs	r3, r2
 800932a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800932c:	68fb      	ldr	r3, [r7, #12]
 800932e:	697a      	ldr	r2, [r7, #20]
 8009330:	609a      	str	r2, [r3, #8]
}
 8009332:	bf00      	nop
 8009334:	371c      	adds	r7, #28
 8009336:	46bd      	mov	sp, r7
 8009338:	bc80      	pop	{r7}
 800933a:	4770      	bx	lr

0800933c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800933c:	b480      	push	{r7}
 800933e:	b085      	sub	sp, #20
 8009340:	af00      	add	r7, sp, #0
 8009342:	6078      	str	r0, [r7, #4]
 8009344:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8009346:	687b      	ldr	r3, [r7, #4]
 8009348:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800934c:	2b01      	cmp	r3, #1
 800934e:	d101      	bne.n	8009354 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8009350:	2302      	movs	r3, #2
 8009352:	e050      	b.n	80093f6 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8009354:	687b      	ldr	r3, [r7, #4]
 8009356:	2201      	movs	r2, #1
 8009358:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800935c:	687b      	ldr	r3, [r7, #4]
 800935e:	2202      	movs	r2, #2
 8009360:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8009364:	687b      	ldr	r3, [r7, #4]
 8009366:	681b      	ldr	r3, [r3, #0]
 8009368:	685b      	ldr	r3, [r3, #4]
 800936a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800936c:	687b      	ldr	r3, [r7, #4]
 800936e:	681b      	ldr	r3, [r3, #0]
 8009370:	689b      	ldr	r3, [r3, #8]
 8009372:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8009374:	68fb      	ldr	r3, [r7, #12]
 8009376:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800937a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800937c:	683b      	ldr	r3, [r7, #0]
 800937e:	681b      	ldr	r3, [r3, #0]
 8009380:	68fa      	ldr	r2, [r7, #12]
 8009382:	4313      	orrs	r3, r2
 8009384:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8009386:	687b      	ldr	r3, [r7, #4]
 8009388:	681b      	ldr	r3, [r3, #0]
 800938a:	68fa      	ldr	r2, [r7, #12]
 800938c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800938e:	687b      	ldr	r3, [r7, #4]
 8009390:	681b      	ldr	r3, [r3, #0]
 8009392:	4a1b      	ldr	r2, [pc, #108]	; (8009400 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8009394:	4293      	cmp	r3, r2
 8009396:	d018      	beq.n	80093ca <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8009398:	687b      	ldr	r3, [r7, #4]
 800939a:	681b      	ldr	r3, [r3, #0]
 800939c:	4a19      	ldr	r2, [pc, #100]	; (8009404 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800939e:	4293      	cmp	r3, r2
 80093a0:	d013      	beq.n	80093ca <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80093a2:	687b      	ldr	r3, [r7, #4]
 80093a4:	681b      	ldr	r3, [r3, #0]
 80093a6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80093aa:	d00e      	beq.n	80093ca <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80093ac:	687b      	ldr	r3, [r7, #4]
 80093ae:	681b      	ldr	r3, [r3, #0]
 80093b0:	4a15      	ldr	r2, [pc, #84]	; (8009408 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80093b2:	4293      	cmp	r3, r2
 80093b4:	d009      	beq.n	80093ca <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80093b6:	687b      	ldr	r3, [r7, #4]
 80093b8:	681b      	ldr	r3, [r3, #0]
 80093ba:	4a14      	ldr	r2, [pc, #80]	; (800940c <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80093bc:	4293      	cmp	r3, r2
 80093be:	d004      	beq.n	80093ca <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80093c0:	687b      	ldr	r3, [r7, #4]
 80093c2:	681b      	ldr	r3, [r3, #0]
 80093c4:	4a12      	ldr	r2, [pc, #72]	; (8009410 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80093c6:	4293      	cmp	r3, r2
 80093c8:	d10c      	bne.n	80093e4 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80093ca:	68bb      	ldr	r3, [r7, #8]
 80093cc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80093d0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80093d2:	683b      	ldr	r3, [r7, #0]
 80093d4:	685b      	ldr	r3, [r3, #4]
 80093d6:	68ba      	ldr	r2, [r7, #8]
 80093d8:	4313      	orrs	r3, r2
 80093da:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80093dc:	687b      	ldr	r3, [r7, #4]
 80093de:	681b      	ldr	r3, [r3, #0]
 80093e0:	68ba      	ldr	r2, [r7, #8]
 80093e2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80093e4:	687b      	ldr	r3, [r7, #4]
 80093e6:	2201      	movs	r2, #1
 80093e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80093ec:	687b      	ldr	r3, [r7, #4]
 80093ee:	2200      	movs	r2, #0
 80093f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80093f4:	2300      	movs	r3, #0
}
 80093f6:	4618      	mov	r0, r3
 80093f8:	3714      	adds	r7, #20
 80093fa:	46bd      	mov	sp, r7
 80093fc:	bc80      	pop	{r7}
 80093fe:	4770      	bx	lr
 8009400:	40012c00 	.word	0x40012c00
 8009404:	40013400 	.word	0x40013400
 8009408:	40000400 	.word	0x40000400
 800940c:	40000800 	.word	0x40000800
 8009410:	40000c00 	.word	0x40000c00

08009414 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8009414:	b480      	push	{r7}
 8009416:	b083      	sub	sp, #12
 8009418:	af00      	add	r7, sp, #0
 800941a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800941c:	bf00      	nop
 800941e:	370c      	adds	r7, #12
 8009420:	46bd      	mov	sp, r7
 8009422:	bc80      	pop	{r7}
 8009424:	4770      	bx	lr

08009426 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8009426:	b480      	push	{r7}
 8009428:	b083      	sub	sp, #12
 800942a:	af00      	add	r7, sp, #0
 800942c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800942e:	bf00      	nop
 8009430:	370c      	adds	r7, #12
 8009432:	46bd      	mov	sp, r7
 8009434:	bc80      	pop	{r7}
 8009436:	4770      	bx	lr

08009438 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8009438:	b580      	push	{r7, lr}
 800943a:	b082      	sub	sp, #8
 800943c:	af00      	add	r7, sp, #0
 800943e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009440:	687b      	ldr	r3, [r7, #4]
 8009442:	2b00      	cmp	r3, #0
 8009444:	d101      	bne.n	800944a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8009446:	2301      	movs	r3, #1
 8009448:	e042      	b.n	80094d0 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800944a:	687b      	ldr	r3, [r7, #4]
 800944c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009450:	b2db      	uxtb	r3, r3
 8009452:	2b00      	cmp	r3, #0
 8009454:	d106      	bne.n	8009464 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8009456:	687b      	ldr	r3, [r7, #4]
 8009458:	2200      	movs	r2, #0
 800945a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800945e:	6878      	ldr	r0, [r7, #4]
 8009460:	f7fd f95c 	bl	800671c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8009464:	687b      	ldr	r3, [r7, #4]
 8009466:	2224      	movs	r2, #36	; 0x24
 8009468:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800946c:	687b      	ldr	r3, [r7, #4]
 800946e:	681b      	ldr	r3, [r3, #0]
 8009470:	68da      	ldr	r2, [r3, #12]
 8009472:	687b      	ldr	r3, [r7, #4]
 8009474:	681b      	ldr	r3, [r3, #0]
 8009476:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800947a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800947c:	6878      	ldr	r0, [r7, #4]
 800947e:	f000 fdc5 	bl	800a00c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8009482:	687b      	ldr	r3, [r7, #4]
 8009484:	681b      	ldr	r3, [r3, #0]
 8009486:	691a      	ldr	r2, [r3, #16]
 8009488:	687b      	ldr	r3, [r7, #4]
 800948a:	681b      	ldr	r3, [r3, #0]
 800948c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8009490:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8009492:	687b      	ldr	r3, [r7, #4]
 8009494:	681b      	ldr	r3, [r3, #0]
 8009496:	695a      	ldr	r2, [r3, #20]
 8009498:	687b      	ldr	r3, [r7, #4]
 800949a:	681b      	ldr	r3, [r3, #0]
 800949c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80094a0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80094a2:	687b      	ldr	r3, [r7, #4]
 80094a4:	681b      	ldr	r3, [r3, #0]
 80094a6:	68da      	ldr	r2, [r3, #12]
 80094a8:	687b      	ldr	r3, [r7, #4]
 80094aa:	681b      	ldr	r3, [r3, #0]
 80094ac:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80094b0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80094b2:	687b      	ldr	r3, [r7, #4]
 80094b4:	2200      	movs	r2, #0
 80094b6:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 80094b8:	687b      	ldr	r3, [r7, #4]
 80094ba:	2220      	movs	r2, #32
 80094bc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80094c0:	687b      	ldr	r3, [r7, #4]
 80094c2:	2220      	movs	r2, #32
 80094c4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80094c8:	687b      	ldr	r3, [r7, #4]
 80094ca:	2200      	movs	r2, #0
 80094cc:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80094ce:	2300      	movs	r3, #0
}
 80094d0:	4618      	mov	r0, r3
 80094d2:	3708      	adds	r7, #8
 80094d4:	46bd      	mov	sp, r7
 80094d6:	bd80      	pop	{r7, pc}

080094d8 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80094d8:	b580      	push	{r7, lr}
 80094da:	b08a      	sub	sp, #40	; 0x28
 80094dc:	af02      	add	r7, sp, #8
 80094de:	60f8      	str	r0, [r7, #12]
 80094e0:	60b9      	str	r1, [r7, #8]
 80094e2:	603b      	str	r3, [r7, #0]
 80094e4:	4613      	mov	r3, r2
 80094e6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80094e8:	2300      	movs	r3, #0
 80094ea:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80094ec:	68fb      	ldr	r3, [r7, #12]
 80094ee:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80094f2:	b2db      	uxtb	r3, r3
 80094f4:	2b20      	cmp	r3, #32
 80094f6:	d16d      	bne.n	80095d4 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 80094f8:	68bb      	ldr	r3, [r7, #8]
 80094fa:	2b00      	cmp	r3, #0
 80094fc:	d002      	beq.n	8009504 <HAL_UART_Transmit+0x2c>
 80094fe:	88fb      	ldrh	r3, [r7, #6]
 8009500:	2b00      	cmp	r3, #0
 8009502:	d101      	bne.n	8009508 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8009504:	2301      	movs	r3, #1
 8009506:	e066      	b.n	80095d6 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009508:	68fb      	ldr	r3, [r7, #12]
 800950a:	2200      	movs	r2, #0
 800950c:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800950e:	68fb      	ldr	r3, [r7, #12]
 8009510:	2221      	movs	r2, #33	; 0x21
 8009512:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8009516:	f7fd fb29 	bl	8006b6c <HAL_GetTick>
 800951a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800951c:	68fb      	ldr	r3, [r7, #12]
 800951e:	88fa      	ldrh	r2, [r7, #6]
 8009520:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8009522:	68fb      	ldr	r3, [r7, #12]
 8009524:	88fa      	ldrh	r2, [r7, #6]
 8009526:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009528:	68fb      	ldr	r3, [r7, #12]
 800952a:	689b      	ldr	r3, [r3, #8]
 800952c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009530:	d108      	bne.n	8009544 <HAL_UART_Transmit+0x6c>
 8009532:	68fb      	ldr	r3, [r7, #12]
 8009534:	691b      	ldr	r3, [r3, #16]
 8009536:	2b00      	cmp	r3, #0
 8009538:	d104      	bne.n	8009544 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800953a:	2300      	movs	r3, #0
 800953c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800953e:	68bb      	ldr	r3, [r7, #8]
 8009540:	61bb      	str	r3, [r7, #24]
 8009542:	e003      	b.n	800954c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8009544:	68bb      	ldr	r3, [r7, #8]
 8009546:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8009548:	2300      	movs	r3, #0
 800954a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800954c:	e02a      	b.n	80095a4 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800954e:	683b      	ldr	r3, [r7, #0]
 8009550:	9300      	str	r3, [sp, #0]
 8009552:	697b      	ldr	r3, [r7, #20]
 8009554:	2200      	movs	r2, #0
 8009556:	2180      	movs	r1, #128	; 0x80
 8009558:	68f8      	ldr	r0, [r7, #12]
 800955a:	f000 fb14 	bl	8009b86 <UART_WaitOnFlagUntilTimeout>
 800955e:	4603      	mov	r3, r0
 8009560:	2b00      	cmp	r3, #0
 8009562:	d001      	beq.n	8009568 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 8009564:	2303      	movs	r3, #3
 8009566:	e036      	b.n	80095d6 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8009568:	69fb      	ldr	r3, [r7, #28]
 800956a:	2b00      	cmp	r3, #0
 800956c:	d10b      	bne.n	8009586 <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800956e:	69bb      	ldr	r3, [r7, #24]
 8009570:	881b      	ldrh	r3, [r3, #0]
 8009572:	461a      	mov	r2, r3
 8009574:	68fb      	ldr	r3, [r7, #12]
 8009576:	681b      	ldr	r3, [r3, #0]
 8009578:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800957c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800957e:	69bb      	ldr	r3, [r7, #24]
 8009580:	3302      	adds	r3, #2
 8009582:	61bb      	str	r3, [r7, #24]
 8009584:	e007      	b.n	8009596 <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8009586:	69fb      	ldr	r3, [r7, #28]
 8009588:	781a      	ldrb	r2, [r3, #0]
 800958a:	68fb      	ldr	r3, [r7, #12]
 800958c:	681b      	ldr	r3, [r3, #0]
 800958e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8009590:	69fb      	ldr	r3, [r7, #28]
 8009592:	3301      	adds	r3, #1
 8009594:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8009596:	68fb      	ldr	r3, [r7, #12]
 8009598:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800959a:	b29b      	uxth	r3, r3
 800959c:	3b01      	subs	r3, #1
 800959e:	b29a      	uxth	r2, r3
 80095a0:	68fb      	ldr	r3, [r7, #12]
 80095a2:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80095a4:	68fb      	ldr	r3, [r7, #12]
 80095a6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80095a8:	b29b      	uxth	r3, r3
 80095aa:	2b00      	cmp	r3, #0
 80095ac:	d1cf      	bne.n	800954e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80095ae:	683b      	ldr	r3, [r7, #0]
 80095b0:	9300      	str	r3, [sp, #0]
 80095b2:	697b      	ldr	r3, [r7, #20]
 80095b4:	2200      	movs	r2, #0
 80095b6:	2140      	movs	r1, #64	; 0x40
 80095b8:	68f8      	ldr	r0, [r7, #12]
 80095ba:	f000 fae4 	bl	8009b86 <UART_WaitOnFlagUntilTimeout>
 80095be:	4603      	mov	r3, r0
 80095c0:	2b00      	cmp	r3, #0
 80095c2:	d001      	beq.n	80095c8 <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 80095c4:	2303      	movs	r3, #3
 80095c6:	e006      	b.n	80095d6 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80095c8:	68fb      	ldr	r3, [r7, #12]
 80095ca:	2220      	movs	r2, #32
 80095cc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 80095d0:	2300      	movs	r3, #0
 80095d2:	e000      	b.n	80095d6 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 80095d4:	2302      	movs	r3, #2
  }
}
 80095d6:	4618      	mov	r0, r3
 80095d8:	3720      	adds	r7, #32
 80095da:	46bd      	mov	sp, r7
 80095dc:	bd80      	pop	{r7, pc}

080095de <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80095de:	b580      	push	{r7, lr}
 80095e0:	b084      	sub	sp, #16
 80095e2:	af00      	add	r7, sp, #0
 80095e4:	60f8      	str	r0, [r7, #12]
 80095e6:	60b9      	str	r1, [r7, #8]
 80095e8:	4613      	mov	r3, r2
 80095ea:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80095ec:	68fb      	ldr	r3, [r7, #12]
 80095ee:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80095f2:	b2db      	uxtb	r3, r3
 80095f4:	2b20      	cmp	r3, #32
 80095f6:	d112      	bne.n	800961e <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 80095f8:	68bb      	ldr	r3, [r7, #8]
 80095fa:	2b00      	cmp	r3, #0
 80095fc:	d002      	beq.n	8009604 <HAL_UART_Receive_IT+0x26>
 80095fe:	88fb      	ldrh	r3, [r7, #6]
 8009600:	2b00      	cmp	r3, #0
 8009602:	d101      	bne.n	8009608 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8009604:	2301      	movs	r3, #1
 8009606:	e00b      	b.n	8009620 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009608:	68fb      	ldr	r3, [r7, #12]
 800960a:	2200      	movs	r2, #0
 800960c:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 800960e:	88fb      	ldrh	r3, [r7, #6]
 8009610:	461a      	mov	r2, r3
 8009612:	68b9      	ldr	r1, [r7, #8]
 8009614:	68f8      	ldr	r0, [r7, #12]
 8009616:	f000 fb24 	bl	8009c62 <UART_Start_Receive_IT>
 800961a:	4603      	mov	r3, r0
 800961c:	e000      	b.n	8009620 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 800961e:	2302      	movs	r3, #2
  }
}
 8009620:	4618      	mov	r0, r3
 8009622:	3710      	adds	r7, #16
 8009624:	46bd      	mov	sp, r7
 8009626:	bd80      	pop	{r7, pc}

08009628 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8009628:	b580      	push	{r7, lr}
 800962a:	b0ba      	sub	sp, #232	; 0xe8
 800962c:	af00      	add	r7, sp, #0
 800962e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8009630:	687b      	ldr	r3, [r7, #4]
 8009632:	681b      	ldr	r3, [r3, #0]
 8009634:	681b      	ldr	r3, [r3, #0]
 8009636:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800963a:	687b      	ldr	r3, [r7, #4]
 800963c:	681b      	ldr	r3, [r3, #0]
 800963e:	68db      	ldr	r3, [r3, #12]
 8009640:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8009644:	687b      	ldr	r3, [r7, #4]
 8009646:	681b      	ldr	r3, [r3, #0]
 8009648:	695b      	ldr	r3, [r3, #20]
 800964a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800964e:	2300      	movs	r3, #0
 8009650:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8009654:	2300      	movs	r3, #0
 8009656:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800965a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800965e:	f003 030f 	and.w	r3, r3, #15
 8009662:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8009666:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800966a:	2b00      	cmp	r3, #0
 800966c:	d10f      	bne.n	800968e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800966e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009672:	f003 0320 	and.w	r3, r3, #32
 8009676:	2b00      	cmp	r3, #0
 8009678:	d009      	beq.n	800968e <HAL_UART_IRQHandler+0x66>
 800967a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800967e:	f003 0320 	and.w	r3, r3, #32
 8009682:	2b00      	cmp	r3, #0
 8009684:	d003      	beq.n	800968e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8009686:	6878      	ldr	r0, [r7, #4]
 8009688:	f000 fc01 	bl	8009e8e <UART_Receive_IT>
      return;
 800968c:	e25b      	b.n	8009b46 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800968e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8009692:	2b00      	cmp	r3, #0
 8009694:	f000 80de 	beq.w	8009854 <HAL_UART_IRQHandler+0x22c>
 8009698:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800969c:	f003 0301 	and.w	r3, r3, #1
 80096a0:	2b00      	cmp	r3, #0
 80096a2:	d106      	bne.n	80096b2 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80096a4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80096a8:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80096ac:	2b00      	cmp	r3, #0
 80096ae:	f000 80d1 	beq.w	8009854 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80096b2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80096b6:	f003 0301 	and.w	r3, r3, #1
 80096ba:	2b00      	cmp	r3, #0
 80096bc:	d00b      	beq.n	80096d6 <HAL_UART_IRQHandler+0xae>
 80096be:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80096c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80096c6:	2b00      	cmp	r3, #0
 80096c8:	d005      	beq.n	80096d6 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80096ca:	687b      	ldr	r3, [r7, #4]
 80096cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80096ce:	f043 0201 	orr.w	r2, r3, #1
 80096d2:	687b      	ldr	r3, [r7, #4]
 80096d4:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80096d6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80096da:	f003 0304 	and.w	r3, r3, #4
 80096de:	2b00      	cmp	r3, #0
 80096e0:	d00b      	beq.n	80096fa <HAL_UART_IRQHandler+0xd2>
 80096e2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80096e6:	f003 0301 	and.w	r3, r3, #1
 80096ea:	2b00      	cmp	r3, #0
 80096ec:	d005      	beq.n	80096fa <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80096ee:	687b      	ldr	r3, [r7, #4]
 80096f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80096f2:	f043 0202 	orr.w	r2, r3, #2
 80096f6:	687b      	ldr	r3, [r7, #4]
 80096f8:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80096fa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80096fe:	f003 0302 	and.w	r3, r3, #2
 8009702:	2b00      	cmp	r3, #0
 8009704:	d00b      	beq.n	800971e <HAL_UART_IRQHandler+0xf6>
 8009706:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800970a:	f003 0301 	and.w	r3, r3, #1
 800970e:	2b00      	cmp	r3, #0
 8009710:	d005      	beq.n	800971e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8009712:	687b      	ldr	r3, [r7, #4]
 8009714:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009716:	f043 0204 	orr.w	r2, r3, #4
 800971a:	687b      	ldr	r3, [r7, #4]
 800971c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800971e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009722:	f003 0308 	and.w	r3, r3, #8
 8009726:	2b00      	cmp	r3, #0
 8009728:	d011      	beq.n	800974e <HAL_UART_IRQHandler+0x126>
 800972a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800972e:	f003 0320 	and.w	r3, r3, #32
 8009732:	2b00      	cmp	r3, #0
 8009734:	d105      	bne.n	8009742 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8009736:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800973a:	f003 0301 	and.w	r3, r3, #1
 800973e:	2b00      	cmp	r3, #0
 8009740:	d005      	beq.n	800974e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8009742:	687b      	ldr	r3, [r7, #4]
 8009744:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009746:	f043 0208 	orr.w	r2, r3, #8
 800974a:	687b      	ldr	r3, [r7, #4]
 800974c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800974e:	687b      	ldr	r3, [r7, #4]
 8009750:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009752:	2b00      	cmp	r3, #0
 8009754:	f000 81f2 	beq.w	8009b3c <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8009758:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800975c:	f003 0320 	and.w	r3, r3, #32
 8009760:	2b00      	cmp	r3, #0
 8009762:	d008      	beq.n	8009776 <HAL_UART_IRQHandler+0x14e>
 8009764:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009768:	f003 0320 	and.w	r3, r3, #32
 800976c:	2b00      	cmp	r3, #0
 800976e:	d002      	beq.n	8009776 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8009770:	6878      	ldr	r0, [r7, #4]
 8009772:	f000 fb8c 	bl	8009e8e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8009776:	687b      	ldr	r3, [r7, #4]
 8009778:	681b      	ldr	r3, [r3, #0]
 800977a:	695b      	ldr	r3, [r3, #20]
 800977c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009780:	2b00      	cmp	r3, #0
 8009782:	bf14      	ite	ne
 8009784:	2301      	movne	r3, #1
 8009786:	2300      	moveq	r3, #0
 8009788:	b2db      	uxtb	r3, r3
 800978a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800978e:	687b      	ldr	r3, [r7, #4]
 8009790:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009792:	f003 0308 	and.w	r3, r3, #8
 8009796:	2b00      	cmp	r3, #0
 8009798:	d103      	bne.n	80097a2 <HAL_UART_IRQHandler+0x17a>
 800979a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800979e:	2b00      	cmp	r3, #0
 80097a0:	d04f      	beq.n	8009842 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80097a2:	6878      	ldr	r0, [r7, #4]
 80097a4:	f000 fa96 	bl	8009cd4 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80097a8:	687b      	ldr	r3, [r7, #4]
 80097aa:	681b      	ldr	r3, [r3, #0]
 80097ac:	695b      	ldr	r3, [r3, #20]
 80097ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80097b2:	2b00      	cmp	r3, #0
 80097b4:	d041      	beq.n	800983a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80097b6:	687b      	ldr	r3, [r7, #4]
 80097b8:	681b      	ldr	r3, [r3, #0]
 80097ba:	3314      	adds	r3, #20
 80097bc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80097c0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80097c4:	e853 3f00 	ldrex	r3, [r3]
 80097c8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80097cc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80097d0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80097d4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80097d8:	687b      	ldr	r3, [r7, #4]
 80097da:	681b      	ldr	r3, [r3, #0]
 80097dc:	3314      	adds	r3, #20
 80097de:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80097e2:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80097e6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80097ea:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80097ee:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80097f2:	e841 2300 	strex	r3, r2, [r1]
 80097f6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80097fa:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80097fe:	2b00      	cmp	r3, #0
 8009800:	d1d9      	bne.n	80097b6 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8009802:	687b      	ldr	r3, [r7, #4]
 8009804:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009806:	2b00      	cmp	r3, #0
 8009808:	d013      	beq.n	8009832 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800980a:	687b      	ldr	r3, [r7, #4]
 800980c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800980e:	4a7e      	ldr	r2, [pc, #504]	; (8009a08 <HAL_UART_IRQHandler+0x3e0>)
 8009810:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8009812:	687b      	ldr	r3, [r7, #4]
 8009814:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009816:	4618      	mov	r0, r3
 8009818:	f7fd fb1e 	bl	8006e58 <HAL_DMA_Abort_IT>
 800981c:	4603      	mov	r3, r0
 800981e:	2b00      	cmp	r3, #0
 8009820:	d016      	beq.n	8009850 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8009822:	687b      	ldr	r3, [r7, #4]
 8009824:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009826:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009828:	687a      	ldr	r2, [r7, #4]
 800982a:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800982c:	4610      	mov	r0, r2
 800982e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009830:	e00e      	b.n	8009850 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8009832:	6878      	ldr	r0, [r7, #4]
 8009834:	f000 f993 	bl	8009b5e <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009838:	e00a      	b.n	8009850 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800983a:	6878      	ldr	r0, [r7, #4]
 800983c:	f000 f98f 	bl	8009b5e <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009840:	e006      	b.n	8009850 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8009842:	6878      	ldr	r0, [r7, #4]
 8009844:	f000 f98b 	bl	8009b5e <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009848:	687b      	ldr	r3, [r7, #4]
 800984a:	2200      	movs	r2, #0
 800984c:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 800984e:	e175      	b.n	8009b3c <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009850:	bf00      	nop
    return;
 8009852:	e173      	b.n	8009b3c <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009854:	687b      	ldr	r3, [r7, #4]
 8009856:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009858:	2b01      	cmp	r3, #1
 800985a:	f040 814f 	bne.w	8009afc <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800985e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009862:	f003 0310 	and.w	r3, r3, #16
 8009866:	2b00      	cmp	r3, #0
 8009868:	f000 8148 	beq.w	8009afc <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800986c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009870:	f003 0310 	and.w	r3, r3, #16
 8009874:	2b00      	cmp	r3, #0
 8009876:	f000 8141 	beq.w	8009afc <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800987a:	2300      	movs	r3, #0
 800987c:	60bb      	str	r3, [r7, #8]
 800987e:	687b      	ldr	r3, [r7, #4]
 8009880:	681b      	ldr	r3, [r3, #0]
 8009882:	681b      	ldr	r3, [r3, #0]
 8009884:	60bb      	str	r3, [r7, #8]
 8009886:	687b      	ldr	r3, [r7, #4]
 8009888:	681b      	ldr	r3, [r3, #0]
 800988a:	685b      	ldr	r3, [r3, #4]
 800988c:	60bb      	str	r3, [r7, #8]
 800988e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009890:	687b      	ldr	r3, [r7, #4]
 8009892:	681b      	ldr	r3, [r3, #0]
 8009894:	695b      	ldr	r3, [r3, #20]
 8009896:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800989a:	2b00      	cmp	r3, #0
 800989c:	f000 80b6 	beq.w	8009a0c <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80098a0:	687b      	ldr	r3, [r7, #4]
 80098a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80098a4:	681b      	ldr	r3, [r3, #0]
 80098a6:	685b      	ldr	r3, [r3, #4]
 80098a8:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80098ac:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80098b0:	2b00      	cmp	r3, #0
 80098b2:	f000 8145 	beq.w	8009b40 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80098b6:	687b      	ldr	r3, [r7, #4]
 80098b8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80098ba:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80098be:	429a      	cmp	r2, r3
 80098c0:	f080 813e 	bcs.w	8009b40 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80098c4:	687b      	ldr	r3, [r7, #4]
 80098c6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80098ca:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80098cc:	687b      	ldr	r3, [r7, #4]
 80098ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80098d0:	699b      	ldr	r3, [r3, #24]
 80098d2:	2b20      	cmp	r3, #32
 80098d4:	f000 8088 	beq.w	80099e8 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80098d8:	687b      	ldr	r3, [r7, #4]
 80098da:	681b      	ldr	r3, [r3, #0]
 80098dc:	330c      	adds	r3, #12
 80098de:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80098e2:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80098e6:	e853 3f00 	ldrex	r3, [r3]
 80098ea:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80098ee:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80098f2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80098f6:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80098fa:	687b      	ldr	r3, [r7, #4]
 80098fc:	681b      	ldr	r3, [r3, #0]
 80098fe:	330c      	adds	r3, #12
 8009900:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8009904:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8009908:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800990c:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8009910:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8009914:	e841 2300 	strex	r3, r2, [r1]
 8009918:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800991c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8009920:	2b00      	cmp	r3, #0
 8009922:	d1d9      	bne.n	80098d8 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009924:	687b      	ldr	r3, [r7, #4]
 8009926:	681b      	ldr	r3, [r3, #0]
 8009928:	3314      	adds	r3, #20
 800992a:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800992c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800992e:	e853 3f00 	ldrex	r3, [r3]
 8009932:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8009934:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8009936:	f023 0301 	bic.w	r3, r3, #1
 800993a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800993e:	687b      	ldr	r3, [r7, #4]
 8009940:	681b      	ldr	r3, [r3, #0]
 8009942:	3314      	adds	r3, #20
 8009944:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8009948:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800994c:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800994e:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8009950:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8009954:	e841 2300 	strex	r3, r2, [r1]
 8009958:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800995a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800995c:	2b00      	cmp	r3, #0
 800995e:	d1e1      	bne.n	8009924 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009960:	687b      	ldr	r3, [r7, #4]
 8009962:	681b      	ldr	r3, [r3, #0]
 8009964:	3314      	adds	r3, #20
 8009966:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009968:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800996a:	e853 3f00 	ldrex	r3, [r3]
 800996e:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8009970:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009972:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009976:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800997a:	687b      	ldr	r3, [r7, #4]
 800997c:	681b      	ldr	r3, [r3, #0]
 800997e:	3314      	adds	r3, #20
 8009980:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8009984:	66fa      	str	r2, [r7, #108]	; 0x6c
 8009986:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009988:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800998a:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800998c:	e841 2300 	strex	r3, r2, [r1]
 8009990:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8009992:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009994:	2b00      	cmp	r3, #0
 8009996:	d1e3      	bne.n	8009960 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8009998:	687b      	ldr	r3, [r7, #4]
 800999a:	2220      	movs	r2, #32
 800999c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80099a0:	687b      	ldr	r3, [r7, #4]
 80099a2:	2200      	movs	r2, #0
 80099a4:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80099a6:	687b      	ldr	r3, [r7, #4]
 80099a8:	681b      	ldr	r3, [r3, #0]
 80099aa:	330c      	adds	r3, #12
 80099ac:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80099ae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80099b0:	e853 3f00 	ldrex	r3, [r3]
 80099b4:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80099b6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80099b8:	f023 0310 	bic.w	r3, r3, #16
 80099bc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80099c0:	687b      	ldr	r3, [r7, #4]
 80099c2:	681b      	ldr	r3, [r3, #0]
 80099c4:	330c      	adds	r3, #12
 80099c6:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80099ca:	65ba      	str	r2, [r7, #88]	; 0x58
 80099cc:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80099ce:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80099d0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80099d2:	e841 2300 	strex	r3, r2, [r1]
 80099d6:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80099d8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80099da:	2b00      	cmp	r3, #0
 80099dc:	d1e3      	bne.n	80099a6 <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80099de:	687b      	ldr	r3, [r7, #4]
 80099e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80099e2:	4618      	mov	r0, r3
 80099e4:	f7fd f9fd 	bl	8006de2 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80099e8:	687b      	ldr	r3, [r7, #4]
 80099ea:	2202      	movs	r2, #2
 80099ec:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80099ee:	687b      	ldr	r3, [r7, #4]
 80099f0:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80099f2:	687b      	ldr	r3, [r7, #4]
 80099f4:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80099f6:	b29b      	uxth	r3, r3
 80099f8:	1ad3      	subs	r3, r2, r3
 80099fa:	b29b      	uxth	r3, r3
 80099fc:	4619      	mov	r1, r3
 80099fe:	6878      	ldr	r0, [r7, #4]
 8009a00:	f000 f8b6 	bl	8009b70 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8009a04:	e09c      	b.n	8009b40 <HAL_UART_IRQHandler+0x518>
 8009a06:	bf00      	nop
 8009a08:	08009d99 	.word	0x08009d99
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8009a0c:	687b      	ldr	r3, [r7, #4]
 8009a0e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8009a10:	687b      	ldr	r3, [r7, #4]
 8009a12:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8009a14:	b29b      	uxth	r3, r3
 8009a16:	1ad3      	subs	r3, r2, r3
 8009a18:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8009a1c:	687b      	ldr	r3, [r7, #4]
 8009a1e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8009a20:	b29b      	uxth	r3, r3
 8009a22:	2b00      	cmp	r3, #0
 8009a24:	f000 808e 	beq.w	8009b44 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8009a28:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8009a2c:	2b00      	cmp	r3, #0
 8009a2e:	f000 8089 	beq.w	8009b44 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009a32:	687b      	ldr	r3, [r7, #4]
 8009a34:	681b      	ldr	r3, [r3, #0]
 8009a36:	330c      	adds	r3, #12
 8009a38:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009a3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009a3c:	e853 3f00 	ldrex	r3, [r3]
 8009a40:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8009a42:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009a44:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8009a48:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8009a4c:	687b      	ldr	r3, [r7, #4]
 8009a4e:	681b      	ldr	r3, [r3, #0]
 8009a50:	330c      	adds	r3, #12
 8009a52:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8009a56:	647a      	str	r2, [r7, #68]	; 0x44
 8009a58:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009a5a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8009a5c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009a5e:	e841 2300 	strex	r3, r2, [r1]
 8009a62:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8009a64:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009a66:	2b00      	cmp	r3, #0
 8009a68:	d1e3      	bne.n	8009a32 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009a6a:	687b      	ldr	r3, [r7, #4]
 8009a6c:	681b      	ldr	r3, [r3, #0]
 8009a6e:	3314      	adds	r3, #20
 8009a70:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009a72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a74:	e853 3f00 	ldrex	r3, [r3]
 8009a78:	623b      	str	r3, [r7, #32]
   return(result);
 8009a7a:	6a3b      	ldr	r3, [r7, #32]
 8009a7c:	f023 0301 	bic.w	r3, r3, #1
 8009a80:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8009a84:	687b      	ldr	r3, [r7, #4]
 8009a86:	681b      	ldr	r3, [r3, #0]
 8009a88:	3314      	adds	r3, #20
 8009a8a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8009a8e:	633a      	str	r2, [r7, #48]	; 0x30
 8009a90:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009a92:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009a94:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009a96:	e841 2300 	strex	r3, r2, [r1]
 8009a9a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8009a9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a9e:	2b00      	cmp	r3, #0
 8009aa0:	d1e3      	bne.n	8009a6a <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8009aa2:	687b      	ldr	r3, [r7, #4]
 8009aa4:	2220      	movs	r2, #32
 8009aa6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009aaa:	687b      	ldr	r3, [r7, #4]
 8009aac:	2200      	movs	r2, #0
 8009aae:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009ab0:	687b      	ldr	r3, [r7, #4]
 8009ab2:	681b      	ldr	r3, [r3, #0]
 8009ab4:	330c      	adds	r3, #12
 8009ab6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009ab8:	693b      	ldr	r3, [r7, #16]
 8009aba:	e853 3f00 	ldrex	r3, [r3]
 8009abe:	60fb      	str	r3, [r7, #12]
   return(result);
 8009ac0:	68fb      	ldr	r3, [r7, #12]
 8009ac2:	f023 0310 	bic.w	r3, r3, #16
 8009ac6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8009aca:	687b      	ldr	r3, [r7, #4]
 8009acc:	681b      	ldr	r3, [r3, #0]
 8009ace:	330c      	adds	r3, #12
 8009ad0:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8009ad4:	61fa      	str	r2, [r7, #28]
 8009ad6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009ad8:	69b9      	ldr	r1, [r7, #24]
 8009ada:	69fa      	ldr	r2, [r7, #28]
 8009adc:	e841 2300 	strex	r3, r2, [r1]
 8009ae0:	617b      	str	r3, [r7, #20]
   return(result);
 8009ae2:	697b      	ldr	r3, [r7, #20]
 8009ae4:	2b00      	cmp	r3, #0
 8009ae6:	d1e3      	bne.n	8009ab0 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8009ae8:	687b      	ldr	r3, [r7, #4]
 8009aea:	2202      	movs	r2, #2
 8009aec:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8009aee:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8009af2:	4619      	mov	r1, r3
 8009af4:	6878      	ldr	r0, [r7, #4]
 8009af6:	f000 f83b 	bl	8009b70 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8009afa:	e023      	b.n	8009b44 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8009afc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009b00:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009b04:	2b00      	cmp	r3, #0
 8009b06:	d009      	beq.n	8009b1c <HAL_UART_IRQHandler+0x4f4>
 8009b08:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009b0c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009b10:	2b00      	cmp	r3, #0
 8009b12:	d003      	beq.n	8009b1c <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8009b14:	6878      	ldr	r0, [r7, #4]
 8009b16:	f000 f953 	bl	8009dc0 <UART_Transmit_IT>
    return;
 8009b1a:	e014      	b.n	8009b46 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8009b1c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009b20:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009b24:	2b00      	cmp	r3, #0
 8009b26:	d00e      	beq.n	8009b46 <HAL_UART_IRQHandler+0x51e>
 8009b28:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009b2c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009b30:	2b00      	cmp	r3, #0
 8009b32:	d008      	beq.n	8009b46 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8009b34:	6878      	ldr	r0, [r7, #4]
 8009b36:	f000 f992 	bl	8009e5e <UART_EndTransmit_IT>
    return;
 8009b3a:	e004      	b.n	8009b46 <HAL_UART_IRQHandler+0x51e>
    return;
 8009b3c:	bf00      	nop
 8009b3e:	e002      	b.n	8009b46 <HAL_UART_IRQHandler+0x51e>
      return;
 8009b40:	bf00      	nop
 8009b42:	e000      	b.n	8009b46 <HAL_UART_IRQHandler+0x51e>
      return;
 8009b44:	bf00      	nop
  }
}
 8009b46:	37e8      	adds	r7, #232	; 0xe8
 8009b48:	46bd      	mov	sp, r7
 8009b4a:	bd80      	pop	{r7, pc}

08009b4c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8009b4c:	b480      	push	{r7}
 8009b4e:	b083      	sub	sp, #12
 8009b50:	af00      	add	r7, sp, #0
 8009b52:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8009b54:	bf00      	nop
 8009b56:	370c      	adds	r7, #12
 8009b58:	46bd      	mov	sp, r7
 8009b5a:	bc80      	pop	{r7}
 8009b5c:	4770      	bx	lr

08009b5e <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8009b5e:	b480      	push	{r7}
 8009b60:	b083      	sub	sp, #12
 8009b62:	af00      	add	r7, sp, #0
 8009b64:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8009b66:	bf00      	nop
 8009b68:	370c      	adds	r7, #12
 8009b6a:	46bd      	mov	sp, r7
 8009b6c:	bc80      	pop	{r7}
 8009b6e:	4770      	bx	lr

08009b70 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8009b70:	b480      	push	{r7}
 8009b72:	b083      	sub	sp, #12
 8009b74:	af00      	add	r7, sp, #0
 8009b76:	6078      	str	r0, [r7, #4]
 8009b78:	460b      	mov	r3, r1
 8009b7a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8009b7c:	bf00      	nop
 8009b7e:	370c      	adds	r7, #12
 8009b80:	46bd      	mov	sp, r7
 8009b82:	bc80      	pop	{r7}
 8009b84:	4770      	bx	lr

08009b86 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8009b86:	b580      	push	{r7, lr}
 8009b88:	b090      	sub	sp, #64	; 0x40
 8009b8a:	af00      	add	r7, sp, #0
 8009b8c:	60f8      	str	r0, [r7, #12]
 8009b8e:	60b9      	str	r1, [r7, #8]
 8009b90:	603b      	str	r3, [r7, #0]
 8009b92:	4613      	mov	r3, r2
 8009b94:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009b96:	e050      	b.n	8009c3a <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009b98:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009b9a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009b9e:	d04c      	beq.n	8009c3a <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8009ba0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009ba2:	2b00      	cmp	r3, #0
 8009ba4:	d007      	beq.n	8009bb6 <UART_WaitOnFlagUntilTimeout+0x30>
 8009ba6:	f7fc ffe1 	bl	8006b6c <HAL_GetTick>
 8009baa:	4602      	mov	r2, r0
 8009bac:	683b      	ldr	r3, [r7, #0]
 8009bae:	1ad3      	subs	r3, r2, r3
 8009bb0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009bb2:	429a      	cmp	r2, r3
 8009bb4:	d241      	bcs.n	8009c3a <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8009bb6:	68fb      	ldr	r3, [r7, #12]
 8009bb8:	681b      	ldr	r3, [r3, #0]
 8009bba:	330c      	adds	r3, #12
 8009bbc:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009bbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009bc0:	e853 3f00 	ldrex	r3, [r3]
 8009bc4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8009bc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009bc8:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8009bcc:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009bce:	68fb      	ldr	r3, [r7, #12]
 8009bd0:	681b      	ldr	r3, [r3, #0]
 8009bd2:	330c      	adds	r3, #12
 8009bd4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8009bd6:	637a      	str	r2, [r7, #52]	; 0x34
 8009bd8:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009bda:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8009bdc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009bde:	e841 2300 	strex	r3, r2, [r1]
 8009be2:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8009be4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009be6:	2b00      	cmp	r3, #0
 8009be8:	d1e5      	bne.n	8009bb6 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009bea:	68fb      	ldr	r3, [r7, #12]
 8009bec:	681b      	ldr	r3, [r3, #0]
 8009bee:	3314      	adds	r3, #20
 8009bf0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009bf2:	697b      	ldr	r3, [r7, #20]
 8009bf4:	e853 3f00 	ldrex	r3, [r3]
 8009bf8:	613b      	str	r3, [r7, #16]
   return(result);
 8009bfa:	693b      	ldr	r3, [r7, #16]
 8009bfc:	f023 0301 	bic.w	r3, r3, #1
 8009c00:	63bb      	str	r3, [r7, #56]	; 0x38
 8009c02:	68fb      	ldr	r3, [r7, #12]
 8009c04:	681b      	ldr	r3, [r3, #0]
 8009c06:	3314      	adds	r3, #20
 8009c08:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009c0a:	623a      	str	r2, [r7, #32]
 8009c0c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009c0e:	69f9      	ldr	r1, [r7, #28]
 8009c10:	6a3a      	ldr	r2, [r7, #32]
 8009c12:	e841 2300 	strex	r3, r2, [r1]
 8009c16:	61bb      	str	r3, [r7, #24]
   return(result);
 8009c18:	69bb      	ldr	r3, [r7, #24]
 8009c1a:	2b00      	cmp	r3, #0
 8009c1c:	d1e5      	bne.n	8009bea <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8009c1e:	68fb      	ldr	r3, [r7, #12]
 8009c20:	2220      	movs	r2, #32
 8009c22:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 8009c26:	68fb      	ldr	r3, [r7, #12]
 8009c28:	2220      	movs	r2, #32
 8009c2a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8009c2e:	68fb      	ldr	r3, [r7, #12]
 8009c30:	2200      	movs	r2, #0
 8009c32:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 8009c36:	2303      	movs	r3, #3
 8009c38:	e00f      	b.n	8009c5a <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009c3a:	68fb      	ldr	r3, [r7, #12]
 8009c3c:	681b      	ldr	r3, [r3, #0]
 8009c3e:	681a      	ldr	r2, [r3, #0]
 8009c40:	68bb      	ldr	r3, [r7, #8]
 8009c42:	4013      	ands	r3, r2
 8009c44:	68ba      	ldr	r2, [r7, #8]
 8009c46:	429a      	cmp	r2, r3
 8009c48:	bf0c      	ite	eq
 8009c4a:	2301      	moveq	r3, #1
 8009c4c:	2300      	movne	r3, #0
 8009c4e:	b2db      	uxtb	r3, r3
 8009c50:	461a      	mov	r2, r3
 8009c52:	79fb      	ldrb	r3, [r7, #7]
 8009c54:	429a      	cmp	r2, r3
 8009c56:	d09f      	beq.n	8009b98 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8009c58:	2300      	movs	r3, #0
}
 8009c5a:	4618      	mov	r0, r3
 8009c5c:	3740      	adds	r7, #64	; 0x40
 8009c5e:	46bd      	mov	sp, r7
 8009c60:	bd80      	pop	{r7, pc}

08009c62 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009c62:	b480      	push	{r7}
 8009c64:	b085      	sub	sp, #20
 8009c66:	af00      	add	r7, sp, #0
 8009c68:	60f8      	str	r0, [r7, #12]
 8009c6a:	60b9      	str	r1, [r7, #8]
 8009c6c:	4613      	mov	r3, r2
 8009c6e:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8009c70:	68fb      	ldr	r3, [r7, #12]
 8009c72:	68ba      	ldr	r2, [r7, #8]
 8009c74:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8009c76:	68fb      	ldr	r3, [r7, #12]
 8009c78:	88fa      	ldrh	r2, [r7, #6]
 8009c7a:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8009c7c:	68fb      	ldr	r3, [r7, #12]
 8009c7e:	88fa      	ldrh	r2, [r7, #6]
 8009c80:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009c82:	68fb      	ldr	r3, [r7, #12]
 8009c84:	2200      	movs	r2, #0
 8009c86:	645a      	str	r2, [r3, #68]	; 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8009c88:	68fb      	ldr	r3, [r7, #12]
 8009c8a:	2222      	movs	r2, #34	; 0x22
 8009c8c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8009c90:	68fb      	ldr	r3, [r7, #12]
 8009c92:	691b      	ldr	r3, [r3, #16]
 8009c94:	2b00      	cmp	r3, #0
 8009c96:	d007      	beq.n	8009ca8 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8009c98:	68fb      	ldr	r3, [r7, #12]
 8009c9a:	681b      	ldr	r3, [r3, #0]
 8009c9c:	68da      	ldr	r2, [r3, #12]
 8009c9e:	68fb      	ldr	r3, [r7, #12]
 8009ca0:	681b      	ldr	r3, [r3, #0]
 8009ca2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009ca6:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8009ca8:	68fb      	ldr	r3, [r7, #12]
 8009caa:	681b      	ldr	r3, [r3, #0]
 8009cac:	695a      	ldr	r2, [r3, #20]
 8009cae:	68fb      	ldr	r3, [r7, #12]
 8009cb0:	681b      	ldr	r3, [r3, #0]
 8009cb2:	f042 0201 	orr.w	r2, r2, #1
 8009cb6:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8009cb8:	68fb      	ldr	r3, [r7, #12]
 8009cba:	681b      	ldr	r3, [r3, #0]
 8009cbc:	68da      	ldr	r2, [r3, #12]
 8009cbe:	68fb      	ldr	r3, [r7, #12]
 8009cc0:	681b      	ldr	r3, [r3, #0]
 8009cc2:	f042 0220 	orr.w	r2, r2, #32
 8009cc6:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8009cc8:	2300      	movs	r3, #0
}
 8009cca:	4618      	mov	r0, r3
 8009ccc:	3714      	adds	r7, #20
 8009cce:	46bd      	mov	sp, r7
 8009cd0:	bc80      	pop	{r7}
 8009cd2:	4770      	bx	lr

08009cd4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8009cd4:	b480      	push	{r7}
 8009cd6:	b095      	sub	sp, #84	; 0x54
 8009cd8:	af00      	add	r7, sp, #0
 8009cda:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009cdc:	687b      	ldr	r3, [r7, #4]
 8009cde:	681b      	ldr	r3, [r3, #0]
 8009ce0:	330c      	adds	r3, #12
 8009ce2:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009ce4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009ce6:	e853 3f00 	ldrex	r3, [r3]
 8009cea:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8009cec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009cee:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8009cf2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009cf4:	687b      	ldr	r3, [r7, #4]
 8009cf6:	681b      	ldr	r3, [r3, #0]
 8009cf8:	330c      	adds	r3, #12
 8009cfa:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8009cfc:	643a      	str	r2, [r7, #64]	; 0x40
 8009cfe:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009d00:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8009d02:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8009d04:	e841 2300 	strex	r3, r2, [r1]
 8009d08:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8009d0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009d0c:	2b00      	cmp	r3, #0
 8009d0e:	d1e5      	bne.n	8009cdc <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009d10:	687b      	ldr	r3, [r7, #4]
 8009d12:	681b      	ldr	r3, [r3, #0]
 8009d14:	3314      	adds	r3, #20
 8009d16:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009d18:	6a3b      	ldr	r3, [r7, #32]
 8009d1a:	e853 3f00 	ldrex	r3, [r3]
 8009d1e:	61fb      	str	r3, [r7, #28]
   return(result);
 8009d20:	69fb      	ldr	r3, [r7, #28]
 8009d22:	f023 0301 	bic.w	r3, r3, #1
 8009d26:	64bb      	str	r3, [r7, #72]	; 0x48
 8009d28:	687b      	ldr	r3, [r7, #4]
 8009d2a:	681b      	ldr	r3, [r3, #0]
 8009d2c:	3314      	adds	r3, #20
 8009d2e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009d30:	62fa      	str	r2, [r7, #44]	; 0x2c
 8009d32:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009d34:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009d36:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009d38:	e841 2300 	strex	r3, r2, [r1]
 8009d3c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8009d3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d40:	2b00      	cmp	r3, #0
 8009d42:	d1e5      	bne.n	8009d10 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009d44:	687b      	ldr	r3, [r7, #4]
 8009d46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009d48:	2b01      	cmp	r3, #1
 8009d4a:	d119      	bne.n	8009d80 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009d4c:	687b      	ldr	r3, [r7, #4]
 8009d4e:	681b      	ldr	r3, [r3, #0]
 8009d50:	330c      	adds	r3, #12
 8009d52:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009d54:	68fb      	ldr	r3, [r7, #12]
 8009d56:	e853 3f00 	ldrex	r3, [r3]
 8009d5a:	60bb      	str	r3, [r7, #8]
   return(result);
 8009d5c:	68bb      	ldr	r3, [r7, #8]
 8009d5e:	f023 0310 	bic.w	r3, r3, #16
 8009d62:	647b      	str	r3, [r7, #68]	; 0x44
 8009d64:	687b      	ldr	r3, [r7, #4]
 8009d66:	681b      	ldr	r3, [r3, #0]
 8009d68:	330c      	adds	r3, #12
 8009d6a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009d6c:	61ba      	str	r2, [r7, #24]
 8009d6e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009d70:	6979      	ldr	r1, [r7, #20]
 8009d72:	69ba      	ldr	r2, [r7, #24]
 8009d74:	e841 2300 	strex	r3, r2, [r1]
 8009d78:	613b      	str	r3, [r7, #16]
   return(result);
 8009d7a:	693b      	ldr	r3, [r7, #16]
 8009d7c:	2b00      	cmp	r3, #0
 8009d7e:	d1e5      	bne.n	8009d4c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8009d80:	687b      	ldr	r3, [r7, #4]
 8009d82:	2220      	movs	r2, #32
 8009d84:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009d88:	687b      	ldr	r3, [r7, #4]
 8009d8a:	2200      	movs	r2, #0
 8009d8c:	631a      	str	r2, [r3, #48]	; 0x30
}
 8009d8e:	bf00      	nop
 8009d90:	3754      	adds	r7, #84	; 0x54
 8009d92:	46bd      	mov	sp, r7
 8009d94:	bc80      	pop	{r7}
 8009d96:	4770      	bx	lr

08009d98 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8009d98:	b580      	push	{r7, lr}
 8009d9a:	b084      	sub	sp, #16
 8009d9c:	af00      	add	r7, sp, #0
 8009d9e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009da0:	687b      	ldr	r3, [r7, #4]
 8009da2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009da4:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8009da6:	68fb      	ldr	r3, [r7, #12]
 8009da8:	2200      	movs	r2, #0
 8009daa:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8009dac:	68fb      	ldr	r3, [r7, #12]
 8009dae:	2200      	movs	r2, #0
 8009db0:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8009db2:	68f8      	ldr	r0, [r7, #12]
 8009db4:	f7ff fed3 	bl	8009b5e <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009db8:	bf00      	nop
 8009dba:	3710      	adds	r7, #16
 8009dbc:	46bd      	mov	sp, r7
 8009dbe:	bd80      	pop	{r7, pc}

08009dc0 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8009dc0:	b480      	push	{r7}
 8009dc2:	b085      	sub	sp, #20
 8009dc4:	af00      	add	r7, sp, #0
 8009dc6:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8009dc8:	687b      	ldr	r3, [r7, #4]
 8009dca:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009dce:	b2db      	uxtb	r3, r3
 8009dd0:	2b21      	cmp	r3, #33	; 0x21
 8009dd2:	d13e      	bne.n	8009e52 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009dd4:	687b      	ldr	r3, [r7, #4]
 8009dd6:	689b      	ldr	r3, [r3, #8]
 8009dd8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009ddc:	d114      	bne.n	8009e08 <UART_Transmit_IT+0x48>
 8009dde:	687b      	ldr	r3, [r7, #4]
 8009de0:	691b      	ldr	r3, [r3, #16]
 8009de2:	2b00      	cmp	r3, #0
 8009de4:	d110      	bne.n	8009e08 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8009de6:	687b      	ldr	r3, [r7, #4]
 8009de8:	6a1b      	ldr	r3, [r3, #32]
 8009dea:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8009dec:	68fb      	ldr	r3, [r7, #12]
 8009dee:	881b      	ldrh	r3, [r3, #0]
 8009df0:	461a      	mov	r2, r3
 8009df2:	687b      	ldr	r3, [r7, #4]
 8009df4:	681b      	ldr	r3, [r3, #0]
 8009df6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8009dfa:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8009dfc:	687b      	ldr	r3, [r7, #4]
 8009dfe:	6a1b      	ldr	r3, [r3, #32]
 8009e00:	1c9a      	adds	r2, r3, #2
 8009e02:	687b      	ldr	r3, [r7, #4]
 8009e04:	621a      	str	r2, [r3, #32]
 8009e06:	e008      	b.n	8009e1a <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8009e08:	687b      	ldr	r3, [r7, #4]
 8009e0a:	6a1b      	ldr	r3, [r3, #32]
 8009e0c:	1c59      	adds	r1, r3, #1
 8009e0e:	687a      	ldr	r2, [r7, #4]
 8009e10:	6211      	str	r1, [r2, #32]
 8009e12:	781a      	ldrb	r2, [r3, #0]
 8009e14:	687b      	ldr	r3, [r7, #4]
 8009e16:	681b      	ldr	r3, [r3, #0]
 8009e18:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8009e1a:	687b      	ldr	r3, [r7, #4]
 8009e1c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8009e1e:	b29b      	uxth	r3, r3
 8009e20:	3b01      	subs	r3, #1
 8009e22:	b29b      	uxth	r3, r3
 8009e24:	687a      	ldr	r2, [r7, #4]
 8009e26:	4619      	mov	r1, r3
 8009e28:	84d1      	strh	r1, [r2, #38]	; 0x26
 8009e2a:	2b00      	cmp	r3, #0
 8009e2c:	d10f      	bne.n	8009e4e <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8009e2e:	687b      	ldr	r3, [r7, #4]
 8009e30:	681b      	ldr	r3, [r3, #0]
 8009e32:	68da      	ldr	r2, [r3, #12]
 8009e34:	687b      	ldr	r3, [r7, #4]
 8009e36:	681b      	ldr	r3, [r3, #0]
 8009e38:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8009e3c:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8009e3e:	687b      	ldr	r3, [r7, #4]
 8009e40:	681b      	ldr	r3, [r3, #0]
 8009e42:	68da      	ldr	r2, [r3, #12]
 8009e44:	687b      	ldr	r3, [r7, #4]
 8009e46:	681b      	ldr	r3, [r3, #0]
 8009e48:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009e4c:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8009e4e:	2300      	movs	r3, #0
 8009e50:	e000      	b.n	8009e54 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8009e52:	2302      	movs	r3, #2
  }
}
 8009e54:	4618      	mov	r0, r3
 8009e56:	3714      	adds	r7, #20
 8009e58:	46bd      	mov	sp, r7
 8009e5a:	bc80      	pop	{r7}
 8009e5c:	4770      	bx	lr

08009e5e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8009e5e:	b580      	push	{r7, lr}
 8009e60:	b082      	sub	sp, #8
 8009e62:	af00      	add	r7, sp, #0
 8009e64:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8009e66:	687b      	ldr	r3, [r7, #4]
 8009e68:	681b      	ldr	r3, [r3, #0]
 8009e6a:	68da      	ldr	r2, [r3, #12]
 8009e6c:	687b      	ldr	r3, [r7, #4]
 8009e6e:	681b      	ldr	r3, [r3, #0]
 8009e70:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009e74:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8009e76:	687b      	ldr	r3, [r7, #4]
 8009e78:	2220      	movs	r2, #32
 8009e7a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8009e7e:	6878      	ldr	r0, [r7, #4]
 8009e80:	f7ff fe64 	bl	8009b4c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8009e84:	2300      	movs	r3, #0
}
 8009e86:	4618      	mov	r0, r3
 8009e88:	3708      	adds	r7, #8
 8009e8a:	46bd      	mov	sp, r7
 8009e8c:	bd80      	pop	{r7, pc}

08009e8e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8009e8e:	b580      	push	{r7, lr}
 8009e90:	b08c      	sub	sp, #48	; 0x30
 8009e92:	af00      	add	r7, sp, #0
 8009e94:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009e96:	687b      	ldr	r3, [r7, #4]
 8009e98:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8009e9c:	b2db      	uxtb	r3, r3
 8009e9e:	2b22      	cmp	r3, #34	; 0x22
 8009ea0:	f040 80ae 	bne.w	800a000 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009ea4:	687b      	ldr	r3, [r7, #4]
 8009ea6:	689b      	ldr	r3, [r3, #8]
 8009ea8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009eac:	d117      	bne.n	8009ede <UART_Receive_IT+0x50>
 8009eae:	687b      	ldr	r3, [r7, #4]
 8009eb0:	691b      	ldr	r3, [r3, #16]
 8009eb2:	2b00      	cmp	r3, #0
 8009eb4:	d113      	bne.n	8009ede <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8009eb6:	2300      	movs	r3, #0
 8009eb8:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8009eba:	687b      	ldr	r3, [r7, #4]
 8009ebc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009ebe:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8009ec0:	687b      	ldr	r3, [r7, #4]
 8009ec2:	681b      	ldr	r3, [r3, #0]
 8009ec4:	685b      	ldr	r3, [r3, #4]
 8009ec6:	b29b      	uxth	r3, r3
 8009ec8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009ecc:	b29a      	uxth	r2, r3
 8009ece:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009ed0:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8009ed2:	687b      	ldr	r3, [r7, #4]
 8009ed4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009ed6:	1c9a      	adds	r2, r3, #2
 8009ed8:	687b      	ldr	r3, [r7, #4]
 8009eda:	629a      	str	r2, [r3, #40]	; 0x28
 8009edc:	e026      	b.n	8009f2c <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8009ede:	687b      	ldr	r3, [r7, #4]
 8009ee0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009ee2:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8009ee4:	2300      	movs	r3, #0
 8009ee6:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8009ee8:	687b      	ldr	r3, [r7, #4]
 8009eea:	689b      	ldr	r3, [r3, #8]
 8009eec:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009ef0:	d007      	beq.n	8009f02 <UART_Receive_IT+0x74>
 8009ef2:	687b      	ldr	r3, [r7, #4]
 8009ef4:	689b      	ldr	r3, [r3, #8]
 8009ef6:	2b00      	cmp	r3, #0
 8009ef8:	d10a      	bne.n	8009f10 <UART_Receive_IT+0x82>
 8009efa:	687b      	ldr	r3, [r7, #4]
 8009efc:	691b      	ldr	r3, [r3, #16]
 8009efe:	2b00      	cmp	r3, #0
 8009f00:	d106      	bne.n	8009f10 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8009f02:	687b      	ldr	r3, [r7, #4]
 8009f04:	681b      	ldr	r3, [r3, #0]
 8009f06:	685b      	ldr	r3, [r3, #4]
 8009f08:	b2da      	uxtb	r2, r3
 8009f0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009f0c:	701a      	strb	r2, [r3, #0]
 8009f0e:	e008      	b.n	8009f22 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8009f10:	687b      	ldr	r3, [r7, #4]
 8009f12:	681b      	ldr	r3, [r3, #0]
 8009f14:	685b      	ldr	r3, [r3, #4]
 8009f16:	b2db      	uxtb	r3, r3
 8009f18:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009f1c:	b2da      	uxtb	r2, r3
 8009f1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009f20:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8009f22:	687b      	ldr	r3, [r7, #4]
 8009f24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009f26:	1c5a      	adds	r2, r3, #1
 8009f28:	687b      	ldr	r3, [r7, #4]
 8009f2a:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8009f2c:	687b      	ldr	r3, [r7, #4]
 8009f2e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8009f30:	b29b      	uxth	r3, r3
 8009f32:	3b01      	subs	r3, #1
 8009f34:	b29b      	uxth	r3, r3
 8009f36:	687a      	ldr	r2, [r7, #4]
 8009f38:	4619      	mov	r1, r3
 8009f3a:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8009f3c:	2b00      	cmp	r3, #0
 8009f3e:	d15d      	bne.n	8009ffc <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8009f40:	687b      	ldr	r3, [r7, #4]
 8009f42:	681b      	ldr	r3, [r3, #0]
 8009f44:	68da      	ldr	r2, [r3, #12]
 8009f46:	687b      	ldr	r3, [r7, #4]
 8009f48:	681b      	ldr	r3, [r3, #0]
 8009f4a:	f022 0220 	bic.w	r2, r2, #32
 8009f4e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8009f50:	687b      	ldr	r3, [r7, #4]
 8009f52:	681b      	ldr	r3, [r3, #0]
 8009f54:	68da      	ldr	r2, [r3, #12]
 8009f56:	687b      	ldr	r3, [r7, #4]
 8009f58:	681b      	ldr	r3, [r3, #0]
 8009f5a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8009f5e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8009f60:	687b      	ldr	r3, [r7, #4]
 8009f62:	681b      	ldr	r3, [r3, #0]
 8009f64:	695a      	ldr	r2, [r3, #20]
 8009f66:	687b      	ldr	r3, [r7, #4]
 8009f68:	681b      	ldr	r3, [r3, #0]
 8009f6a:	f022 0201 	bic.w	r2, r2, #1
 8009f6e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8009f70:	687b      	ldr	r3, [r7, #4]
 8009f72:	2220      	movs	r2, #32
 8009f74:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009f78:	687b      	ldr	r3, [r7, #4]
 8009f7a:	2200      	movs	r2, #0
 8009f7c:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009f7e:	687b      	ldr	r3, [r7, #4]
 8009f80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009f82:	2b01      	cmp	r3, #1
 8009f84:	d135      	bne.n	8009ff2 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009f86:	687b      	ldr	r3, [r7, #4]
 8009f88:	2200      	movs	r2, #0
 8009f8a:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009f8c:	687b      	ldr	r3, [r7, #4]
 8009f8e:	681b      	ldr	r3, [r3, #0]
 8009f90:	330c      	adds	r3, #12
 8009f92:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009f94:	697b      	ldr	r3, [r7, #20]
 8009f96:	e853 3f00 	ldrex	r3, [r3]
 8009f9a:	613b      	str	r3, [r7, #16]
   return(result);
 8009f9c:	693b      	ldr	r3, [r7, #16]
 8009f9e:	f023 0310 	bic.w	r3, r3, #16
 8009fa2:	627b      	str	r3, [r7, #36]	; 0x24
 8009fa4:	687b      	ldr	r3, [r7, #4]
 8009fa6:	681b      	ldr	r3, [r3, #0]
 8009fa8:	330c      	adds	r3, #12
 8009faa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009fac:	623a      	str	r2, [r7, #32]
 8009fae:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009fb0:	69f9      	ldr	r1, [r7, #28]
 8009fb2:	6a3a      	ldr	r2, [r7, #32]
 8009fb4:	e841 2300 	strex	r3, r2, [r1]
 8009fb8:	61bb      	str	r3, [r7, #24]
   return(result);
 8009fba:	69bb      	ldr	r3, [r7, #24]
 8009fbc:	2b00      	cmp	r3, #0
 8009fbe:	d1e5      	bne.n	8009f8c <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8009fc0:	687b      	ldr	r3, [r7, #4]
 8009fc2:	681b      	ldr	r3, [r3, #0]
 8009fc4:	681b      	ldr	r3, [r3, #0]
 8009fc6:	f003 0310 	and.w	r3, r3, #16
 8009fca:	2b10      	cmp	r3, #16
 8009fcc:	d10a      	bne.n	8009fe4 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8009fce:	2300      	movs	r3, #0
 8009fd0:	60fb      	str	r3, [r7, #12]
 8009fd2:	687b      	ldr	r3, [r7, #4]
 8009fd4:	681b      	ldr	r3, [r3, #0]
 8009fd6:	681b      	ldr	r3, [r3, #0]
 8009fd8:	60fb      	str	r3, [r7, #12]
 8009fda:	687b      	ldr	r3, [r7, #4]
 8009fdc:	681b      	ldr	r3, [r3, #0]
 8009fde:	685b      	ldr	r3, [r3, #4]
 8009fe0:	60fb      	str	r3, [r7, #12]
 8009fe2:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009fe4:	687b      	ldr	r3, [r7, #4]
 8009fe6:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8009fe8:	4619      	mov	r1, r3
 8009fea:	6878      	ldr	r0, [r7, #4]
 8009fec:	f7ff fdc0 	bl	8009b70 <HAL_UARTEx_RxEventCallback>
 8009ff0:	e002      	b.n	8009ff8 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8009ff2:	6878      	ldr	r0, [r7, #4]
 8009ff4:	f7fc fa58 	bl	80064a8 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8009ff8:	2300      	movs	r3, #0
 8009ffa:	e002      	b.n	800a002 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8009ffc:	2300      	movs	r3, #0
 8009ffe:	e000      	b.n	800a002 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 800a000:	2302      	movs	r3, #2
  }
}
 800a002:	4618      	mov	r0, r3
 800a004:	3730      	adds	r7, #48	; 0x30
 800a006:	46bd      	mov	sp, r7
 800a008:	bd80      	pop	{r7, pc}
	...

0800a00c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800a00c:	b580      	push	{r7, lr}
 800a00e:	b084      	sub	sp, #16
 800a010:	af00      	add	r7, sp, #0
 800a012:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800a014:	687b      	ldr	r3, [r7, #4]
 800a016:	681b      	ldr	r3, [r3, #0]
 800a018:	691b      	ldr	r3, [r3, #16]
 800a01a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800a01e:	687b      	ldr	r3, [r7, #4]
 800a020:	68da      	ldr	r2, [r3, #12]
 800a022:	687b      	ldr	r3, [r7, #4]
 800a024:	681b      	ldr	r3, [r3, #0]
 800a026:	430a      	orrs	r2, r1
 800a028:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800a02a:	687b      	ldr	r3, [r7, #4]
 800a02c:	689a      	ldr	r2, [r3, #8]
 800a02e:	687b      	ldr	r3, [r7, #4]
 800a030:	691b      	ldr	r3, [r3, #16]
 800a032:	431a      	orrs	r2, r3
 800a034:	687b      	ldr	r3, [r7, #4]
 800a036:	695b      	ldr	r3, [r3, #20]
 800a038:	4313      	orrs	r3, r2
 800a03a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 800a03c:	687b      	ldr	r3, [r7, #4]
 800a03e:	681b      	ldr	r3, [r3, #0]
 800a040:	68db      	ldr	r3, [r3, #12]
 800a042:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800a046:	f023 030c 	bic.w	r3, r3, #12
 800a04a:	687a      	ldr	r2, [r7, #4]
 800a04c:	6812      	ldr	r2, [r2, #0]
 800a04e:	68b9      	ldr	r1, [r7, #8]
 800a050:	430b      	orrs	r3, r1
 800a052:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800a054:	687b      	ldr	r3, [r7, #4]
 800a056:	681b      	ldr	r3, [r3, #0]
 800a058:	695b      	ldr	r3, [r3, #20]
 800a05a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800a05e:	687b      	ldr	r3, [r7, #4]
 800a060:	699a      	ldr	r2, [r3, #24]
 800a062:	687b      	ldr	r3, [r7, #4]
 800a064:	681b      	ldr	r3, [r3, #0]
 800a066:	430a      	orrs	r2, r1
 800a068:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800a06a:	687b      	ldr	r3, [r7, #4]
 800a06c:	681b      	ldr	r3, [r3, #0]
 800a06e:	4a2c      	ldr	r2, [pc, #176]	; (800a120 <UART_SetConfig+0x114>)
 800a070:	4293      	cmp	r3, r2
 800a072:	d103      	bne.n	800a07c <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 800a074:	f7fd fdbe 	bl	8007bf4 <HAL_RCC_GetPCLK2Freq>
 800a078:	60f8      	str	r0, [r7, #12]
 800a07a:	e002      	b.n	800a082 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 800a07c:	f7fd fda6 	bl	8007bcc <HAL_RCC_GetPCLK1Freq>
 800a080:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800a082:	68fa      	ldr	r2, [r7, #12]
 800a084:	4613      	mov	r3, r2
 800a086:	009b      	lsls	r3, r3, #2
 800a088:	4413      	add	r3, r2
 800a08a:	009a      	lsls	r2, r3, #2
 800a08c:	441a      	add	r2, r3
 800a08e:	687b      	ldr	r3, [r7, #4]
 800a090:	685b      	ldr	r3, [r3, #4]
 800a092:	009b      	lsls	r3, r3, #2
 800a094:	fbb2 f3f3 	udiv	r3, r2, r3
 800a098:	4a22      	ldr	r2, [pc, #136]	; (800a124 <UART_SetConfig+0x118>)
 800a09a:	fba2 2303 	umull	r2, r3, r2, r3
 800a09e:	095b      	lsrs	r3, r3, #5
 800a0a0:	0119      	lsls	r1, r3, #4
 800a0a2:	68fa      	ldr	r2, [r7, #12]
 800a0a4:	4613      	mov	r3, r2
 800a0a6:	009b      	lsls	r3, r3, #2
 800a0a8:	4413      	add	r3, r2
 800a0aa:	009a      	lsls	r2, r3, #2
 800a0ac:	441a      	add	r2, r3
 800a0ae:	687b      	ldr	r3, [r7, #4]
 800a0b0:	685b      	ldr	r3, [r3, #4]
 800a0b2:	009b      	lsls	r3, r3, #2
 800a0b4:	fbb2 f2f3 	udiv	r2, r2, r3
 800a0b8:	4b1a      	ldr	r3, [pc, #104]	; (800a124 <UART_SetConfig+0x118>)
 800a0ba:	fba3 0302 	umull	r0, r3, r3, r2
 800a0be:	095b      	lsrs	r3, r3, #5
 800a0c0:	2064      	movs	r0, #100	; 0x64
 800a0c2:	fb00 f303 	mul.w	r3, r0, r3
 800a0c6:	1ad3      	subs	r3, r2, r3
 800a0c8:	011b      	lsls	r3, r3, #4
 800a0ca:	3332      	adds	r3, #50	; 0x32
 800a0cc:	4a15      	ldr	r2, [pc, #84]	; (800a124 <UART_SetConfig+0x118>)
 800a0ce:	fba2 2303 	umull	r2, r3, r2, r3
 800a0d2:	095b      	lsrs	r3, r3, #5
 800a0d4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800a0d8:	4419      	add	r1, r3
 800a0da:	68fa      	ldr	r2, [r7, #12]
 800a0dc:	4613      	mov	r3, r2
 800a0de:	009b      	lsls	r3, r3, #2
 800a0e0:	4413      	add	r3, r2
 800a0e2:	009a      	lsls	r2, r3, #2
 800a0e4:	441a      	add	r2, r3
 800a0e6:	687b      	ldr	r3, [r7, #4]
 800a0e8:	685b      	ldr	r3, [r3, #4]
 800a0ea:	009b      	lsls	r3, r3, #2
 800a0ec:	fbb2 f2f3 	udiv	r2, r2, r3
 800a0f0:	4b0c      	ldr	r3, [pc, #48]	; (800a124 <UART_SetConfig+0x118>)
 800a0f2:	fba3 0302 	umull	r0, r3, r3, r2
 800a0f6:	095b      	lsrs	r3, r3, #5
 800a0f8:	2064      	movs	r0, #100	; 0x64
 800a0fa:	fb00 f303 	mul.w	r3, r0, r3
 800a0fe:	1ad3      	subs	r3, r2, r3
 800a100:	011b      	lsls	r3, r3, #4
 800a102:	3332      	adds	r3, #50	; 0x32
 800a104:	4a07      	ldr	r2, [pc, #28]	; (800a124 <UART_SetConfig+0x118>)
 800a106:	fba2 2303 	umull	r2, r3, r2, r3
 800a10a:	095b      	lsrs	r3, r3, #5
 800a10c:	f003 020f 	and.w	r2, r3, #15
 800a110:	687b      	ldr	r3, [r7, #4]
 800a112:	681b      	ldr	r3, [r3, #0]
 800a114:	440a      	add	r2, r1
 800a116:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 800a118:	bf00      	nop
 800a11a:	3710      	adds	r7, #16
 800a11c:	46bd      	mov	sp, r7
 800a11e:	bd80      	pop	{r7, pc}
 800a120:	40013800 	.word	0x40013800
 800a124:	51eb851f 	.word	0x51eb851f

0800a128 <siprintf>:
 800a128:	b40e      	push	{r1, r2, r3}
 800a12a:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800a12e:	b500      	push	{lr}
 800a130:	b09c      	sub	sp, #112	; 0x70
 800a132:	ab1d      	add	r3, sp, #116	; 0x74
 800a134:	9002      	str	r0, [sp, #8]
 800a136:	9006      	str	r0, [sp, #24]
 800a138:	9107      	str	r1, [sp, #28]
 800a13a:	9104      	str	r1, [sp, #16]
 800a13c:	4808      	ldr	r0, [pc, #32]	; (800a160 <siprintf+0x38>)
 800a13e:	4909      	ldr	r1, [pc, #36]	; (800a164 <siprintf+0x3c>)
 800a140:	f853 2b04 	ldr.w	r2, [r3], #4
 800a144:	9105      	str	r1, [sp, #20]
 800a146:	6800      	ldr	r0, [r0, #0]
 800a148:	a902      	add	r1, sp, #8
 800a14a:	9301      	str	r3, [sp, #4]
 800a14c:	f000 f98e 	bl	800a46c <_svfiprintf_r>
 800a150:	2200      	movs	r2, #0
 800a152:	9b02      	ldr	r3, [sp, #8]
 800a154:	701a      	strb	r2, [r3, #0]
 800a156:	b01c      	add	sp, #112	; 0x70
 800a158:	f85d eb04 	ldr.w	lr, [sp], #4
 800a15c:	b003      	add	sp, #12
 800a15e:	4770      	bx	lr
 800a160:	2000005c 	.word	0x2000005c
 800a164:	ffff0208 	.word	0xffff0208

0800a168 <memset>:
 800a168:	4603      	mov	r3, r0
 800a16a:	4402      	add	r2, r0
 800a16c:	4293      	cmp	r3, r2
 800a16e:	d100      	bne.n	800a172 <memset+0xa>
 800a170:	4770      	bx	lr
 800a172:	f803 1b01 	strb.w	r1, [r3], #1
 800a176:	e7f9      	b.n	800a16c <memset+0x4>

0800a178 <__errno>:
 800a178:	4b01      	ldr	r3, [pc, #4]	; (800a180 <__errno+0x8>)
 800a17a:	6818      	ldr	r0, [r3, #0]
 800a17c:	4770      	bx	lr
 800a17e:	bf00      	nop
 800a180:	2000005c 	.word	0x2000005c

0800a184 <__libc_init_array>:
 800a184:	b570      	push	{r4, r5, r6, lr}
 800a186:	2600      	movs	r6, #0
 800a188:	4d0c      	ldr	r5, [pc, #48]	; (800a1bc <__libc_init_array+0x38>)
 800a18a:	4c0d      	ldr	r4, [pc, #52]	; (800a1c0 <__libc_init_array+0x3c>)
 800a18c:	1b64      	subs	r4, r4, r5
 800a18e:	10a4      	asrs	r4, r4, #2
 800a190:	42a6      	cmp	r6, r4
 800a192:	d109      	bne.n	800a1a8 <__libc_init_array+0x24>
 800a194:	f000 fc7a 	bl	800aa8c <_init>
 800a198:	2600      	movs	r6, #0
 800a19a:	4d0a      	ldr	r5, [pc, #40]	; (800a1c4 <__libc_init_array+0x40>)
 800a19c:	4c0a      	ldr	r4, [pc, #40]	; (800a1c8 <__libc_init_array+0x44>)
 800a19e:	1b64      	subs	r4, r4, r5
 800a1a0:	10a4      	asrs	r4, r4, #2
 800a1a2:	42a6      	cmp	r6, r4
 800a1a4:	d105      	bne.n	800a1b2 <__libc_init_array+0x2e>
 800a1a6:	bd70      	pop	{r4, r5, r6, pc}
 800a1a8:	f855 3b04 	ldr.w	r3, [r5], #4
 800a1ac:	4798      	blx	r3
 800a1ae:	3601      	adds	r6, #1
 800a1b0:	e7ee      	b.n	800a190 <__libc_init_array+0xc>
 800a1b2:	f855 3b04 	ldr.w	r3, [r5], #4
 800a1b6:	4798      	blx	r3
 800a1b8:	3601      	adds	r6, #1
 800a1ba:	e7f2      	b.n	800a1a2 <__libc_init_array+0x1e>
 800a1bc:	080115cc 	.word	0x080115cc
 800a1c0:	080115cc 	.word	0x080115cc
 800a1c4:	080115cc 	.word	0x080115cc
 800a1c8:	080115d0 	.word	0x080115d0

0800a1cc <__retarget_lock_acquire_recursive>:
 800a1cc:	4770      	bx	lr

0800a1ce <__retarget_lock_release_recursive>:
 800a1ce:	4770      	bx	lr

0800a1d0 <_free_r>:
 800a1d0:	b538      	push	{r3, r4, r5, lr}
 800a1d2:	4605      	mov	r5, r0
 800a1d4:	2900      	cmp	r1, #0
 800a1d6:	d040      	beq.n	800a25a <_free_r+0x8a>
 800a1d8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a1dc:	1f0c      	subs	r4, r1, #4
 800a1de:	2b00      	cmp	r3, #0
 800a1e0:	bfb8      	it	lt
 800a1e2:	18e4      	addlt	r4, r4, r3
 800a1e4:	f000 f8dc 	bl	800a3a0 <__malloc_lock>
 800a1e8:	4a1c      	ldr	r2, [pc, #112]	; (800a25c <_free_r+0x8c>)
 800a1ea:	6813      	ldr	r3, [r2, #0]
 800a1ec:	b933      	cbnz	r3, 800a1fc <_free_r+0x2c>
 800a1ee:	6063      	str	r3, [r4, #4]
 800a1f0:	6014      	str	r4, [r2, #0]
 800a1f2:	4628      	mov	r0, r5
 800a1f4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a1f8:	f000 b8d8 	b.w	800a3ac <__malloc_unlock>
 800a1fc:	42a3      	cmp	r3, r4
 800a1fe:	d908      	bls.n	800a212 <_free_r+0x42>
 800a200:	6820      	ldr	r0, [r4, #0]
 800a202:	1821      	adds	r1, r4, r0
 800a204:	428b      	cmp	r3, r1
 800a206:	bf01      	itttt	eq
 800a208:	6819      	ldreq	r1, [r3, #0]
 800a20a:	685b      	ldreq	r3, [r3, #4]
 800a20c:	1809      	addeq	r1, r1, r0
 800a20e:	6021      	streq	r1, [r4, #0]
 800a210:	e7ed      	b.n	800a1ee <_free_r+0x1e>
 800a212:	461a      	mov	r2, r3
 800a214:	685b      	ldr	r3, [r3, #4]
 800a216:	b10b      	cbz	r3, 800a21c <_free_r+0x4c>
 800a218:	42a3      	cmp	r3, r4
 800a21a:	d9fa      	bls.n	800a212 <_free_r+0x42>
 800a21c:	6811      	ldr	r1, [r2, #0]
 800a21e:	1850      	adds	r0, r2, r1
 800a220:	42a0      	cmp	r0, r4
 800a222:	d10b      	bne.n	800a23c <_free_r+0x6c>
 800a224:	6820      	ldr	r0, [r4, #0]
 800a226:	4401      	add	r1, r0
 800a228:	1850      	adds	r0, r2, r1
 800a22a:	4283      	cmp	r3, r0
 800a22c:	6011      	str	r1, [r2, #0]
 800a22e:	d1e0      	bne.n	800a1f2 <_free_r+0x22>
 800a230:	6818      	ldr	r0, [r3, #0]
 800a232:	685b      	ldr	r3, [r3, #4]
 800a234:	4408      	add	r0, r1
 800a236:	6010      	str	r0, [r2, #0]
 800a238:	6053      	str	r3, [r2, #4]
 800a23a:	e7da      	b.n	800a1f2 <_free_r+0x22>
 800a23c:	d902      	bls.n	800a244 <_free_r+0x74>
 800a23e:	230c      	movs	r3, #12
 800a240:	602b      	str	r3, [r5, #0]
 800a242:	e7d6      	b.n	800a1f2 <_free_r+0x22>
 800a244:	6820      	ldr	r0, [r4, #0]
 800a246:	1821      	adds	r1, r4, r0
 800a248:	428b      	cmp	r3, r1
 800a24a:	bf01      	itttt	eq
 800a24c:	6819      	ldreq	r1, [r3, #0]
 800a24e:	685b      	ldreq	r3, [r3, #4]
 800a250:	1809      	addeq	r1, r1, r0
 800a252:	6021      	streq	r1, [r4, #0]
 800a254:	6063      	str	r3, [r4, #4]
 800a256:	6054      	str	r4, [r2, #4]
 800a258:	e7cb      	b.n	800a1f2 <_free_r+0x22>
 800a25a:	bd38      	pop	{r3, r4, r5, pc}
 800a25c:	20000e50 	.word	0x20000e50

0800a260 <sbrk_aligned>:
 800a260:	b570      	push	{r4, r5, r6, lr}
 800a262:	4e0e      	ldr	r6, [pc, #56]	; (800a29c <sbrk_aligned+0x3c>)
 800a264:	460c      	mov	r4, r1
 800a266:	6831      	ldr	r1, [r6, #0]
 800a268:	4605      	mov	r5, r0
 800a26a:	b911      	cbnz	r1, 800a272 <sbrk_aligned+0x12>
 800a26c:	f000 fbaa 	bl	800a9c4 <_sbrk_r>
 800a270:	6030      	str	r0, [r6, #0]
 800a272:	4621      	mov	r1, r4
 800a274:	4628      	mov	r0, r5
 800a276:	f000 fba5 	bl	800a9c4 <_sbrk_r>
 800a27a:	1c43      	adds	r3, r0, #1
 800a27c:	d00a      	beq.n	800a294 <sbrk_aligned+0x34>
 800a27e:	1cc4      	adds	r4, r0, #3
 800a280:	f024 0403 	bic.w	r4, r4, #3
 800a284:	42a0      	cmp	r0, r4
 800a286:	d007      	beq.n	800a298 <sbrk_aligned+0x38>
 800a288:	1a21      	subs	r1, r4, r0
 800a28a:	4628      	mov	r0, r5
 800a28c:	f000 fb9a 	bl	800a9c4 <_sbrk_r>
 800a290:	3001      	adds	r0, #1
 800a292:	d101      	bne.n	800a298 <sbrk_aligned+0x38>
 800a294:	f04f 34ff 	mov.w	r4, #4294967295
 800a298:	4620      	mov	r0, r4
 800a29a:	bd70      	pop	{r4, r5, r6, pc}
 800a29c:	20000e54 	.word	0x20000e54

0800a2a0 <_malloc_r>:
 800a2a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a2a4:	1ccd      	adds	r5, r1, #3
 800a2a6:	f025 0503 	bic.w	r5, r5, #3
 800a2aa:	3508      	adds	r5, #8
 800a2ac:	2d0c      	cmp	r5, #12
 800a2ae:	bf38      	it	cc
 800a2b0:	250c      	movcc	r5, #12
 800a2b2:	2d00      	cmp	r5, #0
 800a2b4:	4607      	mov	r7, r0
 800a2b6:	db01      	blt.n	800a2bc <_malloc_r+0x1c>
 800a2b8:	42a9      	cmp	r1, r5
 800a2ba:	d905      	bls.n	800a2c8 <_malloc_r+0x28>
 800a2bc:	230c      	movs	r3, #12
 800a2be:	2600      	movs	r6, #0
 800a2c0:	603b      	str	r3, [r7, #0]
 800a2c2:	4630      	mov	r0, r6
 800a2c4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a2c8:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800a39c <_malloc_r+0xfc>
 800a2cc:	f000 f868 	bl	800a3a0 <__malloc_lock>
 800a2d0:	f8d8 3000 	ldr.w	r3, [r8]
 800a2d4:	461c      	mov	r4, r3
 800a2d6:	bb5c      	cbnz	r4, 800a330 <_malloc_r+0x90>
 800a2d8:	4629      	mov	r1, r5
 800a2da:	4638      	mov	r0, r7
 800a2dc:	f7ff ffc0 	bl	800a260 <sbrk_aligned>
 800a2e0:	1c43      	adds	r3, r0, #1
 800a2e2:	4604      	mov	r4, r0
 800a2e4:	d155      	bne.n	800a392 <_malloc_r+0xf2>
 800a2e6:	f8d8 4000 	ldr.w	r4, [r8]
 800a2ea:	4626      	mov	r6, r4
 800a2ec:	2e00      	cmp	r6, #0
 800a2ee:	d145      	bne.n	800a37c <_malloc_r+0xdc>
 800a2f0:	2c00      	cmp	r4, #0
 800a2f2:	d048      	beq.n	800a386 <_malloc_r+0xe6>
 800a2f4:	6823      	ldr	r3, [r4, #0]
 800a2f6:	4631      	mov	r1, r6
 800a2f8:	4638      	mov	r0, r7
 800a2fa:	eb04 0903 	add.w	r9, r4, r3
 800a2fe:	f000 fb61 	bl	800a9c4 <_sbrk_r>
 800a302:	4581      	cmp	r9, r0
 800a304:	d13f      	bne.n	800a386 <_malloc_r+0xe6>
 800a306:	6821      	ldr	r1, [r4, #0]
 800a308:	4638      	mov	r0, r7
 800a30a:	1a6d      	subs	r5, r5, r1
 800a30c:	4629      	mov	r1, r5
 800a30e:	f7ff ffa7 	bl	800a260 <sbrk_aligned>
 800a312:	3001      	adds	r0, #1
 800a314:	d037      	beq.n	800a386 <_malloc_r+0xe6>
 800a316:	6823      	ldr	r3, [r4, #0]
 800a318:	442b      	add	r3, r5
 800a31a:	6023      	str	r3, [r4, #0]
 800a31c:	f8d8 3000 	ldr.w	r3, [r8]
 800a320:	2b00      	cmp	r3, #0
 800a322:	d038      	beq.n	800a396 <_malloc_r+0xf6>
 800a324:	685a      	ldr	r2, [r3, #4]
 800a326:	42a2      	cmp	r2, r4
 800a328:	d12b      	bne.n	800a382 <_malloc_r+0xe2>
 800a32a:	2200      	movs	r2, #0
 800a32c:	605a      	str	r2, [r3, #4]
 800a32e:	e00f      	b.n	800a350 <_malloc_r+0xb0>
 800a330:	6822      	ldr	r2, [r4, #0]
 800a332:	1b52      	subs	r2, r2, r5
 800a334:	d41f      	bmi.n	800a376 <_malloc_r+0xd6>
 800a336:	2a0b      	cmp	r2, #11
 800a338:	d917      	bls.n	800a36a <_malloc_r+0xca>
 800a33a:	1961      	adds	r1, r4, r5
 800a33c:	42a3      	cmp	r3, r4
 800a33e:	6025      	str	r5, [r4, #0]
 800a340:	bf18      	it	ne
 800a342:	6059      	strne	r1, [r3, #4]
 800a344:	6863      	ldr	r3, [r4, #4]
 800a346:	bf08      	it	eq
 800a348:	f8c8 1000 	streq.w	r1, [r8]
 800a34c:	5162      	str	r2, [r4, r5]
 800a34e:	604b      	str	r3, [r1, #4]
 800a350:	4638      	mov	r0, r7
 800a352:	f104 060b 	add.w	r6, r4, #11
 800a356:	f000 f829 	bl	800a3ac <__malloc_unlock>
 800a35a:	f026 0607 	bic.w	r6, r6, #7
 800a35e:	1d23      	adds	r3, r4, #4
 800a360:	1af2      	subs	r2, r6, r3
 800a362:	d0ae      	beq.n	800a2c2 <_malloc_r+0x22>
 800a364:	1b9b      	subs	r3, r3, r6
 800a366:	50a3      	str	r3, [r4, r2]
 800a368:	e7ab      	b.n	800a2c2 <_malloc_r+0x22>
 800a36a:	42a3      	cmp	r3, r4
 800a36c:	6862      	ldr	r2, [r4, #4]
 800a36e:	d1dd      	bne.n	800a32c <_malloc_r+0x8c>
 800a370:	f8c8 2000 	str.w	r2, [r8]
 800a374:	e7ec      	b.n	800a350 <_malloc_r+0xb0>
 800a376:	4623      	mov	r3, r4
 800a378:	6864      	ldr	r4, [r4, #4]
 800a37a:	e7ac      	b.n	800a2d6 <_malloc_r+0x36>
 800a37c:	4634      	mov	r4, r6
 800a37e:	6876      	ldr	r6, [r6, #4]
 800a380:	e7b4      	b.n	800a2ec <_malloc_r+0x4c>
 800a382:	4613      	mov	r3, r2
 800a384:	e7cc      	b.n	800a320 <_malloc_r+0x80>
 800a386:	230c      	movs	r3, #12
 800a388:	4638      	mov	r0, r7
 800a38a:	603b      	str	r3, [r7, #0]
 800a38c:	f000 f80e 	bl	800a3ac <__malloc_unlock>
 800a390:	e797      	b.n	800a2c2 <_malloc_r+0x22>
 800a392:	6025      	str	r5, [r4, #0]
 800a394:	e7dc      	b.n	800a350 <_malloc_r+0xb0>
 800a396:	605b      	str	r3, [r3, #4]
 800a398:	deff      	udf	#255	; 0xff
 800a39a:	bf00      	nop
 800a39c:	20000e50 	.word	0x20000e50

0800a3a0 <__malloc_lock>:
 800a3a0:	4801      	ldr	r0, [pc, #4]	; (800a3a8 <__malloc_lock+0x8>)
 800a3a2:	f7ff bf13 	b.w	800a1cc <__retarget_lock_acquire_recursive>
 800a3a6:	bf00      	nop
 800a3a8:	20000e4c 	.word	0x20000e4c

0800a3ac <__malloc_unlock>:
 800a3ac:	4801      	ldr	r0, [pc, #4]	; (800a3b4 <__malloc_unlock+0x8>)
 800a3ae:	f7ff bf0e 	b.w	800a1ce <__retarget_lock_release_recursive>
 800a3b2:	bf00      	nop
 800a3b4:	20000e4c 	.word	0x20000e4c

0800a3b8 <__ssputs_r>:
 800a3b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a3bc:	461f      	mov	r7, r3
 800a3be:	688e      	ldr	r6, [r1, #8]
 800a3c0:	4682      	mov	sl, r0
 800a3c2:	42be      	cmp	r6, r7
 800a3c4:	460c      	mov	r4, r1
 800a3c6:	4690      	mov	r8, r2
 800a3c8:	680b      	ldr	r3, [r1, #0]
 800a3ca:	d82c      	bhi.n	800a426 <__ssputs_r+0x6e>
 800a3cc:	898a      	ldrh	r2, [r1, #12]
 800a3ce:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800a3d2:	d026      	beq.n	800a422 <__ssputs_r+0x6a>
 800a3d4:	6965      	ldr	r5, [r4, #20]
 800a3d6:	6909      	ldr	r1, [r1, #16]
 800a3d8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800a3dc:	eba3 0901 	sub.w	r9, r3, r1
 800a3e0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800a3e4:	1c7b      	adds	r3, r7, #1
 800a3e6:	444b      	add	r3, r9
 800a3e8:	106d      	asrs	r5, r5, #1
 800a3ea:	429d      	cmp	r5, r3
 800a3ec:	bf38      	it	cc
 800a3ee:	461d      	movcc	r5, r3
 800a3f0:	0553      	lsls	r3, r2, #21
 800a3f2:	d527      	bpl.n	800a444 <__ssputs_r+0x8c>
 800a3f4:	4629      	mov	r1, r5
 800a3f6:	f7ff ff53 	bl	800a2a0 <_malloc_r>
 800a3fa:	4606      	mov	r6, r0
 800a3fc:	b360      	cbz	r0, 800a458 <__ssputs_r+0xa0>
 800a3fe:	464a      	mov	r2, r9
 800a400:	6921      	ldr	r1, [r4, #16]
 800a402:	f000 fafd 	bl	800aa00 <memcpy>
 800a406:	89a3      	ldrh	r3, [r4, #12]
 800a408:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800a40c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a410:	81a3      	strh	r3, [r4, #12]
 800a412:	6126      	str	r6, [r4, #16]
 800a414:	444e      	add	r6, r9
 800a416:	6026      	str	r6, [r4, #0]
 800a418:	463e      	mov	r6, r7
 800a41a:	6165      	str	r5, [r4, #20]
 800a41c:	eba5 0509 	sub.w	r5, r5, r9
 800a420:	60a5      	str	r5, [r4, #8]
 800a422:	42be      	cmp	r6, r7
 800a424:	d900      	bls.n	800a428 <__ssputs_r+0x70>
 800a426:	463e      	mov	r6, r7
 800a428:	4632      	mov	r2, r6
 800a42a:	4641      	mov	r1, r8
 800a42c:	6820      	ldr	r0, [r4, #0]
 800a42e:	f000 faaf 	bl	800a990 <memmove>
 800a432:	2000      	movs	r0, #0
 800a434:	68a3      	ldr	r3, [r4, #8]
 800a436:	1b9b      	subs	r3, r3, r6
 800a438:	60a3      	str	r3, [r4, #8]
 800a43a:	6823      	ldr	r3, [r4, #0]
 800a43c:	4433      	add	r3, r6
 800a43e:	6023      	str	r3, [r4, #0]
 800a440:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a444:	462a      	mov	r2, r5
 800a446:	f000 fae9 	bl	800aa1c <_realloc_r>
 800a44a:	4606      	mov	r6, r0
 800a44c:	2800      	cmp	r0, #0
 800a44e:	d1e0      	bne.n	800a412 <__ssputs_r+0x5a>
 800a450:	4650      	mov	r0, sl
 800a452:	6921      	ldr	r1, [r4, #16]
 800a454:	f7ff febc 	bl	800a1d0 <_free_r>
 800a458:	230c      	movs	r3, #12
 800a45a:	f8ca 3000 	str.w	r3, [sl]
 800a45e:	89a3      	ldrh	r3, [r4, #12]
 800a460:	f04f 30ff 	mov.w	r0, #4294967295
 800a464:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a468:	81a3      	strh	r3, [r4, #12]
 800a46a:	e7e9      	b.n	800a440 <__ssputs_r+0x88>

0800a46c <_svfiprintf_r>:
 800a46c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a470:	4698      	mov	r8, r3
 800a472:	898b      	ldrh	r3, [r1, #12]
 800a474:	4607      	mov	r7, r0
 800a476:	061b      	lsls	r3, r3, #24
 800a478:	460d      	mov	r5, r1
 800a47a:	4614      	mov	r4, r2
 800a47c:	b09d      	sub	sp, #116	; 0x74
 800a47e:	d50e      	bpl.n	800a49e <_svfiprintf_r+0x32>
 800a480:	690b      	ldr	r3, [r1, #16]
 800a482:	b963      	cbnz	r3, 800a49e <_svfiprintf_r+0x32>
 800a484:	2140      	movs	r1, #64	; 0x40
 800a486:	f7ff ff0b 	bl	800a2a0 <_malloc_r>
 800a48a:	6028      	str	r0, [r5, #0]
 800a48c:	6128      	str	r0, [r5, #16]
 800a48e:	b920      	cbnz	r0, 800a49a <_svfiprintf_r+0x2e>
 800a490:	230c      	movs	r3, #12
 800a492:	603b      	str	r3, [r7, #0]
 800a494:	f04f 30ff 	mov.w	r0, #4294967295
 800a498:	e0d0      	b.n	800a63c <_svfiprintf_r+0x1d0>
 800a49a:	2340      	movs	r3, #64	; 0x40
 800a49c:	616b      	str	r3, [r5, #20]
 800a49e:	2300      	movs	r3, #0
 800a4a0:	9309      	str	r3, [sp, #36]	; 0x24
 800a4a2:	2320      	movs	r3, #32
 800a4a4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a4a8:	2330      	movs	r3, #48	; 0x30
 800a4aa:	f04f 0901 	mov.w	r9, #1
 800a4ae:	f8cd 800c 	str.w	r8, [sp, #12]
 800a4b2:	f8df 81a0 	ldr.w	r8, [pc, #416]	; 800a654 <_svfiprintf_r+0x1e8>
 800a4b6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a4ba:	4623      	mov	r3, r4
 800a4bc:	469a      	mov	sl, r3
 800a4be:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a4c2:	b10a      	cbz	r2, 800a4c8 <_svfiprintf_r+0x5c>
 800a4c4:	2a25      	cmp	r2, #37	; 0x25
 800a4c6:	d1f9      	bne.n	800a4bc <_svfiprintf_r+0x50>
 800a4c8:	ebba 0b04 	subs.w	fp, sl, r4
 800a4cc:	d00b      	beq.n	800a4e6 <_svfiprintf_r+0x7a>
 800a4ce:	465b      	mov	r3, fp
 800a4d0:	4622      	mov	r2, r4
 800a4d2:	4629      	mov	r1, r5
 800a4d4:	4638      	mov	r0, r7
 800a4d6:	f7ff ff6f 	bl	800a3b8 <__ssputs_r>
 800a4da:	3001      	adds	r0, #1
 800a4dc:	f000 80a9 	beq.w	800a632 <_svfiprintf_r+0x1c6>
 800a4e0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a4e2:	445a      	add	r2, fp
 800a4e4:	9209      	str	r2, [sp, #36]	; 0x24
 800a4e6:	f89a 3000 	ldrb.w	r3, [sl]
 800a4ea:	2b00      	cmp	r3, #0
 800a4ec:	f000 80a1 	beq.w	800a632 <_svfiprintf_r+0x1c6>
 800a4f0:	2300      	movs	r3, #0
 800a4f2:	f04f 32ff 	mov.w	r2, #4294967295
 800a4f6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a4fa:	f10a 0a01 	add.w	sl, sl, #1
 800a4fe:	9304      	str	r3, [sp, #16]
 800a500:	9307      	str	r3, [sp, #28]
 800a502:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a506:	931a      	str	r3, [sp, #104]	; 0x68
 800a508:	4654      	mov	r4, sl
 800a50a:	2205      	movs	r2, #5
 800a50c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a510:	4850      	ldr	r0, [pc, #320]	; (800a654 <_svfiprintf_r+0x1e8>)
 800a512:	f000 fa67 	bl	800a9e4 <memchr>
 800a516:	9a04      	ldr	r2, [sp, #16]
 800a518:	b9d8      	cbnz	r0, 800a552 <_svfiprintf_r+0xe6>
 800a51a:	06d0      	lsls	r0, r2, #27
 800a51c:	bf44      	itt	mi
 800a51e:	2320      	movmi	r3, #32
 800a520:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a524:	0711      	lsls	r1, r2, #28
 800a526:	bf44      	itt	mi
 800a528:	232b      	movmi	r3, #43	; 0x2b
 800a52a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a52e:	f89a 3000 	ldrb.w	r3, [sl]
 800a532:	2b2a      	cmp	r3, #42	; 0x2a
 800a534:	d015      	beq.n	800a562 <_svfiprintf_r+0xf6>
 800a536:	4654      	mov	r4, sl
 800a538:	2000      	movs	r0, #0
 800a53a:	f04f 0c0a 	mov.w	ip, #10
 800a53e:	9a07      	ldr	r2, [sp, #28]
 800a540:	4621      	mov	r1, r4
 800a542:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a546:	3b30      	subs	r3, #48	; 0x30
 800a548:	2b09      	cmp	r3, #9
 800a54a:	d94d      	bls.n	800a5e8 <_svfiprintf_r+0x17c>
 800a54c:	b1b0      	cbz	r0, 800a57c <_svfiprintf_r+0x110>
 800a54e:	9207      	str	r2, [sp, #28]
 800a550:	e014      	b.n	800a57c <_svfiprintf_r+0x110>
 800a552:	eba0 0308 	sub.w	r3, r0, r8
 800a556:	fa09 f303 	lsl.w	r3, r9, r3
 800a55a:	4313      	orrs	r3, r2
 800a55c:	46a2      	mov	sl, r4
 800a55e:	9304      	str	r3, [sp, #16]
 800a560:	e7d2      	b.n	800a508 <_svfiprintf_r+0x9c>
 800a562:	9b03      	ldr	r3, [sp, #12]
 800a564:	1d19      	adds	r1, r3, #4
 800a566:	681b      	ldr	r3, [r3, #0]
 800a568:	9103      	str	r1, [sp, #12]
 800a56a:	2b00      	cmp	r3, #0
 800a56c:	bfbb      	ittet	lt
 800a56e:	425b      	neglt	r3, r3
 800a570:	f042 0202 	orrlt.w	r2, r2, #2
 800a574:	9307      	strge	r3, [sp, #28]
 800a576:	9307      	strlt	r3, [sp, #28]
 800a578:	bfb8      	it	lt
 800a57a:	9204      	strlt	r2, [sp, #16]
 800a57c:	7823      	ldrb	r3, [r4, #0]
 800a57e:	2b2e      	cmp	r3, #46	; 0x2e
 800a580:	d10c      	bne.n	800a59c <_svfiprintf_r+0x130>
 800a582:	7863      	ldrb	r3, [r4, #1]
 800a584:	2b2a      	cmp	r3, #42	; 0x2a
 800a586:	d134      	bne.n	800a5f2 <_svfiprintf_r+0x186>
 800a588:	9b03      	ldr	r3, [sp, #12]
 800a58a:	3402      	adds	r4, #2
 800a58c:	1d1a      	adds	r2, r3, #4
 800a58e:	681b      	ldr	r3, [r3, #0]
 800a590:	9203      	str	r2, [sp, #12]
 800a592:	2b00      	cmp	r3, #0
 800a594:	bfb8      	it	lt
 800a596:	f04f 33ff 	movlt.w	r3, #4294967295
 800a59a:	9305      	str	r3, [sp, #20]
 800a59c:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 800a658 <_svfiprintf_r+0x1ec>
 800a5a0:	2203      	movs	r2, #3
 800a5a2:	4650      	mov	r0, sl
 800a5a4:	7821      	ldrb	r1, [r4, #0]
 800a5a6:	f000 fa1d 	bl	800a9e4 <memchr>
 800a5aa:	b138      	cbz	r0, 800a5bc <_svfiprintf_r+0x150>
 800a5ac:	2240      	movs	r2, #64	; 0x40
 800a5ae:	9b04      	ldr	r3, [sp, #16]
 800a5b0:	eba0 000a 	sub.w	r0, r0, sl
 800a5b4:	4082      	lsls	r2, r0
 800a5b6:	4313      	orrs	r3, r2
 800a5b8:	3401      	adds	r4, #1
 800a5ba:	9304      	str	r3, [sp, #16]
 800a5bc:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a5c0:	2206      	movs	r2, #6
 800a5c2:	4826      	ldr	r0, [pc, #152]	; (800a65c <_svfiprintf_r+0x1f0>)
 800a5c4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a5c8:	f000 fa0c 	bl	800a9e4 <memchr>
 800a5cc:	2800      	cmp	r0, #0
 800a5ce:	d038      	beq.n	800a642 <_svfiprintf_r+0x1d6>
 800a5d0:	4b23      	ldr	r3, [pc, #140]	; (800a660 <_svfiprintf_r+0x1f4>)
 800a5d2:	bb1b      	cbnz	r3, 800a61c <_svfiprintf_r+0x1b0>
 800a5d4:	9b03      	ldr	r3, [sp, #12]
 800a5d6:	3307      	adds	r3, #7
 800a5d8:	f023 0307 	bic.w	r3, r3, #7
 800a5dc:	3308      	adds	r3, #8
 800a5de:	9303      	str	r3, [sp, #12]
 800a5e0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a5e2:	4433      	add	r3, r6
 800a5e4:	9309      	str	r3, [sp, #36]	; 0x24
 800a5e6:	e768      	b.n	800a4ba <_svfiprintf_r+0x4e>
 800a5e8:	460c      	mov	r4, r1
 800a5ea:	2001      	movs	r0, #1
 800a5ec:	fb0c 3202 	mla	r2, ip, r2, r3
 800a5f0:	e7a6      	b.n	800a540 <_svfiprintf_r+0xd4>
 800a5f2:	2300      	movs	r3, #0
 800a5f4:	f04f 0c0a 	mov.w	ip, #10
 800a5f8:	4619      	mov	r1, r3
 800a5fa:	3401      	adds	r4, #1
 800a5fc:	9305      	str	r3, [sp, #20]
 800a5fe:	4620      	mov	r0, r4
 800a600:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a604:	3a30      	subs	r2, #48	; 0x30
 800a606:	2a09      	cmp	r2, #9
 800a608:	d903      	bls.n	800a612 <_svfiprintf_r+0x1a6>
 800a60a:	2b00      	cmp	r3, #0
 800a60c:	d0c6      	beq.n	800a59c <_svfiprintf_r+0x130>
 800a60e:	9105      	str	r1, [sp, #20]
 800a610:	e7c4      	b.n	800a59c <_svfiprintf_r+0x130>
 800a612:	4604      	mov	r4, r0
 800a614:	2301      	movs	r3, #1
 800a616:	fb0c 2101 	mla	r1, ip, r1, r2
 800a61a:	e7f0      	b.n	800a5fe <_svfiprintf_r+0x192>
 800a61c:	ab03      	add	r3, sp, #12
 800a61e:	9300      	str	r3, [sp, #0]
 800a620:	462a      	mov	r2, r5
 800a622:	4638      	mov	r0, r7
 800a624:	4b0f      	ldr	r3, [pc, #60]	; (800a664 <_svfiprintf_r+0x1f8>)
 800a626:	a904      	add	r1, sp, #16
 800a628:	f3af 8000 	nop.w
 800a62c:	1c42      	adds	r2, r0, #1
 800a62e:	4606      	mov	r6, r0
 800a630:	d1d6      	bne.n	800a5e0 <_svfiprintf_r+0x174>
 800a632:	89ab      	ldrh	r3, [r5, #12]
 800a634:	065b      	lsls	r3, r3, #25
 800a636:	f53f af2d 	bmi.w	800a494 <_svfiprintf_r+0x28>
 800a63a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a63c:	b01d      	add	sp, #116	; 0x74
 800a63e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a642:	ab03      	add	r3, sp, #12
 800a644:	9300      	str	r3, [sp, #0]
 800a646:	462a      	mov	r2, r5
 800a648:	4638      	mov	r0, r7
 800a64a:	4b06      	ldr	r3, [pc, #24]	; (800a664 <_svfiprintf_r+0x1f8>)
 800a64c:	a904      	add	r1, sp, #16
 800a64e:	f000 f87d 	bl	800a74c <_printf_i>
 800a652:	e7eb      	b.n	800a62c <_svfiprintf_r+0x1c0>
 800a654:	08011596 	.word	0x08011596
 800a658:	0801159c 	.word	0x0801159c
 800a65c:	080115a0 	.word	0x080115a0
 800a660:	00000000 	.word	0x00000000
 800a664:	0800a3b9 	.word	0x0800a3b9

0800a668 <_printf_common>:
 800a668:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a66c:	4616      	mov	r6, r2
 800a66e:	4699      	mov	r9, r3
 800a670:	688a      	ldr	r2, [r1, #8]
 800a672:	690b      	ldr	r3, [r1, #16]
 800a674:	4607      	mov	r7, r0
 800a676:	4293      	cmp	r3, r2
 800a678:	bfb8      	it	lt
 800a67a:	4613      	movlt	r3, r2
 800a67c:	6033      	str	r3, [r6, #0]
 800a67e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800a682:	460c      	mov	r4, r1
 800a684:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800a688:	b10a      	cbz	r2, 800a68e <_printf_common+0x26>
 800a68a:	3301      	adds	r3, #1
 800a68c:	6033      	str	r3, [r6, #0]
 800a68e:	6823      	ldr	r3, [r4, #0]
 800a690:	0699      	lsls	r1, r3, #26
 800a692:	bf42      	ittt	mi
 800a694:	6833      	ldrmi	r3, [r6, #0]
 800a696:	3302      	addmi	r3, #2
 800a698:	6033      	strmi	r3, [r6, #0]
 800a69a:	6825      	ldr	r5, [r4, #0]
 800a69c:	f015 0506 	ands.w	r5, r5, #6
 800a6a0:	d106      	bne.n	800a6b0 <_printf_common+0x48>
 800a6a2:	f104 0a19 	add.w	sl, r4, #25
 800a6a6:	68e3      	ldr	r3, [r4, #12]
 800a6a8:	6832      	ldr	r2, [r6, #0]
 800a6aa:	1a9b      	subs	r3, r3, r2
 800a6ac:	42ab      	cmp	r3, r5
 800a6ae:	dc2b      	bgt.n	800a708 <_printf_common+0xa0>
 800a6b0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800a6b4:	1e13      	subs	r3, r2, #0
 800a6b6:	6822      	ldr	r2, [r4, #0]
 800a6b8:	bf18      	it	ne
 800a6ba:	2301      	movne	r3, #1
 800a6bc:	0692      	lsls	r2, r2, #26
 800a6be:	d430      	bmi.n	800a722 <_printf_common+0xba>
 800a6c0:	4649      	mov	r1, r9
 800a6c2:	4638      	mov	r0, r7
 800a6c4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800a6c8:	47c0      	blx	r8
 800a6ca:	3001      	adds	r0, #1
 800a6cc:	d023      	beq.n	800a716 <_printf_common+0xae>
 800a6ce:	6823      	ldr	r3, [r4, #0]
 800a6d0:	6922      	ldr	r2, [r4, #16]
 800a6d2:	f003 0306 	and.w	r3, r3, #6
 800a6d6:	2b04      	cmp	r3, #4
 800a6d8:	bf14      	ite	ne
 800a6da:	2500      	movne	r5, #0
 800a6dc:	6833      	ldreq	r3, [r6, #0]
 800a6de:	f04f 0600 	mov.w	r6, #0
 800a6e2:	bf08      	it	eq
 800a6e4:	68e5      	ldreq	r5, [r4, #12]
 800a6e6:	f104 041a 	add.w	r4, r4, #26
 800a6ea:	bf08      	it	eq
 800a6ec:	1aed      	subeq	r5, r5, r3
 800a6ee:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800a6f2:	bf08      	it	eq
 800a6f4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a6f8:	4293      	cmp	r3, r2
 800a6fa:	bfc4      	itt	gt
 800a6fc:	1a9b      	subgt	r3, r3, r2
 800a6fe:	18ed      	addgt	r5, r5, r3
 800a700:	42b5      	cmp	r5, r6
 800a702:	d11a      	bne.n	800a73a <_printf_common+0xd2>
 800a704:	2000      	movs	r0, #0
 800a706:	e008      	b.n	800a71a <_printf_common+0xb2>
 800a708:	2301      	movs	r3, #1
 800a70a:	4652      	mov	r2, sl
 800a70c:	4649      	mov	r1, r9
 800a70e:	4638      	mov	r0, r7
 800a710:	47c0      	blx	r8
 800a712:	3001      	adds	r0, #1
 800a714:	d103      	bne.n	800a71e <_printf_common+0xb6>
 800a716:	f04f 30ff 	mov.w	r0, #4294967295
 800a71a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a71e:	3501      	adds	r5, #1
 800a720:	e7c1      	b.n	800a6a6 <_printf_common+0x3e>
 800a722:	2030      	movs	r0, #48	; 0x30
 800a724:	18e1      	adds	r1, r4, r3
 800a726:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800a72a:	1c5a      	adds	r2, r3, #1
 800a72c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800a730:	4422      	add	r2, r4
 800a732:	3302      	adds	r3, #2
 800a734:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800a738:	e7c2      	b.n	800a6c0 <_printf_common+0x58>
 800a73a:	2301      	movs	r3, #1
 800a73c:	4622      	mov	r2, r4
 800a73e:	4649      	mov	r1, r9
 800a740:	4638      	mov	r0, r7
 800a742:	47c0      	blx	r8
 800a744:	3001      	adds	r0, #1
 800a746:	d0e6      	beq.n	800a716 <_printf_common+0xae>
 800a748:	3601      	adds	r6, #1
 800a74a:	e7d9      	b.n	800a700 <_printf_common+0x98>

0800a74c <_printf_i>:
 800a74c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a750:	7e0f      	ldrb	r7, [r1, #24]
 800a752:	4691      	mov	r9, r2
 800a754:	2f78      	cmp	r7, #120	; 0x78
 800a756:	4680      	mov	r8, r0
 800a758:	460c      	mov	r4, r1
 800a75a:	469a      	mov	sl, r3
 800a75c:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800a75e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800a762:	d807      	bhi.n	800a774 <_printf_i+0x28>
 800a764:	2f62      	cmp	r7, #98	; 0x62
 800a766:	d80a      	bhi.n	800a77e <_printf_i+0x32>
 800a768:	2f00      	cmp	r7, #0
 800a76a:	f000 80d5 	beq.w	800a918 <_printf_i+0x1cc>
 800a76e:	2f58      	cmp	r7, #88	; 0x58
 800a770:	f000 80c1 	beq.w	800a8f6 <_printf_i+0x1aa>
 800a774:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a778:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800a77c:	e03a      	b.n	800a7f4 <_printf_i+0xa8>
 800a77e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800a782:	2b15      	cmp	r3, #21
 800a784:	d8f6      	bhi.n	800a774 <_printf_i+0x28>
 800a786:	a101      	add	r1, pc, #4	; (adr r1, 800a78c <_printf_i+0x40>)
 800a788:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800a78c:	0800a7e5 	.word	0x0800a7e5
 800a790:	0800a7f9 	.word	0x0800a7f9
 800a794:	0800a775 	.word	0x0800a775
 800a798:	0800a775 	.word	0x0800a775
 800a79c:	0800a775 	.word	0x0800a775
 800a7a0:	0800a775 	.word	0x0800a775
 800a7a4:	0800a7f9 	.word	0x0800a7f9
 800a7a8:	0800a775 	.word	0x0800a775
 800a7ac:	0800a775 	.word	0x0800a775
 800a7b0:	0800a775 	.word	0x0800a775
 800a7b4:	0800a775 	.word	0x0800a775
 800a7b8:	0800a8ff 	.word	0x0800a8ff
 800a7bc:	0800a825 	.word	0x0800a825
 800a7c0:	0800a8b9 	.word	0x0800a8b9
 800a7c4:	0800a775 	.word	0x0800a775
 800a7c8:	0800a775 	.word	0x0800a775
 800a7cc:	0800a921 	.word	0x0800a921
 800a7d0:	0800a775 	.word	0x0800a775
 800a7d4:	0800a825 	.word	0x0800a825
 800a7d8:	0800a775 	.word	0x0800a775
 800a7dc:	0800a775 	.word	0x0800a775
 800a7e0:	0800a8c1 	.word	0x0800a8c1
 800a7e4:	682b      	ldr	r3, [r5, #0]
 800a7e6:	1d1a      	adds	r2, r3, #4
 800a7e8:	681b      	ldr	r3, [r3, #0]
 800a7ea:	602a      	str	r2, [r5, #0]
 800a7ec:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a7f0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a7f4:	2301      	movs	r3, #1
 800a7f6:	e0a0      	b.n	800a93a <_printf_i+0x1ee>
 800a7f8:	6820      	ldr	r0, [r4, #0]
 800a7fa:	682b      	ldr	r3, [r5, #0]
 800a7fc:	0607      	lsls	r7, r0, #24
 800a7fe:	f103 0104 	add.w	r1, r3, #4
 800a802:	6029      	str	r1, [r5, #0]
 800a804:	d501      	bpl.n	800a80a <_printf_i+0xbe>
 800a806:	681e      	ldr	r6, [r3, #0]
 800a808:	e003      	b.n	800a812 <_printf_i+0xc6>
 800a80a:	0646      	lsls	r6, r0, #25
 800a80c:	d5fb      	bpl.n	800a806 <_printf_i+0xba>
 800a80e:	f9b3 6000 	ldrsh.w	r6, [r3]
 800a812:	2e00      	cmp	r6, #0
 800a814:	da03      	bge.n	800a81e <_printf_i+0xd2>
 800a816:	232d      	movs	r3, #45	; 0x2d
 800a818:	4276      	negs	r6, r6
 800a81a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a81e:	230a      	movs	r3, #10
 800a820:	4859      	ldr	r0, [pc, #356]	; (800a988 <_printf_i+0x23c>)
 800a822:	e012      	b.n	800a84a <_printf_i+0xfe>
 800a824:	682b      	ldr	r3, [r5, #0]
 800a826:	6820      	ldr	r0, [r4, #0]
 800a828:	1d19      	adds	r1, r3, #4
 800a82a:	6029      	str	r1, [r5, #0]
 800a82c:	0605      	lsls	r5, r0, #24
 800a82e:	d501      	bpl.n	800a834 <_printf_i+0xe8>
 800a830:	681e      	ldr	r6, [r3, #0]
 800a832:	e002      	b.n	800a83a <_printf_i+0xee>
 800a834:	0641      	lsls	r1, r0, #25
 800a836:	d5fb      	bpl.n	800a830 <_printf_i+0xe4>
 800a838:	881e      	ldrh	r6, [r3, #0]
 800a83a:	2f6f      	cmp	r7, #111	; 0x6f
 800a83c:	bf0c      	ite	eq
 800a83e:	2308      	moveq	r3, #8
 800a840:	230a      	movne	r3, #10
 800a842:	4851      	ldr	r0, [pc, #324]	; (800a988 <_printf_i+0x23c>)
 800a844:	2100      	movs	r1, #0
 800a846:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800a84a:	6865      	ldr	r5, [r4, #4]
 800a84c:	2d00      	cmp	r5, #0
 800a84e:	bfa8      	it	ge
 800a850:	6821      	ldrge	r1, [r4, #0]
 800a852:	60a5      	str	r5, [r4, #8]
 800a854:	bfa4      	itt	ge
 800a856:	f021 0104 	bicge.w	r1, r1, #4
 800a85a:	6021      	strge	r1, [r4, #0]
 800a85c:	b90e      	cbnz	r6, 800a862 <_printf_i+0x116>
 800a85e:	2d00      	cmp	r5, #0
 800a860:	d04b      	beq.n	800a8fa <_printf_i+0x1ae>
 800a862:	4615      	mov	r5, r2
 800a864:	fbb6 f1f3 	udiv	r1, r6, r3
 800a868:	fb03 6711 	mls	r7, r3, r1, r6
 800a86c:	5dc7      	ldrb	r7, [r0, r7]
 800a86e:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800a872:	4637      	mov	r7, r6
 800a874:	42bb      	cmp	r3, r7
 800a876:	460e      	mov	r6, r1
 800a878:	d9f4      	bls.n	800a864 <_printf_i+0x118>
 800a87a:	2b08      	cmp	r3, #8
 800a87c:	d10b      	bne.n	800a896 <_printf_i+0x14a>
 800a87e:	6823      	ldr	r3, [r4, #0]
 800a880:	07de      	lsls	r6, r3, #31
 800a882:	d508      	bpl.n	800a896 <_printf_i+0x14a>
 800a884:	6923      	ldr	r3, [r4, #16]
 800a886:	6861      	ldr	r1, [r4, #4]
 800a888:	4299      	cmp	r1, r3
 800a88a:	bfde      	ittt	le
 800a88c:	2330      	movle	r3, #48	; 0x30
 800a88e:	f805 3c01 	strble.w	r3, [r5, #-1]
 800a892:	f105 35ff 	addle.w	r5, r5, #4294967295
 800a896:	1b52      	subs	r2, r2, r5
 800a898:	6122      	str	r2, [r4, #16]
 800a89a:	464b      	mov	r3, r9
 800a89c:	4621      	mov	r1, r4
 800a89e:	4640      	mov	r0, r8
 800a8a0:	f8cd a000 	str.w	sl, [sp]
 800a8a4:	aa03      	add	r2, sp, #12
 800a8a6:	f7ff fedf 	bl	800a668 <_printf_common>
 800a8aa:	3001      	adds	r0, #1
 800a8ac:	d14a      	bne.n	800a944 <_printf_i+0x1f8>
 800a8ae:	f04f 30ff 	mov.w	r0, #4294967295
 800a8b2:	b004      	add	sp, #16
 800a8b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a8b8:	6823      	ldr	r3, [r4, #0]
 800a8ba:	f043 0320 	orr.w	r3, r3, #32
 800a8be:	6023      	str	r3, [r4, #0]
 800a8c0:	2778      	movs	r7, #120	; 0x78
 800a8c2:	4832      	ldr	r0, [pc, #200]	; (800a98c <_printf_i+0x240>)
 800a8c4:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800a8c8:	6823      	ldr	r3, [r4, #0]
 800a8ca:	6829      	ldr	r1, [r5, #0]
 800a8cc:	061f      	lsls	r7, r3, #24
 800a8ce:	f851 6b04 	ldr.w	r6, [r1], #4
 800a8d2:	d402      	bmi.n	800a8da <_printf_i+0x18e>
 800a8d4:	065f      	lsls	r7, r3, #25
 800a8d6:	bf48      	it	mi
 800a8d8:	b2b6      	uxthmi	r6, r6
 800a8da:	07df      	lsls	r7, r3, #31
 800a8dc:	bf48      	it	mi
 800a8de:	f043 0320 	orrmi.w	r3, r3, #32
 800a8e2:	6029      	str	r1, [r5, #0]
 800a8e4:	bf48      	it	mi
 800a8e6:	6023      	strmi	r3, [r4, #0]
 800a8e8:	b91e      	cbnz	r6, 800a8f2 <_printf_i+0x1a6>
 800a8ea:	6823      	ldr	r3, [r4, #0]
 800a8ec:	f023 0320 	bic.w	r3, r3, #32
 800a8f0:	6023      	str	r3, [r4, #0]
 800a8f2:	2310      	movs	r3, #16
 800a8f4:	e7a6      	b.n	800a844 <_printf_i+0xf8>
 800a8f6:	4824      	ldr	r0, [pc, #144]	; (800a988 <_printf_i+0x23c>)
 800a8f8:	e7e4      	b.n	800a8c4 <_printf_i+0x178>
 800a8fa:	4615      	mov	r5, r2
 800a8fc:	e7bd      	b.n	800a87a <_printf_i+0x12e>
 800a8fe:	682b      	ldr	r3, [r5, #0]
 800a900:	6826      	ldr	r6, [r4, #0]
 800a902:	1d18      	adds	r0, r3, #4
 800a904:	6961      	ldr	r1, [r4, #20]
 800a906:	6028      	str	r0, [r5, #0]
 800a908:	0635      	lsls	r5, r6, #24
 800a90a:	681b      	ldr	r3, [r3, #0]
 800a90c:	d501      	bpl.n	800a912 <_printf_i+0x1c6>
 800a90e:	6019      	str	r1, [r3, #0]
 800a910:	e002      	b.n	800a918 <_printf_i+0x1cc>
 800a912:	0670      	lsls	r0, r6, #25
 800a914:	d5fb      	bpl.n	800a90e <_printf_i+0x1c2>
 800a916:	8019      	strh	r1, [r3, #0]
 800a918:	2300      	movs	r3, #0
 800a91a:	4615      	mov	r5, r2
 800a91c:	6123      	str	r3, [r4, #16]
 800a91e:	e7bc      	b.n	800a89a <_printf_i+0x14e>
 800a920:	682b      	ldr	r3, [r5, #0]
 800a922:	2100      	movs	r1, #0
 800a924:	1d1a      	adds	r2, r3, #4
 800a926:	602a      	str	r2, [r5, #0]
 800a928:	681d      	ldr	r5, [r3, #0]
 800a92a:	6862      	ldr	r2, [r4, #4]
 800a92c:	4628      	mov	r0, r5
 800a92e:	f000 f859 	bl	800a9e4 <memchr>
 800a932:	b108      	cbz	r0, 800a938 <_printf_i+0x1ec>
 800a934:	1b40      	subs	r0, r0, r5
 800a936:	6060      	str	r0, [r4, #4]
 800a938:	6863      	ldr	r3, [r4, #4]
 800a93a:	6123      	str	r3, [r4, #16]
 800a93c:	2300      	movs	r3, #0
 800a93e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a942:	e7aa      	b.n	800a89a <_printf_i+0x14e>
 800a944:	462a      	mov	r2, r5
 800a946:	4649      	mov	r1, r9
 800a948:	4640      	mov	r0, r8
 800a94a:	6923      	ldr	r3, [r4, #16]
 800a94c:	47d0      	blx	sl
 800a94e:	3001      	adds	r0, #1
 800a950:	d0ad      	beq.n	800a8ae <_printf_i+0x162>
 800a952:	6823      	ldr	r3, [r4, #0]
 800a954:	079b      	lsls	r3, r3, #30
 800a956:	d413      	bmi.n	800a980 <_printf_i+0x234>
 800a958:	68e0      	ldr	r0, [r4, #12]
 800a95a:	9b03      	ldr	r3, [sp, #12]
 800a95c:	4298      	cmp	r0, r3
 800a95e:	bfb8      	it	lt
 800a960:	4618      	movlt	r0, r3
 800a962:	e7a6      	b.n	800a8b2 <_printf_i+0x166>
 800a964:	2301      	movs	r3, #1
 800a966:	4632      	mov	r2, r6
 800a968:	4649      	mov	r1, r9
 800a96a:	4640      	mov	r0, r8
 800a96c:	47d0      	blx	sl
 800a96e:	3001      	adds	r0, #1
 800a970:	d09d      	beq.n	800a8ae <_printf_i+0x162>
 800a972:	3501      	adds	r5, #1
 800a974:	68e3      	ldr	r3, [r4, #12]
 800a976:	9903      	ldr	r1, [sp, #12]
 800a978:	1a5b      	subs	r3, r3, r1
 800a97a:	42ab      	cmp	r3, r5
 800a97c:	dcf2      	bgt.n	800a964 <_printf_i+0x218>
 800a97e:	e7eb      	b.n	800a958 <_printf_i+0x20c>
 800a980:	2500      	movs	r5, #0
 800a982:	f104 0619 	add.w	r6, r4, #25
 800a986:	e7f5      	b.n	800a974 <_printf_i+0x228>
 800a988:	080115a7 	.word	0x080115a7
 800a98c:	080115b8 	.word	0x080115b8

0800a990 <memmove>:
 800a990:	4288      	cmp	r0, r1
 800a992:	b510      	push	{r4, lr}
 800a994:	eb01 0402 	add.w	r4, r1, r2
 800a998:	d902      	bls.n	800a9a0 <memmove+0x10>
 800a99a:	4284      	cmp	r4, r0
 800a99c:	4623      	mov	r3, r4
 800a99e:	d807      	bhi.n	800a9b0 <memmove+0x20>
 800a9a0:	1e43      	subs	r3, r0, #1
 800a9a2:	42a1      	cmp	r1, r4
 800a9a4:	d008      	beq.n	800a9b8 <memmove+0x28>
 800a9a6:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a9aa:	f803 2f01 	strb.w	r2, [r3, #1]!
 800a9ae:	e7f8      	b.n	800a9a2 <memmove+0x12>
 800a9b0:	4601      	mov	r1, r0
 800a9b2:	4402      	add	r2, r0
 800a9b4:	428a      	cmp	r2, r1
 800a9b6:	d100      	bne.n	800a9ba <memmove+0x2a>
 800a9b8:	bd10      	pop	{r4, pc}
 800a9ba:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a9be:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800a9c2:	e7f7      	b.n	800a9b4 <memmove+0x24>

0800a9c4 <_sbrk_r>:
 800a9c4:	b538      	push	{r3, r4, r5, lr}
 800a9c6:	2300      	movs	r3, #0
 800a9c8:	4d05      	ldr	r5, [pc, #20]	; (800a9e0 <_sbrk_r+0x1c>)
 800a9ca:	4604      	mov	r4, r0
 800a9cc:	4608      	mov	r0, r1
 800a9ce:	602b      	str	r3, [r5, #0]
 800a9d0:	f7fb fdca 	bl	8006568 <_sbrk>
 800a9d4:	1c43      	adds	r3, r0, #1
 800a9d6:	d102      	bne.n	800a9de <_sbrk_r+0x1a>
 800a9d8:	682b      	ldr	r3, [r5, #0]
 800a9da:	b103      	cbz	r3, 800a9de <_sbrk_r+0x1a>
 800a9dc:	6023      	str	r3, [r4, #0]
 800a9de:	bd38      	pop	{r3, r4, r5, pc}
 800a9e0:	20000e48 	.word	0x20000e48

0800a9e4 <memchr>:
 800a9e4:	4603      	mov	r3, r0
 800a9e6:	b510      	push	{r4, lr}
 800a9e8:	b2c9      	uxtb	r1, r1
 800a9ea:	4402      	add	r2, r0
 800a9ec:	4293      	cmp	r3, r2
 800a9ee:	4618      	mov	r0, r3
 800a9f0:	d101      	bne.n	800a9f6 <memchr+0x12>
 800a9f2:	2000      	movs	r0, #0
 800a9f4:	e003      	b.n	800a9fe <memchr+0x1a>
 800a9f6:	7804      	ldrb	r4, [r0, #0]
 800a9f8:	3301      	adds	r3, #1
 800a9fa:	428c      	cmp	r4, r1
 800a9fc:	d1f6      	bne.n	800a9ec <memchr+0x8>
 800a9fe:	bd10      	pop	{r4, pc}

0800aa00 <memcpy>:
 800aa00:	440a      	add	r2, r1
 800aa02:	4291      	cmp	r1, r2
 800aa04:	f100 33ff 	add.w	r3, r0, #4294967295
 800aa08:	d100      	bne.n	800aa0c <memcpy+0xc>
 800aa0a:	4770      	bx	lr
 800aa0c:	b510      	push	{r4, lr}
 800aa0e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800aa12:	4291      	cmp	r1, r2
 800aa14:	f803 4f01 	strb.w	r4, [r3, #1]!
 800aa18:	d1f9      	bne.n	800aa0e <memcpy+0xe>
 800aa1a:	bd10      	pop	{r4, pc}

0800aa1c <_realloc_r>:
 800aa1c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800aa20:	4680      	mov	r8, r0
 800aa22:	4614      	mov	r4, r2
 800aa24:	460e      	mov	r6, r1
 800aa26:	b921      	cbnz	r1, 800aa32 <_realloc_r+0x16>
 800aa28:	4611      	mov	r1, r2
 800aa2a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800aa2e:	f7ff bc37 	b.w	800a2a0 <_malloc_r>
 800aa32:	b92a      	cbnz	r2, 800aa40 <_realloc_r+0x24>
 800aa34:	f7ff fbcc 	bl	800a1d0 <_free_r>
 800aa38:	4625      	mov	r5, r4
 800aa3a:	4628      	mov	r0, r5
 800aa3c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800aa40:	f000 f81b 	bl	800aa7a <_malloc_usable_size_r>
 800aa44:	4284      	cmp	r4, r0
 800aa46:	4607      	mov	r7, r0
 800aa48:	d802      	bhi.n	800aa50 <_realloc_r+0x34>
 800aa4a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800aa4e:	d812      	bhi.n	800aa76 <_realloc_r+0x5a>
 800aa50:	4621      	mov	r1, r4
 800aa52:	4640      	mov	r0, r8
 800aa54:	f7ff fc24 	bl	800a2a0 <_malloc_r>
 800aa58:	4605      	mov	r5, r0
 800aa5a:	2800      	cmp	r0, #0
 800aa5c:	d0ed      	beq.n	800aa3a <_realloc_r+0x1e>
 800aa5e:	42bc      	cmp	r4, r7
 800aa60:	4622      	mov	r2, r4
 800aa62:	4631      	mov	r1, r6
 800aa64:	bf28      	it	cs
 800aa66:	463a      	movcs	r2, r7
 800aa68:	f7ff ffca 	bl	800aa00 <memcpy>
 800aa6c:	4631      	mov	r1, r6
 800aa6e:	4640      	mov	r0, r8
 800aa70:	f7ff fbae 	bl	800a1d0 <_free_r>
 800aa74:	e7e1      	b.n	800aa3a <_realloc_r+0x1e>
 800aa76:	4635      	mov	r5, r6
 800aa78:	e7df      	b.n	800aa3a <_realloc_r+0x1e>

0800aa7a <_malloc_usable_size_r>:
 800aa7a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800aa7e:	1f18      	subs	r0, r3, #4
 800aa80:	2b00      	cmp	r3, #0
 800aa82:	bfbc      	itt	lt
 800aa84:	580b      	ldrlt	r3, [r1, r0]
 800aa86:	18c0      	addlt	r0, r0, r3
 800aa88:	4770      	bx	lr
	...

0800aa8c <_init>:
 800aa8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aa8e:	bf00      	nop
 800aa90:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800aa92:	bc08      	pop	{r3}
 800aa94:	469e      	mov	lr, r3
 800aa96:	4770      	bx	lr

0800aa98 <_fini>:
 800aa98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aa9a:	bf00      	nop
 800aa9c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800aa9e:	bc08      	pop	{r3}
 800aaa0:	469e      	mov	lr, r3
 800aaa2:	4770      	bx	lr
